
uP_grp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002764  0800276c  0000376c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002764  08002764  0000376c  2**0
                  CONTENTS
  4 .ARM          00000000  08002764  08002764  0000376c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002764  0800276c  0000376c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002764  08002764  00003764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000376c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000000  0800276c  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800276c  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000203f  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000535  00000000  00000000  000057db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00005d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017b  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecd0  00000000  00000000  0000608b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ef2  00000000  00000000  00014d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054c13  00000000  00000000  00016c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006b860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d8  00000000  00000000  0006b8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0006c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800274c 	.word	0x0800274c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800274c 	.word	0x0800274c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	@ (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	@ (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <SegUpdate>:
#define LEFT_F_SPEED	11000
#define RIGHT_F_SPEED	10000
uint8_t Seg1Value, Seg2Value;


void SegUpdate() {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	switch (Seg1Value) {
 8000bba:	4b65      	ldr	r3, [pc, #404]	@ (8000d50 <SegUpdate+0x19c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d83e      	bhi.n	8000c40 <SegUpdate+0x8c>
 8000bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc8 <SegUpdate+0x14>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bf1 	.word	0x08000bf1
 8000bcc:	08000bf9 	.word	0x08000bf9
 8000bd0:	08000c01 	.word	0x08000c01
 8000bd4:	08000c09 	.word	0x08000c09
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c19 	.word	0x08000c19
 8000be0:	08000c21 	.word	0x08000c21
 8000be4:	08000c29 	.word	0x08000c29
 8000be8:	08000c31 	.word	0x08000c31
 8000bec:	08000c39 	.word	0x08000c39
	case 0:
		SegData.Seg[0] = 0b01111110;
 8000bf0:	4b58      	ldr	r3, [pc, #352]	@ (8000d54 <SegUpdate+0x1a0>)
 8000bf2:	227e      	movs	r2, #126	@ 0x7e
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e027      	b.n	8000c48 <SegUpdate+0x94>
	case 1:
		SegData.Seg[0] = 0b01100000;
 8000bf8:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <SegUpdate+0x1a0>)
 8000bfa:	2260      	movs	r2, #96	@ 0x60
 8000bfc:	701a      	strb	r2, [r3, #0]
		break;
 8000bfe:	e023      	b.n	8000c48 <SegUpdate+0x94>
	case 2:
		SegData.Seg[0] = 0b10110110;
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c02:	22b6      	movs	r2, #182	@ 0xb6
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e01f      	b.n	8000c48 <SegUpdate+0x94>
	case 3:
		SegData.Seg[0] = 0b11110100;
 8000c08:	4b52      	ldr	r3, [pc, #328]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c0a:	22f4      	movs	r2, #244	@ 0xf4
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e01b      	b.n	8000c48 <SegUpdate+0x94>
	case 4:
		SegData.Seg[0] = 0b11101000;
 8000c10:	4b50      	ldr	r3, [pc, #320]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c12:	22e8      	movs	r2, #232	@ 0xe8
 8000c14:	701a      	strb	r2, [r3, #0]
		break;
 8000c16:	e017      	b.n	8000c48 <SegUpdate+0x94>
	case 5:
		SegData.Seg[0] = 0b11011100;
 8000c18:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c1a:	22dc      	movs	r2, #220	@ 0xdc
 8000c1c:	701a      	strb	r2, [r3, #0]
		break;
 8000c1e:	e013      	b.n	8000c48 <SegUpdate+0x94>
	case 6:
		SegData.Seg[0] = 0b11011110;
 8000c20:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c22:	22de      	movs	r2, #222	@ 0xde
 8000c24:	701a      	strb	r2, [r3, #0]
		break;
 8000c26:	e00f      	b.n	8000c48 <SegUpdate+0x94>
	case 7:
		SegData.Seg[0] = 0b01110000;
 8000c28:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c2a:	2270      	movs	r2, #112	@ 0x70
 8000c2c:	701a      	strb	r2, [r3, #0]
		break;
 8000c2e:	e00b      	b.n	8000c48 <SegUpdate+0x94>
	case 8:
		SegData.Seg[0] = 0b11111110;
 8000c30:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c32:	22fe      	movs	r2, #254	@ 0xfe
 8000c34:	701a      	strb	r2, [r3, #0]
		break;
 8000c36:	e007      	b.n	8000c48 <SegUpdate+0x94>
	case 9:
		SegData.Seg[0] = 0b11111100;
 8000c38:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c3a:	22fc      	movs	r2, #252	@ 0xfc
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e003      	b.n	8000c48 <SegUpdate+0x94>
	default:
		SegData.Seg[0] = 0b00000000;
 8000c40:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
		break;
 8000c46:	bf00      	nop
	}

	switch (Seg2Value) {
 8000c48:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <SegUpdate+0x1a4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d83f      	bhi.n	8000cd0 <SegUpdate+0x11c>
 8000c50:	a201      	add	r2, pc, #4	@ (adr r2, 8000c58 <SegUpdate+0xa4>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000c89 	.word	0x08000c89
 8000c60:	08000c91 	.word	0x08000c91
 8000c64:	08000c99 	.word	0x08000c99
 8000c68:	08000ca1 	.word	0x08000ca1
 8000c6c:	08000ca9 	.word	0x08000ca9
 8000c70:	08000cb1 	.word	0x08000cb1
 8000c74:	08000cb9 	.word	0x08000cb9
 8000c78:	08000cc1 	.word	0x08000cc1
 8000c7c:	08000cc9 	.word	0x08000cc9
	case 0:
		SegData.Seg[1] = 0b11101110;
 8000c80:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c82:	22ee      	movs	r2, #238	@ 0xee
 8000c84:	705a      	strb	r2, [r3, #1]
		break;
 8000c86:	e027      	b.n	8000cd8 <SegUpdate+0x124>
	case 1:
		SegData.Seg[1] = 0b00101000;
 8000c88:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c8a:	2228      	movs	r2, #40	@ 0x28
 8000c8c:	705a      	strb	r2, [r3, #1]
		break;
 8000c8e:	e023      	b.n	8000cd8 <SegUpdate+0x124>
	case 2:
		SegData.Seg[1] = 0b11011100;
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c92:	22dc      	movs	r2, #220	@ 0xdc
 8000c94:	705a      	strb	r2, [r3, #1]
		break;
 8000c96:	e01f      	b.n	8000cd8 <SegUpdate+0x124>
	case 3:
		SegData.Seg[1] = 0b01111100;
 8000c98:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <SegUpdate+0x1a0>)
 8000c9a:	227c      	movs	r2, #124	@ 0x7c
 8000c9c:	705a      	strb	r2, [r3, #1]
		break;
 8000c9e:	e01b      	b.n	8000cd8 <SegUpdate+0x124>
	case 4:
		SegData.Seg[1] = 0b00111010;
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d54 <SegUpdate+0x1a0>)
 8000ca2:	223a      	movs	r2, #58	@ 0x3a
 8000ca4:	705a      	strb	r2, [r3, #1]
		break;
 8000ca6:	e017      	b.n	8000cd8 <SegUpdate+0x124>
	case 5:
		SegData.Seg[1] = 0b01110110;
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <SegUpdate+0x1a0>)
 8000caa:	2276      	movs	r2, #118	@ 0x76
 8000cac:	705a      	strb	r2, [r3, #1]
		break;
 8000cae:	e013      	b.n	8000cd8 <SegUpdate+0x124>
	case 6:
		SegData.Seg[1] = 0b11110110;
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <SegUpdate+0x1a0>)
 8000cb2:	22f6      	movs	r2, #246	@ 0xf6
 8000cb4:	705a      	strb	r2, [r3, #1]
		break;
 8000cb6:	e00f      	b.n	8000cd8 <SegUpdate+0x124>
	case 7:
		SegData.Seg[1] = 0b00101100;
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <SegUpdate+0x1a0>)
 8000cba:	222c      	movs	r2, #44	@ 0x2c
 8000cbc:	705a      	strb	r2, [r3, #1]
		break;
 8000cbe:	e00b      	b.n	8000cd8 <SegUpdate+0x124>
	case 8:
		SegData.Seg[1] = 0b11111110;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <SegUpdate+0x1a0>)
 8000cc2:	22fe      	movs	r2, #254	@ 0xfe
 8000cc4:	705a      	strb	r2, [r3, #1]
		break;
 8000cc6:	e007      	b.n	8000cd8 <SegUpdate+0x124>
	case 9:
		SegData.Seg[1] = 0b01111110;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <SegUpdate+0x1a0>)
 8000cca:	227e      	movs	r2, #126	@ 0x7e
 8000ccc:	705a      	strb	r2, [r3, #1]
		break;
 8000cce:	e003      	b.n	8000cd8 <SegUpdate+0x124>
	default:
		SegData.Seg[1] = 0b00000000;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <SegUpdate+0x1a0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	705a      	strb	r2, [r3, #1]
		break;
 8000cd6:	bf00      	nop
	}

	for (int i = 15; i >= 0; i--) {
 8000cd8:	230f      	movs	r3, #15
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	e024      	b.n	8000d28 <SegUpdate+0x174>
		uint16_t bit = (SegData.bit >> i) & 0x01;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <SegUpdate+0x1a0>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	fa42 f303 	asr.w	r3, r2, r3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	807b      	strh	r3, [r7, #2]
		if (bit) {
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <SegUpdate+0x150>
			SRdata = 1;
 8000cf8:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <SegUpdate+0x1a8>)
 8000cfa:	7813      	ldrb	r3, [r2, #0]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	7013      	strb	r3, [r2, #0]
 8000d02:	e004      	b.n	8000d0e <SegUpdate+0x15a>
		} else {
			SRdata = 0;
 8000d04:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <SegUpdate+0x1a8>)
 8000d06:	7813      	ldrb	r3, [r2, #0]
 8000d08:	f36f 03c3 	bfc	r3, #3, #1
 8000d0c:	7013      	strb	r3, [r2, #0]
		}
		SRclock = 1;
 8000d0e:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <SegUpdate+0x1a8>)
 8000d10:	7813      	ldrb	r3, [r2, #0]
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	7013      	strb	r3, [r2, #0]
//			Delay_ms(2);
		SRclock = 0;
 8000d18:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <SegUpdate+0x1a8>)
 8000d1a:	7813      	ldrb	r3, [r2, #0]
 8000d1c:	f36f 1345 	bfc	r3, #5, #1
 8000d20:	7013      	strb	r3, [r2, #0]
	for (int i = 15; i >= 0; i--) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dad7      	bge.n	8000cde <SegUpdate+0x12a>
	}
	SRlatch = 1;
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d5c <SegUpdate+0x1a8>)
 8000d30:	7813      	ldrb	r3, [r2, #0]
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	7013      	strb	r3, [r2, #0]
//		Delay_ms(2);
	SRlatch = 0;
 8000d38:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <SegUpdate+0x1a8>)
 8000d3a:	7813      	ldrb	r3, [r2, #0]
 8000d3c:	f36f 1304 	bfc	r3, #4, #1
 8000d40:	7013      	strb	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000001e 	.word	0x2000001e
 8000d54:	2000001c 	.word	0x2000001c
 8000d58:	2000001f 	.word	0x2000001f
 8000d5c:	40020414 	.word	0x40020414

08000d60 <Motor>:

void Motor(uint8_t number, int pwm){
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	switch(number){
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d021      	beq.n	8000db6 <Motor+0x56>
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d13f      	bne.n	8000df6 <Motor+0x96>
	case RIGHT_MOTOR:
		if (pwm >= 0) {
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <Motor+0x32>
			M_IN1 = 1;
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <Motor+0xa4>)
 8000d7e:	7853      	ldrb	r3, [r2, #1]
 8000d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d84:	7053      	strb	r3, [r2, #1]
			M_IN2 = 0;
 8000d86:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <Motor+0xa8>)
 8000d88:	7853      	ldrb	r3, [r2, #1]
 8000d8a:	f36f 0300 	bfc	r3, #0, #1
 8000d8e:	7053      	strb	r3, [r2, #1]
 8000d90:	e009      	b.n	8000da6 <Motor+0x46>
		} else {
			M_IN1 = 0;
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <Motor+0xa4>)
 8000d94:	7853      	ldrb	r3, [r2, #1]
 8000d96:	f36f 13c7 	bfc	r3, #7, #1
 8000d9a:	7053      	strb	r3, [r2, #1]
			M_IN2 = 1;
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e08 <Motor+0xa8>)
 8000d9e:	7853      	ldrb	r3, [r2, #1]
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	7053      	strb	r3, [r2, #1]
		}
		M_PWM12 = abs(pwm);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000dac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <Motor+0xac>)
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000db4:	e01f      	b.n	8000df6 <Motor+0x96>

	case LEFT_MOTOR:
		if (pwm >= 0) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <Motor+0x72>
			M_IN3 = 0;
 8000dbc:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <Motor+0xa8>)
 8000dbe:	7853      	ldrb	r3, [r2, #1]
 8000dc0:	f36f 0341 	bfc	r3, #1, #1
 8000dc4:	7053      	strb	r3, [r2, #1]
			M_IN4 = 1;
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <Motor+0xa4>)
 8000dc8:	7853      	ldrb	r3, [r2, #1]
 8000dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dce:	7053      	strb	r3, [r2, #1]
 8000dd0:	e009      	b.n	8000de6 <Motor+0x86>
		} else {
			M_IN3 = 1;
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <Motor+0xa8>)
 8000dd4:	7853      	ldrb	r3, [r2, #1]
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	7053      	strb	r3, [r2, #1]
			M_IN4 = 0;
 8000ddc:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <Motor+0xa4>)
 8000dde:	7853      	ldrb	r3, [r2, #1]
 8000de0:	f36f 1386 	bfc	r3, #6, #1
 8000de4:	7053      	strb	r3, [r2, #1]
		}
		M_PWM34 = abs(pwm);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000dec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <Motor+0xac>)
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000df4:	bf00      	nop
	}
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40020414 	.word	0x40020414
 8000e08:	40020014 	.word	0x40020014
 8000e0c:	40010000 	.word	0x40010000

08000e10 <SysClockConfig>:
#define PLL_N 168
#define PLL_P 0 // PLLP = 2


void SysClockConfig(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	/* 1) Enable the HSE and wait for confirmation*/
	RCC->CR |= RCC_CR_HSEON;
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a27      	ldr	r2, [pc, #156]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000e20:	bf00      	nop
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <SysClockConfig+0x12>

	/* 2) Set POWER ENABLE CLOCK(POWEREN)  and VOLTAGE REGULATOR(VOS)*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <SysClockConfig+0xac>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ebc <SysClockConfig+0xac>)
 8000e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e44:	6013      	str	r3, [r2, #0]

	/*3) Configure the FLASH PREFETCH and the LATENCY Related Settings*/
	FLASH->ACR |= FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_2WS;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <SysClockConfig+0xb0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec0 <SysClockConfig+0xb0>)
 8000e4c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6013      	str	r3, [r2, #0]

	/*4) Configure the PRESCALARS HCLK, PCLK1, PCLK2*/
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e68:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC->CFGR |=RCC_CFGR_PPRE2_DIV1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	6093      	str	r3, [r2, #8]

	/*5) Configure the MAIN PLL*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <SysClockConfig+0xb4>)
 8000e76:	605a      	str	r2, [r3, #4]

	/*6) Enable the PLL and wait for it to become ready*/
	RCC->CR |= RCC_CR_PLLON;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e82:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000e84:	bf00      	nop
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <SysClockConfig+0x76>

	/*7) Select the Clock Source and wait for it to be set*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4a08      	ldr	r2, [pc, #32]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6093      	str	r3, [r2, #8]
//	while(!(RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000e9e:	bf00      	nop
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <SysClockConfig+0xa8>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d1f9      	bne.n	8000ea0 <SysClockConfig+0x90>

}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	00402a19 	.word	0x00402a19

08000ec8 <I2C1_Config>:
void I2C1_Write(uint8_t data);
void I2C1_Address(uint8_t Address);
void I2C1_Stop(void);
void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size);

void I2C1_Config(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

	/* 1. Enable the I2C CLOCK and GPIO CLOCK */
	RCC->APB1ENR |= (1 << 21); // ENABLE I2C1 Clock
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <I2C1_Config+0xa0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a25      	ldr	r2, [pc, #148]	@ (8000f68 <I2C1_Config+0xa0>)
 8000ed2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= (1 << 1); // ENABLE GPIOB Clock (SCL: PB6 SDA: PB7)
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <I2C1_Config+0xa0>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a22      	ldr	r2, [pc, #136]	@ (8000f68 <I2C1_Config+0xa0>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30

	/* 2. Configure the I2C PINs for ALternate Functions */
	GPIOB->MODER |= (2 << 12) | (2 << 14);// Alternate Function of PB6 & PB7 in MODER Register
 8000ee4:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <I2C1_Config+0xa4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <I2C1_Config+0xa4>)
 8000eea:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000eee:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1 << 6) | (1 << 7);	//Open Drain Output of PB6 & PB7
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <I2C1_Config+0xa4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <I2C1_Config+0xa4>)
 8000ef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000efa:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3 << 12) | (3 << 14);//High SPEED for the Pins PB6 & PB7
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <I2C1_Config+0xa4>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a1a      	ldr	r2, [pc, #104]	@ (8000f6c <I2C1_Config+0xa4>)
 8000f02:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000f06:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1 << 12) | (1 << 14);//Pull-up for both the Pins PB6 & PB7
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <I2C1_Config+0xa4>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <I2C1_Config+0xa4>)
 8000f0e:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000f12:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= (4 << 24) | (4 << 28);	//Configure the Alternate Function in AFR Register
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <I2C1_Config+0xa4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <I2C1_Config+0xa4>)
 8000f1a:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000f1e:	6213      	str	r3, [r2, #32]

	/* 3. Reset the I2C */
	I2C1->CR1 |= (1 << 15);
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f36:	6013      	str	r3, [r2, #0]

	/* 4. Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings */
	I2C1->CR2 |= (42 << 0); // PCLK1 FREQUENCY in MHz
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f3e:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8000f42:	6053      	str	r3, [r2, #4]

	/* 5. Configure the clock control registers */
	I2C1->CCR = 210 << 0;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f46:	22d2      	movs	r2, #210	@ 0xd2
 8000f48:	61da      	str	r2, [r3, #28]

	/* 6. Configure the rise time register */
	I2C1->TRISE = 43;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f4c:	222b      	movs	r2, #43	@ 0x2b
 8000f4e:	621a      	str	r2, [r3, #32]

	/* 7. Program the I2C_CR1 register to enable the peripheral */
	I2C1->CR1 |= (1 << 0); // Enable I2C
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <I2C1_Config+0xa8>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40005400 	.word	0x40005400

08000f74 <I2C1_Start>:

void I2C1_Start(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	/* 1. Enable the ACK */
	I2C1->CR1 |= (1 << 10);  // Enable the ACK
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <I2C1_Start+0x38>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <I2C1_Start+0x38>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]

	/* 2. Send the START condition */
	I2C1->CR1 |= (1 << 8);  // Generate START
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <I2C1_Start+0x38>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <I2C1_Start+0x38>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]

	/* 3. Wait for the SB ( Bit 0 in SR1) to set means the start condition is generated */
	while (!(I2C1->SR1 & (1 << 0)))
 8000f90:	bf00      	nop
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <I2C1_Start+0x38>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <I2C1_Start+0x1e>
		;
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40005400 	.word	0x40005400

08000fb0 <I2C1_Write>:

void I2C1_Write(uint8_t data) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty */
	while (!(I2C1->SR1 & (1 << 7)))
 8000fba:	bf00      	nop
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <I2C1_Write+0x3c>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f9      	beq.n	8000fbc <I2C1_Write+0xc>
		;
	/* 2. Send the DATA to the DR Register */
	I2C1->DR = data;
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <I2C1_Write+0x3c>)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	6113      	str	r3, [r2, #16]
	/* 3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission */
	while (!(I2C1->SR1 & (1 << 2)))
 8000fce:	bf00      	nop
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <I2C1_Write+0x3c>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f9      	beq.n	8000fd0 <I2C1_Write+0x20>
		;
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40005400 	.word	0x40005400

08000ff0 <I2C1_Address>:

void I2C1_Address(uint8_t Address) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	/* 1. Send the Slave Address to the DR Register */
	I2C1->DR = Address;
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800102c <I2C1_Address+0x3c>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	6113      	str	r3, [r2, #16]
	/* 2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission */
	while (!(I2C1->SR1 & (1 << 1)));
 8001000:	bf00      	nop
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <I2C1_Address+0x3c>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <I2C1_Address+0x12>
	/* 3. clear the ADDR by reading the SR1 and SR2 */
	uint8_t temp = I2C1->SR1 | I2C1->SR2;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <I2C1_Address+0x3c>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <I2C1_Address+0x3c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	73fb      	strb	r3, [r7, #15]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40005400 	.word	0x40005400

08001030 <I2C1_Stop>:

void I2C1_Stop(void) {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9); // Stop I2C
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <I2C1_Stop+0x1c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <I2C1_Stop+0x1c>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400

08001050 <I2C1_Read>:

void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	 f) To generate the nonacknowledge pulse after the last received data byte, the ACK bit must be cleared just after reading the
	 second last data byte (after second last RxNE event)
	 g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
	 after reading the second last data byte (after the second last RxNE event)
	 */
	int remaining = size;
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	60fb      	str	r3, [r7, #12]

	/**** STEP 1 ****/
	if (size == 1) {
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d12f      	bne.n	80010ca <I2C1_Read+0x7a>
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 800106a:	4a4b      	ldr	r2, [pc, #300]	@ (8001198 <I2C1_Read+0x148>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 8001070:	bf00      	nop
 8001072:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <I2C1_Read+0x148>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <I2C1_Read+0x22>
			;  // wait for ADDR bit to set

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 800107e:	4b46      	ldr	r3, [pc, #280]	@ (8001198 <I2C1_Read+0x148>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a45      	ldr	r2, [pc, #276]	@ (8001198 <I2C1_Read+0x148>)
 8001084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001088:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 800108a:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <I2C1_Read+0x148>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <I2C1_Read+0x148>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 800109a:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <I2C1_Read+0x148>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <I2C1_Read+0x148>)
 80010a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a4:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1 << 6)))
 80010a6:	bf00      	nop
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <I2C1_Read+0x148>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f9      	beq.n	80010a8 <I2C1_Read+0x58>
			;  // wait for RxNE to set

		/**** STEP 1-d ****/
		buffer[size - remaining] = I2C1->DR; // Read the data from the DATA REGISTER
 80010b4:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <I2C1_Read+0x148>)
 80010b6:	6919      	ldr	r1, [r3, #16]
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	b2ca      	uxtb	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
		while (!(I2C1->SR1 & (1 << 6)))
			;  // wait for RxNE to set
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 80010c8:	e060      	b.n	800118c <I2C1_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 80010ca:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <I2C1_Read+0x148>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 80010d0:	bf00      	nop
 80010d2:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <I2C1_Read+0x148>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f9      	beq.n	80010d2 <I2C1_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit
 80010de:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <I2C1_Read+0x148>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <I2C1_Read+0x148>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2) {
 80010ee:	e019      	b.n	8001124 <I2C1_Read+0xd4>
			while (!(I2C1->SR1 & (1 << 6)))
 80010f0:	bf00      	nop
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <I2C1_Read+0x148>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f9      	beq.n	80010f2 <I2C1_Read+0xa2>
			buffer[size - remaining] = I2C1->DR; // copy the data into the buffer
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <I2C1_Read+0x148>)
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1 << 10; // Set the ACK bit to Acknowledge the data received
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <I2C1_Read+0x148>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a20      	ldr	r2, [pc, #128]	@ (8001198 <I2C1_Read+0x148>)
 8001118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111c:	6013      	str	r3, [r2, #0]
			remaining--;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
		while (remaining > 2) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b02      	cmp	r3, #2
 8001128:	dce2      	bgt.n	80010f0 <I2C1_Read+0xa0>
		while (!(I2C1->SR1 & (1 << 6)))
 800112a:	bf00      	nop
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <I2C1_Read+0x148>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <I2C1_Read+0xdc>
		buffer[size - remaining] = I2C1->DR;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <I2C1_Read+0x148>)
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	79ba      	ldrb	r2, [r7, #6]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	461a      	mov	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <I2C1_Read+0x148>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <I2C1_Read+0x148>)
 8001152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001156:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <I2C1_Read+0x148>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <I2C1_Read+0x148>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001162:	6013      	str	r3, [r2, #0]
		remaining--;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3b01      	subs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1 << 6)))
 800116a:	bf00      	nop
 800116c:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <I2C1_Read+0x148>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f9      	beq.n	800116c <I2C1_Read+0x11c>
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <I2C1_Read+0x148>)
 800117a:	6919      	ldr	r1, [r3, #16]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40005400 	.word	0x40005400

0800119c <TIM9Config>:
void TIM9Config(void);
void Delay_us (uint16_t us);
void Delay_ms (uint16_t ms);

void TIM9Config(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	/* 1) Enable Timer Clock*/
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN; // Enable timer 9 clock
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <TIM9Config+0x44>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <TIM9Config+0x44>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011aa:	6453      	str	r3, [r2, #68]	@ 0x44

	/* 2) Set the prescalar and the ARR*/
	TIM9->PSC = 84-1; // 84MHz/84 = 1MHz ~ 1us delay
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <TIM9Config+0x48>)
 80011ae:	2253      	movs	r2, #83	@ 0x53
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM9->ARR = 0xFFFF;// Max ARR value
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <TIM9Config+0x48>)
 80011b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* 3) Enable the Timer, and wait for the update Flag to set*/
	TIM9->CR1 |= (1<<0); //Enable the Counter
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <TIM9Config+0x48>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <TIM9Config+0x48>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6013      	str	r3, [r2, #0]
	while(!(TIM9->SR & (1<<0))); //Update interrupt flag
 80011c6:	bf00      	nop
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <TIM9Config+0x48>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <TIM9Config+0x2c>
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40014000 	.word	0x40014000

080011e8 <Delay_us>:

void Delay_us (uint16_t us)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	/* 1) RESET the Counter */
	TIM9->CNT = 0;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <Delay_us+0x2c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
	/* 2) Wait for the Counter to reach the entered value. each count would be 1us */
	while(TIM9->CNT < us);
 80011f8:	bf00      	nop
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <Delay_us+0x2c>)
 80011fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3fa      	bcc.n	80011fa <Delay_us+0x12>

}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40014000 	.word	0x40014000

08001218 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ms; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
 8001226:	e006      	b.n	8001236 <Delay_ms+0x1e>
	{
		Delay_us(1000); //Delay of 1ms
 8001228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122c:	f7ff ffdc 	bl	80011e8 <Delay_us>
	for (uint16_t i = 0; i < ms; i++)
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	3301      	adds	r3, #1
 8001234:	81fb      	strh	r3, [r7, #14]
 8001236:	89fa      	ldrh	r2, [r7, #14]
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3f4      	bcc.n	8001228 <Delay_ms+0x10>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <write8>:
void getRGB(int *R, int *G, int *B);


/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800125a:	b2db      	uxtb	r3, r3
 800125c:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 8001264:	f7ff fe86 	bl	8000f74 <I2C1_Start>
	I2C1_Address(TCS34725_ADDRESS);
 8001268:	2052      	movs	r0, #82	@ 0x52
 800126a:	f7ff fec1 	bl	8000ff0 <I2C1_Address>
	I2C1_Write(txBuffer[0]);
 800126e:	7b3b      	ldrb	r3, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe9d 	bl	8000fb0 <I2C1_Write>
	I2C1_Write(txBuffer[1]);
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe99 	bl	8000fb0 <I2C1_Write>
	I2C1_Stop();
 800127e:	f7ff fed7 	bl	8001030 <I2C1_Stop>
//    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800129a:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[1];

    I2C1_Start();                                // Generate start condition
 800129c:	f7ff fe6a 	bl	8000f74 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 80012a0:	2052      	movs	r0, #82	@ 0x52
 80012a2:	f7ff fea5 	bl	8000ff0 <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe81 	bl	8000fb0 <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 80012ae:	f7ff febf 	bl	8001030 <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 80012b2:	f7ff fe5f 	bl	8000f74 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 1); // Read 1 byte
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	2053      	movs	r0, #83	@ 0x53
 80012c0:	f7ff fec6 	bl	8001050 <I2C1_Read>
    return rxBuffer[0];
 80012c4:	7b3b      	ldrb	r3, [r7, #12]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <read16>:


/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012de:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[2];

    I2C1_Start();                                // Generate start condition
 80012e0:	f7ff fe48 	bl	8000f74 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 80012e4:	2052      	movs	r0, #82	@ 0x52
 80012e6:	f7ff fe83 	bl	8000ff0 <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe5f 	bl	8000fb0 <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 80012f2:	f7ff fe9d 	bl	8001030 <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 80012f6:	f7ff fe3d 	bl	8000f74 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 2); // Read 2 bytes
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2202      	movs	r2, #2
 8001300:	4619      	mov	r1, r3
 8001302:	2053      	movs	r0, #83	@ 0x53
 8001304:	f7ff fea4 	bl	8001050 <I2C1_Read>

    uint16_t ret = (rxBuffer[1] << 8) | rxBuffer[0];
 8001308:	7a7b      	ldrb	r3, [r7, #9]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	7a3b      	ldrb	r3, [r7, #8]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	81bb      	strh	r3, [r7, #12]
    return ret;
 8001318:	89bb      	ldrh	r3, [r7, #12]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <enable>:


void enable(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8001326:	2101      	movs	r1, #1
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff8d 	bl	8001248 <write8>
  Delay_ms (3);
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff ff72 	bl	8001218 <Delay_ms>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8001334:	2103      	movs	r1, #3
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff86 	bl	8001248 <write8>
  Delay_ms (50);
 800133c:	2032      	movs	r0, #50	@ 0x32
 800133e:	f7ff ff6b 	bl	8001218 <Delay_ms>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <setIntegrationTime+0x28>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <setIntegrationTime+0x16>
 800135a:	f000 f821 	bl	80013a0 <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4619      	mov	r1, r3
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff ff70 	bl	8001248 <write8>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000020 	.word	0x20000020

08001374 <setGain>:

void setGain(uint8_t gain)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <setGain+0x28>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <setGain+0x16>
 8001386:	f000 f80b 	bl	80013a0 <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4619      	mov	r1, r3
 800138e:	200f      	movs	r0, #15
 8001390:	f7ff ff5a 	bl	8001248 <write8>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000020 	.word	0x20000020

080013a0 <tcs3272_init>:

void tcs3272_init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  readValue = read8(TCS34725_ID);
 80013a4:	2012      	movs	r0, #18
 80013a6:	f7ff ff70 	bl	800128a <read8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <tcs3272_init+0x40>)
 80013b0:	701a      	strb	r2, [r3, #0]
  if ((readValue != 0x44) && (readValue != 0x4d))
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <tcs3272_init+0x40>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b44      	cmp	r3, #68	@ 0x44
 80013b8:	d003      	beq.n	80013c2 <tcs3272_init+0x22>
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <tcs3272_init+0x40>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b4d      	cmp	r3, #77	@ 0x4d
 80013c0:	d10b      	bne.n	80013da <tcs3272_init+0x3a>
  {

    return;
  }
  _tcs34725Initialised = 1;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <tcs3272_init+0x44>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 80013c8:	20eb      	movs	r0, #235	@ 0xeb
 80013ca:	f7ff ffbd 	bl	8001348 <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffd0 	bl	8001374 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 80013d4:	f7ff ffa5 	bl	8001322 <enable>
 80013d8:	e000      	b.n	80013dc <tcs3272_init+0x3c>
    return;
 80013da:	bf00      	nop
}
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000030 	.word	0x20000030
 80013e4:	20000020 	.word	0x20000020

080013e8 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <getRawData+0x5c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <getRawData+0x1a>
 80013fe:	f7ff ffcf 	bl	80013a0 <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 8001402:	2014      	movs	r0, #20
 8001404:	f7ff ff63 	bl	80012ce <read16>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 8001410:	2016      	movs	r0, #22
 8001412:	f7ff ff5c 	bl	80012ce <read16>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 800141e:	2018      	movs	r0, #24
 8001420:	f7ff ff55 	bl	80012ce <read16>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 800142c:	201a      	movs	r0, #26
 800142e:	f7ff ff4e 	bl	80012ce <read16>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
//  Delay_ms (50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000020 	.word	0x20000020

08001448 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
void getRGB(int *R, int *G, int *B)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	f107 0212 	add.w	r2, r7, #18
 800145c:	f107 0114 	add.w	r1, r7, #20
 8001460:	f107 0016 	add.w	r0, r7, #22
 8001464:	f7ff ffc0 	bl	80013e8 <getRawData>
    if(rawClear == 0)
 8001468:	8a3b      	ldrh	r3, [r7, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <getRGB+0x3a>
    {
      *R = 0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
      *G = 0;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
      *B = 0;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    {
      *R = (int)rawRed * 255 / rawClear;
      *G = (int)rawGreen * 255 / rawClear;
      *B = (int)rawBlue * 255 / rawClear;
    }
}
 8001480:	e01d      	b.n	80014be <getRGB+0x76>
      *R = (int)rawRed * 255 / rawClear;
 8001482:	8afb      	ldrh	r3, [r7, #22]
 8001484:	461a      	mov	r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	8a3a      	ldrh	r2, [r7, #16]
 800148e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8001496:	8abb      	ldrh	r3, [r7, #20]
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	8a3a      	ldrh	r2, [r7, #16]
 80014a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4613      	mov	r3, r2
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	8a3a      	ldrh	r2, [r7, #16]
 80014b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <Pin_config>:
 */

#ifndef INC_SYSTEM_H_
#define INC_SYSTEM_H_

void Pin_config(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0b111; // Enable GPIOA, GPIOB and GPIOC clocks
 80014cc:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <Pin_config+0x19c>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	4a64      	ldr	r2, [pc, #400]	@ (8001664 <Pin_config+0x19c>)
 80014d2:	f043 0307 	orr.w	r3, r3, #7
 80014d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER &= ~(0b11 << 26); // Clear mode bits for PC13
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <Pin_config+0x1a0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a62      	ldr	r2, [pc, #392]	@ (8001668 <Pin_config+0x1a0>)
 80014de:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80014e2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 26);  // Set PC13 as output (0b01)
 80014e4:	4b60      	ldr	r3, [pc, #384]	@ (8001668 <Pin_config+0x1a0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001668 <Pin_config+0x1a0>)
 80014ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014ee:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << 13); // Clear bit 13 for push-pull
 80014f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <Pin_config+0x1a0>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001668 <Pin_config+0x1a0>)
 80014f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014fa:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(0b11 << 26); // Clear speed bits (low speed)
 80014fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001668 <Pin_config+0x1a0>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a59      	ldr	r2, [pc, #356]	@ (8001668 <Pin_config+0x1a0>)
 8001502:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001506:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(0b11 << 26); // No pull-up, no pull-down
 8001508:	4b57      	ldr	r3, [pc, #348]	@ (8001668 <Pin_config+0x1a0>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a56      	ldr	r2, [pc, #344]	@ (8001668 <Pin_config+0x1a0>)
 800150e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001512:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear mode bits
 8001514:	4b55      	ldr	r3, [pc, #340]	@ (800166c <Pin_config+0x1a4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a54      	ldr	r2, [pc, #336]	@ (800166c <Pin_config+0x1a4>)
 800151a:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 800151e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (3 * 2)) | (0b01 << (4 * 2)) | (0b01 << (5 * 2)));  // Set mode to output (0b01)
 8001520:	4b52      	ldr	r3, [pc, #328]	@ (800166c <Pin_config+0x1a4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a51      	ldr	r2, [pc, #324]	@ (800166c <Pin_config+0x1a4>)
 8001526:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 800152a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 3) | (1 << 4) | (1 << 5)); // Clear bits for Push-Pull
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <Pin_config+0x1a4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <Pin_config+0x1a4>)
 8001532:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001536:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear speed bits
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <Pin_config+0x1a4>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a4b      	ldr	r2, [pc, #300]	@ (800166c <Pin_config+0x1a4>)
 800153e:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8001542:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // No pull-up, no pull-down
 8001544:	4b49      	ldr	r3, [pc, #292]	@ (800166c <Pin_config+0x1a4>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a48      	ldr	r2, [pc, #288]	@ (800166c <Pin_config+0x1a4>)
 800154a:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 800154e:	60d3      	str	r3, [r2, #12]

    // Configure PA10 as Alternate Function (TIM1_CH3)
    GPIOA->MODER &= ~(0b11 << (10 * 2)); // Clear mode bits for PA10
 8001550:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <Pin_config+0x1a8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a46      	ldr	r2, [pc, #280]	@ (8001670 <Pin_config+0x1a8>)
 8001556:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800155a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (10 * 2));  // Set PA10 to Alternate Function mode
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <Pin_config+0x1a8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a43      	ldr	r2, [pc, #268]	@ (8001670 <Pin_config+0x1a8>)
 8001562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001566:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((10 - 8) * 4)); // Clear AF bits for PA10
 8001568:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <Pin_config+0x1a8>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	4a40      	ldr	r2, [pc, #256]	@ (8001670 <Pin_config+0x1a8>)
 800156e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001572:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((10 - 8) * 4));  // Set AF1 (TIM1_CH3)
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <Pin_config+0x1a8>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	4a3d      	ldr	r2, [pc, #244]	@ (8001670 <Pin_config+0x1a8>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA11 as Alternate Function (TIM1_CH4)
    GPIOA->MODER &= ~(0b11 << (11 * 2)); // Clear mode bits for PA11
 8001580:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <Pin_config+0x1a8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3a      	ldr	r2, [pc, #232]	@ (8001670 <Pin_config+0x1a8>)
 8001586:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800158a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (11 * 2));  // Set PA11 to Alternate Function mode
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <Pin_config+0x1a8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a37      	ldr	r2, [pc, #220]	@ (8001670 <Pin_config+0x1a8>)
 8001592:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001596:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((11 - 8) * 4)); // Clear AF bits for PA11
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <Pin_config+0x1a8>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	4a34      	ldr	r2, [pc, #208]	@ (8001670 <Pin_config+0x1a8>)
 800159e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80015a2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((11 - 8) * 4));  // Set AF1 (TIM1_CH4)
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <Pin_config+0x1a8>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	4a31      	ldr	r2, [pc, #196]	@ (8001670 <Pin_config+0x1a8>)
 80015aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ae:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA8 and PA9 as outputs
	GPIOA->MODER &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Clear mode bits for PA8, PA9
 80015b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <Pin_config+0x1a8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001670 <Pin_config+0x1a8>)
 80015b6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80015ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((0b01 << (8 * 2)) | (0b01 << (9 * 2))); // Set PA8, PA9 as General-purpose output mode (0b01)
 80015bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <Pin_config+0x1a8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001670 <Pin_config+0x1a8>)
 80015c2:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80015c6:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~((1 << 8) | (1 << 9)); // Set Push-Pull mode for PA8, PA9
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <Pin_config+0x1a8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a28      	ldr	r2, [pc, #160]	@ (8001670 <Pin_config+0x1a8>)
 80015ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015d2:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Low speed for PA8, PA9
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <Pin_config+0x1a8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <Pin_config+0x1a8>)
 80015da:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80015de:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // No pull-up, no pull-down for PA8, PA9
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <Pin_config+0x1a8>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <Pin_config+0x1a8>)
 80015e6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80015ea:	60d3      	str	r3, [r2, #12]

	// Configure PB14 and PB15 as outputs
	GPIOB->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PB14, PB15
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <Pin_config+0x1a4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <Pin_config+0x1a4>)
 80015f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80015f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (14 * 2)) | (0b01 << (15 * 2))); // Set PB14, PB15 as General-purpose output mode (0b01)
 80015f8:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <Pin_config+0x1a4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <Pin_config+0x1a4>)
 80015fe:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001602:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 14) | (1 << 15)); // Set Push-Pull mode for PB14, PB15
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <Pin_config+0x1a4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <Pin_config+0x1a4>)
 800160a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800160e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Low speed for PB14, PB15
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <Pin_config+0x1a4>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <Pin_config+0x1a4>)
 8001616:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800161a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2)));   // No pull-up, no pull-down for PB14, PB15
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <Pin_config+0x1a4>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <Pin_config+0x1a4>)
 8001622:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001626:	60d3      	str	r3, [r2, #12]

	// Configure PB2 and PB10 as inputs
	GPIOB->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // Clear mode bits for PB2 and PB10
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <Pin_config+0x1a4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <Pin_config+0x1a4>)
 800162e:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8001632:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // No pull-up, no pull-down (default)
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <Pin_config+0x1a4>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <Pin_config+0x1a4>)
 800163a:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 800163e:	60d3      	str	r3, [r2, #12]

    // Configure PC14 and PC15 as inputs
    GPIOC->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PC14 and PC15
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <Pin_config+0x1a0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <Pin_config+0x1a0>)
 8001646:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800164a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // No pull-up, no pull-down (default)
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <Pin_config+0x1a0>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <Pin_config+0x1a0>)
 8001652:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	40020400 	.word	0x40020400
 8001670:	40020000 	.word	0x40020000

08001674 <Configure_TIM1_PWM>:

void Configure_TIM1_PWM(void) {
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= (1 << 0); // Enable TIM1 clock (bit 0)
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <Configure_TIM1_PWM+0x90>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167c:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <Configure_TIM1_PWM+0x90>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure TIM1 for PWM mode
    TIM1->PSC = 4 - 1;       // Prescaler: 16 MHz / 16 = 1 MHz timer clock
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 8001686:	2203      	movs	r2, #3
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 20000 - 1;    // Auto-reload: 1 MHz / 20000 = 50 Hz PWM frequency
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 800168c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode 1 and enable preload
    TIM1->CCMR2 &= ~((0b111 << 4) | (0b111 << 12)); // Clear OC3M and OC4M bits
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 8001698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800169c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016a0:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 4);  // PWM mode 1 on Channel 3 (PA10)
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016ac:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 12); // PWM mode 1 on Channel 4 (PA11)
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016b4:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80016b8:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (1 << 3) | (1 << 11); // Enable preload for CCR3 and CCR4 (OC3PE and OC4PE)
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	61d3      	str	r3, [r2, #28]

    // Enable channels
    TIM1->CCER |= (1 << 8);  // Enable Channel 3 output (PA10)
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= (1 << 12); // Enable Channel 4 output (PA11)
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016e0:	6213      	str	r3, [r2, #32]

    // Enable main output (MOE)
    TIM1->BDTR |= (1 << 15);
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44

    // Start TIM1
    TIM1->CR1 |= (1 << 0); // Enable TIM1 counter
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <Configure_TIM1_PWM+0x94>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023800 	.word	0x40023800
 8001708:	40010000 	.word	0x40010000

0800170c <Configure_TIM2>:

void Configure_TIM2(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1 << 0); // TIM2 clock enable
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <Configure_TIM2+0x54>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <Configure_TIM2+0x54>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM2 for 1 Hz (1-second period)
    TIM2->PSC = 144 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 800171c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001720:	228f      	movs	r2, #143	@ 0x8f
 8001722:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 8001724:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001728:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 800172e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	60d3      	str	r3, [r2, #12]

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN; // Enable counter
 800173e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt in NVIC
    NVIC_SetPriority(TIM2_IRQn, 9); // Set interrupt priority
 800174e:	2109      	movs	r1, #9
 8001750:	201c      	movs	r0, #28
 8001752:	f7ff fa05 	bl	8000b60 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001756:	201c      	movs	r0, #28
 8001758:	f7ff f9e4 	bl	8000b24 <__NVIC_EnableIRQ>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800

08001764 <Configure_TIM3>:

void Configure_TIM3(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    // Enable TIM3 clock
    RCC->APB1ENR |= (1 << 1); // TIM3 clock enable
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <Configure_TIM3+0x48>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <Configure_TIM3+0x48>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM3 for 1 Hz (1-second period)
    TIM3->PSC = 84 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <Configure_TIM3+0x4c>)
 8001776:	2253      	movs	r2, #83	@ 0x53
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <Configure_TIM3+0x4c>)
 800177c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <Configure_TIM3+0x4c>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <Configure_TIM3+0x4c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	60d3      	str	r3, [r2, #12]

    // Enable TIM3
    TIM3->CR1 |= TIM_CR1_CEN; // Enable counter
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <Configure_TIM3+0x4c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <Configure_TIM3+0x4c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6013      	str	r3, [r2, #0]

    // Enable TIM3 interrupt in NVIC
    NVIC_SetPriority(TIM3_IRQn, 9); // Set interrupt priority
 800179a:	2109      	movs	r1, #9
 800179c:	201d      	movs	r0, #29
 800179e:	f7ff f9df 	bl	8000b60 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 80017a2:	201d      	movs	r0, #29
 80017a4:	f7ff f9be 	bl	8000b24 <__NVIC_EnableIRQ>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40000400 	.word	0x40000400

080017b4 <Configure_USART2>:

volatile uint8_t *txBuffer; // Pointer to transmission buffer
volatile uint16_t txSize;   // Size of the transmission buffer
volatile uint16_t txIndex;  // Current index of transmission

void Configure_USART2(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
//    NVIC_SetPriority(USART2_IRQn, 1); // Priority level 1
//    NVIC_EnableIRQ(USART2_IRQn);      // Enable interrupt for USART2


	// Step 1: Enable USART2 clock and GPIOA clock
	    RCC->APB1ENR |= (1 << 17); // Enable USART2 clock
 80017b8:	4b37      	ldr	r3, [pc, #220]	@ (8001898 <Configure_USART2+0xe4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	4a36      	ldr	r2, [pc, #216]	@ (8001898 <Configure_USART2+0xe4>)
 80017be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40

	    // Step 2: Configure PA2 (USART2_TX) and PA3 (USART2_RX) as Alternate Function
	    GPIOA->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2))); // Clear mode bits for PA2 and PA3
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <Configure_USART2+0xe8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a34      	ldr	r2, [pc, #208]	@ (800189c <Configure_USART2+0xe8>)
 80017ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017ce:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2)));  // Set to Alternate Function mode
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <Configure_USART2+0xe8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a31      	ldr	r2, [pc, #196]	@ (800189c <Configure_USART2+0xe8>)
 80017d6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80017da:	6013      	str	r3, [r2, #0]

	    GPIOA->AFR[0] &= ~((0b1111 << (2 * 4)) | (0b1111 << (3 * 4))); // Clear AF bits for PA2 and PA3
 80017dc:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <Configure_USART2+0xe8>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a2e      	ldr	r2, [pc, #184]	@ (800189c <Configure_USART2+0xe8>)
 80017e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80017e6:	6213      	str	r3, [r2, #32]
	    GPIOA->AFR[0] |= ((0b0111 << (2 * 4)) | (0b0111 << (3 * 4)));  // Set AF7 (USART2)
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <Configure_USART2+0xe8>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a2b      	ldr	r2, [pc, #172]	@ (800189c <Configure_USART2+0xe8>)
 80017ee:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80017f2:	6213      	str	r3, [r2, #32]

	    GPIOA->OTYPER &= ~((1 << 2) | (1 << 3)); // Push-Pull
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <Configure_USART2+0xe8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <Configure_USART2+0xe8>)
 80017fa:	f023 030c 	bic.w	r3, r3, #12
 80017fe:	6053      	str	r3, [r2, #4]
	    GPIOA->OSPEEDR |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2))); // High speed
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <Configure_USART2+0xe8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a25      	ldr	r2, [pc, #148]	@ (800189c <Configure_USART2+0xe8>)
 8001806:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800180a:	6093      	str	r3, [r2, #8]
	    GPIOA->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2)));   // Clear pull-up/pull-down
 800180c:	4b23      	ldr	r3, [pc, #140]	@ (800189c <Configure_USART2+0xe8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <Configure_USART2+0xe8>)
 8001812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001816:	60d3      	str	r3, [r2, #12]
	    GPIOA->PUPDR |= ((0b01 << (2 * 2)) | (0b01 << (3 * 2)));    // Enable pull-up resistors
 8001818:	4b20      	ldr	r3, [pc, #128]	@ (800189c <Configure_USART2+0xe8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <Configure_USART2+0xe8>)
 800181e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001822:	60d3      	str	r3, [r2, #12]

	    // Step 3: Configure USART2
	    USART2->CR1 = 0; // Reset control register
 8001824:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <Configure_USART2+0xec>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]

	    // Configure baud rate (115200, assuming PCLK1 = 84 MHz)
	    USART2->BRR = 0x016C; // BRR = 729 (115200 baud)
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <Configure_USART2+0xec>)
 800182c:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001830:	609a      	str	r2, [r3, #8]

	    // Configure word length: 8 bits
	    USART2->CR1 &= ~(1 << 12); // M = 0 (8 data bits)
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <Configure_USART2+0xec>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4a1a      	ldr	r2, [pc, #104]	@ (80018a0 <Configure_USART2+0xec>)
 8001838:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800183c:	60d3      	str	r3, [r2, #12]

	    // Configure stop bits: 1 stop bit
	    USART2->CR2 &= ~(0b11 << 12); // STOP = 0b00 (1 stop bit)
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <Configure_USART2+0xec>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <Configure_USART2+0xec>)
 8001844:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001848:	6113      	str	r3, [r2, #16]

	    // Configure parity: None
	    USART2->CR1 &= ~(1 << 10); // PCE = 0 (Parity Control Enable = disabled)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <Configure_USART2+0xec>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <Configure_USART2+0xec>)
 8001850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001854:	60d3      	str	r3, [r2, #12]

	    // Enable transmitter and receiver
	    USART2->CR1 |= (1 << 3); // TE = 1 (Transmitter Enable)
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <Configure_USART2+0xec>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <Configure_USART2+0xec>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	60d3      	str	r3, [r2, #12]
	    USART2->CR1 |= (1 << 2); // RE = 1 (Receiver Enable)
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <Configure_USART2+0xec>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <Configure_USART2+0xec>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	60d3      	str	r3, [r2, #12]

	    // Enable USART2
	    USART2->CR1 |= (1 << 13); // UE = 1 (USART Enable)
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <Configure_USART2+0xec>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <Configure_USART2+0xec>)
 8001874:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001878:	60d3      	str	r3, [r2, #12]
	    USART2->CR1 |= (1 << 5);
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <Configure_USART2+0xec>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <Configure_USART2+0xec>)
 8001880:	f043 0320 	orr.w	r3, r3, #32
 8001884:	60d3      	str	r3, [r2, #12]

	    NVIC_EnableIRQ(USART2_IRQn);
 8001886:	2026      	movs	r0, #38	@ 0x26
 8001888:	f7ff f94c 	bl	8000b24 <__NVIC_EnableIRQ>
	    NVIC_SetPriority(USART2_IRQn, 1); // Set priority (lower number = higher priority)
 800188c:	2101      	movs	r1, #1
 800188e:	2026      	movs	r0, #38	@ 0x26
 8001890:	f7ff f966 	bl	8000b60 <__NVIC_SetPriority>

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40004400 	.word	0x40004400

080018a4 <UART_Receive_IT>:
}R6091U_t;

R6091U_t imu;


void UART_Receive_IT(USART_TypeDef* USARTx, uint16_t Size) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
    rxSize = Size;     // Set the size
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <UART_Receive_IT+0x30>)
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	8013      	strh	r3, [r2, #0]
    rxIndex = 0;       // Reset the index
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <UART_Receive_IT+0x34>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]

    // Enable RXNE interrupt
    USARTx->CR1 |= (1 << 5); // RXNEIE: RX Not Empty Interrupt Enable
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f043 0220 	orr.w	r2, r3, #32
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	2000003c 	.word	0x2000003c
 80018d8:	2000003e 	.word	0x2000003e
 80018dc:	00000000 	.word	0x00000000

080018e0 <IMU_Handler>:

void IMU_Handler(R6091U_t* IMU) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

    switch (IMU->State) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d035      	beq.n	800195c <IMU_Handler+0x7c>
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f300 8106 	bgt.w	8001b02 <IMU_Handler+0x222>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <IMU_Handler+0x20>
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d016      	beq.n	800192c <IMU_Handler+0x4c>

        IMU->State = PENDING_SYNC;
        UART_Receive_IT(IMU->usartx, 1);
        break;
    }
}
 80018fe:	e100      	b.n	8001b02 <IMU_Handler+0x222>
        if (IMU->Buffer[0] == 0xAA) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	2baa      	cmp	r3, #170	@ 0xaa
 8001906:	d107      	bne.n	8001918 <IMU_Handler+0x38>
            IMU->State = CONFIRMING_SYNC;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	761a      	strb	r2, [r3, #24]
            UART_Receive_IT(USART2, 1);
 800190e:	2101      	movs	r1, #1
 8001910:	4881      	ldr	r0, [pc, #516]	@ (8001b18 <IMU_Handler+0x238>)
 8001912:	f7ff ffc7 	bl	80018a4 <UART_Receive_IT>
        break;
 8001916:	e0f4      	b.n	8001b02 <IMU_Handler+0x222>
            IMU->State = PENDING_SYNC;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	761a      	strb	r2, [r3, #24]
            UART_Receive_IT(IMU->usartx, 1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffbd 	bl	80018a4 <UART_Receive_IT>
        break;
 800192a:	e0ea      	b.n	8001b02 <IMU_Handler+0x222>
        if (IMU->Buffer[0] == 0x00) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	791b      	ldrb	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <IMU_Handler+0x68>
            IMU->State = IN_SYNC;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	761a      	strb	r2, [r3, #24]
            UART_Receive_IT(IMU->usartx, 13);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	210d      	movs	r1, #13
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffaf 	bl	80018a4 <UART_Receive_IT>
        break;
 8001946:	e0dc      	b.n	8001b02 <IMU_Handler+0x222>
            IMU->State = PENDING_SYNC;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	761a      	strb	r2, [r3, #24]
            UART_Receive_IT(IMU->usartx, 1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2101      	movs	r1, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ffa5 	bl	80018a4 <UART_Receive_IT>
        break;
 800195a:	e0d2      	b.n	8001b02 <IMU_Handler+0x222>
        IMU->checksum = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        for (uint8_t i = 0; i < 12; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e00f      	b.n	800198a <IMU_Handler+0xaa>
            IMU->checksum += IMU->Buffer[i];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001970:	b2da      	uxtb	r2, r3
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	440b      	add	r3, r1
 8001978:	791b      	ldrb	r3, [r3, #4]
 800197a:	4413      	add	r3, r2
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        for (uint8_t i = 0; i < 12; i++) {
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3301      	adds	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b0b      	cmp	r3, #11
 800198e:	d9ec      	bls.n	800196a <IMU_Handler+0x8a>
        if (IMU->checksum == IMU->Buffer[12]) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001996:	b2da      	uxtb	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7c1b      	ldrb	r3, [r3, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 808a 	bne.w	8001ab6 <IMU_Handler+0x1d6>
            IMU->yaw = *((int16_t*)&IMU->Buffer[1]) / 100.0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3305      	adds	r3, #5
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd66 	bl	800047c <__aeabi_i2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <IMU_Handler+0x23c>)
 80019b6:	f7fe fef5 	bl	80007a4 <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f85f 	bl	8000a84 <__aeabi_d2f>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	61da      	str	r2, [r3, #28]
            IMU->yaw_rate = *((int16_t*)&IMU->Buffer[3]) / 100.0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3307      	adds	r3, #7
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd51 	bl	800047c <__aeabi_i2d>
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b4f      	ldr	r3, [pc, #316]	@ (8001b1c <IMU_Handler+0x23c>)
 80019e0:	f7fe fee0 	bl	80007a4 <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f84a 	bl	8000a84 <__aeabi_d2f>
 80019f0:	4602      	mov	r2, r0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	621a      	str	r2, [r3, #32]
            IMU->x_acc = *((int16_t*)&IMU->Buffer[5]) / 1000.0 * 9.8067;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3309      	adds	r3, #9
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd3c 	bl	800047c <__aeabi_i2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b45      	ldr	r3, [pc, #276]	@ (8001b20 <IMU_Handler+0x240>)
 8001a0a:	f7fe fecb 	bl	80007a4 <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	a33e      	add	r3, pc, #248	@ (adr r3, 8001b10 <IMU_Handler+0x230>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fd98 	bl	8000550 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f82c 	bl	8000a84 <__aeabi_d2f>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
            IMU->y_acc = *((int16_t*)&IMU->Buffer[7]) / 1000.0 * 9.8067;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330b      	adds	r3, #11
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd1e 	bl	800047c <__aeabi_i2d>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <IMU_Handler+0x240>)
 8001a46:	f7fe fead 	bl	80007a4 <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a32f      	add	r3, pc, #188	@ (adr r3, 8001b10 <IMU_Handler+0x230>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fd7a 	bl	8000550 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f80e 	bl	8000a84 <__aeabi_d2f>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
            IMU->z_acc = *((int16_t*)&IMU->Buffer[9]) / 1000.0 * 9.8067;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	330d      	adds	r3, #13
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd00 	bl	800047c <__aeabi_i2d>
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <IMU_Handler+0x240>)
 8001a82:	f7fe fe8f 	bl	80007a4 <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	a320      	add	r3, pc, #128	@ (adr r3, 8001b10 <IMU_Handler+0x230>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fd5c 	bl	8000550 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7fe fff0 	bl	8000a84 <__aeabi_d2f>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
            IMU->turn_no = IMU->Buffer[11];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7bdb      	ldrb	r3, [r3, #15]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        if(firstread == 0){
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <IMU_Handler+0x244>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d117      	bne.n	8001aee <IMU_Handler+0x20e>
        	imu.offset = 180.0 - IMU->yaw;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fcec 	bl	80004a0 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	4915      	ldr	r1, [pc, #84]	@ (8001b28 <IMU_Handler+0x248>)
 8001ad2:	f7fe fb85 	bl	80001e0 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ffd1 	bl	8000a84 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <IMU_Handler+0x24c>)
 8001ae6:	6453      	str	r3, [r2, #68]	@ 0x44
        	firstread = 1;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <IMU_Handler+0x244>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
        IMU->State = PENDING_SYNC;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	761a      	strb	r2, [r3, #24]
        UART_Receive_IT(IMU->usartx, 1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fed2 	bl	80018a4 <UART_Receive_IT>
        break;
 8001b00:	bf00      	nop
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w
 8001b10:	c84b5dcc 	.word	0xc84b5dcc
 8001b14:	40239d07 	.word	0x40239d07
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	40590000 	.word	0x40590000
 8001b20:	408f4000 	.word	0x408f4000
 8001b24:	20000040 	.word	0x20000040
 8001b28:	40668000 	.word	0x40668000
 8001b2c:	20000044 	.word	0x20000044

08001b30 <PID_Init>:
    float prevError; // Previous error value
    float integral;  // Integral accumulator
} PID_t;

// Initialize the PID controller
void PID_Init(PID_t *pid, float Kp, float Ki, float Kd) {
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b40:	ed87 1a00 	vstr	s2, [r7]
    pid->Kp = Kp;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
    pid->prevError = 0;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <PID_Compute>:

// Compute the PID output
float PID_Compute(PID_t *pid, float setpoint, float measured) {
 8001b72:	b480      	push	{r7}
 8001b74:	b089      	sub	sp, #36	@ 0x24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b7e:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measured;    // Calculate the error
 8001b82:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8e:	edc7 7a07 	vstr	s15, [r7, #28]
    pid->integral += error;              // Accumulate the integral term
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prevError; // Calculate the derivative term
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb4:	edc7 7a06 	vstr	s15, [r7, #24]
    pid->prevError = error;              // Store the current error for the next cycle
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	60da      	str	r2, [r3, #12]

    // Compute the PID output
    float output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001be6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    return output;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <main>:
uint16_t sensorLcnt, sensorRcnt;
float redratio;

unsigned square[6];

int main(void) {
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint32_t timer = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]

	SysClockConfig();
 8001c16:	f7ff f8fb 	bl	8000e10 <SysClockConfig>
	Pin_config();
 8001c1a:	f7ff fc55 	bl	80014c8 <Pin_config>
	Configure_TIM2();
 8001c1e:	f7ff fd75 	bl	800170c <Configure_TIM2>
	Configure_TIM3();
 8001c22:	f7ff fd9f 	bl	8001764 <Configure_TIM3>
	Configure_TIM1_PWM();
 8001c26:	f7ff fd25 	bl	8001674 <Configure_TIM1_PWM>
	TIM9Config();
 8001c2a:	f7ff fab7 	bl	800119c <TIM9Config>
	I2C1_Config();
 8001c2e:	f7ff f94b 	bl	8000ec8 <I2C1_Config>
	tcs3272_init();
 8001c32:	f7ff fbb5 	bl	80013a0 <tcs3272_init>
	Configure_USART2();
 8001c36:	f7ff fdbd 	bl	80017b4 <Configure_USART2>

	PID_Init(&imupid, 200, 0.1, 1);
 8001c3a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001c3e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8001ec8 <main+0x2bc>
 8001c42:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8001ecc <main+0x2c0>
 8001c46:	48a2      	ldr	r0, [pc, #648]	@ (8001ed0 <main+0x2c4>)
 8001c48:	f7ff ff72 	bl	8001b30 <PID_Init>

	Seg1Value = 0;
 8001c4c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed4 <main+0x2c8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
	Seg2Value = 0;
 8001c52:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed8 <main+0x2cc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
	linedetected_delay = tick;
 8001c58:	4ba0      	ldr	r3, [pc, #640]	@ (8001edc <main+0x2d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4aa0      	ldr	r2, [pc, #640]	@ (8001ee0 <main+0x2d4>)
 8001c5e:	6013      	str	r3, [r2, #0]

	UART_Receive_IT(USART2, 1);
 8001c60:	2101      	movs	r1, #1
 8001c62:	48a0      	ldr	r0, [pc, #640]	@ (8001ee4 <main+0x2d8>)
 8001c64:	f7ff fe1e 	bl	80018a4 <UART_Receive_IT>

	while (1) {
		if (tick - timer > 50) {
 8001c68:	4b9c      	ldr	r3, [pc, #624]	@ (8001edc <main+0x2d0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b32      	cmp	r3, #50	@ 0x32
 8001c72:	d91e      	bls.n	8001cb2 <main+0xa6>
			getRGB(&red, &green, &blue);
 8001c74:	4a9c      	ldr	r2, [pc, #624]	@ (8001ee8 <main+0x2dc>)
 8001c76:	499d      	ldr	r1, [pc, #628]	@ (8001eec <main+0x2e0>)
 8001c78:	489d      	ldr	r0, [pc, #628]	@ (8001ef0 <main+0x2e4>)
 8001c7a:	f7ff fbe5 	bl	8001448 <getRGB>
			redratio = (float)red/(float)(red+green+blue);
 8001c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ef0 <main+0x2e4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c8a:	4b99      	ldr	r3, [pc, #612]	@ (8001ef0 <main+0x2e4>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b97      	ldr	r3, [pc, #604]	@ (8001eec <main+0x2e0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	441a      	add	r2, r3
 8001c94:	4b94      	ldr	r3, [pc, #592]	@ (8001ee8 <main+0x2dc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca6:	4b93      	ldr	r3, [pc, #588]	@ (8001ef4 <main+0x2e8>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
			timer = tick;
 8001cac:	4b8b      	ldr	r3, [pc, #556]	@ (8001edc <main+0x2d0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	607b      	str	r3, [r7, #4]
		}

		currentAngle = 180.0 - imu.yaw;
 8001cb2:	4b91      	ldr	r3, [pc, #580]	@ (8001ef8 <main+0x2ec>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbf2 	bl	80004a0 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	498d      	ldr	r1, [pc, #564]	@ (8001efc <main+0x2f0>)
 8001cc6:	f7fe fa8b 	bl	80001e0 <__aeabi_dsub>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe fed7 	bl	8000a84 <__aeabi_d2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a89      	ldr	r2, [pc, #548]	@ (8001f00 <main+0x2f4>)
 8001cda:	6013      	str	r3, [r2, #0]

		if (currentAngle - previousAngle < -300) {
 8001cdc:	4b88      	ldr	r3, [pc, #544]	@ (8001f00 <main+0x2f4>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <main+0x2f8>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cec:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001f08 <main+0x2fc>
 8001cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d505      	bpl.n	8001d06 <main+0xfa>
			turn++;
 8001cfa:	4b84      	ldr	r3, [pc, #528]	@ (8001f0c <main+0x300>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a82      	ldr	r2, [pc, #520]	@ (8001f0c <main+0x300>)
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e013      	b.n	8001d2e <main+0x122>
		}else if(currentAngle - previousAngle > 300){
 8001d06:	4b7e      	ldr	r3, [pc, #504]	@ (8001f00 <main+0x2f4>)
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f04 <main+0x2f8>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d16:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001f10 <main+0x304>
 8001d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	dd04      	ble.n	8001d2e <main+0x122>
			turn--;
 8001d24:	4b79      	ldr	r3, [pc, #484]	@ (8001f0c <main+0x300>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a78      	ldr	r2, [pc, #480]	@ (8001f0c <main+0x300>)
 8001d2c:	6013      	str	r3, [r2, #0]
		}

		AngleNow = (float) turn * 360.0 + currentAngle - imu.offset;
 8001d2e:	4b77      	ldr	r3, [pc, #476]	@ (8001f0c <main+0x300>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	ee17 0a90 	vmov	r0, s15
 8001d3e:	f7fe fbaf 	bl	80004a0 <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <main+0x308>)
 8001d48:	f7fe fc02 	bl	8000550 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <main+0x2f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fba1 	bl	80004a0 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fa3d 	bl	80001e4 <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4614      	mov	r4, r2
 8001d70:	461d      	mov	r5, r3
 8001d72:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <main+0x2ec>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb92 	bl	80004a0 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fa2c 	bl	80001e0 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe78 	bl	8000a84 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a60      	ldr	r2, [pc, #384]	@ (8001f18 <main+0x30c>)
 8001d98:	6013      	str	r3, [r2, #0]

		previousAngle = currentAngle;
 8001d9a:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <main+0x2f4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a59      	ldr	r2, [pc, #356]	@ (8001f04 <main+0x2f8>)
 8001da0:	6013      	str	r3, [r2, #0]

		if (PB1) {
 8001da2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <main+0x310>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02c      	beq.n	8001e0a <main+0x1fe>
			runflag = !runflag;
 8001db0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f20 <main+0x314>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <main+0x314>)
 8001dc2:	701a      	strb	r2, [r3, #0]
			while (PB1);
 8001dc4:	bf00      	nop
 8001dc6:	4b55      	ldr	r3, [pc, #340]	@ (8001f1c <main+0x310>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f8      	bne.n	8001dc6 <main+0x1ba>
			AngleTarget = AngleNow;
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <main+0x30c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <main+0x318>)
 8001dda:	6013      	str	r3, [r2, #0]
			delay = tick;
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <main+0x2d0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a51      	ldr	r2, [pc, #324]	@ (8001f28 <main+0x31c>)
 8001de2:	6013      	str	r3, [r2, #0]
			linedetected_delay = tick;
 8001de4:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <main+0x2d0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee0 <main+0x2d4>)
 8001dea:	6013      	str	r3, [r2, #0]
			state = 0;
 8001dec:	4b4f      	ldr	r3, [pc, #316]	@ (8001f2c <main+0x320>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
			segenable = 1;
 8001df2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f30 <main+0x324>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]

			Seg1Value = 0;
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <main+0x2c8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
			Seg2Value = 0;
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <main+0x2cc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
			reportflag = 0;
 8001e04:	4b4b      	ldr	r3, [pc, #300]	@ (8001f34 <main+0x328>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
		}


		switch(state){
 8001e0a:	4b48      	ldr	r3, [pc, #288]	@ (8001f2c <main+0x320>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	f200 810d 	bhi.w	800202e <main+0x422>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <main+0x210>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e31 	.word	0x08001e31
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001f55 	.word	0x08001f55
 8001e28:	08001fab 	.word	0x08001fab
 8001e2c:	08001fed 	.word	0x08001fed
		case 0:
			leftspeed =  10000;
 8001e30:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <main+0x32c>)
 8001e32:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <main+0x330>)
 8001e34:	601a      	str	r2, [r3, #0]
			rightspeed = 10000;
 8001e36:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <main+0x334>)
 8001e38:	4a40      	ldr	r2, [pc, #256]	@ (8001f3c <main+0x330>)
 8001e3a:	601a      	str	r2, [r3, #0]
			if(tick - delay > 2200){
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <main+0x2d0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b39      	ldr	r3, [pc, #228]	@ (8001f28 <main+0x31c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f640 0298 	movw	r2, #2200	@ 0x898
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f240 80fb 	bls.w	8002046 <main+0x43a>
				state = 1;
 8001e50:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <main+0x320>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
				delay = tick;
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <main+0x2d0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a33      	ldr	r2, [pc, #204]	@ (8001f28 <main+0x31c>)
 8001e5c:	6013      	str	r3, [r2, #0]
				leftspeed =  0;
 8001e5e:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <main+0x32c>)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
				rightspeed = 0;
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <main+0x334>)
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
#ifdef shifted
				AngleTarget -= 90;
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <main+0x318>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001f44 <main+0x338>
 8001e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <main+0x318>)
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
#else
				AngleTarget += 90;
#endif
				imupid.Kp = 120;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <main+0x2c4>)
 8001e84:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <main+0x33c>)
 8001e86:	601a      	str	r2, [r3, #0]
				imupid.Ki = 0.004;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <main+0x2c4>)
 8001e8a:	4a30      	ldr	r2, [pc, #192]	@ (8001f4c <main+0x340>)
 8001e8c:	605a      	str	r2, [r3, #4]
				imupid.Kd = 3;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <main+0x2c4>)
 8001e90:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <main+0x344>)
 8001e92:	609a      	str	r2, [r3, #8]
			}
			break;
 8001e94:	e0d7      	b.n	8002046 <main+0x43a>

		case 1:
			leftspeed = 0;
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <main+0x32c>)
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
			rightspeed = 0;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <main+0x334>)
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
			if (tick - delay > 2000) {
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <main+0x2d0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <main+0x31c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001eb4:	f240 80c9 	bls.w	800204a <main+0x43e>
				state = 2;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <main+0x320>)
 8001eba:	2202      	movs	r2, #2
 8001ebc:	701a      	strb	r2, [r3, #0]
				delay = tick;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <main+0x2d0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <main+0x31c>)
 8001ec4:	6013      	str	r3, [r2, #0]
			}

			break;
 8001ec6:	e0c0      	b.n	800204a <main+0x43e>
 8001ec8:	3dcccccd 	.word	0x3dcccccd
 8001ecc:	43480000 	.word	0x43480000
 8001ed0:	200000b0 	.word	0x200000b0
 8001ed4:	2000001e 	.word	0x2000001e
 8001ed8:	2000001f 	.word	0x2000001f
 8001edc:	2000008c 	.word	0x2000008c
 8001ee0:	20000094 	.word	0x20000094
 8001ee4:	40004400 	.word	0x40004400
 8001ee8:	2000002c 	.word	0x2000002c
 8001eec:	20000028 	.word	0x20000028
 8001ef0:	20000024 	.word	0x20000024
 8001ef4:	200000e0 	.word	0x200000e0
 8001ef8:	20000044 	.word	0x20000044
 8001efc:	40668000 	.word	0x40668000
 8001f00:	2000009c 	.word	0x2000009c
 8001f04:	200000a0 	.word	0x200000a0
 8001f08:	c3960000 	.word	0xc3960000
 8001f0c:	200000ac 	.word	0x200000ac
 8001f10:	43960000 	.word	0x43960000
 8001f14:	40768000 	.word	0x40768000
 8001f18:	200000a4 	.word	0x200000a4
 8001f1c:	40020410 	.word	0x40020410
 8001f20:	20000099 	.word	0x20000099
 8001f24:	200000a8 	.word	0x200000a8
 8001f28:	20000090 	.word	0x20000090
 8001f2c:	200000d8 	.word	0x200000d8
 8001f30:	200000d9 	.word	0x200000d9
 8001f34:	200000da 	.word	0x200000da
 8001f38:	200000c8 	.word	0x200000c8
 8001f3c:	461c4000 	.word	0x461c4000
 8001f40:	200000cc 	.word	0x200000cc
 8001f44:	42b40000 	.word	0x42b40000
 8001f48:	42f00000 	.word	0x42f00000
 8001f4c:	3b83126f 	.word	0x3b83126f
 8001f50:	40400000 	.word	0x40400000

		case 2:
			leftspeed = 10000;
 8001f54:	4ba2      	ldr	r3, [pc, #648]	@ (80021e0 <main+0x5d4>)
 8001f56:	4aa3      	ldr	r2, [pc, #652]	@ (80021e4 <main+0x5d8>)
 8001f58:	601a      	str	r2, [r3, #0]
			rightspeed = 10000;
 8001f5a:	4ba3      	ldr	r3, [pc, #652]	@ (80021e8 <main+0x5dc>)
 8001f5c:	4aa1      	ldr	r2, [pc, #644]	@ (80021e4 <main+0x5d8>)
 8001f5e:	601a      	str	r2, [r3, #0]
			imupid.Kp = 100;
 8001f60:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <main+0x5e0>)
 8001f62:	4aa3      	ldr	r2, [pc, #652]	@ (80021f0 <main+0x5e4>)
 8001f64:	601a      	str	r2, [r3, #0]
			imupid.Ki = 0;
 8001f66:	4ba1      	ldr	r3, [pc, #644]	@ (80021ec <main+0x5e0>)
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
			imupid.Kd = 2;
 8001f6e:	4b9f      	ldr	r3, [pc, #636]	@ (80021ec <main+0x5e0>)
 8001f70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f74:	609a      	str	r2, [r3, #8]
			if (tick - delay > 900) {
 8001f76:	4b9f      	ldr	r3, [pc, #636]	@ (80021f4 <main+0x5e8>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b9f      	ldr	r3, [pc, #636]	@ (80021f8 <main+0x5ec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001f84:	d963      	bls.n	800204e <main+0x442>
				state = 3;
 8001f86:	4b9d      	ldr	r3, [pc, #628]	@ (80021fc <main+0x5f0>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]
#ifdef shifted
				AngleTarget -= 90;
 8001f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002200 <main+0x5f4>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8002204 <main+0x5f8>
 8001f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f9a:	4b99      	ldr	r3, [pc, #612]	@ (8002200 <main+0x5f4>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
#else
				AngleTarget += 90;
#endif
				delay = tick;
 8001fa0:	4b94      	ldr	r3, [pc, #592]	@ (80021f4 <main+0x5e8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a94      	ldr	r2, [pc, #592]	@ (80021f8 <main+0x5ec>)
 8001fa6:	6013      	str	r3, [r2, #0]
			}
			break;
 8001fa8:	e051      	b.n	800204e <main+0x442>

		case 3:
			leftspeed = 0;
 8001faa:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <main+0x5d4>)
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
			rightspeed = 0;
 8001fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80021e8 <main+0x5dc>)
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
			imupid.Kp = 120;
 8001fba:	4b8c      	ldr	r3, [pc, #560]	@ (80021ec <main+0x5e0>)
 8001fbc:	4a92      	ldr	r2, [pc, #584]	@ (8002208 <main+0x5fc>)
 8001fbe:	601a      	str	r2, [r3, #0]
			imupid.Ki = 0.002;
 8001fc0:	4b8a      	ldr	r3, [pc, #552]	@ (80021ec <main+0x5e0>)
 8001fc2:	4a92      	ldr	r2, [pc, #584]	@ (800220c <main+0x600>)
 8001fc4:	605a      	str	r2, [r3, #4]
			imupid.Kd = 3;
 8001fc6:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <main+0x5e0>)
 8001fc8:	4a91      	ldr	r2, [pc, #580]	@ (8002210 <main+0x604>)
 8001fca:	609a      	str	r2, [r3, #8]
			if (tick - delay > 2000) {
 8001fcc:	4b89      	ldr	r3, [pc, #548]	@ (80021f4 <main+0x5e8>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b89      	ldr	r3, [pc, #548]	@ (80021f8 <main+0x5ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001fda:	d93a      	bls.n	8002052 <main+0x446>
				state = 4;
 8001fdc:	4b87      	ldr	r3, [pc, #540]	@ (80021fc <main+0x5f0>)
 8001fde:	2204      	movs	r2, #4
 8001fe0:	701a      	strb	r2, [r3, #0]
				delay = tick;
 8001fe2:	4b84      	ldr	r3, [pc, #528]	@ (80021f4 <main+0x5e8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a84      	ldr	r2, [pc, #528]	@ (80021f8 <main+0x5ec>)
 8001fe8:	6013      	str	r3, [r2, #0]
			}
			break;
 8001fea:	e032      	b.n	8002052 <main+0x446>

		case 4:
			leftspeed = 10000;
 8001fec:	4b7c      	ldr	r3, [pc, #496]	@ (80021e0 <main+0x5d4>)
 8001fee:	4a7d      	ldr	r2, [pc, #500]	@ (80021e4 <main+0x5d8>)
 8001ff0:	601a      	str	r2, [r3, #0]
			rightspeed = 10000;
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <main+0x5dc>)
 8001ff4:	4a7b      	ldr	r2, [pc, #492]	@ (80021e4 <main+0x5d8>)
 8001ff6:	601a      	str	r2, [r3, #0]
			imupid.Kp = 500;
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <main+0x5e0>)
 8001ffa:	4a86      	ldr	r2, [pc, #536]	@ (8002214 <main+0x608>)
 8001ffc:	601a      	str	r2, [r3, #0]
			imupid.Ki = 0;
 8001ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <main+0x5e0>)
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
			imupid.Kd = 1;
 8002006:	4b79      	ldr	r3, [pc, #484]	@ (80021ec <main+0x5e0>)
 8002008:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800200c:	609a      	str	r2, [r3, #8]
			if (tick - delay > 2400) {
 800200e:	4b79      	ldr	r3, [pc, #484]	@ (80021f4 <main+0x5e8>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b79      	ldr	r3, [pc, #484]	@ (80021f8 <main+0x5ec>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 800201c:	d91b      	bls.n	8002056 <main+0x44a>
				state = 10;
 800201e:	4b77      	ldr	r3, [pc, #476]	@ (80021fc <main+0x5f0>)
 8002020:	220a      	movs	r2, #10
 8002022:	701a      	strb	r2, [r3, #0]
				delay = tick;
 8002024:	4b73      	ldr	r3, [pc, #460]	@ (80021f4 <main+0x5e8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a73      	ldr	r2, [pc, #460]	@ (80021f8 <main+0x5ec>)
 800202a:	6013      	str	r3, [r2, #0]
			}
			break;
 800202c:	e013      	b.n	8002056 <main+0x44a>

		default:
			leftspeed = 0;
 800202e:	4b6c      	ldr	r3, [pc, #432]	@ (80021e0 <main+0x5d4>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
			rightspeed = 0;
 8002036:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <main+0x5dc>)
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
			runflag = 0;
 800203e:	4b76      	ldr	r3, [pc, #472]	@ (8002218 <main+0x60c>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
			break;
 8002044:	e008      	b.n	8002058 <main+0x44c>
			break;
 8002046:	bf00      	nop
 8002048:	e006      	b.n	8002058 <main+0x44c>
			break;
 800204a:	bf00      	nop
 800204c:	e004      	b.n	8002058 <main+0x44c>
			break;
 800204e:	bf00      	nop
 8002050:	e002      	b.n	8002058 <main+0x44c>
			break;
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <main+0x44c>
			break;
 8002056:	bf00      	nop
		}
#ifdef shifted
		Lfinalspeed = leftspeed + imupidout;
 8002058:	4b61      	ldr	r3, [pc, #388]	@ (80021e0 <main+0x5d4>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <main+0x610>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <main+0x614>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
		Rfinalspeed = rightspeed - imupidout;
 800206e:	4b5e      	ldr	r3, [pc, #376]	@ (80021e8 <main+0x5dc>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	4b69      	ldr	r3, [pc, #420]	@ (800221c <main+0x610>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207e:	4b69      	ldr	r3, [pc, #420]	@ (8002224 <main+0x618>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
#else
			Lfinalspeed = leftspeed - imupidout;
			Rfinalspeed = rightspeed + imupidout;
#endif

			if(Lfinalspeed < -20000){
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <main+0x614>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8002228 <main+0x61c>
 800208e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	d503      	bpl.n	80020a0 <main+0x494>
				Lfinalspeed = -20000;
 8002098:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <main+0x614>)
 800209a:	4a64      	ldr	r2, [pc, #400]	@ (800222c <main+0x620>)
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00c      	b.n	80020ba <main+0x4ae>
			}else if(Lfinalspeed > 20000){
 80020a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <main+0x614>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8002230 <main+0x624>
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd02      	ble.n	80020ba <main+0x4ae>
				Lfinalspeed = 20000;
 80020b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002220 <main+0x614>)
 80020b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002234 <main+0x628>)
 80020b8:	601a      	str	r2, [r3, #0]
			}

			if(Rfinalspeed < -20000){
 80020ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <main+0x618>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002228 <main+0x61c>
 80020c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d503      	bpl.n	80020d6 <main+0x4ca>
				Rfinalspeed = -20000;
 80020ce:	4b55      	ldr	r3, [pc, #340]	@ (8002224 <main+0x618>)
 80020d0:	4a56      	ldr	r2, [pc, #344]	@ (800222c <main+0x620>)
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e00c      	b.n	80020f0 <main+0x4e4>
			}else if(Rfinalspeed > 20000){
 80020d6:	4b53      	ldr	r3, [pc, #332]	@ (8002224 <main+0x618>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002230 <main+0x624>
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	dd02      	ble.n	80020f0 <main+0x4e4>
				Rfinalspeed = 20000;
 80020ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <main+0x618>)
 80020ec:	4a51      	ldr	r2, [pc, #324]	@ (8002234 <main+0x628>)
 80020ee:	601a      	str	r2, [r3, #0]
			}

		if (runflag) {
 80020f0:	4b49      	ldr	r3, [pc, #292]	@ (8002218 <main+0x60c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d014      	beq.n	8002122 <main+0x516>
			Motor(LEFT_MOTOR, Lfinalspeed);
 80020f8:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <main+0x614>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002102:	ee17 1a90 	vmov	r1, s15
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fe2a 	bl	8000d60 <Motor>
			Motor(RIGHT_MOTOR, Rfinalspeed);
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <main+0x618>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002116:	ee17 1a90 	vmov	r1, s15
 800211a:	2001      	movs	r0, #1
 800211c:	f7fe fe20 	bl	8000d60 <Motor>
 8002120:	e007      	b.n	8002132 <main+0x526>

		} else {
			Motor(LEFT_MOTOR, 0);
 8002122:	2100      	movs	r1, #0
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fe1b 	bl	8000d60 <Motor>
			Motor(RIGHT_MOTOR, 0);
 800212a:	2100      	movs	r1, #0
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe fe17 	bl	8000d60 <Motor>
		}


		if (segenable) {
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <main+0x62c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 809e 	beq.w	8002278 <main+0x66c>

			Seg2Value = seg2buf;
 800213c:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <main+0x630>)
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <main+0x634>)
 8002142:	701a      	strb	r2, [r3, #0]
			if (tick - linedetected_delay < 1070) {
 8002144:	4b2b      	ldr	r3, [pc, #172]	@ (80021f4 <main+0x5e8>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <main+0x638>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f240 422d 	movw	r2, #1069	@ 0x42d
 8002152:	4293      	cmp	r3, r2
 8002154:	d803      	bhi.n	800215e <main+0x552>
				Seg1Value = 1;
 8002156:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <main+0x63c>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e08c      	b.n	8002278 <main+0x66c>
			} else if (tick - linedetected_delay < 1880) {
 800215e:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <main+0x5e8>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <main+0x638>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 800216c:	d203      	bcs.n	8002176 <main+0x56a>
				Seg1Value = 2;
 800216e:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <main+0x63c>)
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e080      	b.n	8002278 <main+0x66c>
			} else if (tick - linedetected_delay < 4530) {
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <main+0x5e8>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <main+0x638>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8002184:	4293      	cmp	r3, r2
 8002186:	d803      	bhi.n	8002190 <main+0x584>
				Seg1Value = 3;
 8002188:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <main+0x63c>)
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e073      	b.n	8002278 <main+0x66c>
			} else if (tick - linedetected_delay < 7790) {
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <main+0x5e8>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <main+0x638>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f641 626d 	movw	r2, #7789	@ 0x1e6d
 800219e:	4293      	cmp	r3, r2
 80021a0:	d803      	bhi.n	80021aa <main+0x59e>
				Seg1Value = 4;
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <main+0x63c>)
 80021a4:	2204      	movs	r2, #4
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e066      	b.n	8002278 <main+0x66c>
			} else if (tick - linedetected_delay < 8700) {
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <main+0x5e8>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <main+0x638>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f242 12fb 	movw	r2, #8699	@ 0x21fb
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d803      	bhi.n	80021c4 <main+0x5b8>
				Seg1Value = 5;
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <main+0x63c>)
 80021be:	2205      	movs	r2, #5
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e059      	b.n	8002278 <main+0x66c>
			} else if (tick - linedetected_delay < 9430) {
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <main+0x5e8>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <main+0x638>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f242 42d5 	movw	r2, #9429	@ 0x24d5
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d83a      	bhi.n	800224c <main+0x640>
				Seg1Value = 6;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <main+0x63c>)
 80021d8:	2206      	movs	r2, #6
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e04c      	b.n	8002278 <main+0x66c>
 80021de:	bf00      	nop
 80021e0:	200000c8 	.word	0x200000c8
 80021e4:	461c4000 	.word	0x461c4000
 80021e8:	200000cc 	.word	0x200000cc
 80021ec:	200000b0 	.word	0x200000b0
 80021f0:	42c80000 	.word	0x42c80000
 80021f4:	2000008c 	.word	0x2000008c
 80021f8:	20000090 	.word	0x20000090
 80021fc:	200000d8 	.word	0x200000d8
 8002200:	200000a8 	.word	0x200000a8
 8002204:	42b40000 	.word	0x42b40000
 8002208:	42f00000 	.word	0x42f00000
 800220c:	3b03126f 	.word	0x3b03126f
 8002210:	40400000 	.word	0x40400000
 8002214:	43fa0000 	.word	0x43fa0000
 8002218:	20000099 	.word	0x20000099
 800221c:	200000c4 	.word	0x200000c4
 8002220:	200000d0 	.word	0x200000d0
 8002224:	200000d4 	.word	0x200000d4
 8002228:	c69c4000 	.word	0xc69c4000
 800222c:	c69c4000 	.word	0xc69c4000
 8002230:	469c4000 	.word	0x469c4000
 8002234:	469c4000 	.word	0x469c4000
 8002238:	200000d9 	.word	0x200000d9
 800223c:	200000db 	.word	0x200000db
 8002240:	2000001f 	.word	0x2000001f
 8002244:	20000094 	.word	0x20000094
 8002248:	2000001e 	.word	0x2000001e
			} else if (tick - linedetected_delay < 10000) {
 800224c:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <main+0x6cc>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <main+0x6d0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f242 720f 	movw	r2, #9999	@ 0x270f
 800225a:	4293      	cmp	r3, r2
 800225c:	d80c      	bhi.n	8002278 <main+0x66c>
				Seg1Value = 10;
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <main+0x6d4>)
 8002260:	220a      	movs	r2, #10
 8002262:	701a      	strb	r2, [r3, #0]
				seg2buf = Seg2Value;
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <main+0x6d8>)
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <main+0x6dc>)
 800226a:	701a      	strb	r2, [r3, #0]
				Seg2Value = 10;
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <main+0x6d8>)
 800226e:	220a      	movs	r2, #10
 8002270:	701a      	strb	r2, [r3, #0]
				segenable = 0;
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <main+0x6e0>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
			}
		}

		seg2buf = 0;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <main+0x6dc>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 6; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	e00e      	b.n	80022a2 <main+0x696>
			if (square[i]) {
 8002284:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <main+0x6e4>)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <main+0x690>
				seg2buf++;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <main+0x6dc>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <main+0x6dc>)
 800229a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 6; i++) {
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	dded      	ble.n	8002284 <main+0x678>
			}
		}

		if (PB2) {
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <main+0x6e8>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <main+0x6b6>
			reportflag = 1;
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <main+0x6ec>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
			segenable = 1;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <main+0x6e0>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
		}

		if(reportflag){
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <main+0x6ec>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f43f acce 	beq.w	8001c68 <main+0x5c>
			Seg2Value = seg2buf;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <main+0x6dc>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <main+0x6d8>)
 80022d2:	701a      	strb	r2, [r3, #0]
		if (tick - timer > 50) {
 80022d4:	e4c8      	b.n	8001c68 <main+0x5c>
 80022d6:	bf00      	nop
 80022d8:	2000008c 	.word	0x2000008c
 80022dc:	20000094 	.word	0x20000094
 80022e0:	2000001e 	.word	0x2000001e
 80022e4:	2000001f 	.word	0x2000001f
 80022e8:	200000db 	.word	0x200000db
 80022ec:	200000d9 	.word	0x200000d9
 80022f0:	200000e4 	.word	0x200000e4
 80022f4:	40020410 	.word	0x40020410
 80022f8:	200000da 	.word	0x200000da
 80022fc:	00000000 	.word	0x00000000

08002300 <TIM2_IRQHandler>:


	}
}

void TIM2_IRQHandler(void) { // Timer Interrupt
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) { // Check update interrupt flag
 8002304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a3 	beq.w	800245a <TIM2_IRQHandler+0x15a>
		TIM2->SR &= ~TIM_SR_UIF; // Clear update interrupt flag
 8002314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6113      	str	r3, [r2, #16]


		if (AngleNow != 180 && AngleNow !=0) {
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <TIM2_IRQHandler+0x168>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800246c <TIM2_IRQHandler+0x16c>
 800232e:	eef4 7a47 	vcmp.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d017      	beq.n	8002368 <TIM2_IRQHandler+0x68>
 8002338:	4b4b      	ldr	r3, [pc, #300]	@ (8002468 <TIM2_IRQHandler+0x168>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d00f      	beq.n	8002368 <TIM2_IRQHandler+0x68>
			led1 = !led1;
 8002348:	4b49      	ldr	r3, [pc, #292]	@ (8002470 <TIM2_IRQHandler+0x170>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4a47      	ldr	r2, [pc, #284]	@ (8002470 <TIM2_IRQHandler+0x170>)
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	7853      	ldrb	r3, [r2, #1]
 8002360:	f361 1345 	bfi	r3, r1, #5, #1
 8002364:	7053      	strb	r3, [r2, #1]
 8002366:	e004      	b.n	8002372 <TIM2_IRQHandler+0x72>
		} else {
			led1 = 0;
 8002368:	4a41      	ldr	r2, [pc, #260]	@ (8002470 <TIM2_IRQHandler+0x170>)
 800236a:	7853      	ldrb	r3, [r2, #1]
 800236c:	f36f 1345 	bfc	r3, #5, #1
 8002370:	7053      	strb	r3, [r2, #1]
		}

		if (!sensorL) {
 8002372:	4b40      	ldr	r3, [pc, #256]	@ (8002474 <TIM2_IRQHandler+0x174>)
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <TIM2_IRQHandler+0x8e>
			sensorLcnt++;
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <TIM2_IRQHandler+0x178>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <TIM2_IRQHandler+0x178>)
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e002      	b.n	8002394 <TIM2_IRQHandler+0x94>
		} else {
			sensorLcnt = 0;
 800238e:	4b3a      	ldr	r3, [pc, #232]	@ (8002478 <TIM2_IRQHandler+0x178>)
 8002390:	2200      	movs	r2, #0
 8002392:	801a      	strh	r2, [r3, #0]
		}
		if (!sensorR) {
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <TIM2_IRQHandler+0x174>)
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <TIM2_IRQHandler+0xb0>
			sensorRcnt++;
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <TIM2_IRQHandler+0x17c>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <TIM2_IRQHandler+0x17c>)
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	e002      	b.n	80023b6 <TIM2_IRQHandler+0xb6>
		} else {
			sensorRcnt = 0;
 80023b0:	4b32      	ldr	r3, [pc, #200]	@ (800247c <TIM2_IRQHandler+0x17c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
		}

		if (redratio >= 0.34) {
 80023b6:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <TIM2_IRQHandler+0x180>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f870 	bl	80004a0 <__aeabi_f2d>
 80023c0:	a327      	add	r3, pc, #156	@ (adr r3, 8002460 <TIM2_IRQHandler+0x160>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fe fb49 	bl	8000a5c <__aeabi_dcmpge>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03d      	beq.n	800244c <TIM2_IRQHandler+0x14c>
		redcnt++;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <TIM2_IRQHandler+0x184>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <TIM2_IRQHandler+0x184>)
 80023da:	701a      	strb	r2, [r3, #0]
//		if (red > 120 || sensorRcnt > 10 || sensorLcnt > 10) {
		if (redcnt == 1) {
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <TIM2_IRQHandler+0x184>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d138      	bne.n	8002456 <TIM2_IRQHandler+0x156>
			if (segenable && !reportflag) {
 80023e4:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <TIM2_IRQHandler+0x188>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d034      	beq.n	8002456 <TIM2_IRQHandler+0x156>
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <TIM2_IRQHandler+0x18c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d130      	bne.n	8002456 <TIM2_IRQHandler+0x156>
//					Seg2Value++;
				switch (Seg1Value) {
 80023f4:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <TIM2_IRQHandler+0x190>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d82a      	bhi.n	8002454 <TIM2_IRQHandler+0x154>
 80023fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002404 <TIM2_IRQHandler+0x104>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002425 	.word	0x08002425
 800240c:	0800242d 	.word	0x0800242d
 8002410:	08002435 	.word	0x08002435
 8002414:	0800243d 	.word	0x0800243d
 8002418:	08002445 	.word	0x08002445
				case 1:
					square[0] = 1;
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <TIM2_IRQHandler+0x194>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
					break;
 8002422:	e018      	b.n	8002456 <TIM2_IRQHandler+0x156>
				case 2:
					square[1] = 1;
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <TIM2_IRQHandler+0x194>)
 8002426:	2201      	movs	r2, #1
 8002428:	605a      	str	r2, [r3, #4]
					break;
 800242a:	e014      	b.n	8002456 <TIM2_IRQHandler+0x156>
				case 3:
					square[2] = 1;
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <TIM2_IRQHandler+0x194>)
 800242e:	2201      	movs	r2, #1
 8002430:	609a      	str	r2, [r3, #8]
					break;
 8002432:	e010      	b.n	8002456 <TIM2_IRQHandler+0x156>
				case 4:
					square[3] = 1;
 8002434:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <TIM2_IRQHandler+0x194>)
 8002436:	2201      	movs	r2, #1
 8002438:	60da      	str	r2, [r3, #12]
					break;
 800243a:	e00c      	b.n	8002456 <TIM2_IRQHandler+0x156>
				case 5:
					square[4] = 1;
 800243c:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <TIM2_IRQHandler+0x194>)
 800243e:	2201      	movs	r2, #1
 8002440:	611a      	str	r2, [r3, #16]
					break;
 8002442:	e008      	b.n	8002456 <TIM2_IRQHandler+0x156>
				case 6:
					square[5] = 1;
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <TIM2_IRQHandler+0x194>)
 8002446:	2201      	movs	r2, #1
 8002448:	615a      	str	r2, [r3, #20]
					break;
 800244a:	e004      	b.n	8002456 <TIM2_IRQHandler+0x156>
					break;
				}
			}
		}
		} else {
			redcnt = 0;
 800244c:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <TIM2_IRQHandler+0x184>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e000      	b.n	8002456 <TIM2_IRQHandler+0x156>
					break;
 8002454:	bf00      	nop
		}

		SegUpdate();
 8002456:	f7fe fbad 	bl	8000bb4 <SegUpdate>

	}
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	5c28f5c3 	.word	0x5c28f5c3
 8002464:	3fd5c28f 	.word	0x3fd5c28f
 8002468:	200000a4 	.word	0x200000a4
 800246c:	43340000 	.word	0x43340000
 8002470:	40020814 	.word	0x40020814
 8002474:	40020810 	.word	0x40020810
 8002478:	200000dc 	.word	0x200000dc
 800247c:	200000de 	.word	0x200000de
 8002480:	200000e0 	.word	0x200000e0
 8002484:	20000098 	.word	0x20000098
 8002488:	200000d9 	.word	0x200000d9
 800248c:	200000da 	.word	0x200000da
 8002490:	2000001e 	.word	0x2000001e
 8002494:	200000e4 	.word	0x200000e4

08002498 <USART2_IRQHandler>:



void USART2_IRQHandler(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
    // Handle transmit interrupt


	if (USART2->SR & (1 << 7)) { // Check if TXE is set
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <USART2_IRQHandler+0x94>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01c      	beq.n	80024e2 <USART2_IRQHandler+0x4a>
		if (txIndex < txSize) {
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <USART2_IRQHandler+0x98>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <USART2_IRQHandler+0x9c>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d20e      	bcs.n	80024d6 <USART2_IRQHandler+0x3e>
			USART2->DR = txBuffer[txIndex++]; // Send next byte
 80024b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <USART2_IRQHandler+0xa0>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <USART2_IRQHandler+0x98>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	b288      	uxth	r0, r1
 80024c6:	491a      	ldr	r1, [pc, #104]	@ (8002530 <USART2_IRQHandler+0x98>)
 80024c8:	8008      	strh	r0, [r1, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <USART2_IRQHandler+0x94>)
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	e005      	b.n	80024e2 <USART2_IRQHandler+0x4a>
		} else {
			USART2->CR1 &= ~(1 << 7); // Disable TXE interrupt
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <USART2_IRQHandler+0x94>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a14      	ldr	r2, [pc, #80]	@ (800252c <USART2_IRQHandler+0x94>)
 80024dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024e0:	60d3      	str	r3, [r2, #12]
		}
	}

	if (USART2->SR & (1 << 5)) { // RXNE: Read Data Register Not Empty
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <USART2_IRQHandler+0x94>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01c      	beq.n	8002528 <USART2_IRQHandler+0x90>
//		led1 = !led1;
		if (rxIndex < rxSize) {
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <USART2_IRQHandler+0xa4>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <USART2_IRQHandler+0xa8>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d211      	bcs.n	8002522 <USART2_IRQHandler+0x8a>
			imu.Buffer[rxIndex] = USART2->DR;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <USART2_IRQHandler+0x94>)
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <USART2_IRQHandler+0xa4>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <USART2_IRQHandler+0xac>)
 800250e:	440b      	add	r3, r1
 8002510:	711a      	strb	r2, [r3, #4]
			rxIndex++;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <USART2_IRQHandler+0xa4>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <USART2_IRQHandler+0xa4>)
 800251e:	801a      	strh	r2, [r3, #0]
		} else {
			IMU_Handler(&imu);
		}
	}
}
 8002520:	e002      	b.n	8002528 <USART2_IRQHandler+0x90>
			IMU_Handler(&imu);
 8002522:	4808      	ldr	r0, [pc, #32]	@ (8002544 <USART2_IRQHandler+0xac>)
 8002524:	f7ff f9dc 	bl	80018e0 <IMU_Handler>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40004400 	.word	0x40004400
 8002530:	2000003a 	.word	0x2000003a
 8002534:	20000038 	.word	0x20000038
 8002538:	20000034 	.word	0x20000034
 800253c:	2000003e 	.word	0x2000003e
 8002540:	2000003c 	.word	0x2000003c
 8002544:	20000044 	.word	0x20000044

08002548 <TIM3_IRQHandler>:

uint8_t reportcnt;

void TIM3_IRQHandler(void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) { // Check for Update Interrupt Flag (UIF)
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <TIM3_IRQHandler+0xa8>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d049      	beq.n	80025ec <TIM3_IRQHandler+0xa4>
		TIM3->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <TIM3_IRQHandler+0xa8>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a24      	ldr	r2, [pc, #144]	@ (80025f0 <TIM3_IRQHandler+0xa8>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	6113      	str	r3, [r2, #16]
		static uint16_t cnt = 0;
		if (reportflag) {
 8002564:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <TIM3_IRQHandler+0xac>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <TIM3_IRQHandler+0x76>
			if (++cnt > 500) {
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <TIM3_IRQHandler+0xb0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <TIM3_IRQHandler+0xb0>)
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <TIM3_IRQHandler+0xb0>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002580:	d908      	bls.n	8002594 <TIM3_IRQHandler+0x4c>
				reportcnt++;
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 800258c:	701a      	strb	r2, [r3, #0]
				cnt = 0;
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <TIM3_IRQHandler+0xb0>)
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
			}

			if (square[reportcnt] == 1) {
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <TIM3_IRQHandler+0xb8>)
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <TIM3_IRQHandler+0x68>
				Seg1Value = reportcnt + 1;
 80025a4:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <TIM3_IRQHandler+0xbc>)
 80025ae:	701a      	strb	r2, [r3, #0]
			}

			if (reportcnt == 6) {
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d102      	bne.n	80025be <TIM3_IRQHandler+0x76>
				reportcnt = 0;
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <TIM3_IRQHandler+0xb4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
			}
		}


		imupidout = PID_Compute(&imupid, AngleTarget, AngleNow);
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <TIM3_IRQHandler+0xc0>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <TIM3_IRQHandler+0xc4>)
 80025c6:	ed93 7a00 	vldr	s14, [r3]
 80025ca:	eef0 0a47 	vmov.f32	s1, s14
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	480f      	ldr	r0, [pc, #60]	@ (8002610 <TIM3_IRQHandler+0xc8>)
 80025d4:	f7ff facd 	bl	8001b72 <PID_Compute>
 80025d8:	eef0 7a40 	vmov.f32	s15, s0
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <TIM3_IRQHandler+0xcc>)
 80025de:	edc3 7a00 	vstr	s15, [r3]


		tick++;
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <TIM3_IRQHandler+0xd0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <TIM3_IRQHandler+0xd0>)
 80025ea:	6013      	str	r3, [r2, #0]
	}
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40000400 	.word	0x40000400
 80025f4:	200000da 	.word	0x200000da
 80025f8:	200000fe 	.word	0x200000fe
 80025fc:	200000fc 	.word	0x200000fc
 8002600:	200000e4 	.word	0x200000e4
 8002604:	2000001e 	.word	0x2000001e
 8002608:	200000a8 	.word	0x200000a8
 800260c:	200000a4 	.word	0x200000a4
 8002610:	200000b0 	.word	0x200000b0
 8002614:	200000c4 	.word	0x200000c4
 8002618:	2000008c 	.word	0x2000008c

0800261c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <NMI_Handler+0x4>

08002624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <MemManage_Handler+0x4>

08002634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <UsageFault_Handler+0x4>

08002644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  static uint32_t tick;
  tick++;
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Handler+0x18>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	4a03      	ldr	r2, [pc, #12]	@ (8002688 <SysTick_Handler+0x18>)
 800267c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20000100 	.word	0x20000100

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026b4:	f7ff ffea 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	@ (80026fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f000 f811 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7ff fa93 	bl	8001c0c <main>
  bx  lr    
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80026f4:	0800276c 	.word	0x0800276c
  ldr r2, =_sbss
 80026f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80026fc:	20000104 	.word	0x20000104

08002700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC_IRQHandler>
	...

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	4d0d      	ldr	r5, [pc, #52]	@ (800273c <__libc_init_array+0x38>)
 8002708:	4c0d      	ldr	r4, [pc, #52]	@ (8002740 <__libc_init_array+0x3c>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	2600      	movs	r6, #0
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	4d0b      	ldr	r5, [pc, #44]	@ (8002744 <__libc_init_array+0x40>)
 8002716:	4c0c      	ldr	r4, [pc, #48]	@ (8002748 <__libc_init_array+0x44>)
 8002718:	f000 f818 	bl	800274c <_init>
 800271c:	1b64      	subs	r4, r4, r5
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	2600      	movs	r6, #0
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	f855 3b04 	ldr.w	r3, [r5], #4
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	f855 3b04 	ldr.w	r3, [r5], #4
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	08002764 	.word	0x08002764
 8002740:	08002764 	.word	0x08002764
 8002744:	08002764 	.word	0x08002764
 8002748:	08002768 	.word	0x08002768

0800274c <_init>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr

08002758 <_fini>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr
