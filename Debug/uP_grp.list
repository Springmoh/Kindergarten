
uP_grp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001270  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001404  0800140c  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001404  08001404  0000240c  2**0
                  CONTENTS
  4 .ARM          00000000  08001404  08001404  0000240c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001404  0800140c  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001404  08001404  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001408  08001408  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000000  0800140c  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800140c  0000304c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b1c  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c4  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00004420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015e  00000000  00000000  00004600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb24  00000000  00000000  0000475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b4b  00000000  00000000  00013282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541dc  00000000  00000000  00014dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000658  00000000  00000000  00068fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00069644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013ec 	.word	0x080013ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080013ec 	.word	0x080013ec

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <SegUpdate>:
#define LEFT_F_SPEED	11000
#define RIGHT_F_SPEED	10000
uint8_t Seg1Value, Seg2Value, linedetected;
uint16_t linedetected_delay;

void SegUpdate() {
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	switch (Seg1Value) {
 800026a:	4b61      	ldr	r3, [pc, #388]	@ (80003f0 <SegUpdate+0x18c>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b09      	cmp	r3, #9
 8000270:	d83e      	bhi.n	80002f0 <SegUpdate+0x8c>
 8000272:	a201      	add	r2, pc, #4	@ (adr r2, 8000278 <SegUpdate+0x14>)
 8000274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000278:	080002a1 	.word	0x080002a1
 800027c:	080002a9 	.word	0x080002a9
 8000280:	080002b1 	.word	0x080002b1
 8000284:	080002b9 	.word	0x080002b9
 8000288:	080002c1 	.word	0x080002c1
 800028c:	080002c9 	.word	0x080002c9
 8000290:	080002d1 	.word	0x080002d1
 8000294:	080002d9 	.word	0x080002d9
 8000298:	080002e1 	.word	0x080002e1
 800029c:	080002e9 	.word	0x080002e9
	case 0:
		SegData.Seg[0] = 0b01111110;
 80002a0:	4b54      	ldr	r3, [pc, #336]	@ (80003f4 <SegUpdate+0x190>)
 80002a2:	227e      	movs	r2, #126	@ 0x7e
 80002a4:	701a      	strb	r2, [r3, #0]
		break;
 80002a6:	e024      	b.n	80002f2 <SegUpdate+0x8e>
	case 1:
		SegData.Seg[0] = 0b01100000;
 80002a8:	4b52      	ldr	r3, [pc, #328]	@ (80003f4 <SegUpdate+0x190>)
 80002aa:	2260      	movs	r2, #96	@ 0x60
 80002ac:	701a      	strb	r2, [r3, #0]
		break;
 80002ae:	e020      	b.n	80002f2 <SegUpdate+0x8e>
	case 2:
		SegData.Seg[0] = 0b10110110;
 80002b0:	4b50      	ldr	r3, [pc, #320]	@ (80003f4 <SegUpdate+0x190>)
 80002b2:	22b6      	movs	r2, #182	@ 0xb6
 80002b4:	701a      	strb	r2, [r3, #0]
		break;
 80002b6:	e01c      	b.n	80002f2 <SegUpdate+0x8e>
	case 3:
		SegData.Seg[0] = 0b11110100;
 80002b8:	4b4e      	ldr	r3, [pc, #312]	@ (80003f4 <SegUpdate+0x190>)
 80002ba:	22f4      	movs	r2, #244	@ 0xf4
 80002bc:	701a      	strb	r2, [r3, #0]
		break;
 80002be:	e018      	b.n	80002f2 <SegUpdate+0x8e>
	case 4:
		SegData.Seg[0] = 0b11101000;
 80002c0:	4b4c      	ldr	r3, [pc, #304]	@ (80003f4 <SegUpdate+0x190>)
 80002c2:	22e8      	movs	r2, #232	@ 0xe8
 80002c4:	701a      	strb	r2, [r3, #0]
		break;
 80002c6:	e014      	b.n	80002f2 <SegUpdate+0x8e>
	case 5:
		SegData.Seg[0] = 0b11011100;
 80002c8:	4b4a      	ldr	r3, [pc, #296]	@ (80003f4 <SegUpdate+0x190>)
 80002ca:	22dc      	movs	r2, #220	@ 0xdc
 80002cc:	701a      	strb	r2, [r3, #0]
		break;
 80002ce:	e010      	b.n	80002f2 <SegUpdate+0x8e>
	case 6:
		SegData.Seg[0] = 0b11011110;
 80002d0:	4b48      	ldr	r3, [pc, #288]	@ (80003f4 <SegUpdate+0x190>)
 80002d2:	22de      	movs	r2, #222	@ 0xde
 80002d4:	701a      	strb	r2, [r3, #0]
		break;
 80002d6:	e00c      	b.n	80002f2 <SegUpdate+0x8e>
	case 7:
		SegData.Seg[0] = 0b01110000;
 80002d8:	4b46      	ldr	r3, [pc, #280]	@ (80003f4 <SegUpdate+0x190>)
 80002da:	2270      	movs	r2, #112	@ 0x70
 80002dc:	701a      	strb	r2, [r3, #0]
		break;
 80002de:	e008      	b.n	80002f2 <SegUpdate+0x8e>
	case 8:
		SegData.Seg[0] = 0b11111110;
 80002e0:	4b44      	ldr	r3, [pc, #272]	@ (80003f4 <SegUpdate+0x190>)
 80002e2:	22fe      	movs	r2, #254	@ 0xfe
 80002e4:	701a      	strb	r2, [r3, #0]
		break;
 80002e6:	e004      	b.n	80002f2 <SegUpdate+0x8e>
	case 9:
		SegData.Seg[0] = 0b11111100;
 80002e8:	4b42      	ldr	r3, [pc, #264]	@ (80003f4 <SegUpdate+0x190>)
 80002ea:	22fc      	movs	r2, #252	@ 0xfc
 80002ec:	701a      	strb	r2, [r3, #0]
		break;
 80002ee:	e000      	b.n	80002f2 <SegUpdate+0x8e>
	default:
		break;
 80002f0:	bf00      	nop
	}

	switch (Seg2Value) {
 80002f2:	4b41      	ldr	r3, [pc, #260]	@ (80003f8 <SegUpdate+0x194>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b09      	cmp	r3, #9
 80002f8:	d83e      	bhi.n	8000378 <SegUpdate+0x114>
 80002fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000300 <SegUpdate+0x9c>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000329 	.word	0x08000329
 8000304:	08000331 	.word	0x08000331
 8000308:	08000339 	.word	0x08000339
 800030c:	08000341 	.word	0x08000341
 8000310:	08000349 	.word	0x08000349
 8000314:	08000351 	.word	0x08000351
 8000318:	08000359 	.word	0x08000359
 800031c:	08000361 	.word	0x08000361
 8000320:	08000369 	.word	0x08000369
 8000324:	08000371 	.word	0x08000371
	case 0:
		SegData.Seg[1] = 0b11101110;
 8000328:	4b32      	ldr	r3, [pc, #200]	@ (80003f4 <SegUpdate+0x190>)
 800032a:	22ee      	movs	r2, #238	@ 0xee
 800032c:	705a      	strb	r2, [r3, #1]
		break;
 800032e:	e024      	b.n	800037a <SegUpdate+0x116>
	case 1:
		SegData.Seg[1] = 0b00101000;
 8000330:	4b30      	ldr	r3, [pc, #192]	@ (80003f4 <SegUpdate+0x190>)
 8000332:	2228      	movs	r2, #40	@ 0x28
 8000334:	705a      	strb	r2, [r3, #1]
		break;
 8000336:	e020      	b.n	800037a <SegUpdate+0x116>
	case 2:
		SegData.Seg[1] = 0b11011100;
 8000338:	4b2e      	ldr	r3, [pc, #184]	@ (80003f4 <SegUpdate+0x190>)
 800033a:	22dc      	movs	r2, #220	@ 0xdc
 800033c:	705a      	strb	r2, [r3, #1]
		break;
 800033e:	e01c      	b.n	800037a <SegUpdate+0x116>
	case 3:
		SegData.Seg[1] = 0b01111100;
 8000340:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <SegUpdate+0x190>)
 8000342:	227c      	movs	r2, #124	@ 0x7c
 8000344:	705a      	strb	r2, [r3, #1]
		break;
 8000346:	e018      	b.n	800037a <SegUpdate+0x116>
	case 4:
		SegData.Seg[1] = 0b00111010;
 8000348:	4b2a      	ldr	r3, [pc, #168]	@ (80003f4 <SegUpdate+0x190>)
 800034a:	223a      	movs	r2, #58	@ 0x3a
 800034c:	705a      	strb	r2, [r3, #1]
		break;
 800034e:	e014      	b.n	800037a <SegUpdate+0x116>
	case 5:
		SegData.Seg[1] = 0b01110110;
 8000350:	4b28      	ldr	r3, [pc, #160]	@ (80003f4 <SegUpdate+0x190>)
 8000352:	2276      	movs	r2, #118	@ 0x76
 8000354:	705a      	strb	r2, [r3, #1]
		break;
 8000356:	e010      	b.n	800037a <SegUpdate+0x116>
	case 6:
		SegData.Seg[1] = 0b11110110;
 8000358:	4b26      	ldr	r3, [pc, #152]	@ (80003f4 <SegUpdate+0x190>)
 800035a:	22f6      	movs	r2, #246	@ 0xf6
 800035c:	705a      	strb	r2, [r3, #1]
		break;
 800035e:	e00c      	b.n	800037a <SegUpdate+0x116>
	case 7:
		SegData.Seg[1] = 0b00101100;
 8000360:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <SegUpdate+0x190>)
 8000362:	222c      	movs	r2, #44	@ 0x2c
 8000364:	705a      	strb	r2, [r3, #1]
		break;
 8000366:	e008      	b.n	800037a <SegUpdate+0x116>
	case 8:
		SegData.Seg[1] = 0b11111110;
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <SegUpdate+0x190>)
 800036a:	22fe      	movs	r2, #254	@ 0xfe
 800036c:	705a      	strb	r2, [r3, #1]
		break;
 800036e:	e004      	b.n	800037a <SegUpdate+0x116>
	case 9:
		SegData.Seg[1] = 0b01111110;
 8000370:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <SegUpdate+0x190>)
 8000372:	227e      	movs	r2, #126	@ 0x7e
 8000374:	705a      	strb	r2, [r3, #1]
		break;
 8000376:	e000      	b.n	800037a <SegUpdate+0x116>
	default:
		break;
 8000378:	bf00      	nop
	}

	for (int i = 15; i >= 0; i--) {
 800037a:	230f      	movs	r3, #15
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	e024      	b.n	80003ca <SegUpdate+0x166>
		uint16_t bit = (SegData.bit >> i) & 0x01;
 8000380:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <SegUpdate+0x190>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	fa42 f303 	asr.w	r3, r2, r3
 800038c:	b29b      	uxth	r3, r3
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	807b      	strh	r3, [r7, #2]
		if (bit) {
 8000394:	887b      	ldrh	r3, [r7, #2]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d005      	beq.n	80003a6 <SegUpdate+0x142>
			SRdata = 1;
 800039a:	4a18      	ldr	r2, [pc, #96]	@ (80003fc <SegUpdate+0x198>)
 800039c:	7813      	ldrb	r3, [r2, #0]
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	7013      	strb	r3, [r2, #0]
 80003a4:	e004      	b.n	80003b0 <SegUpdate+0x14c>
		} else {
			SRdata = 0;
 80003a6:	4a15      	ldr	r2, [pc, #84]	@ (80003fc <SegUpdate+0x198>)
 80003a8:	7813      	ldrb	r3, [r2, #0]
 80003aa:	f36f 03c3 	bfc	r3, #3, #1
 80003ae:	7013      	strb	r3, [r2, #0]
		}
		SRclock = 1;
 80003b0:	4a12      	ldr	r2, [pc, #72]	@ (80003fc <SegUpdate+0x198>)
 80003b2:	7813      	ldrb	r3, [r2, #0]
 80003b4:	f043 0320 	orr.w	r3, r3, #32
 80003b8:	7013      	strb	r3, [r2, #0]
//			Delay_ms(2);
		SRclock = 0;
 80003ba:	4a10      	ldr	r2, [pc, #64]	@ (80003fc <SegUpdate+0x198>)
 80003bc:	7813      	ldrb	r3, [r2, #0]
 80003be:	f36f 1345 	bfc	r3, #5, #1
 80003c2:	7013      	strb	r3, [r2, #0]
	for (int i = 15; i >= 0; i--) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	dad7      	bge.n	8000380 <SegUpdate+0x11c>
	}
	SRlatch = 1;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <SegUpdate+0x198>)
 80003d2:	7813      	ldrb	r3, [r2, #0]
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	7013      	strb	r3, [r2, #0]
//		Delay_ms(2);
	SRlatch = 0;
 80003da:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <SegUpdate+0x198>)
 80003dc:	7813      	ldrb	r3, [r2, #0]
 80003de:	f36f 1304 	bfc	r3, #4, #1
 80003e2:	7013      	strb	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	2000001f 	.word	0x2000001f
 80003f4:	2000001c 	.word	0x2000001c
 80003f8:	20000020 	.word	0x20000020
 80003fc:	40020414 	.word	0x40020414

08000400 <Motor>:

void Motor(uint8_t number, int pwm){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
	switch(number){
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d021      	beq.n	8000456 <Motor+0x56>
 8000412:	2b01      	cmp	r3, #1
 8000414:	d13f      	bne.n	8000496 <Motor+0x96>
	case RIGHT_MOTOR:
		if (pwm >= 0) {
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	db0a      	blt.n	8000432 <Motor+0x32>
			M_IN1 = 1;
 800041c:	4a21      	ldr	r2, [pc, #132]	@ (80004a4 <Motor+0xa4>)
 800041e:	7853      	ldrb	r3, [r2, #1]
 8000420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000424:	7053      	strb	r3, [r2, #1]
			M_IN2 = 0;
 8000426:	4a20      	ldr	r2, [pc, #128]	@ (80004a8 <Motor+0xa8>)
 8000428:	7853      	ldrb	r3, [r2, #1]
 800042a:	f36f 0300 	bfc	r3, #0, #1
 800042e:	7053      	strb	r3, [r2, #1]
 8000430:	e009      	b.n	8000446 <Motor+0x46>
		} else {
			M_IN1 = 0;
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <Motor+0xa4>)
 8000434:	7853      	ldrb	r3, [r2, #1]
 8000436:	f36f 13c7 	bfc	r3, #7, #1
 800043a:	7053      	strb	r3, [r2, #1]
			M_IN2 = 1;
 800043c:	4a1a      	ldr	r2, [pc, #104]	@ (80004a8 <Motor+0xa8>)
 800043e:	7853      	ldrb	r3, [r2, #1]
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	7053      	strb	r3, [r2, #1]
		}
		M_PWM12 = abs(pwm);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800044c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000450:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <Motor+0xac>)
 8000452:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000454:	e01f      	b.n	8000496 <Motor+0x96>

	case LEFT_MOTOR:
		if (pwm >= 0) {
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db0a      	blt.n	8000472 <Motor+0x72>
			M_IN3 = 0;
 800045c:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <Motor+0xa8>)
 800045e:	7853      	ldrb	r3, [r2, #1]
 8000460:	f36f 0341 	bfc	r3, #1, #1
 8000464:	7053      	strb	r3, [r2, #1]
			M_IN4 = 1;
 8000466:	4a0f      	ldr	r2, [pc, #60]	@ (80004a4 <Motor+0xa4>)
 8000468:	7853      	ldrb	r3, [r2, #1]
 800046a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046e:	7053      	strb	r3, [r2, #1]
 8000470:	e009      	b.n	8000486 <Motor+0x86>
		} else {
			M_IN3 = 1;
 8000472:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <Motor+0xa8>)
 8000474:	7853      	ldrb	r3, [r2, #1]
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	7053      	strb	r3, [r2, #1]
			M_IN4 = 0;
 800047c:	4a09      	ldr	r2, [pc, #36]	@ (80004a4 <Motor+0xa4>)
 800047e:	7853      	ldrb	r3, [r2, #1]
 8000480:	f36f 1386 	bfc	r3, #6, #1
 8000484:	7053      	strb	r3, [r2, #1]
		}
		M_PWM34 = abs(pwm);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800048c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <Motor+0xac>)
 8000492:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000494:	bf00      	nop
	}
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020414 	.word	0x40020414
 80004a8:	40020014 	.word	0x40020014
 80004ac:	40010000 	.word	0x40010000

080004b0 <SysClockConfig>:
#define PLL_N 168
#define PLL_P 0 // PLLP = 2


void SysClockConfig(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	/* 1) Enable the HSE and wait for confirmation*/
	RCC->CR |= RCC_CR_HSEON;
 80004b4:	4b28      	ldr	r3, [pc, #160]	@ (8000558 <SysClockConfig+0xa8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a27      	ldr	r2, [pc, #156]	@ (8000558 <SysClockConfig+0xa8>)
 80004ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004be:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 80004c0:	bf00      	nop
 80004c2:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <SysClockConfig+0xa8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <SysClockConfig+0x12>

	/* 2) Set POWER ENABLE CLOCK(POWEREN)  and VOLTAGE REGULATOR(VOS)*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <SysClockConfig+0xa8>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <SysClockConfig+0xa8>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d8:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 80004da:	4b20      	ldr	r3, [pc, #128]	@ (800055c <SysClockConfig+0xac>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1f      	ldr	r2, [pc, #124]	@ (800055c <SysClockConfig+0xac>)
 80004e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004e4:	6013      	str	r3, [r2, #0]

	/*3) Configure the FLASH PREFETCH and the LATENCY Related Settings*/
	FLASH->ACR |= FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_2WS;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <SysClockConfig+0xb0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000560 <SysClockConfig+0xb0>)
 80004ec:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	6013      	str	r3, [r2, #0]

	/*4) Configure the PRESCALARS HCLK, PCLK1, PCLK2*/
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004f6:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <SysClockConfig+0xa8>)
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <SysClockConfig+0xa8>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <SysClockConfig+0xa8>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <SysClockConfig+0xa8>)
 8000504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000508:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC->CFGR |=RCC_CFGR_PPRE2_DIV1;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <SysClockConfig+0xa8>)
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <SysClockConfig+0xa8>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	6093      	str	r3, [r2, #8]

	/*5) Configure the MAIN PLL*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <SysClockConfig+0xa8>)
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <SysClockConfig+0xb4>)
 8000516:	605a      	str	r2, [r3, #4]

	/*6) Enable the PLL and wait for it to become ready*/
	RCC->CR |= RCC_CR_PLLON;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <SysClockConfig+0xa8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <SysClockConfig+0xa8>)
 800051e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000522:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000524:	bf00      	nop
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <SysClockConfig+0xa8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <SysClockConfig+0x76>

	/*7) Select the Clock Source and wait for it to be set*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <SysClockConfig+0xa8>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <SysClockConfig+0xa8>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6093      	str	r3, [r2, #8]
//	while(!(RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800053e:	bf00      	nop
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <SysClockConfig+0xa8>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f003 030c 	and.w	r3, r3, #12
 8000548:	2b08      	cmp	r3, #8
 800054a:	d1f9      	bne.n	8000540 <SysClockConfig+0x90>

}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800
 800055c:	40007000 	.word	0x40007000
 8000560:	40023c00 	.word	0x40023c00
 8000564:	00402a19 	.word	0x00402a19

08000568 <I2C1_Config>:
void I2C1_Write(uint8_t data);
void I2C1_Address(uint8_t Address);
void I2C1_Stop(void);
void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size);

void I2C1_Config(void) {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

	/* 1. Enable the I2C CLOCK and GPIO CLOCK */
	RCC->APB1ENR |= (1 << 21); // ENABLE I2C1 Clock
 800056c:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <I2C1_Config+0xa0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a25      	ldr	r2, [pc, #148]	@ (8000608 <I2C1_Config+0xa0>)
 8000572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= (1 << 1); // ENABLE GPIOB Clock (SCL: PB6 SDA: PB7)
 8000578:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <I2C1_Config+0xa0>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <I2C1_Config+0xa0>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30

	/* 2. Configure the I2C PINs for ALternate Functions */
	GPIOB->MODER |= (2 << 12) | (2 << 14);// Alternate Function of PB6 & PB7 in MODER Register
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <I2C1_Config+0xa4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a20      	ldr	r2, [pc, #128]	@ (800060c <I2C1_Config+0xa4>)
 800058a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800058e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1 << 6) | (1 << 7);	//Open Drain Output of PB6 & PB7
 8000590:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <I2C1_Config+0xa4>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <I2C1_Config+0xa4>)
 8000596:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800059a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3 << 12) | (3 << 14);//High SPEED for the Pins PB6 & PB7
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <I2C1_Config+0xa4>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <I2C1_Config+0xa4>)
 80005a2:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80005a6:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1 << 12) | (1 << 14);//Pull-up for both the Pins PB6 & PB7
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <I2C1_Config+0xa4>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a17      	ldr	r2, [pc, #92]	@ (800060c <I2C1_Config+0xa4>)
 80005ae:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80005b2:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= (4 << 24) | (4 << 28);	//Configure the Alternate Function in AFR Register
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <I2C1_Config+0xa4>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <I2C1_Config+0xa4>)
 80005ba:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80005be:	6213      	str	r3, [r2, #32]

	/* 3. Reset the I2C */
	I2C1->CR1 |= (1 << 15);
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <I2C1_Config+0xa8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <I2C1_Config+0xa8>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <I2C1_Config+0xa8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <I2C1_Config+0xa8>)
 80005d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005d6:	6013      	str	r3, [r2, #0]

	/* 4. Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings */
	I2C1->CR2 |= (42 << 0); // PCLK1 FREQUENCY in MHz
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <I2C1_Config+0xa8>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <I2C1_Config+0xa8>)
 80005de:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 80005e2:	6053      	str	r3, [r2, #4]

	/* 5. Configure the clock control registers */
	I2C1->CCR = 210 << 0;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <I2C1_Config+0xa8>)
 80005e6:	22d2      	movs	r2, #210	@ 0xd2
 80005e8:	61da      	str	r2, [r3, #28]

	/* 6. Configure the rise time register */
	I2C1->TRISE = 43;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <I2C1_Config+0xa8>)
 80005ec:	222b      	movs	r2, #43	@ 0x2b
 80005ee:	621a      	str	r2, [r3, #32]

	/* 7. Program the I2C_CR1 register to enable the peripheral */
	I2C1->CR1 |= (1 << 0); // Enable I2C
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <I2C1_Config+0xa8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <I2C1_Config+0xa8>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020400 	.word	0x40020400
 8000610:	40005400 	.word	0x40005400

08000614 <I2C1_Start>:

void I2C1_Start(void) {
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	/* 1. Enable the ACK */
	I2C1->CR1 |= (1 << 10);  // Enable the ACK
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <I2C1_Start+0x38>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <I2C1_Start+0x38>)
 800061e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000622:	6013      	str	r3, [r2, #0]

	/* 2. Send the START condition */
	I2C1->CR1 |= (1 << 8);  // Generate START
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <I2C1_Start+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a08      	ldr	r2, [pc, #32]	@ (800064c <I2C1_Start+0x38>)
 800062a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800062e:	6013      	str	r3, [r2, #0]

	/* 3. Wait for the SB ( Bit 0 in SR1) to set means the start condition is generated */
	while (!(I2C1->SR1 & (1 << 0)))
 8000630:	bf00      	nop
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <I2C1_Start+0x38>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f9      	beq.n	8000632 <I2C1_Start+0x1e>
		;
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40005400 	.word	0x40005400

08000650 <I2C1_Write>:

void I2C1_Write(uint8_t data) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty */
	while (!(I2C1->SR1 & (1 << 7)))
 800065a:	bf00      	nop
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <I2C1_Write+0x3c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0f9      	beq.n	800065c <I2C1_Write+0xc>
		;
	/* 2. Send the DATA to the DR Register */
	I2C1->DR = data;
 8000668:	4a08      	ldr	r2, [pc, #32]	@ (800068c <I2C1_Write+0x3c>)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	6113      	str	r3, [r2, #16]
	/* 3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission */
	while (!(I2C1->SR1 & (1 << 2)))
 800066e:	bf00      	nop
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <I2C1_Write+0x3c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f9      	beq.n	8000670 <I2C1_Write+0x20>
		;
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40005400 	.word	0x40005400

08000690 <I2C1_Address>:

void I2C1_Address(uint8_t Address) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	/* 1. Send the Slave Address to the DR Register */
	I2C1->DR = Address;
 800069a:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <I2C1_Address+0x3c>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	6113      	str	r3, [r2, #16]
	/* 2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission */
	while (!(I2C1->SR1 & (1 << 1)));
 80006a0:	bf00      	nop
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <I2C1_Address+0x3c>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <I2C1_Address+0x12>
	/* 3. clear the ADDR by reading the SR1 and SR2 */
	uint8_t temp = I2C1->SR1 | I2C1->SR2;
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <I2C1_Address+0x3c>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <I2C1_Address+0x3c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	73fb      	strb	r3, [r7, #15]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40005400 	.word	0x40005400

080006d0 <I2C1_Stop>:

void I2C1_Stop(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9); // Stop I2C
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <I2C1_Stop+0x1c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <I2C1_Stop+0x1c>)
 80006da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40005400 	.word	0x40005400

080006f0 <I2C1_Read>:

void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size) {
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	 f) To generate the nonacknowledge pulse after the last received data byte, the ACK bit must be cleared just after reading the
	 second last data byte (after second last RxNE event)
	 g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
	 after reading the second last data byte (after the second last RxNE event)
	 */
	int remaining = size;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	60fb      	str	r3, [r7, #12]

	/**** STEP 1 ****/
	if (size == 1) {
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d12f      	bne.n	800076a <I2C1_Read+0x7a>
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 800070a:	4a4b      	ldr	r2, [pc, #300]	@ (8000838 <I2C1_Read+0x148>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 8000710:	bf00      	nop
 8000712:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <I2C1_Read+0x148>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f9      	beq.n	8000712 <I2C1_Read+0x22>
			;  // wait for ADDR bit to set

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 800071e:	4b46      	ldr	r3, [pc, #280]	@ (8000838 <I2C1_Read+0x148>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a45      	ldr	r2, [pc, #276]	@ (8000838 <I2C1_Read+0x148>)
 8000724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000728:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 800072a:	4b43      	ldr	r3, [pc, #268]	@ (8000838 <I2C1_Read+0x148>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <I2C1_Read+0x148>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 800073a:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <I2C1_Read+0x148>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a3e      	ldr	r2, [pc, #248]	@ (8000838 <I2C1_Read+0x148>)
 8000740:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000744:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1 << 6)))
 8000746:	bf00      	nop
 8000748:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <I2C1_Read+0x148>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f9      	beq.n	8000748 <I2C1_Read+0x58>
			;  // wait for RxNE to set

		/**** STEP 1-d ****/
		buffer[size - remaining] = I2C1->DR; // Read the data from the DATA REGISTER
 8000754:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <I2C1_Read+0x148>)
 8000756:	6919      	ldr	r1, [r3, #16]
 8000758:	79ba      	ldrb	r2, [r7, #6]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	461a      	mov	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	b2ca      	uxtb	r2, r1
 8000766:	701a      	strb	r2, [r3, #0]
		while (!(I2C1->SR1 & (1 << 6)))
			;  // wait for RxNE to set
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 8000768:	e060      	b.n	800082c <I2C1_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 800076a:	4a33      	ldr	r2, [pc, #204]	@ (8000838 <I2C1_Read+0x148>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 8000770:	bf00      	nop
 8000772:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <I2C1_Read+0x148>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <I2C1_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <I2C1_Read+0x148>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <I2C1_Read+0x148>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2) {
 800078e:	e019      	b.n	80007c4 <I2C1_Read+0xd4>
			while (!(I2C1->SR1 & (1 << 6)))
 8000790:	bf00      	nop
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <I2C1_Read+0x148>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f9      	beq.n	8000792 <I2C1_Read+0xa2>
			buffer[size - remaining] = I2C1->DR; // copy the data into the buffer
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <I2C1_Read+0x148>)
 80007a0:	6919      	ldr	r1, [r3, #16]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1 << 10; // Set the ACK bit to Acknowledge the data received
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <I2C1_Read+0x148>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <I2C1_Read+0x148>)
 80007b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007bc:	6013      	str	r3, [r2, #0]
			remaining--;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
		while (remaining > 2) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	dce2      	bgt.n	8000790 <I2C1_Read+0xa0>
		while (!(I2C1->SR1 & (1 << 6)))
 80007ca:	bf00      	nop
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <I2C1_Read+0x148>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <I2C1_Read+0xdc>
		buffer[size - remaining] = I2C1->DR;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <I2C1_Read+0x148>)
 80007da:	6919      	ldr	r1, [r3, #16]
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	b2ca      	uxtb	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <I2C1_Read+0x148>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <I2C1_Read+0x148>)
 80007f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007f6:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <I2C1_Read+0x148>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <I2C1_Read+0x148>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000802:	6013      	str	r3, [r2, #0]
		remaining--;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3b01      	subs	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1 << 6)))
 800080a:	bf00      	nop
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <I2C1_Read+0x148>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f9      	beq.n	800080c <I2C1_Read+0x11c>
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <I2C1_Read+0x148>)
 800081a:	6919      	ldr	r1, [r3, #16]
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	461a      	mov	r2, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	b2ca      	uxtb	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40005400 	.word	0x40005400

0800083c <TIM9Config>:
void TIM9Config(void);
void Delay_us (uint16_t us);
void Delay_ms (uint16_t ms);

void TIM9Config(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	/* 1) Enable Timer Clock*/
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN; // Enable timer 9 clock
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <TIM9Config+0x44>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000844:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <TIM9Config+0x44>)
 8000846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800084a:	6453      	str	r3, [r2, #68]	@ 0x44

	/* 2) Set the prescalar and the ARR*/
	TIM9->PSC = 84-1; // 84MHz/84 = 1MHz ~ 1us delay
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <TIM9Config+0x48>)
 800084e:	2253      	movs	r2, #83	@ 0x53
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM9->ARR = 0xFFFF;// Max ARR value
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <TIM9Config+0x48>)
 8000854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* 3) Enable the Timer, and wait for the update Flag to set*/
	TIM9->CR1 |= (1<<0); //Enable the Counter
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <TIM9Config+0x48>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <TIM9Config+0x48>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6013      	str	r3, [r2, #0]
	while(!(TIM9->SR & (1<<0))); //Update interrupt flag
 8000866:	bf00      	nop
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <TIM9Config+0x48>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f9      	beq.n	8000868 <TIM9Config+0x2c>
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40023800 	.word	0x40023800
 8000884:	40014000 	.word	0x40014000

08000888 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	/* 1) RESET the Counter */
	TIM9->CNT = 0;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <Delay_us+0x2c>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
	/* 2) Wait for the Counter to reach the entered value. each count would be 1us */
	while(TIM9->CNT < us);
 8000898:	bf00      	nop
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <Delay_us+0x2c>)
 800089c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d3fa      	bcc.n	800089a <Delay_us+0x12>

}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40014000 	.word	0x40014000

080008b8 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ms; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	81fb      	strh	r3, [r7, #14]
 80008c6:	e006      	b.n	80008d6 <Delay_ms+0x1e>
	{
		Delay_us(1000); //Delay of 1ms
 80008c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008cc:	f7ff ffdc 	bl	8000888 <Delay_us>
	for (uint16_t i = 0; i < ms; i++)
 80008d0:	89fb      	ldrh	r3, [r7, #14]
 80008d2:	3301      	adds	r3, #1
 80008d4:	81fb      	strh	r3, [r7, #14]
 80008d6:	89fa      	ldrh	r2, [r7, #14]
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3f4      	bcc.n	80008c8 <Delay_ms+0x10>
	}
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <write8>:
void getRGB(int *R, int *G, int *B);


/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 8000904:	f7ff fe86 	bl	8000614 <I2C1_Start>
	I2C1_Address(TCS34725_ADDRESS);
 8000908:	2052      	movs	r0, #82	@ 0x52
 800090a:	f7ff fec1 	bl	8000690 <I2C1_Address>
	I2C1_Write(txBuffer[0]);
 800090e:	7b3b      	ldrb	r3, [r7, #12]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe9d 	bl	8000650 <I2C1_Write>
	I2C1_Write(txBuffer[1]);
 8000916:	7b7b      	ldrb	r3, [r7, #13]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe99 	bl	8000650 <I2C1_Write>
	I2C1_Stop();
 800091e:	f7ff fed7 	bl	80006d0 <I2C1_Stop>
//    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg) {
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800093a:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[1];

    I2C1_Start();                                // Generate start condition
 800093c:	f7ff fe6a 	bl	8000614 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 8000940:	2052      	movs	r0, #82	@ 0x52
 8000942:	f7ff fea5 	bl	8000690 <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe81 	bl	8000650 <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 800094e:	f7ff febf 	bl	80006d0 <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 8000952:	f7ff fe5f 	bl	8000614 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 1); // Read 1 byte
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2201      	movs	r2, #1
 800095c:	4619      	mov	r1, r3
 800095e:	2053      	movs	r0, #83	@ 0x53
 8000960:	f7ff fec6 	bl	80006f0 <I2C1_Read>
    return rxBuffer[0];
 8000964:	7b3b      	ldrb	r3, [r7, #12]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <read16>:


/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg) {
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800097e:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[2];

    I2C1_Start();                                // Generate start condition
 8000980:	f7ff fe48 	bl	8000614 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 8000984:	2052      	movs	r0, #82	@ 0x52
 8000986:	f7ff fe83 	bl	8000690 <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe5f 	bl	8000650 <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 8000992:	f7ff fe9d 	bl	80006d0 <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 8000996:	f7ff fe3d 	bl	8000614 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 2); // Read 2 bytes
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2202      	movs	r2, #2
 80009a0:	4619      	mov	r1, r3
 80009a2:	2053      	movs	r0, #83	@ 0x53
 80009a4:	f7ff fea4 	bl	80006f0 <I2C1_Read>

    uint16_t ret = (rxBuffer[1] << 8) | rxBuffer[0];
 80009a8:	7a7b      	ldrb	r3, [r7, #9]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	7a3b      	ldrb	r3, [r7, #8]
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	81bb      	strh	r3, [r7, #12]
    return ret;
 80009b8:	89bb      	ldrh	r3, [r7, #12]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <enable>:


void enable(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 80009c6:	2101      	movs	r1, #1
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff8d 	bl	80008e8 <write8>
  Delay_ms (3);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff ff72 	bl	80008b8 <Delay_ms>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80009d4:	2103      	movs	r1, #3
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff ff86 	bl	80008e8 <write8>
  Delay_ms (50);
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f7ff ff6b 	bl	80008b8 <Delay_ms>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <setIntegrationTime+0x28>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <setIntegrationTime+0x16>
 80009fa:	f000 f821 	bl	8000a40 <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff ff70 	bl	80008e8 <write8>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000024 	.word	0x20000024

08000a14 <setGain>:

void setGain(uint8_t gain)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <setGain+0x28>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <setGain+0x16>
 8000a26:	f000 f80b 	bl	8000a40 <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff ff5a 	bl	80008e8 <write8>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000024 	.word	0x20000024

08000a40 <tcs3272_init>:

void tcs3272_init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  readValue = read8(TCS34725_ID);
 8000a44:	2012      	movs	r0, #18
 8000a46:	f7ff ff70 	bl	800092a <read8>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <tcs3272_init+0x40>)
 8000a50:	701a      	strb	r2, [r3, #0]
  if ((readValue != 0x44) && (readValue != 0x4d))
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <tcs3272_init+0x40>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b44      	cmp	r3, #68	@ 0x44
 8000a58:	d003      	beq.n	8000a62 <tcs3272_init+0x22>
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <tcs3272_init+0x40>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a60:	d10b      	bne.n	8000a7a <tcs3272_init+0x3a>
  {

    return;
  }
  _tcs34725Initialised = 1;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <tcs3272_init+0x44>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 8000a68:	20eb      	movs	r0, #235	@ 0xeb
 8000a6a:	f7ff ffbd 	bl	80009e8 <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff ffd0 	bl	8000a14 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 8000a74:	f7ff ffa5 	bl	80009c2 <enable>
 8000a78:	e000      	b.n	8000a7c <tcs3272_init+0x3c>
    return;
 8000a7a:	bf00      	nop
}
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000034 	.word	0x20000034
 8000a84:	20000024 	.word	0x20000024

08000a88 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <getRawData+0x5c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <getRawData+0x1a>
 8000a9e:	f7ff ffcf 	bl	8000a40 <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f7ff ff63 	bl	800096e <read16>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 8000ab0:	2016      	movs	r0, #22
 8000ab2:	f7ff ff5c 	bl	800096e <read16>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 8000abe:	2018      	movs	r0, #24
 8000ac0:	f7ff ff55 	bl	800096e <read16>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 8000acc:	201a      	movs	r0, #26
 8000ace:	f7ff ff4e 	bl	800096e <read16>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
//  Delay_ms (50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000024 	.word	0x20000024

08000ae8 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
void getRGB(int *R, int *G, int *B)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	f107 0212 	add.w	r2, r7, #18
 8000afc:	f107 0114 	add.w	r1, r7, #20
 8000b00:	f107 0016 	add.w	r0, r7, #22
 8000b04:	f7ff ffc0 	bl	8000a88 <getRawData>
    if(rawClear == 0)
 8000b08:	8a3b      	ldrh	r3, [r7, #16]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d109      	bne.n	8000b22 <getRGB+0x3a>
    {
      *R = 0;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
      *G = 0;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
      *B = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
    {
      *R = (int)rawRed * 255 / rawClear;
      *G = (int)rawGreen * 255 / rawClear;
      *B = (int)rawBlue * 255 / rawClear;
    }
}
 8000b20:	e01d      	b.n	8000b5e <getRGB+0x76>
      *R = (int)rawRed * 255 / rawClear;
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	8a3a      	ldrh	r2, [r7, #16]
 8000b2e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	8a3a      	ldrh	r2, [r7, #16]
 8000b42:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 8000b4a:	8a7b      	ldrh	r3, [r7, #18]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4613      	mov	r3, r2
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	8a3a      	ldrh	r2, [r7, #16]
 8000b56:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Pin_config>:
 */

#ifndef INC_SYSTEM_H_
#define INC_SYSTEM_H_

void Pin_config(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0b111; // Enable GPIOA, GPIOB and GPIOC clocks
 8000b6c:	4b65      	ldr	r3, [pc, #404]	@ (8000d04 <Pin_config+0x19c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a64      	ldr	r2, [pc, #400]	@ (8000d04 <Pin_config+0x19c>)
 8000b72:	f043 0307 	orr.w	r3, r3, #7
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER &= ~(0b11 << 26); // Clear mode bits for PC13
 8000b78:	4b63      	ldr	r3, [pc, #396]	@ (8000d08 <Pin_config+0x1a0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a62      	ldr	r2, [pc, #392]	@ (8000d08 <Pin_config+0x1a0>)
 8000b7e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000b82:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 26);  // Set PC13 as output (0b01)
 8000b84:	4b60      	ldr	r3, [pc, #384]	@ (8000d08 <Pin_config+0x1a0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a5f      	ldr	r2, [pc, #380]	@ (8000d08 <Pin_config+0x1a0>)
 8000b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b8e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << 13); // Clear bit 13 for push-pull
 8000b90:	4b5d      	ldr	r3, [pc, #372]	@ (8000d08 <Pin_config+0x1a0>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4a5c      	ldr	r2, [pc, #368]	@ (8000d08 <Pin_config+0x1a0>)
 8000b96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b9a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(0b11 << 26); // Clear speed bits (low speed)
 8000b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8000d08 <Pin_config+0x1a0>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4a59      	ldr	r2, [pc, #356]	@ (8000d08 <Pin_config+0x1a0>)
 8000ba2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000ba6:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(0b11 << 26); // No pull-up, no pull-down
 8000ba8:	4b57      	ldr	r3, [pc, #348]	@ (8000d08 <Pin_config+0x1a0>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a56      	ldr	r2, [pc, #344]	@ (8000d08 <Pin_config+0x1a0>)
 8000bae:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000bb2:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear mode bits
 8000bb4:	4b55      	ldr	r3, [pc, #340]	@ (8000d0c <Pin_config+0x1a4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a54      	ldr	r2, [pc, #336]	@ (8000d0c <Pin_config+0x1a4>)
 8000bba:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000bbe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (3 * 2)) | (0b01 << (4 * 2)) | (0b01 << (5 * 2)));  // Set mode to output (0b01)
 8000bc0:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <Pin_config+0x1a4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a51      	ldr	r2, [pc, #324]	@ (8000d0c <Pin_config+0x1a4>)
 8000bc6:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000bca:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 3) | (1 << 4) | (1 << 5)); // Clear bits for Push-Pull
 8000bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8000d0c <Pin_config+0x1a4>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8000d0c <Pin_config+0x1a4>)
 8000bd2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000bd6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear speed bits
 8000bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8000d0c <Pin_config+0x1a4>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8000d0c <Pin_config+0x1a4>)
 8000bde:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000be2:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // No pull-up, no pull-down
 8000be4:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <Pin_config+0x1a4>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a48      	ldr	r2, [pc, #288]	@ (8000d0c <Pin_config+0x1a4>)
 8000bea:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000bee:	60d3      	str	r3, [r2, #12]

    // Configure PA10 as Alternate Function (TIM1_CH3)
    GPIOA->MODER &= ~(0b11 << (10 * 2)); // Clear mode bits for PA10
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <Pin_config+0x1a8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a46      	ldr	r2, [pc, #280]	@ (8000d10 <Pin_config+0x1a8>)
 8000bf6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000bfa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (10 * 2));  // Set PA10 to Alternate Function mode
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <Pin_config+0x1a8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a43      	ldr	r2, [pc, #268]	@ (8000d10 <Pin_config+0x1a8>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c06:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((10 - 8) * 4)); // Clear AF bits for PA10
 8000c08:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <Pin_config+0x1a8>)
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <Pin_config+0x1a8>)
 8000c0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c12:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((10 - 8) * 4));  // Set AF1 (TIM1_CH3)
 8000c14:	4b3e      	ldr	r3, [pc, #248]	@ (8000d10 <Pin_config+0x1a8>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <Pin_config+0x1a8>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA11 as Alternate Function (TIM1_CH4)
    GPIOA->MODER &= ~(0b11 << (11 * 2)); // Clear mode bits for PA11
 8000c20:	4b3b      	ldr	r3, [pc, #236]	@ (8000d10 <Pin_config+0x1a8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3a      	ldr	r2, [pc, #232]	@ (8000d10 <Pin_config+0x1a8>)
 8000c26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c2a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (11 * 2));  // Set PA11 to Alternate Function mode
 8000c2c:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <Pin_config+0x1a8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a37      	ldr	r2, [pc, #220]	@ (8000d10 <Pin_config+0x1a8>)
 8000c32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c36:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((11 - 8) * 4)); // Clear AF bits for PA11
 8000c38:	4b35      	ldr	r3, [pc, #212]	@ (8000d10 <Pin_config+0x1a8>)
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	4a34      	ldr	r2, [pc, #208]	@ (8000d10 <Pin_config+0x1a8>)
 8000c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c42:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((11 - 8) * 4));  // Set AF1 (TIM1_CH4)
 8000c44:	4b32      	ldr	r3, [pc, #200]	@ (8000d10 <Pin_config+0x1a8>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c48:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <Pin_config+0x1a8>)
 8000c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA8 and PA9 as outputs
	GPIOA->MODER &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Clear mode bits for PA8, PA9
 8000c50:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <Pin_config+0x1a8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a2e      	ldr	r2, [pc, #184]	@ (8000d10 <Pin_config+0x1a8>)
 8000c56:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((0b01 << (8 * 2)) | (0b01 << (9 * 2))); // Set PA8, PA9 as General-purpose output mode (0b01)
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <Pin_config+0x1a8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a2b      	ldr	r2, [pc, #172]	@ (8000d10 <Pin_config+0x1a8>)
 8000c62:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000c66:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~((1 << 8) | (1 << 9)); // Set Push-Pull mode for PA8, PA9
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <Pin_config+0x1a8>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <Pin_config+0x1a8>)
 8000c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c72:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Low speed for PA8, PA9
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <Pin_config+0x1a8>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	4a25      	ldr	r2, [pc, #148]	@ (8000d10 <Pin_config+0x1a8>)
 8000c7a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c7e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // No pull-up, no pull-down for PA8, PA9
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <Pin_config+0x1a8>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <Pin_config+0x1a8>)
 8000c86:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c8a:	60d3      	str	r3, [r2, #12]

	// Configure PB14 and PB15 as outputs
	GPIOB->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PB14, PB15
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <Pin_config+0x1a4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <Pin_config+0x1a4>)
 8000c92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c96:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (14 * 2)) | (0b01 << (15 * 2))); // Set PB14, PB15 as General-purpose output mode (0b01)
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <Pin_config+0x1a4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <Pin_config+0x1a4>)
 8000c9e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000ca2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 14) | (1 << 15)); // Set Push-Pull mode for PB14, PB15
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <Pin_config+0x1a4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a18      	ldr	r2, [pc, #96]	@ (8000d0c <Pin_config+0x1a4>)
 8000caa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cae:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Low speed for PB14, PB15
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <Pin_config+0x1a4>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <Pin_config+0x1a4>)
 8000cb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000cba:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2)));   // No pull-up, no pull-down for PB14, PB15
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <Pin_config+0x1a4>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <Pin_config+0x1a4>)
 8000cc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000cc6:	60d3      	str	r3, [r2, #12]

	// Configure PB2 and PB10 as inputs
	GPIOB->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // Clear mode bits for PB2 and PB10
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <Pin_config+0x1a4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <Pin_config+0x1a4>)
 8000cce:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000cd2:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // No pull-up, no pull-down (default)
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <Pin_config+0x1a4>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d0c <Pin_config+0x1a4>)
 8000cda:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000cde:	60d3      	str	r3, [r2, #12]

    // Configure PC14 and PC15 as inputs
    GPIOC->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PC14 and PC15
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <Pin_config+0x1a0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <Pin_config+0x1a0>)
 8000ce6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000cea:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // No pull-up, no pull-down (default)
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Pin_config+0x1a0>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <Pin_config+0x1a0>)
 8000cf2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020000 	.word	0x40020000

08000d14 <Configure_TIM1_PWM>:

void Configure_TIM1_PWM(void) {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= (1 << 0); // Enable TIM1 clock (bit 0)
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <Configure_TIM1_PWM+0x90>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <Configure_TIM1_PWM+0x90>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure TIM1 for PWM mode
    TIM1->PSC = 4 - 1;       // Prescaler: 16 MHz / 16 = 1 MHz timer clock
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d26:	2203      	movs	r2, #3
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 20000 - 1;    // Auto-reload: 1 MHz / 20000 = 50 Hz PWM frequency
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d2c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode 1 and enable preload
    TIM1->CCMR2 &= ~((0b111 << 4) | (0b111 << 12)); // Clear OC3M and OC4M bits
 8000d32:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d40:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 4);  // PWM mode 1 on Channel 3 (PA10)
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d4c:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 12); // PWM mode 1 on Channel 4 (PA11)
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a15      	ldr	r2, [pc, #84]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d54:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000d58:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (1 << 3) | (1 << 11); // Enable preload for CCR3 and CCR4 (OC3PE and OC4PE)
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	61d3      	str	r3, [r2, #28]

    // Enable channels
    TIM1->CCER |= (1 << 8);  // Enable Channel 3 output (PA10)
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= (1 << 12); // Enable Channel 4 output (PA11)
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d80:	6213      	str	r3, [r2, #32]

    // Enable main output (MOE)
    TIM1->BDTR |= (1 << 15);
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d8c:	6453      	str	r3, [r2, #68]	@ 0x44

    // Start TIM1
    TIM1->CR1 |= (1 << 0); // Enable TIM1 counter
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <Configure_TIM1_PWM+0x94>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40010000 	.word	0x40010000

08000dac <Configure_TIM2>:

void Configure_TIM2(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1 << 0); // TIM2 clock enable
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <Configure_TIM2+0x54>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <Configure_TIM2+0x54>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM2 for 1 Hz (1-second period)
    TIM2->PSC = 144 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 8000dbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc0:	228f      	movs	r2, #143	@ 0x8f
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	60d3      	str	r3, [r2, #12]

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN; // Enable counter
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt in NVIC
    NVIC_SetPriority(TIM2_IRQn, 9); // Set interrupt priority
 8000dee:	2109      	movs	r1, #9
 8000df0:	201c      	movs	r0, #28
 8000df2:	f7ff fa0d 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000df6:	201c      	movs	r0, #28
 8000df8:	f7ff f9ec 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800

08000e04 <Configure_TIM3>:

void Configure_TIM3(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    // Enable TIM3 clock
    RCC->APB1ENR |= (1 << 1); // TIM3 clock enable
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <Configure_TIM3+0x48>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <Configure_TIM3+0x48>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM3 for 1 Hz (1-second period)
    TIM3->PSC = 84 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e16:	2253      	movs	r2, #83	@ 0x53
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	60d3      	str	r3, [r2, #12]

    // Enable TIM3
    TIM3->CR1 |= TIM_CR1_CEN; // Enable counter
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <Configure_TIM3+0x4c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6013      	str	r3, [r2, #0]

    // Enable TIM3 interrupt in NVIC
    NVIC_SetPriority(TIM3_IRQn, 9); // Set interrupt priority
 8000e3a:	2109      	movs	r1, #9
 8000e3c:	201d      	movs	r0, #29
 8000e3e:	f7ff f9e7 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8000e42:	201d      	movs	r0, #29
 8000e44:	f7ff f9c6 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40000400 	.word	0x40000400

08000e54 <Configure_USART2>:

volatile uint8_t *txBuffer; // Pointer to transmission buffer
volatile uint16_t txSize;   // Size of the transmission buffer
volatile uint16_t txIndex;  // Current index of transmission

void Configure_USART2(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
//    NVIC_SetPriority(USART2_IRQn, 1); // Priority level 1
//    NVIC_EnableIRQ(USART2_IRQn);      // Enable interrupt for USART2


	// Step 1: Enable USART2 clock and GPIOA clock
	    RCC->APB1ENR |= (1 << 17); // Enable USART2 clock
 8000e58:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <Configure_USART2+0xd0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <Configure_USART2+0xd0>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40

	    // Step 2: Configure PA2 (USART2_TX) and PA3 (USART2_RX) as Alternate Function
	    GPIOA->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2))); // Clear mode bits for PA2 and PA3
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2f      	ldr	r2, [pc, #188]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e6e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2)));  // Set to Alternate Function mode
 8000e70:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2c      	ldr	r2, [pc, #176]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e76:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000e7a:	6013      	str	r3, [r2, #0]

	    GPIOA->AFR[0] &= ~((0b1111 << (2 * 4)) | (0b1111 << (3 * 4))); // Clear AF bits for PA2 and PA3
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a29      	ldr	r2, [pc, #164]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000e86:	6213      	str	r3, [r2, #32]
	    GPIOA->AFR[0] |= ((0b0111 << (2 * 4)) | (0b0111 << (3 * 4)));  // Set AF7 (USART2)
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e8e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000e92:	6213      	str	r3, [r2, #32]

	    GPIOA->OTYPER &= ~((1 << 2) | (1 << 3)); // Push-Pull
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <Configure_USART2+0xd4>)
 8000e9a:	f023 030c 	bic.w	r3, r3, #12
 8000e9e:	6053      	str	r3, [r2, #4]
	    GPIOA->OSPEEDR |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2))); // High speed
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <Configure_USART2+0xd4>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <Configure_USART2+0xd4>)
 8000ea6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000eaa:	6093      	str	r3, [r2, #8]
	    GPIOA->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2)));   // Clear pull-up/pull-down
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <Configure_USART2+0xd4>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <Configure_USART2+0xd4>)
 8000eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000eb6:	60d3      	str	r3, [r2, #12]
	    GPIOA->PUPDR |= ((0b01 << (2 * 2)) | (0b01 << (3 * 2)));    // Enable pull-up resistors
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <Configure_USART2+0xd4>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f28 <Configure_USART2+0xd4>)
 8000ebe:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000ec2:	60d3      	str	r3, [r2, #12]

	    // Step 3: Configure USART2
	    USART2->CR1 = 0; // Reset control register
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]

	    // Configure baud rate (115200, assuming PCLK1 = 84 MHz)
	    USART2->BRR = 0x016C; // BRR = 729 (115200 baud)
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ecc:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8000ed0:	609a      	str	r2, [r3, #8]

	    // Configure word length: 8 bits
	    USART2->CR1 &= ~(1 << 12); // M = 0 (8 data bits)
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000edc:	60d3      	str	r3, [r2, #12]

	    // Configure stop bits: 1 stop bit
	    USART2->CR2 &= ~(0b11 << 12); // STOP = 0b00 (1 stop bit)
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ee4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ee8:	6113      	str	r3, [r2, #16]

	    // Configure parity: None
	    USART2->CR1 &= ~(1 << 10); // PCE = 0 (Parity Control Enable = disabled)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <Configure_USART2+0xd8>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a0f      	ldr	r2, [pc, #60]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ef4:	60d3      	str	r3, [r2, #12]

	    // Enable transmitter and receiver
	    USART2->CR1 |= (1 << 3); // TE = 1 (Transmitter Enable)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <Configure_USART2+0xd8>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	4a0c      	ldr	r2, [pc, #48]	@ (8000f2c <Configure_USART2+0xd8>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	60d3      	str	r3, [r2, #12]
	    USART2->CR1 |= (1 << 2); // RE = 1 (Receiver Enable)
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Configure_USART2+0xd8>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	4a09      	ldr	r2, [pc, #36]	@ (8000f2c <Configure_USART2+0xd8>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	60d3      	str	r3, [r2, #12]

	    // Enable USART2
	    USART2->CR1 |= (1 << 13); // UE = 1 (USART Enable)
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Configure_USART2+0xd8>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <Configure_USART2+0xd8>)
 8000f14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f18:	60d3      	str	r3, [r2, #12]

	    NVIC_EnableIRQ(USART2_IRQn);
 8000f1a:	2026      	movs	r0, #38	@ 0x26
 8000f1c:	f7ff f95a 	bl	80001d4 <__NVIC_EnableIRQ>

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40004400 	.word	0x40004400

08000f30 <main>:
uint32_t tick;
char rxBuf[50];
uint8_t redcnt;
uint8_t runflag = 0;

int main(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	uint32_t timer = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]

	SysClockConfig();
 8000f3a:	f7ff fab9 	bl	80004b0 <SysClockConfig>
	Pin_config();
 8000f3e:	f7ff fe13 	bl	8000b68 <Pin_config>
	Configure_TIM2();
 8000f42:	f7ff ff33 	bl	8000dac <Configure_TIM2>
	Configure_TIM3();
 8000f46:	f7ff ff5d 	bl	8000e04 <Configure_TIM3>
	Configure_TIM1_PWM();
 8000f4a:	f7ff fee3 	bl	8000d14 <Configure_TIM1_PWM>
	TIM9Config();
 8000f4e:	f7ff fc75 	bl	800083c <TIM9Config>
	I2C1_Config();
 8000f52:	f7ff fb09 	bl	8000568 <I2C1_Config>
	tcs3272_init();
 8000f56:	f7ff fd73 	bl	8000a40 <tcs3272_init>
	Configure_USART2();
 8000f5a:	f7ff ff7b 	bl	8000e54 <Configure_USART2>

	Seg1Value = 0;
 8000f5e:	4b78      	ldr	r3, [pc, #480]	@ (8001140 <main+0x210>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
	Seg2Value = 0;
 8000f64:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <main+0x214>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
	linedetected_delay = tick;
 8000f6a:	4b77      	ldr	r3, [pc, #476]	@ (8001148 <main+0x218>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b76      	ldr	r3, [pc, #472]	@ (800114c <main+0x21c>)
 8000f72:	801a      	strh	r2, [r3, #0]

	while (1) {

		if (tick - timer > 50) {
 8000f74:	4b74      	ldr	r3, [pc, #464]	@ (8001148 <main+0x218>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b32      	cmp	r3, #50	@ 0x32
 8000f7e:	d907      	bls.n	8000f90 <main+0x60>
			getRGB(&red, &green, &blue);
 8000f80:	4a73      	ldr	r2, [pc, #460]	@ (8001150 <main+0x220>)
 8000f82:	4974      	ldr	r1, [pc, #464]	@ (8001154 <main+0x224>)
 8000f84:	4874      	ldr	r0, [pc, #464]	@ (8001158 <main+0x228>)
 8000f86:	f7ff fdaf 	bl	8000ae8 <getRGB>
			timer = tick;
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001148 <main+0x218>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	607b      	str	r3, [r7, #4]
		}
//
		if (PB1) {
 8000f90:	4b72      	ldr	r3, [pc, #456]	@ (800115c <main+0x22c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d016      	beq.n	8000fcc <main+0x9c>
			runflag = !runflag;
 8000f9e:	4b70      	ldr	r3, [pc, #448]	@ (8001160 <main+0x230>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b6c      	ldr	r3, [pc, #432]	@ (8001160 <main+0x230>)
 8000fb0:	701a      	strb	r2, [r3, #0]
			while (PB1);
 8000fb2:	bf00      	nop
 8000fb4:	4b69      	ldr	r3, [pc, #420]	@ (800115c <main+0x22c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f8      	bne.n	8000fb4 <main+0x84>
			linedetected_delay = tick;
 8000fc2:	4b61      	ldr	r3, [pc, #388]	@ (8001148 <main+0x218>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b60      	ldr	r3, [pc, #384]	@ (800114c <main+0x21c>)
 8000fca:	801a      	strh	r2, [r3, #0]
		}

		if (runflag) {
 8000fcc:	4b64      	ldr	r3, [pc, #400]	@ (8001160 <main+0x230>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0cf      	beq.n	8000f74 <main+0x44>

			if (tick - linedetected_delay < 2020) {
 8000fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8001148 <main+0x218>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a5c      	ldr	r2, [pc, #368]	@ (800114c <main+0x21c>)
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	f240 72e3 	movw	r2, #2019	@ 0x7e3
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d80a      	bhi.n	8000ffc <main+0xcc>
				Motor(LEFT_MOTOR, 10500);
 8000fe6:	f642 1104 	movw	r1, #10500	@ 0x2904
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fa08 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 10000);
 8000ff0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fa03 	bl	8000400 <Motor>
 8000ffa:	e7bb      	b.n	8000f74 <main+0x44>

			} else if (tick - linedetected_delay < 2520) {
 8000ffc:	4b52      	ldr	r3, [pc, #328]	@ (8001148 <main+0x218>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a52      	ldr	r2, [pc, #328]	@ (800114c <main+0x21c>)
 8001002:	8812      	ldrh	r2, [r2, #0]
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	f640 12d7 	movw	r2, #2519	@ 0x9d7
 800100a:	4293      	cmp	r3, r2
 800100c:	d808      	bhi.n	8001020 <main+0xf0>
				Motor(LEFT_MOTOR, 0);
 800100e:	2100      	movs	r1, #0
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff f9f5 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 0);
 8001016:	2100      	movs	r1, #0
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff f9f1 	bl	8000400 <Motor>
 800101e:	e7a9      	b.n	8000f74 <main+0x44>


			} else if (tick - linedetected_delay < 2840) {
 8001020:	4b49      	ldr	r3, [pc, #292]	@ (8001148 <main+0x218>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a49      	ldr	r2, [pc, #292]	@ (800114c <main+0x21c>)
 8001026:	8812      	ldrh	r2, [r2, #0]
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	f640 3217 	movw	r2, #2839	@ 0xb17
 800102e:	4293      	cmp	r3, r2
 8001030:	d809      	bhi.n	8001046 <main+0x116>

				Motor(LEFT_MOTOR, -10500);
 8001032:	494c      	ldr	r1, [pc, #304]	@ (8001164 <main+0x234>)
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff f9e3 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 10000);
 800103a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff f9de 	bl	8000400 <Motor>
 8001044:	e796      	b.n	8000f74 <main+0x44>

			} else if (tick - linedetected_delay < 3270) {
 8001046:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <main+0x218>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a40      	ldr	r2, [pc, #256]	@ (800114c <main+0x21c>)
 800104c:	8812      	ldrh	r2, [r2, #0]
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	f640 42c5 	movw	r2, #3269	@ 0xcc5
 8001054:	4293      	cmp	r3, r2
 8001056:	d808      	bhi.n	800106a <main+0x13a>
				Motor(LEFT_MOTOR, 0);
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff f9d0 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff f9cc 	bl	8000400 <Motor>
 8001068:	e784      	b.n	8000f74 <main+0x44>
//
			} else if (tick - linedetected_delay < 4020) {
 800106a:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <main+0x218>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a37      	ldr	r2, [pc, #220]	@ (800114c <main+0x21c>)
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	f640 72b3 	movw	r2, #4019	@ 0xfb3
 8001078:	4293      	cmp	r3, r2
 800107a:	d80a      	bhi.n	8001092 <main+0x162>
				Motor(LEFT_MOTOR, 11500);
 800107c:	f642 41ec 	movw	r1, #11500	@ 0x2cec
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff f9bd 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 11000);
 8001086:	f642 21f8 	movw	r1, #11000	@ 0x2af8
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff f9b8 	bl	8000400 <Motor>
 8001090:	e770      	b.n	8000f74 <main+0x44>

			} else if (tick - linedetected_delay < 4520) {
 8001092:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <main+0x218>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <main+0x21c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	f241 12a7 	movw	r2, #4519	@ 0x11a7
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d808      	bhi.n	80010b6 <main+0x186>
				Motor(LEFT_MOTOR, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff f9aa 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff f9a6 	bl	8000400 <Motor>
 80010b4:	e75e      	b.n	8000f74 <main+0x44>

			} else if (tick - linedetected_delay < 4840) {
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <main+0x218>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a24      	ldr	r2, [pc, #144]	@ (800114c <main+0x21c>)
 80010bc:	8812      	ldrh	r2, [r2, #0]
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	f241 22e7 	movw	r2, #4839	@ 0x12e7
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d809      	bhi.n	80010dc <main+0x1ac>
				Motor(LEFT_MOTOR, -10500);
 80010c8:	4926      	ldr	r1, [pc, #152]	@ (8001164 <main+0x234>)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff f998 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 10000);
 80010d0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff f993 	bl	8000400 <Motor>
 80010da:	e74b      	b.n	8000f74 <main+0x44>
//
			} else if (tick - linedetected_delay < 5470) {
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <main+0x218>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <main+0x21c>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	f241 525d 	movw	r2, #5469	@ 0x155d
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d808      	bhi.n	8001100 <main+0x1d0>
				Motor(LEFT_MOTOR, 0);
 80010ee:	2100      	movs	r1, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff f985 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 0);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff f981 	bl	8000400 <Motor>
 80010fe:	e739      	b.n	8000f74 <main+0x44>
//////
			} else if (tick - linedetected_delay < 7470) {
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <main+0x218>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a11      	ldr	r2, [pc, #68]	@ (800114c <main+0x21c>)
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	f641 522d 	movw	r2, #7469	@ 0x1d2d
 800110e:	4293      	cmp	r3, r2
 8001110:	d80a      	bhi.n	8001128 <main+0x1f8>
				Motor(LEFT_MOTOR, 10500);
 8001112:	f642 1104 	movw	r1, #10500	@ 0x2904
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff f972 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 10000);
 800111c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff f96d 	bl	8000400 <Motor>
 8001126:	e725      	b.n	8000f74 <main+0x44>

			} else {
				Motor(LEFT_MOTOR, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff f968 	bl	8000400 <Motor>
				Motor(RIGHT_MOTOR, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff f964 	bl	8000400 <Motor>
				runflag = 0;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <main+0x230>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		if (tick - timer > 50) {
 800113e:	e719      	b.n	8000f74 <main+0x44>
 8001140:	2000001f 	.word	0x2000001f
 8001144:	20000020 	.word	0x20000020
 8001148:	20000040 	.word	0x20000040
 800114c:	20000022 	.word	0x20000022
 8001150:	20000030 	.word	0x20000030
 8001154:	2000002c 	.word	0x2000002c
 8001158:	20000028 	.word	0x20000028
 800115c:	40020410 	.word	0x40020410
 8001160:	20000045 	.word	0x20000045
 8001164:	ffffd6fc 	.word	0xffffd6fc

08001168 <TIM2_IRQHandler>:


	}
}

void TIM2_IRQHandler(void) { // Timer Interrupt
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) { // Check update interrupt flag
 800116c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d025      	beq.n	80011c6 <TIM2_IRQHandler+0x5e>
		TIM2->SR &= ~TIM_SR_UIF; // Clear update interrupt flag
 800117a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6113      	str	r3, [r2, #16]

		Seg1Value = Square;
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <TIM2_IRQHandler+0x64>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <TIM2_IRQHandler+0x68>)
 8001190:	701a      	strb	r2, [r3, #0]
		SegUpdate();
 8001192:	f7ff f867 	bl	8000264 <SegUpdate>
		if (red > 100) {
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <TIM2_IRQHandler+0x6c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b64      	cmp	r3, #100	@ 0x64
 800119c:	dd10      	ble.n	80011c0 <TIM2_IRQHandler+0x58>
			redcnt++;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <TIM2_IRQHandler+0x70>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <TIM2_IRQHandler+0x70>)
 80011a8:	701a      	strb	r2, [r3, #0]
			if (redcnt == 1) {
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <TIM2_IRQHandler+0x70>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d109      	bne.n	80011c6 <TIM2_IRQHandler+0x5e>
				Seg2Value++;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <TIM2_IRQHandler+0x74>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <TIM2_IRQHandler+0x74>)
 80011bc:	701a      	strb	r2, [r3, #0]
		} else {
			redcnt = 0;
		}

	}
}
 80011be:	e002      	b.n	80011c6 <TIM2_IRQHandler+0x5e>
			redcnt = 0;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <TIM2_IRQHandler+0x70>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000001e 	.word	0x2000001e
 80011d0:	2000001f 	.word	0x2000001f
 80011d4:	20000028 	.word	0x20000028
 80011d8:	20000044 	.word	0x20000044
 80011dc:	20000020 	.word	0x20000020

080011e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	if (USART2->SR & (1 << 7)) { // Check if TXE is set
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <USART2_IRQHandler+0x54>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01c      	beq.n	800122a <USART2_IRQHandler+0x4a>
		if (txIndex < txSize) {
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <USART2_IRQHandler+0x58>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <USART2_IRQHandler+0x5c>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d20e      	bcs.n	800121e <USART2_IRQHandler+0x3e>
			USART2->DR = txBuffer[txIndex++]; // Send next byte
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <USART2_IRQHandler+0x60>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <USART2_IRQHandler+0x58>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	b288      	uxth	r0, r1
 800120e:	490a      	ldr	r1, [pc, #40]	@ (8001238 <USART2_IRQHandler+0x58>)
 8001210:	8008      	strh	r0, [r1, #0]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <USART2_IRQHandler+0x54>)
 800121a:	605a      	str	r2, [r3, #4]
		} else {
			USART2->CR1 &= ~(1 << 7); // Disable TXE interrupt
		}
	}
}
 800121c:	e005      	b.n	800122a <USART2_IRQHandler+0x4a>
			USART2->CR1 &= ~(1 << 7); // Disable TXE interrupt
 800121e:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <USART2_IRQHandler+0x54>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <USART2_IRQHandler+0x54>)
 8001224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001228:	60d3      	str	r3, [r2, #12]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40004400 	.word	0x40004400
 8001238:	2000003e 	.word	0x2000003e
 800123c:	2000003c 	.word	0x2000003c
 8001240:	20000038 	.word	0x20000038

08001244 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) { // Check for Update Interrupt Flag (UIF)
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <TIM3_IRQHandler+0x68>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d026      	beq.n	80012a2 <TIM3_IRQHandler+0x5e>
		TIM3->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <TIM3_IRQHandler+0x68>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <TIM3_IRQHandler+0x68>)
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6113      	str	r3, [r2, #16]
		static uint8_t ledcnt = 0;
		if(++ledcnt > 20){
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <TIM3_IRQHandler+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <TIM3_IRQHandler+0x6c>)
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <TIM3_IRQHandler+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b14      	cmp	r3, #20
 8001272:	d911      	bls.n	8001298 <TIM3_IRQHandler+0x54>
			led1 = !led1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <TIM3_IRQHandler+0x70>)
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	f003 0320 	and.w	r3, r3, #32
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <TIM3_IRQHandler+0x70>)
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	7853      	ldrb	r3, [r2, #1]
 800128c:	f361 1345 	bfi	r3, r1, #5, #1
 8001290:	7053      	strb	r3, [r2, #1]
			ledcnt = 0;
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <TIM3_IRQHandler+0x6c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		}
		tick++;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <TIM3_IRQHandler+0x74>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <TIM3_IRQHandler+0x74>)
 80012a0:	6013      	str	r3, [r2, #0]
	}
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40000400 	.word	0x40000400
 80012b0:	20000046 	.word	0x20000046
 80012b4:	40020814 	.word	0x40020814
 80012b8:	20000040 	.word	0x20000040

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  static uint32_t tick;
  tick++;
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Handler+0x18>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a03      	ldr	r2, [pc, #12]	@ (8001328 <SysTick_Handler+0x18>)
 800131c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000048 	.word	0x20000048

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001388 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001354:	f7ff ffea 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f000 f811 	bl	80013a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff fdd5 	bl	8000f30 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001394:	0800140c 	.word	0x0800140c
  ldr r2, =_sbss
 8001398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800139c:	2000004c 	.word	0x2000004c

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <__libc_init_array>:
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	4d0d      	ldr	r5, [pc, #52]	@ (80013dc <__libc_init_array+0x38>)
 80013a8:	4c0d      	ldr	r4, [pc, #52]	@ (80013e0 <__libc_init_array+0x3c>)
 80013aa:	1b64      	subs	r4, r4, r5
 80013ac:	10a4      	asrs	r4, r4, #2
 80013ae:	2600      	movs	r6, #0
 80013b0:	42a6      	cmp	r6, r4
 80013b2:	d109      	bne.n	80013c8 <__libc_init_array+0x24>
 80013b4:	4d0b      	ldr	r5, [pc, #44]	@ (80013e4 <__libc_init_array+0x40>)
 80013b6:	4c0c      	ldr	r4, [pc, #48]	@ (80013e8 <__libc_init_array+0x44>)
 80013b8:	f000 f818 	bl	80013ec <_init>
 80013bc:	1b64      	subs	r4, r4, r5
 80013be:	10a4      	asrs	r4, r4, #2
 80013c0:	2600      	movs	r6, #0
 80013c2:	42a6      	cmp	r6, r4
 80013c4:	d105      	bne.n	80013d2 <__libc_init_array+0x2e>
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013cc:	4798      	blx	r3
 80013ce:	3601      	adds	r6, #1
 80013d0:	e7ee      	b.n	80013b0 <__libc_init_array+0xc>
 80013d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d6:	4798      	blx	r3
 80013d8:	3601      	adds	r6, #1
 80013da:	e7f2      	b.n	80013c2 <__libc_init_array+0x1e>
 80013dc:	08001404 	.word	0x08001404
 80013e0:	08001404 	.word	0x08001404
 80013e4:	08001404 	.word	0x08001404
 80013e8:	08001408 	.word	0x08001408

080013ec <_init>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr

080013f8 <_fini>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr
