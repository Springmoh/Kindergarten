
uP_grp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001d04  08001d04  00002d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d54  08001d54  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001d54  08001d54  00002d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d5c  08001d5c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d5c  08001d5c  00002d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d60  08001d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001d64  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000050  08001db4  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08001db4  0000321c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c47  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005a4  00000000  00000000  00004cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00005270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000172  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee4d  00000000  00000000  000055e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f8d  00000000  00000000  0001442f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054613  00000000  00000000  000163bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006a9cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bc8  00000000  00000000  0006aa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0006b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001cec 	.word	0x08001cec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08001cec 	.word	0x08001cec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	@ (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	@ (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <SegUpdate>:
#define sensor1 	GPIOC_IN->bit15
#define sensor2 	GPIOC_IN->bit14

uint8_t Seg1Value, Seg2Value;

void SegUpdate() {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	switch (Seg1Value) {
 8000326:	4b61      	ldr	r3, [pc, #388]	@ (80004ac <SegUpdate+0x18c>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b09      	cmp	r3, #9
 800032c:	d83e      	bhi.n	80003ac <SegUpdate+0x8c>
 800032e:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <SegUpdate+0x14>)
 8000330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000334:	0800035d 	.word	0x0800035d
 8000338:	08000365 	.word	0x08000365
 800033c:	0800036d 	.word	0x0800036d
 8000340:	08000375 	.word	0x08000375
 8000344:	0800037d 	.word	0x0800037d
 8000348:	08000385 	.word	0x08000385
 800034c:	0800038d 	.word	0x0800038d
 8000350:	08000395 	.word	0x08000395
 8000354:	0800039d 	.word	0x0800039d
 8000358:	080003a5 	.word	0x080003a5
	case 0:
		SegData.Seg[0] = 0b01111110;
 800035c:	4b54      	ldr	r3, [pc, #336]	@ (80004b0 <SegUpdate+0x190>)
 800035e:	227e      	movs	r2, #126	@ 0x7e
 8000360:	701a      	strb	r2, [r3, #0]
		break;
 8000362:	e024      	b.n	80003ae <SegUpdate+0x8e>
	case 1:
		SegData.Seg[0] = 0b01100000;
 8000364:	4b52      	ldr	r3, [pc, #328]	@ (80004b0 <SegUpdate+0x190>)
 8000366:	2260      	movs	r2, #96	@ 0x60
 8000368:	701a      	strb	r2, [r3, #0]
		break;
 800036a:	e020      	b.n	80003ae <SegUpdate+0x8e>
	case 2:
		SegData.Seg[0] = 0b10110110;
 800036c:	4b50      	ldr	r3, [pc, #320]	@ (80004b0 <SegUpdate+0x190>)
 800036e:	22b6      	movs	r2, #182	@ 0xb6
 8000370:	701a      	strb	r2, [r3, #0]
		break;
 8000372:	e01c      	b.n	80003ae <SegUpdate+0x8e>
	case 3:
		SegData.Seg[0] = 0b11110100;
 8000374:	4b4e      	ldr	r3, [pc, #312]	@ (80004b0 <SegUpdate+0x190>)
 8000376:	22f4      	movs	r2, #244	@ 0xf4
 8000378:	701a      	strb	r2, [r3, #0]
		break;
 800037a:	e018      	b.n	80003ae <SegUpdate+0x8e>
	case 4:
		SegData.Seg[0] = 0b11101000;
 800037c:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <SegUpdate+0x190>)
 800037e:	22e8      	movs	r2, #232	@ 0xe8
 8000380:	701a      	strb	r2, [r3, #0]
		break;
 8000382:	e014      	b.n	80003ae <SegUpdate+0x8e>
	case 5:
		SegData.Seg[0] = 0b11011100;
 8000384:	4b4a      	ldr	r3, [pc, #296]	@ (80004b0 <SegUpdate+0x190>)
 8000386:	22dc      	movs	r2, #220	@ 0xdc
 8000388:	701a      	strb	r2, [r3, #0]
		break;
 800038a:	e010      	b.n	80003ae <SegUpdate+0x8e>
	case 6:
		SegData.Seg[0] = 0b11011110;
 800038c:	4b48      	ldr	r3, [pc, #288]	@ (80004b0 <SegUpdate+0x190>)
 800038e:	22de      	movs	r2, #222	@ 0xde
 8000390:	701a      	strb	r2, [r3, #0]
		break;
 8000392:	e00c      	b.n	80003ae <SegUpdate+0x8e>
	case 7:
		SegData.Seg[0] = 0b01110000;
 8000394:	4b46      	ldr	r3, [pc, #280]	@ (80004b0 <SegUpdate+0x190>)
 8000396:	2270      	movs	r2, #112	@ 0x70
 8000398:	701a      	strb	r2, [r3, #0]
		break;
 800039a:	e008      	b.n	80003ae <SegUpdate+0x8e>
	case 8:
		SegData.Seg[0] = 0b11111110;
 800039c:	4b44      	ldr	r3, [pc, #272]	@ (80004b0 <SegUpdate+0x190>)
 800039e:	22fe      	movs	r2, #254	@ 0xfe
 80003a0:	701a      	strb	r2, [r3, #0]
		break;
 80003a2:	e004      	b.n	80003ae <SegUpdate+0x8e>
	case 9:
		SegData.Seg[0] = 0b11111100;
 80003a4:	4b42      	ldr	r3, [pc, #264]	@ (80004b0 <SegUpdate+0x190>)
 80003a6:	22fc      	movs	r2, #252	@ 0xfc
 80003a8:	701a      	strb	r2, [r3, #0]
		break;
 80003aa:	e000      	b.n	80003ae <SegUpdate+0x8e>
	default:
		break;
 80003ac:	bf00      	nop
	}

	switch (Seg2Value) {
 80003ae:	4b41      	ldr	r3, [pc, #260]	@ (80004b4 <SegUpdate+0x194>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b09      	cmp	r3, #9
 80003b4:	d83e      	bhi.n	8000434 <SegUpdate+0x114>
 80003b6:	a201      	add	r2, pc, #4	@ (adr r2, 80003bc <SegUpdate+0x9c>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080003e5 	.word	0x080003e5
 80003c0:	080003ed 	.word	0x080003ed
 80003c4:	080003f5 	.word	0x080003f5
 80003c8:	080003fd 	.word	0x080003fd
 80003cc:	08000405 	.word	0x08000405
 80003d0:	0800040d 	.word	0x0800040d
 80003d4:	08000415 	.word	0x08000415
 80003d8:	0800041d 	.word	0x0800041d
 80003dc:	08000425 	.word	0x08000425
 80003e0:	0800042d 	.word	0x0800042d
	case 0:
		SegData.Seg[1] = 0b11101110;
 80003e4:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <SegUpdate+0x190>)
 80003e6:	22ee      	movs	r2, #238	@ 0xee
 80003e8:	705a      	strb	r2, [r3, #1]
		break;
 80003ea:	e024      	b.n	8000436 <SegUpdate+0x116>
	case 1:
		SegData.Seg[1] = 0b00101000;
 80003ec:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <SegUpdate+0x190>)
 80003ee:	2228      	movs	r2, #40	@ 0x28
 80003f0:	705a      	strb	r2, [r3, #1]
		break;
 80003f2:	e020      	b.n	8000436 <SegUpdate+0x116>
	case 2:
		SegData.Seg[1] = 0b11011100;
 80003f4:	4b2e      	ldr	r3, [pc, #184]	@ (80004b0 <SegUpdate+0x190>)
 80003f6:	22dc      	movs	r2, #220	@ 0xdc
 80003f8:	705a      	strb	r2, [r3, #1]
		break;
 80003fa:	e01c      	b.n	8000436 <SegUpdate+0x116>
	case 3:
		SegData.Seg[1] = 0b01111100;
 80003fc:	4b2c      	ldr	r3, [pc, #176]	@ (80004b0 <SegUpdate+0x190>)
 80003fe:	227c      	movs	r2, #124	@ 0x7c
 8000400:	705a      	strb	r2, [r3, #1]
		break;
 8000402:	e018      	b.n	8000436 <SegUpdate+0x116>
	case 4:
		SegData.Seg[1] = 0b00111010;
 8000404:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <SegUpdate+0x190>)
 8000406:	223a      	movs	r2, #58	@ 0x3a
 8000408:	705a      	strb	r2, [r3, #1]
		break;
 800040a:	e014      	b.n	8000436 <SegUpdate+0x116>
	case 5:
		SegData.Seg[1] = 0b01110110;
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <SegUpdate+0x190>)
 800040e:	2276      	movs	r2, #118	@ 0x76
 8000410:	705a      	strb	r2, [r3, #1]
		break;
 8000412:	e010      	b.n	8000436 <SegUpdate+0x116>
	case 6:
		SegData.Seg[1] = 0b11110110;
 8000414:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <SegUpdate+0x190>)
 8000416:	22f6      	movs	r2, #246	@ 0xf6
 8000418:	705a      	strb	r2, [r3, #1]
		break;
 800041a:	e00c      	b.n	8000436 <SegUpdate+0x116>
	case 7:
		SegData.Seg[1] = 0b00101100;
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <SegUpdate+0x190>)
 800041e:	222c      	movs	r2, #44	@ 0x2c
 8000420:	705a      	strb	r2, [r3, #1]
		break;
 8000422:	e008      	b.n	8000436 <SegUpdate+0x116>
	case 8:
		SegData.Seg[1] = 0b11111110;
 8000424:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <SegUpdate+0x190>)
 8000426:	22fe      	movs	r2, #254	@ 0xfe
 8000428:	705a      	strb	r2, [r3, #1]
		break;
 800042a:	e004      	b.n	8000436 <SegUpdate+0x116>
	case 9:
		SegData.Seg[1] = 0b01111110;
 800042c:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <SegUpdate+0x190>)
 800042e:	227e      	movs	r2, #126	@ 0x7e
 8000430:	705a      	strb	r2, [r3, #1]
		break;
 8000432:	e000      	b.n	8000436 <SegUpdate+0x116>
	default:
		break;
 8000434:	bf00      	nop
	}

	for (int i = 15; i >= 0; i--) {
 8000436:	230f      	movs	r3, #15
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e024      	b.n	8000486 <SegUpdate+0x166>
		uint16_t bit = (SegData.bit >> i) & 0x01;
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <SegUpdate+0x190>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fa42 f303 	asr.w	r3, r2, r3
 8000448:	b29b      	uxth	r3, r3
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	807b      	strh	r3, [r7, #2]
		if (bit) {
 8000450:	887b      	ldrh	r3, [r7, #2]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d005      	beq.n	8000462 <SegUpdate+0x142>
			SRdata = 1;
 8000456:	4a18      	ldr	r2, [pc, #96]	@ (80004b8 <SegUpdate+0x198>)
 8000458:	7813      	ldrb	r3, [r2, #0]
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	7013      	strb	r3, [r2, #0]
 8000460:	e004      	b.n	800046c <SegUpdate+0x14c>
		} else {
			SRdata = 0;
 8000462:	4a15      	ldr	r2, [pc, #84]	@ (80004b8 <SegUpdate+0x198>)
 8000464:	7813      	ldrb	r3, [r2, #0]
 8000466:	f36f 03c3 	bfc	r3, #3, #1
 800046a:	7013      	strb	r3, [r2, #0]
		}
		SRclock = 1;
 800046c:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <SegUpdate+0x198>)
 800046e:	7813      	ldrb	r3, [r2, #0]
 8000470:	f043 0320 	orr.w	r3, r3, #32
 8000474:	7013      	strb	r3, [r2, #0]
//			Delay_ms(2);
		SRclock = 0;
 8000476:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <SegUpdate+0x198>)
 8000478:	7813      	ldrb	r3, [r2, #0]
 800047a:	f36f 1345 	bfc	r3, #5, #1
 800047e:	7013      	strb	r3, [r2, #0]
	for (int i = 15; i >= 0; i--) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dad7      	bge.n	800043c <SegUpdate+0x11c>
	}
	SRlatch = 1;
 800048c:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <SegUpdate+0x198>)
 800048e:	7813      	ldrb	r3, [r2, #0]
 8000490:	f043 0310 	orr.w	r3, r3, #16
 8000494:	7013      	strb	r3, [r2, #0]
//		Delay_ms(2);
	SRlatch = 0;
 8000496:	4a08      	ldr	r2, [pc, #32]	@ (80004b8 <SegUpdate+0x198>)
 8000498:	7813      	ldrb	r3, [r2, #0]
 800049a:	f36f 1304 	bfc	r3, #4, #1
 800049e:	7013      	strb	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	2000006e 	.word	0x2000006e
 80004b0:	2000006c 	.word	0x2000006c
 80004b4:	2000006f 	.word	0x2000006f
 80004b8:	40020414 	.word	0x40020414

080004bc <Motor>:

void Motor(uint8_t number, int pwm){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	6039      	str	r1, [r7, #0]
 80004c6:	71fb      	strb	r3, [r7, #7]
	switch(number){
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d002      	beq.n	80004d4 <Motor+0x18>
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d020      	beq.n	8000514 <Motor+0x58>
			M_IN4 = 1;
		}
		M_PWM34 = abs(pwm);
		break;
	}
}
 80004d2:	e03f      	b.n	8000554 <Motor+0x98>
		if (pwm >= 0) {
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db0a      	blt.n	80004f0 <Motor+0x34>
			M_IN1 = 0;
 80004da:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <Motor+0xa4>)
 80004dc:	7853      	ldrb	r3, [r2, #1]
 80004de:	f36f 13c7 	bfc	r3, #7, #1
 80004e2:	7053      	strb	r3, [r2, #1]
			M_IN2 = 1;
 80004e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000564 <Motor+0xa8>)
 80004e6:	7853      	ldrb	r3, [r2, #1]
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	7053      	strb	r3, [r2, #1]
 80004ee:	e009      	b.n	8000504 <Motor+0x48>
			M_IN1 = 1;
 80004f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <Motor+0xa4>)
 80004f2:	7853      	ldrb	r3, [r2, #1]
 80004f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f8:	7053      	strb	r3, [r2, #1]
			M_IN2 = 0;
 80004fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <Motor+0xa8>)
 80004fc:	7853      	ldrb	r3, [r2, #1]
 80004fe:	f36f 0300 	bfc	r3, #0, #1
 8000502:	7053      	strb	r3, [r2, #1]
		M_PWM12 = abs(pwm);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800050a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <Motor+0xac>)
 8000510:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000512:	e01f      	b.n	8000554 <Motor+0x98>
		if (pwm >= 0) {
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db0a      	blt.n	8000530 <Motor+0x74>
			M_IN3 = 1;
 800051a:	4a12      	ldr	r2, [pc, #72]	@ (8000564 <Motor+0xa8>)
 800051c:	7853      	ldrb	r3, [r2, #1]
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	7053      	strb	r3, [r2, #1]
			M_IN4 = 0;
 8000524:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <Motor+0xa4>)
 8000526:	7853      	ldrb	r3, [r2, #1]
 8000528:	f36f 1386 	bfc	r3, #6, #1
 800052c:	7053      	strb	r3, [r2, #1]
 800052e:	e009      	b.n	8000544 <Motor+0x88>
			M_IN3 = 0;
 8000530:	4a0c      	ldr	r2, [pc, #48]	@ (8000564 <Motor+0xa8>)
 8000532:	7853      	ldrb	r3, [r2, #1]
 8000534:	f36f 0341 	bfc	r3, #1, #1
 8000538:	7053      	strb	r3, [r2, #1]
			M_IN4 = 1;
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <Motor+0xa4>)
 800053c:	7853      	ldrb	r3, [r2, #1]
 800053e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000542:	7053      	strb	r3, [r2, #1]
		M_PWM34 = abs(pwm);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800054a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <Motor+0xac>)
 8000550:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000552:	bf00      	nop
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40020414 	.word	0x40020414
 8000564:	40020014 	.word	0x40020014
 8000568:	40010000 	.word	0x40010000

0800056c <SysClockConfig>:
#define PLL_N 168
#define PLL_P 0 // PLLP = 2


void SysClockConfig(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	/* 1) Enable the HSE and wait for confirmation*/
	RCC->CR |= RCC_CR_HSEON;
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <SysClockConfig+0xa8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <SysClockConfig+0xa8>)
 8000576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800057a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 800057c:	bf00      	nop
 800057e:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <SysClockConfig+0xa8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <SysClockConfig+0x12>

	/* 2) Set POWER ENABLE CLOCK(POWEREN)  and VOLTAGE REGULATOR(VOS)*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <SysClockConfig+0xa8>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058e:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <SysClockConfig+0xa8>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 8000596:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <SysClockConfig+0xac>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1f      	ldr	r2, [pc, #124]	@ (8000618 <SysClockConfig+0xac>)
 800059c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a0:	6013      	str	r3, [r2, #0]

	/*3) Configure the FLASH PREFETCH and the LATENCY Related Settings*/
	FLASH->ACR |= FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_2WS;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <SysClockConfig+0xb0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1d      	ldr	r2, [pc, #116]	@ (800061c <SysClockConfig+0xb0>)
 80005a8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6013      	str	r3, [r2, #0]

	/*4) Configure the PRESCALARS HCLK, PCLK1, PCLK2*/
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <SysClockConfig+0xa8>)
 80005b4:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <SysClockConfig+0xa8>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <SysClockConfig+0xa8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4a15      	ldr	r2, [pc, #84]	@ (8000614 <SysClockConfig+0xa8>)
 80005c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005c4:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC->CFGR |=RCC_CFGR_PPRE2_DIV1;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <SysClockConfig+0xa8>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <SysClockConfig+0xa8>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	6093      	str	r3, [r2, #8]

	/*5) Configure the MAIN PLL*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <SysClockConfig+0xa8>)
 80005d0:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <SysClockConfig+0xb4>)
 80005d2:	605a      	str	r2, [r3, #4]

	/*6) Enable the PLL and wait for it to become ready*/
	RCC->CR |= RCC_CR_PLLON;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <SysClockConfig+0xa8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <SysClockConfig+0xa8>)
 80005da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005de:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80005e0:	bf00      	nop
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <SysClockConfig+0xa8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <SysClockConfig+0x76>

	/*7) Select the Clock Source and wait for it to be set*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <SysClockConfig+0xa8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <SysClockConfig+0xa8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6093      	str	r3, [r2, #8]
//	while(!(RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005fa:	bf00      	nop
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <SysClockConfig+0xa8>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 030c 	and.w	r3, r3, #12
 8000604:	2b08      	cmp	r3, #8
 8000606:	d1f9      	bne.n	80005fc <SysClockConfig+0x90>

}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000
 800061c:	40023c00 	.word	0x40023c00
 8000620:	00402a19 	.word	0x00402a19

08000624 <I2C1_Config>:
void I2C1_Write(uint8_t data);
void I2C1_Address(uint8_t Address);
void I2C1_Stop(void);
void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size);

void I2C1_Config(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

	/* 1. Enable the I2C CLOCK and GPIO CLOCK */
	RCC->APB1ENR |= (1 << 21); // ENABLE I2C1 Clock
 8000628:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <I2C1_Config+0xa0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a25      	ldr	r2, [pc, #148]	@ (80006c4 <I2C1_Config+0xa0>)
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= (1 << 1); // ENABLE GPIOB Clock (SCL: PB6 SDA: PB7)
 8000634:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <I2C1_Config+0xa0>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000638:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <I2C1_Config+0xa0>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* 2. Configure the I2C PINs for ALternate Functions */
	GPIOB->MODER |= (2 << 12) | (2 << 14);// Alternate Function of PB6 & PB7 in MODER Register
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <I2C1_Config+0xa4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a20      	ldr	r2, [pc, #128]	@ (80006c8 <I2C1_Config+0xa4>)
 8000646:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800064a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1 << 6) | (1 << 7);	//Open Drain Output of PB6 & PB7
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <I2C1_Config+0xa4>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <I2C1_Config+0xa4>)
 8000652:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000656:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3 << 12) | (3 << 14);//High SPEED for the Pins PB6 & PB7
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <I2C1_Config+0xa4>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a1a      	ldr	r2, [pc, #104]	@ (80006c8 <I2C1_Config+0xa4>)
 800065e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000662:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1 << 12) | (1 << 14);//Pull-up for both the Pins PB6 & PB7
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <I2C1_Config+0xa4>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <I2C1_Config+0xa4>)
 800066a:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 800066e:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= (4 << 24) | (4 << 28);	//Configure the Alternate Function in AFR Register
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <I2C1_Config+0xa4>)
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <I2C1_Config+0xa4>)
 8000676:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800067a:	6213      	str	r3, [r2, #32]

	/* 3. Reset the I2C */
	I2C1->CR1 |= (1 << 15);
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <I2C1_Config+0xa8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <I2C1_Config+0xa8>)
 8000682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000686:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <I2C1_Config+0xa8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <I2C1_Config+0xa8>)
 800068e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000692:	6013      	str	r3, [r2, #0]

	/* 4. Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings */
	I2C1->CR2 |= (42 << 0); // PCLK1 FREQUENCY in MHz
 8000694:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <I2C1_Config+0xa8>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <I2C1_Config+0xa8>)
 800069a:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 800069e:	6053      	str	r3, [r2, #4]

	/* 5. Configure the clock control registers */
	I2C1->CCR = 210 << 0;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <I2C1_Config+0xa8>)
 80006a2:	22d2      	movs	r2, #210	@ 0xd2
 80006a4:	61da      	str	r2, [r3, #28]

	/* 6. Configure the rise time register */
	I2C1->TRISE = 43;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <I2C1_Config+0xa8>)
 80006a8:	222b      	movs	r2, #43	@ 0x2b
 80006aa:	621a      	str	r2, [r3, #32]

	/* 7. Program the I2C_CR1 register to enable the peripheral */
	I2C1->CR1 |= (1 << 0); // Enable I2C
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <I2C1_Config+0xa8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a06      	ldr	r2, [pc, #24]	@ (80006cc <I2C1_Config+0xa8>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020400 	.word	0x40020400
 80006cc:	40005400 	.word	0x40005400

080006d0 <I2C1_Start>:

void I2C1_Start(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	/* 1. Enable the ACK */
	I2C1->CR1 |= (1 << 10);  // Enable the ACK
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <I2C1_Start+0x38>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <I2C1_Start+0x38>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006de:	6013      	str	r3, [r2, #0]

	/* 2. Send the START condition */
	I2C1->CR1 |= (1 << 8);  // Generate START
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <I2C1_Start+0x38>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <I2C1_Start+0x38>)
 80006e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ea:	6013      	str	r3, [r2, #0]

	/* 3. Wait for the SB ( Bit 0 in SR1) to set means the start condition is generated */
	while (!(I2C1->SR1 & (1 << 0)))
 80006ec:	bf00      	nop
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <I2C1_Start+0x38>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <I2C1_Start+0x1e>
		;
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40005400 	.word	0x40005400

0800070c <I2C1_Write>:

void I2C1_Write(uint8_t data) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty */
	while (!(I2C1->SR1 & (1 << 7)))
 8000716:	bf00      	nop
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <I2C1_Write+0x3c>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <I2C1_Write+0xc>
		;
	/* 2. Send the DATA to the DR Register */
	I2C1->DR = data;
 8000724:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <I2C1_Write+0x3c>)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	6113      	str	r3, [r2, #16]
	/* 3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission */
	while (!(I2C1->SR1 & (1 << 2)))
 800072a:	bf00      	nop
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <I2C1_Write+0x3c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0f9      	beq.n	800072c <I2C1_Write+0x20>
		;
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400

0800074c <I2C1_Address>:

void I2C1_Address(uint8_t Address) {
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	/* 1. Send the Slave Address to the DR Register */
	I2C1->DR = Address;
 8000756:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <I2C1_Address+0x3c>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	6113      	str	r3, [r2, #16]
	/* 2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission */
	while (!(I2C1->SR1 & (1 << 1)));
 800075c:	bf00      	nop
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <I2C1_Address+0x3c>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <I2C1_Address+0x12>
	/* 3. clear the ADDR by reading the SR1 and SR2 */
	uint8_t temp = I2C1->SR1 | I2C1->SR2;
 800076a:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <I2C1_Address+0x3c>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <I2C1_Address+0x3c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	73fb      	strb	r3, [r7, #15]
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40005400 	.word	0x40005400

0800078c <I2C1_Stop>:

void I2C1_Stop(void) {
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9); // Stop I2C
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <I2C1_Stop+0x1c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <I2C1_Stop+0x1c>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40005400 	.word	0x40005400

080007ac <I2C1_Read>:

void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	4613      	mov	r3, r2
 80007ba:	71bb      	strb	r3, [r7, #6]
	 f) To generate the nonacknowledge pulse after the last received data byte, the ACK bit must be cleared just after reading the
	 second last data byte (after second last RxNE event)
	 g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
	 after reading the second last data byte (after the second last RxNE event)
	 */
	int remaining = size;
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	60fb      	str	r3, [r7, #12]

	/**** STEP 1 ****/
	if (size == 1) {
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d12f      	bne.n	8000826 <I2C1_Read+0x7a>
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 80007c6:	4a4b      	ldr	r2, [pc, #300]	@ (80008f4 <I2C1_Read+0x148>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 80007cc:	bf00      	nop
 80007ce:	4b49      	ldr	r3, [pc, #292]	@ (80008f4 <I2C1_Read+0x148>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f9      	beq.n	80007ce <I2C1_Read+0x22>
			;  // wait for ADDR bit to set

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 80007da:	4b46      	ldr	r3, [pc, #280]	@ (80008f4 <I2C1_Read+0x148>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a45      	ldr	r2, [pc, #276]	@ (80008f4 <I2C1_Read+0x148>)
 80007e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007e4:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 80007e6:	4b43      	ldr	r3, [pc, #268]	@ (80008f4 <I2C1_Read+0x148>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <I2C1_Read+0x148>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <I2C1_Read+0x148>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a3e      	ldr	r2, [pc, #248]	@ (80008f4 <I2C1_Read+0x148>)
 80007fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000800:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1 << 6)))
 8000802:	bf00      	nop
 8000804:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <I2C1_Read+0x148>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <I2C1_Read+0x58>
			;  // wait for RxNE to set

		/**** STEP 1-d ****/
		buffer[size - remaining] = I2C1->DR; // Read the data from the DATA REGISTER
 8000810:	4b38      	ldr	r3, [pc, #224]	@ (80008f4 <I2C1_Read+0x148>)
 8000812:	6919      	ldr	r1, [r3, #16]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	461a      	mov	r2, r3
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	b2ca      	uxtb	r2, r1
 8000822:	701a      	strb	r2, [r3, #0]
		while (!(I2C1->SR1 & (1 << 6)))
			;  // wait for RxNE to set
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 8000824:	e060      	b.n	80008e8 <I2C1_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 8000826:	4a33      	ldr	r2, [pc, #204]	@ (80008f4 <I2C1_Read+0x148>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 800082c:	bf00      	nop
 800082e:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <I2C1_Read+0x148>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f9      	beq.n	800082e <I2C1_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit
 800083a:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <I2C1_Read+0x148>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <I2C1_Read+0x148>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2) {
 800084a:	e019      	b.n	8000880 <I2C1_Read+0xd4>
			while (!(I2C1->SR1 & (1 << 6)))
 800084c:	bf00      	nop
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <I2C1_Read+0x148>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f9      	beq.n	800084e <I2C1_Read+0xa2>
			buffer[size - remaining] = I2C1->DR; // copy the data into the buffer
 800085a:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <I2C1_Read+0x148>)
 800085c:	6919      	ldr	r1, [r3, #16]
 800085e:	79ba      	ldrb	r2, [r7, #6]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1 << 10; // Set the ACK bit to Acknowledge the data received
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <I2C1_Read+0x148>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a20      	ldr	r2, [pc, #128]	@ (80008f4 <I2C1_Read+0x148>)
 8000874:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000878:	6013      	str	r3, [r2, #0]
			remaining--;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3b01      	subs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
		while (remaining > 2) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b02      	cmp	r3, #2
 8000884:	dce2      	bgt.n	800084c <I2C1_Read+0xa0>
		while (!(I2C1->SR1 & (1 << 6)))
 8000886:	bf00      	nop
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <I2C1_Read+0x148>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f9      	beq.n	8000888 <I2C1_Read+0xdc>
		buffer[size - remaining] = I2C1->DR;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <I2C1_Read+0x148>)
 8000896:	6919      	ldr	r1, [r3, #16]
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	b2ca      	uxtb	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <I2C1_Read+0x148>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <I2C1_Read+0x148>)
 80008ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80008b2:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <I2C1_Read+0x148>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <I2C1_Read+0x148>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008be:	6013      	str	r3, [r2, #0]
		remaining--;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1 << 6)))
 80008c6:	bf00      	nop
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <I2C1_Read+0x148>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <I2C1_Read+0x11c>
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <I2C1_Read+0x148>)
 80008d6:	6919      	ldr	r1, [r3, #16]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40005400 	.word	0x40005400

080008f8 <TIM9Config>:
void TIM9Config(void);
void Delay_us (uint16_t us);
void Delay_ms (uint16_t ms);

void TIM9Config(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	/* 1) Enable Timer Clock*/
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN; // Enable timer 9 clock
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <TIM9Config+0x44>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000900:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <TIM9Config+0x44>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000906:	6453      	str	r3, [r2, #68]	@ 0x44

	/* 2) Set the prescalar and the ARR*/
	TIM9->PSC = 84-1; // 84MHz/84 = 1MHz ~ 1us delay
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <TIM9Config+0x48>)
 800090a:	2253      	movs	r2, #83	@ 0x53
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM9->ARR = 0xFFFF;// Max ARR value
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <TIM9Config+0x48>)
 8000910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000914:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* 3) Enable the Timer, and wait for the update Flag to set*/
	TIM9->CR1 |= (1<<0); //Enable the Counter
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <TIM9Config+0x48>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <TIM9Config+0x48>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6013      	str	r3, [r2, #0]
	while(!(TIM9->SR & (1<<0))); //Update interrupt flag
 8000922:	bf00      	nop
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <TIM9Config+0x48>)
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <TIM9Config+0x2c>
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	40023800 	.word	0x40023800
 8000940:	40014000 	.word	0x40014000

08000944 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
	/* 1) RESET the Counter */
	TIM9->CNT = 0;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <Delay_us+0x2c>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
	/* 2) Wait for the Counter to reach the entered value. each count would be 1us */
	while(TIM9->CNT < us);
 8000954:	bf00      	nop
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <Delay_us+0x2c>)
 8000958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3fa      	bcc.n	8000956 <Delay_us+0x12>

}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40014000 	.word	0x40014000

08000974 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ms; i++)
 800097e:	2300      	movs	r3, #0
 8000980:	81fb      	strh	r3, [r7, #14]
 8000982:	e006      	b.n	8000992 <Delay_ms+0x1e>
	{
		Delay_us(1000); //Delay of 1ms
 8000984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000988:	f7ff ffdc 	bl	8000944 <Delay_us>
	for (uint16_t i = 0; i < ms; i++)
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	3301      	adds	r3, #1
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3f4      	bcc.n	8000984 <Delay_ms+0x10>
	}
}
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <write8>:
void getRGB(int *R, int *G, int *B);


/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 80009c0:	f7ff fe86 	bl	80006d0 <I2C1_Start>
	I2C1_Address(TCS34725_ADDRESS);
 80009c4:	2052      	movs	r0, #82	@ 0x52
 80009c6:	f7ff fec1 	bl	800074c <I2C1_Address>
	I2C1_Write(txBuffer[0]);
 80009ca:	7b3b      	ldrb	r3, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe9d 	bl	800070c <I2C1_Write>
	I2C1_Write(txBuffer[1]);
 80009d2:	7b7b      	ldrb	r3, [r7, #13]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe99 	bl	800070c <I2C1_Write>
	I2C1_Stop();
 80009da:	f7ff fed7 	bl	800078c <I2C1_Stop>
//    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg) {
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009f6:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[1];

    I2C1_Start();                                // Generate start condition
 80009f8:	f7ff fe6a 	bl	80006d0 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 80009fc:	2052      	movs	r0, #82	@ 0x52
 80009fe:	f7ff fea5 	bl	800074c <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe81 	bl	800070c <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 8000a0a:	f7ff febf 	bl	800078c <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 8000a0e:	f7ff fe5f 	bl	80006d0 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 1); // Read 1 byte
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2201      	movs	r2, #1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2053      	movs	r0, #83	@ 0x53
 8000a1c:	f7ff fec6 	bl	80007ac <I2C1_Read>
    return rxBuffer[0];
 8000a20:	7b3b      	ldrb	r3, [r7, #12]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <read16>:


/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg) {
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a3a:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[2];

    I2C1_Start();                                // Generate start condition
 8000a3c:	f7ff fe48 	bl	80006d0 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 8000a40:	2052      	movs	r0, #82	@ 0x52
 8000a42:	f7ff fe83 	bl	800074c <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe5f 	bl	800070c <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 8000a4e:	f7ff fe9d 	bl	800078c <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 8000a52:	f7ff fe3d 	bl	80006d0 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 2); // Read 2 bytes
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2053      	movs	r0, #83	@ 0x53
 8000a60:	f7ff fea4 	bl	80007ac <I2C1_Read>

    uint16_t ret = (rxBuffer[1] << 8) | rxBuffer[0];
 8000a64:	7a7b      	ldrb	r3, [r7, #9]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	7a3b      	ldrb	r3, [r7, #8]
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	81bb      	strh	r3, [r7, #12]
    return ret;
 8000a74:	89bb      	ldrh	r3, [r7, #12]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <enable>:


void enable(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8000a82:	2101      	movs	r1, #1
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff ff8d 	bl	80009a4 <write8>
  Delay_ms (3);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f7ff ff72 	bl	8000974 <Delay_ms>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8000a90:	2103      	movs	r1, #3
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ff86 	bl	80009a4 <write8>
  Delay_ms (50);
 8000a98:	2032      	movs	r0, #50	@ 0x32
 8000a9a:	f7ff ff6b 	bl	8000974 <Delay_ms>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <setIntegrationTime+0x28>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <setIntegrationTime+0x16>
 8000ab6:	f000 f821 	bl	8000afc <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4619      	mov	r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff70 	bl	80009a4 <write8>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000070 	.word	0x20000070

08000ad0 <setGain>:

void setGain(uint8_t gain)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <setGain+0x28>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <setGain+0x16>
 8000ae2:	f000 f80b 	bl	8000afc <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff ff5a 	bl	80009a4 <write8>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000070 	.word	0x20000070

08000afc <tcs3272_init>:

void tcs3272_init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  readValue = read8(TCS34725_ID);
 8000b00:	2012      	movs	r0, #18
 8000b02:	f7ff ff70 	bl	80009e6 <read8>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <tcs3272_init+0x40>)
 8000b0c:	701a      	strb	r2, [r3, #0]
  if ((readValue != 0x44) && (readValue != 0x4d))
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <tcs3272_init+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b44      	cmp	r3, #68	@ 0x44
 8000b14:	d003      	beq.n	8000b1e <tcs3272_init+0x22>
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <tcs3272_init+0x40>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000b1c:	d10b      	bne.n	8000b36 <tcs3272_init+0x3a>
  {

    return;
  }
  _tcs34725Initialised = 1;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <tcs3272_init+0x44>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 8000b24:	20eb      	movs	r0, #235	@ 0xeb
 8000b26:	f7ff ffbd 	bl	8000aa4 <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff ffd0 	bl	8000ad0 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 8000b30:	f7ff ffa5 	bl	8000a7e <enable>
 8000b34:	e000      	b.n	8000b38 <tcs3272_init+0x3c>
    return;
 8000b36:	bf00      	nop
}
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	20000070 	.word	0x20000070

08000b44 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <getRawData+0x5c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <getRawData+0x1a>
 8000b5a:	f7ff ffcf 	bl	8000afc <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 8000b5e:	2014      	movs	r0, #20
 8000b60:	f7ff ff63 	bl	8000a2a <read16>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 8000b6c:	2016      	movs	r0, #22
 8000b6e:	f7ff ff5c 	bl	8000a2a <read16>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 8000b7a:	2018      	movs	r0, #24
 8000b7c:	f7ff ff55 	bl	8000a2a <read16>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 8000b88:	201a      	movs	r0, #26
 8000b8a:	f7ff ff4e 	bl	8000a2a <read16>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
//  Delay_ms (50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000070 	.word	0x20000070

08000ba4 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
void getRGB(int *R, int *G, int *B)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	f107 0212 	add.w	r2, r7, #18
 8000bb8:	f107 0114 	add.w	r1, r7, #20
 8000bbc:	f107 0016 	add.w	r0, r7, #22
 8000bc0:	f7ff ffc0 	bl	8000b44 <getRawData>
    if(rawClear == 0)
 8000bc4:	8a3b      	ldrh	r3, [r7, #16]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <getRGB+0x3a>
    {
      *R = 0;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
      *G = 0;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
      *B = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
    {
      *R = (int)rawRed * 255 / rawClear;
      *G = (int)rawGreen * 255 / rawClear;
      *B = (int)rawBlue * 255 / rawClear;
    }
}
 8000bdc:	e01d      	b.n	8000c1a <getRGB+0x76>
      *R = (int)rawRed * 255 / rawClear;
 8000bde:	8afb      	ldrh	r3, [r7, #22]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4613      	mov	r3, r2
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	8a3a      	ldrh	r2, [r7, #16]
 8000bea:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8000bf2:	8abb      	ldrh	r3, [r7, #20]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	8a3a      	ldrh	r2, [r7, #16]
 8000bfe:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 8000c06:	8a7b      	ldrh	r3, [r7, #18]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	8a3a      	ldrh	r2, [r7, #16]
 8000c12:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <Pin_config>:
 */

#ifndef INC_SYSTEM_H_
#define INC_SYSTEM_H_

void Pin_config(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0b111; // Enable GPIOA, GPIOB and GPIOC clocks
 8000c28:	4b65      	ldr	r3, [pc, #404]	@ (8000dc0 <Pin_config+0x19c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	4a64      	ldr	r2, [pc, #400]	@ (8000dc0 <Pin_config+0x19c>)
 8000c2e:	f043 0307 	orr.w	r3, r3, #7
 8000c32:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER &= ~(0b11 << 26); // Clear mode bits for PC13
 8000c34:	4b63      	ldr	r3, [pc, #396]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a62      	ldr	r2, [pc, #392]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c3a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c3e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 26);  // Set PC13 as output (0b01)
 8000c40:	4b60      	ldr	r3, [pc, #384]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a5f      	ldr	r2, [pc, #380]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c4a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << 13); // Clear bit 13 for push-pull
 8000c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4a5c      	ldr	r2, [pc, #368]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c56:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(0b11 << 26); // Clear speed bits (low speed)
 8000c58:	4b5a      	ldr	r3, [pc, #360]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	4a59      	ldr	r2, [pc, #356]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c5e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c62:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(0b11 << 26); // No pull-up, no pull-down
 8000c64:	4b57      	ldr	r3, [pc, #348]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a56      	ldr	r2, [pc, #344]	@ (8000dc4 <Pin_config+0x1a0>)
 8000c6a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c6e:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear mode bits
 8000c70:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a54      	ldr	r2, [pc, #336]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c76:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000c7a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (3 * 2)) | (0b01 << (4 * 2)) | (0b01 << (5 * 2)));  // Set mode to output (0b01)
 8000c7c:	4b52      	ldr	r3, [pc, #328]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a51      	ldr	r2, [pc, #324]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c82:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000c86:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 3) | (1 << 4) | (1 << 5)); // Clear bits for Push-Pull
 8000c88:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c8e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000c92:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear speed bits
 8000c94:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc8 <Pin_config+0x1a4>)
 8000c9a:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000c9e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // No pull-up, no pull-down
 8000ca0:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <Pin_config+0x1a4>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <Pin_config+0x1a4>)
 8000ca6:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000caa:	60d3      	str	r3, [r2, #12]

    // Configure PA10 as Alternate Function (TIM1_CH3)
    GPIOA->MODER &= ~(0b11 << (10 * 2)); // Clear mode bits for PA10
 8000cac:	4b47      	ldr	r3, [pc, #284]	@ (8000dcc <Pin_config+0x1a8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a46      	ldr	r2, [pc, #280]	@ (8000dcc <Pin_config+0x1a8>)
 8000cb2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000cb6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (10 * 2));  // Set PA10 to Alternate Function mode
 8000cb8:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <Pin_config+0x1a8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a43      	ldr	r2, [pc, #268]	@ (8000dcc <Pin_config+0x1a8>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((10 - 8) * 4)); // Clear AF bits for PA10
 8000cc4:	4b41      	ldr	r3, [pc, #260]	@ (8000dcc <Pin_config+0x1a8>)
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	4a40      	ldr	r2, [pc, #256]	@ (8000dcc <Pin_config+0x1a8>)
 8000cca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cce:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((10 - 8) * 4));  // Set AF1 (TIM1_CH3)
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dcc <Pin_config+0x1a8>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8000dcc <Pin_config+0x1a8>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA11 as Alternate Function (TIM1_CH4)
    GPIOA->MODER &= ~(0b11 << (11 * 2)); // Clear mode bits for PA11
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <Pin_config+0x1a8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8000dcc <Pin_config+0x1a8>)
 8000ce2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ce6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (11 * 2));  // Set PA11 to Alternate Function mode
 8000ce8:	4b38      	ldr	r3, [pc, #224]	@ (8000dcc <Pin_config+0x1a8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a37      	ldr	r2, [pc, #220]	@ (8000dcc <Pin_config+0x1a8>)
 8000cee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cf2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((11 - 8) * 4)); // Clear AF bits for PA11
 8000cf4:	4b35      	ldr	r3, [pc, #212]	@ (8000dcc <Pin_config+0x1a8>)
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf8:	4a34      	ldr	r2, [pc, #208]	@ (8000dcc <Pin_config+0x1a8>)
 8000cfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000cfe:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((11 - 8) * 4));  // Set AF1 (TIM1_CH4)
 8000d00:	4b32      	ldr	r3, [pc, #200]	@ (8000dcc <Pin_config+0x1a8>)
 8000d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d04:	4a31      	ldr	r2, [pc, #196]	@ (8000dcc <Pin_config+0x1a8>)
 8000d06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA8 and PA9 as outputs
	GPIOA->MODER &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Clear mode bits for PA8, PA9
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <Pin_config+0x1a8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2e      	ldr	r2, [pc, #184]	@ (8000dcc <Pin_config+0x1a8>)
 8000d12:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000d16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((0b01 << (8 * 2)) | (0b01 << (9 * 2))); // Set PA8, PA9 as General-purpose output mode (0b01)
 8000d18:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <Pin_config+0x1a8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dcc <Pin_config+0x1a8>)
 8000d1e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000d22:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~((1 << 8) | (1 << 9)); // Set Push-Pull mode for PA8, PA9
 8000d24:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <Pin_config+0x1a8>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a28      	ldr	r2, [pc, #160]	@ (8000dcc <Pin_config+0x1a8>)
 8000d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d2e:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Low speed for PA8, PA9
 8000d30:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <Pin_config+0x1a8>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <Pin_config+0x1a8>)
 8000d36:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000d3a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // No pull-up, no pull-down for PA8, PA9
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <Pin_config+0x1a8>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a22      	ldr	r2, [pc, #136]	@ (8000dcc <Pin_config+0x1a8>)
 8000d42:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000d46:	60d3      	str	r3, [r2, #12]

	// Configure PB14 and PB15 as outputs
	GPIOB->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PB14, PB15
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d52:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (14 * 2)) | (0b01 << (15 * 2))); // Set PB14, PB15 as General-purpose output mode (0b01)
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d5a:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000d5e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 14) | (1 << 15)); // Set Push-Pull mode for PB14, PB15
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d66:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d6a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Low speed for PB14, PB15
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d76:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2)));   // No pull-up, no pull-down for PB14, PB15
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d82:	60d3      	str	r3, [r2, #12]

	// Configure PB2 and PB10 as inputs
	GPIOB->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // Clear mode bits for PB2 and PB10
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d8a:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000d8e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // No pull-up, no pull-down (default)
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <Pin_config+0x1a4>)
 8000d96:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000d9a:	60d3      	str	r3, [r2, #12]

    // Configure PC14 and PC15 as inputs
    GPIOC->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PC14 and PC15
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <Pin_config+0x1a0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <Pin_config+0x1a0>)
 8000da2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000da6:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // No pull-up, no pull-down (default)
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <Pin_config+0x1a0>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <Pin_config+0x1a0>)
 8000dae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <Configure_TIM1_PWM>:

void Configure_TIM1_PWM(void) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= (1 << 0); // Enable TIM1 clock (bit 0)
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <Configure_TIM1_PWM+0x90>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <Configure_TIM1_PWM+0x90>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure TIM1 for PWM mode
    TIM1->PSC = 4 - 1;       // Prescaler: 16 MHz / 16 = 1 MHz timer clock
 8000de0:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 20000 - 1;    // Auto-reload: 1 MHz / 20000 = 50 Hz PWM frequency
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000de8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000dec:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode 1 and enable preload
    TIM1->CCMR2 &= ~((0b111 << 4) | (0b111 << 12)); // Clear OC3M and OC4M bits
 8000dee:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000dfc:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 4);  // PWM mode 1 on Channel 3 (PA10)
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000e08:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 12); // PWM mode 1 on Channel 4 (PA11)
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a15      	ldr	r2, [pc, #84]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e10:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000e14:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (1 << 3) | (1 << 11); // Enable preload for CCR3 and CCR4 (OC3PE and OC4PE)
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	61d3      	str	r3, [r2, #28]

    // Enable channels
    TIM1->CCER |= (1 << 8);  // Enable Channel 3 output (PA10)
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e30:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= (1 << 12); // Enable Channel 4 output (PA11)
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e3c:	6213      	str	r3, [r2, #32]

    // Enable main output (MOE)
    TIM1->BDTR |= (1 << 15);
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44

    // Start TIM1
    TIM1->CR1 |= (1 << 0); // Enable TIM1 counter
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <Configure_TIM1_PWM+0x94>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6013      	str	r3, [r2, #0]
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40010000 	.word	0x40010000

08000e68 <Configure_TIM2>:

void Configure_TIM2(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1 << 0); // TIM2 clock enable
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <Configure_TIM2+0x54>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <Configure_TIM2+0x54>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM2 for 1 Hz (1-second period)
    TIM2->PSC = 144 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e7c:	228f      	movs	r2, #143	@ 0x8f
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e84:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	60d3      	str	r3, [r2, #12]

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN; // Enable counter
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt in NVIC
    NVIC_SetPriority(TIM2_IRQn, 9); // Set interrupt priority
 8000eaa:	2109      	movs	r1, #9
 8000eac:	201c      	movs	r0, #28
 8000eae:	f7ff fa0d 	bl	80002cc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f7ff f9ec 	bl	8000290 <__NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <Configure_TIM3>:

void Configure_TIM3(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    // Enable TIM3 clock
    RCC->APB1ENR |= (1 << 1); // TIM3 clock enable
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <Configure_TIM3+0x48>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <Configure_TIM3+0x48>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM3 for 1 Hz (1-second period)
    TIM3->PSC = 84 - 1;        // Prescaler: 84 MHz / 84 = 1 MHz
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000ed2:	2253      	movs	r2, #83	@ 0x53
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000 - 1;   // Auto-reload: 1 MHz / 1,000,000 = 1 Hz (1-second period)
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000ed8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	60d3      	str	r3, [r2, #12]

    // Enable TIM3
    TIM3->CR1 |= TIM_CR1_CEN; // Enable counter
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <Configure_TIM3+0x4c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]

    // Enable TIM3 interrupt in NVIC
    NVIC_SetPriority(TIM3_IRQn, 9); // Set interrupt priority
 8000ef6:	2109      	movs	r1, #9
 8000ef8:	201d      	movs	r0, #29
 8000efa:	f7ff f9e7 	bl	80002cc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 8000efe:	201d      	movs	r0, #29
 8000f00:	f7ff f9c6 	bl	8000290 <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40000400 	.word	0x40000400

08000f10 <Configure_USART2>:

volatile uint8_t *txBuffer; // Pointer to transmission buffer
volatile uint16_t txSize;   // Size of the transmission buffer
volatile uint16_t txIndex;  // Current index of transmission

void Configure_USART2(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
//    NVIC_SetPriority(USART2_IRQn, 1); // Priority level 1
//    NVIC_EnableIRQ(USART2_IRQn);      // Enable interrupt for USART2


	// Step 1: Enable USART2 clock and GPIOA clock
	    RCC->APB1ENR |= (1 << 17); // Enable USART2 clock
 8000f14:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <Configure_USART2+0xd0>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a31      	ldr	r2, [pc, #196]	@ (8000fe0 <Configure_USART2+0xd0>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40

	    // Step 2: Configure PA2 (USART2_TX) and PA3 (USART2_RX) as Alternate Function
	    GPIOA->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2))); // Clear mode bits for PA2 and PA3
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f2a:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2)));  // Set to Alternate Function mode
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f32:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f36:	6013      	str	r3, [r2, #0]

	    GPIOA->AFR[0] &= ~((0b1111 << (2 * 4)) | (0b1111 << (3 * 4))); // Clear AF bits for PA2 and PA3
 8000f38:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a29      	ldr	r2, [pc, #164]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000f42:	6213      	str	r3, [r2, #32]
	    GPIOA->AFR[0] |= ((0b0111 << (2 * 4)) | (0b0111 << (3 * 4)));  // Set AF7 (USART2)
 8000f44:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f4a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000f4e:	6213      	str	r3, [r2, #32]

	    GPIOA->OTYPER &= ~((1 << 2) | (1 << 3)); // Push-Pull
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f56:	f023 030c 	bic.w	r3, r3, #12
 8000f5a:	6053      	str	r3, [r2, #4]
	    GPIOA->OSPEEDR |= ((0b10 << (2 * 2)) | (0b10 << (3 * 2))); // High speed
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a20      	ldr	r2, [pc, #128]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f62:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f66:	6093      	str	r3, [r2, #8]
	    GPIOA->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (3 * 2)));   // Clear pull-up/pull-down
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f72:	60d3      	str	r3, [r2, #12]
	    GPIOA->PUPDR |= ((0b01 << (2 * 2)) | (0b01 << (3 * 2)));    // Enable pull-up resistors
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe4 <Configure_USART2+0xd4>)
 8000f7a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000f7e:	60d3      	str	r3, [r2, #12]

	    // Step 3: Configure USART2
	    USART2->CR1 = 0; // Reset control register
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]

	    // Configure baud rate (115200, assuming PCLK1 = 84 MHz)
	    USART2->BRR = 0x016C; // BRR = 729 (115200 baud)
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000f88:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8000f8c:	609a      	str	r2, [r3, #8]

	    // Configure word length: 8 bits
	    USART2->CR1 &= ~(1 << 12); // M = 0 (8 data bits)
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a15      	ldr	r2, [pc, #84]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f98:	60d3      	str	r3, [r2, #12]

	    // Configure stop bits: 1 stop bit
	    USART2->CR2 &= ~(0b11 << 12); // STOP = 0b00 (1 stop bit)
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fa0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fa4:	6113      	str	r3, [r2, #16]

	    // Configure parity: None
	    USART2->CR1 &= ~(1 << 10); // PCE = 0 (Parity Control Enable = disabled)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fb0:	60d3      	str	r3, [r2, #12]

	    // Enable transmitter and receiver
	    USART2->CR1 |= (1 << 3); // TE = 1 (Transmitter Enable)
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	60d3      	str	r3, [r2, #12]
	    USART2->CR1 |= (1 << 2); // RE = 1 (Receiver Enable)
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	60d3      	str	r3, [r2, #12]

	    // Enable USART2
	    USART2->CR1 |= (1 << 13); // UE = 1 (USART Enable)
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <Configure_USART2+0xd8>)
 8000fd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd4:	60d3      	str	r3, [r2, #12]

	    NVIC_EnableIRQ(USART2_IRQn);
 8000fd6:	2026      	movs	r0, #38	@ 0x26
 8000fd8:	f7ff f95a 	bl	8000290 <__NVIC_EnableIRQ>

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40004400 	.word	0x40004400

08000fec <UART_Transmit_IT>:

void UART_Transmit_IT(uint8_t *data, uint16_t size) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
    if (txIndex < txSize) {
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <UART_Transmit_IT+0x48>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <UART_Transmit_IT+0x4c>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	429a      	cmp	r2, r3
 8001006:	d30f      	bcc.n	8001028 <UART_Transmit_IT+0x3c>
        // Previous transmission in progress
        return;
    }

    txBuffer = data; // Set the data buffer
 8001008:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <UART_Transmit_IT+0x50>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
    txSize = size;   // Set the buffer size
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <UART_Transmit_IT+0x4c>)
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	8013      	strh	r3, [r2, #0]
    txIndex = 0;     // Reset the index
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <UART_Transmit_IT+0x48>)
 8001016:	2200      	movs	r2, #0
 8001018:	801a      	strh	r2, [r3, #0]

    // Enable TXE interrupt to start transmission
    USART2->CR1 |= (1 << 7); // TXEIE: Transmit Data Register Empty Interrupt Enable
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <UART_Transmit_IT+0x54>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <UART_Transmit_IT+0x54>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001024:	60d3      	str	r3, [r2, #12]
 8001026:	e000      	b.n	800102a <UART_Transmit_IT+0x3e>
        return;
 8001028:	bf00      	nop
}
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000008a 	.word	0x2000008a
 8001038:	20000088 	.word	0x20000088
 800103c:	20000084 	.word	0x20000084
 8001040:	40004400 	.word	0x40004400

08001044 <main>:

uint32_t tick;
char rxBuf[50];
int x;

int main(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
	uint32_t timer = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]

	SysClockConfig();
 800104e:	f7ff fa8d 	bl	800056c <SysClockConfig>
	Pin_config();
 8001052:	f7ff fde7 	bl	8000c24 <Pin_config>
	Configure_TIM2();
 8001056:	f7ff ff07 	bl	8000e68 <Configure_TIM2>
	Configure_TIM3();
 800105a:	f7ff ff31 	bl	8000ec0 <Configure_TIM3>
	Configure_TIM1_PWM();
 800105e:	f7ff feb7 	bl	8000dd0 <Configure_TIM1_PWM>
	TIM9Config();
 8001062:	f7ff fc49 	bl	80008f8 <TIM9Config>
	I2C1_Config();
 8001066:	f7ff fadd 	bl	8000624 <I2C1_Config>
	tcs3272_init();
 800106a:	f7ff fd47 	bl	8000afc <tcs3272_init>
	Configure_USART2();
 800106e:	f7ff ff4f 	bl	8000f10 <Configure_USART2>

	while (1) {
		SegUpdate();
 8001072:	f7ff f955 	bl	8000320 <SegUpdate>
		if (tick - timer > 50) {
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <main+0xc8>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b32      	cmp	r3, #50	@ 0x32
 8001080:	d907      	bls.n	8001092 <main+0x4e>
			getRGB(&red, &green, &blue);
 8001082:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <main+0xcc>)
 8001084:	4923      	ldr	r1, [pc, #140]	@ (8001114 <main+0xd0>)
 8001086:	4824      	ldr	r0, [pc, #144]	@ (8001118 <main+0xd4>)
 8001088:	f7ff fd8c 	bl	8000ba4 <getRGB>
			timer = tick;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <main+0xc8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	607b      	str	r3, [r7, #4]
		}

		if (PB1) {
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <main+0xd8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <main+0x68>
			x += 1000;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <main+0xdc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <main+0xdc>)
 80010aa:	6013      	str	r3, [r2, #0]
		}

		if (PB2) {
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <main+0xd8>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <main+0x82>
			x -= 1000;
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <main+0xdc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <main+0xdc>)
 80010c4:	6013      	str	r3, [r2, #0]
		}

		sprintf(rxBuf, "Red: %d  Green:%d  Blue:%d\n", red, green, blue);
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <main+0xd4>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <main+0xd0>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <main+0xcc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	460b      	mov	r3, r1
 80010d6:	4913      	ldr	r1, [pc, #76]	@ (8001124 <main+0xe0>)
 80010d8:	4813      	ldr	r0, [pc, #76]	@ (8001128 <main+0xe4>)
 80010da:	f000 f96f 	bl	80013bc <siprintf>
		UART_Transmit_IT((uint8_t*) rxBuf, strlen(rxBuf));
 80010de:	4812      	ldr	r0, [pc, #72]	@ (8001128 <main+0xe4>)
 80010e0:	f7ff f87e 	bl	80001e0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <main+0xe4>)
 80010ec:	f7ff ff7e 	bl	8000fec <UART_Transmit_IT>
//		UART_Transmit_Blocking((uint8_t*)"Hello World\n", strlen("Hello World\n"));

		Motor(LEFT_MOTOR, x);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <main+0xdc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff f9e0 	bl	80004bc <Motor>
		Motor(RIGHT_MOTOR, -x);
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <main+0xdc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	425b      	negs	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff f9d9 	bl	80004bc <Motor>
		SegUpdate();
 800110a:	e7b2      	b.n	8001072 <main+0x2e>
 800110c:	2000008c 	.word	0x2000008c
 8001110:	2000007c 	.word	0x2000007c
 8001114:	20000078 	.word	0x20000078
 8001118:	20000074 	.word	0x20000074
 800111c:	40020410 	.word	0x40020410
 8001120:	200000c4 	.word	0x200000c4
 8001124:	08001d04 	.word	0x08001d04
 8001128:	20000090 	.word	0x20000090

0800112c <TIM2_IRQHandler>:

	}
}

void TIM2_IRQHandler(void) { // Timer Interrupt
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) { // Check update interrupt flag
 8001130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d039      	beq.n	80011b2 <TIM2_IRQHandler+0x86>
        TIM2->SR &= ~TIM_SR_UIF; // Clear update interrupt flag
 800113e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6113      	str	r3, [r2, #16]

        led1 = !led1;
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <TIM2_IRQHandler+0x90>)
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <TIM2_IRQHandler+0x90>)
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2d9      	uxtb	r1, r3
 8001164:	7853      	ldrb	r3, [r2, #1]
 8001166:	f361 1345 	bfi	r3, r1, #5, #1
 800116a:	7053      	strb	r3, [r2, #1]
        static int cnt;
		if (++cnt > 50) {
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <TIM2_IRQHandler+0x94>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <TIM2_IRQHandler+0x94>)
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <TIM2_IRQHandler+0x94>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b32      	cmp	r3, #50	@ 0x32
 800117c:	dd19      	ble.n	80011b2 <TIM2_IRQHandler+0x86>
			if (Seg1Value < 9) {
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <TIM2_IRQHandler+0x98>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d80c      	bhi.n	80011a0 <TIM2_IRQHandler+0x74>
				Seg1Value++;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <TIM2_IRQHandler+0x98>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <TIM2_IRQHandler+0x98>)
 8001190:	701a      	strb	r2, [r3, #0]
				Seg2Value++;
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <TIM2_IRQHandler+0x9c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <TIM2_IRQHandler+0x9c>)
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e005      	b.n	80011ac <TIM2_IRQHandler+0x80>
			} else {
				Seg1Value = 0;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <TIM2_IRQHandler+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
				Seg2Value = 0;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <TIM2_IRQHandler+0x9c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
			}
			cnt = 0;
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <TIM2_IRQHandler+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
		}
    }
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40020814 	.word	0x40020814
 80011c0:	200000c8 	.word	0x200000c8
 80011c4:	2000006e 	.word	0x2000006e
 80011c8:	2000006f 	.word	0x2000006f

080011cc <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    if (USART2->SR & (1 << 7)) { // Check if TXE is set
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <USART2_IRQHandler+0x54>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01c      	beq.n	8001216 <USART2_IRQHandler+0x4a>
        if (txIndex < txSize) {
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <USART2_IRQHandler+0x58>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <USART2_IRQHandler+0x5c>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d20e      	bcs.n	800120a <USART2_IRQHandler+0x3e>
            USART2->DR = txBuffer[txIndex++]; // Send next byte
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <USART2_IRQHandler+0x60>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <USART2_IRQHandler+0x58>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	b288      	uxth	r0, r1
 80011fa:	490a      	ldr	r1, [pc, #40]	@ (8001224 <USART2_IRQHandler+0x58>)
 80011fc:	8008      	strh	r0, [r1, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <USART2_IRQHandler+0x54>)
 8001206:	605a      	str	r2, [r3, #4]
        } else {
            USART2->CR1 &= ~(1 << 7); // Disable TXE interrupt
        }
    }
}
 8001208:	e005      	b.n	8001216 <USART2_IRQHandler+0x4a>
            USART2->CR1 &= ~(1 << 7); // Disable TXE interrupt
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <USART2_IRQHandler+0x54>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <USART2_IRQHandler+0x54>)
 8001210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001214:	60d3      	str	r3, [r2, #12]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40004400 	.word	0x40004400
 8001224:	2000008a 	.word	0x2000008a
 8001228:	20000088 	.word	0x20000088
 800122c:	20000084 	.word	0x20000084

08001230 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void) {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) { // Check for Update Interrupt Flag (UIF)
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <TIM3_IRQHandler+0x30>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <TIM3_IRQHandler+0x26>
        TIM3->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <TIM3_IRQHandler+0x30>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <TIM3_IRQHandler+0x30>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6113      	str	r3, [r2, #16]

        tick++;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <TIM3_IRQHandler+0x34>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <TIM3_IRQHandler+0x34>)
 8001254:	6013      	str	r3, [r2, #0]
    }
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40000400 	.word	0x40000400
 8001264:	2000008c 	.word	0x2000008c

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  static uint32_t tick;
  tick++;
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Handler+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <SysTick_Handler+0x18>)
 80012c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	200000cc 	.word	0x200000cc

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f000 f878 	bl	80013fc <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20010000 	.word	0x20010000
 8001338:	00000400 	.word	0x00000400
 800133c:	200000d0 	.word	0x200000d0
 8001340:	20000220 	.word	0x20000220

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f000 f837 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fe53 	bl	8001044 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80013ac:	08001d64 	.word	0x08001d64
  ldr r2, =_sbss
 80013b0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80013b4:	2000021c 	.word	0x2000021c

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <siprintf>:
 80013bc:	b40e      	push	{r1, r2, r3}
 80013be:	b500      	push	{lr}
 80013c0:	b09c      	sub	sp, #112	@ 0x70
 80013c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80013c4:	9002      	str	r0, [sp, #8]
 80013c6:	9006      	str	r0, [sp, #24]
 80013c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80013cc:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <siprintf+0x38>)
 80013ce:	9107      	str	r1, [sp, #28]
 80013d0:	9104      	str	r1, [sp, #16]
 80013d2:	4909      	ldr	r1, [pc, #36]	@ (80013f8 <siprintf+0x3c>)
 80013d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80013d8:	9105      	str	r1, [sp, #20]
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	a902      	add	r1, sp, #8
 80013e0:	f000 f98c 	bl	80016fc <_svfiprintf_r>
 80013e4:	9b02      	ldr	r3, [sp, #8]
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	b01c      	add	sp, #112	@ 0x70
 80013ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80013f0:	b003      	add	sp, #12
 80013f2:	4770      	bx	lr
 80013f4:	20000000 	.word	0x20000000
 80013f8:	ffff0208 	.word	0xffff0208

080013fc <__errno>:
 80013fc:	4b01      	ldr	r3, [pc, #4]	@ (8001404 <__errno+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4d0d      	ldr	r5, [pc, #52]	@ (8001440 <__libc_init_array+0x38>)
 800140c:	4c0d      	ldr	r4, [pc, #52]	@ (8001444 <__libc_init_array+0x3c>)
 800140e:	1b64      	subs	r4, r4, r5
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	2600      	movs	r6, #0
 8001414:	42a6      	cmp	r6, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	4d0b      	ldr	r5, [pc, #44]	@ (8001448 <__libc_init_array+0x40>)
 800141a:	4c0c      	ldr	r4, [pc, #48]	@ (800144c <__libc_init_array+0x44>)
 800141c:	f000 fc66 	bl	8001cec <_init>
 8001420:	1b64      	subs	r4, r4, r5
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	2600      	movs	r6, #0
 8001426:	42a6      	cmp	r6, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001430:	4798      	blx	r3
 8001432:	3601      	adds	r6, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f855 3b04 	ldr.w	r3, [r5], #4
 800143a:	4798      	blx	r3
 800143c:	3601      	adds	r6, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	08001d5c 	.word	0x08001d5c
 8001444:	08001d5c 	.word	0x08001d5c
 8001448:	08001d5c 	.word	0x08001d5c
 800144c:	08001d60 	.word	0x08001d60

08001450 <__retarget_lock_acquire_recursive>:
 8001450:	4770      	bx	lr

08001452 <__retarget_lock_release_recursive>:
 8001452:	4770      	bx	lr

08001454 <_free_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4605      	mov	r5, r0
 8001458:	2900      	cmp	r1, #0
 800145a:	d041      	beq.n	80014e0 <_free_r+0x8c>
 800145c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001460:	1f0c      	subs	r4, r1, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	bfb8      	it	lt
 8001466:	18e4      	addlt	r4, r4, r3
 8001468:	f000 f8e0 	bl	800162c <__malloc_lock>
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <_free_r+0x90>)
 800146e:	6813      	ldr	r3, [r2, #0]
 8001470:	b933      	cbnz	r3, 8001480 <_free_r+0x2c>
 8001472:	6063      	str	r3, [r4, #4]
 8001474:	6014      	str	r4, [r2, #0]
 8001476:	4628      	mov	r0, r5
 8001478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800147c:	f000 b8dc 	b.w	8001638 <__malloc_unlock>
 8001480:	42a3      	cmp	r3, r4
 8001482:	d908      	bls.n	8001496 <_free_r+0x42>
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	1821      	adds	r1, r4, r0
 8001488:	428b      	cmp	r3, r1
 800148a:	bf01      	itttt	eq
 800148c:	6819      	ldreq	r1, [r3, #0]
 800148e:	685b      	ldreq	r3, [r3, #4]
 8001490:	1809      	addeq	r1, r1, r0
 8001492:	6021      	streq	r1, [r4, #0]
 8001494:	e7ed      	b.n	8001472 <_free_r+0x1e>
 8001496:	461a      	mov	r2, r3
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	b10b      	cbz	r3, 80014a0 <_free_r+0x4c>
 800149c:	42a3      	cmp	r3, r4
 800149e:	d9fa      	bls.n	8001496 <_free_r+0x42>
 80014a0:	6811      	ldr	r1, [r2, #0]
 80014a2:	1850      	adds	r0, r2, r1
 80014a4:	42a0      	cmp	r0, r4
 80014a6:	d10b      	bne.n	80014c0 <_free_r+0x6c>
 80014a8:	6820      	ldr	r0, [r4, #0]
 80014aa:	4401      	add	r1, r0
 80014ac:	1850      	adds	r0, r2, r1
 80014ae:	4283      	cmp	r3, r0
 80014b0:	6011      	str	r1, [r2, #0]
 80014b2:	d1e0      	bne.n	8001476 <_free_r+0x22>
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	6053      	str	r3, [r2, #4]
 80014ba:	4408      	add	r0, r1
 80014bc:	6010      	str	r0, [r2, #0]
 80014be:	e7da      	b.n	8001476 <_free_r+0x22>
 80014c0:	d902      	bls.n	80014c8 <_free_r+0x74>
 80014c2:	230c      	movs	r3, #12
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	e7d6      	b.n	8001476 <_free_r+0x22>
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	1821      	adds	r1, r4, r0
 80014cc:	428b      	cmp	r3, r1
 80014ce:	bf04      	itt	eq
 80014d0:	6819      	ldreq	r1, [r3, #0]
 80014d2:	685b      	ldreq	r3, [r3, #4]
 80014d4:	6063      	str	r3, [r4, #4]
 80014d6:	bf04      	itt	eq
 80014d8:	1809      	addeq	r1, r1, r0
 80014da:	6021      	streq	r1, [r4, #0]
 80014dc:	6054      	str	r4, [r2, #4]
 80014de:	e7ca      	b.n	8001476 <_free_r+0x22>
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	20000218 	.word	0x20000218

080014e8 <sbrk_aligned>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	4e0f      	ldr	r6, [pc, #60]	@ (8001528 <sbrk_aligned+0x40>)
 80014ec:	460c      	mov	r4, r1
 80014ee:	6831      	ldr	r1, [r6, #0]
 80014f0:	4605      	mov	r5, r0
 80014f2:	b911      	cbnz	r1, 80014fa <sbrk_aligned+0x12>
 80014f4:	f000 fba6 	bl	8001c44 <_sbrk_r>
 80014f8:	6030      	str	r0, [r6, #0]
 80014fa:	4621      	mov	r1, r4
 80014fc:	4628      	mov	r0, r5
 80014fe:	f000 fba1 	bl	8001c44 <_sbrk_r>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d103      	bne.n	800150e <sbrk_aligned+0x26>
 8001506:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800150a:	4620      	mov	r0, r4
 800150c:	bd70      	pop	{r4, r5, r6, pc}
 800150e:	1cc4      	adds	r4, r0, #3
 8001510:	f024 0403 	bic.w	r4, r4, #3
 8001514:	42a0      	cmp	r0, r4
 8001516:	d0f8      	beq.n	800150a <sbrk_aligned+0x22>
 8001518:	1a21      	subs	r1, r4, r0
 800151a:	4628      	mov	r0, r5
 800151c:	f000 fb92 	bl	8001c44 <_sbrk_r>
 8001520:	3001      	adds	r0, #1
 8001522:	d1f2      	bne.n	800150a <sbrk_aligned+0x22>
 8001524:	e7ef      	b.n	8001506 <sbrk_aligned+0x1e>
 8001526:	bf00      	nop
 8001528:	20000214 	.word	0x20000214

0800152c <_malloc_r>:
 800152c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001530:	1ccd      	adds	r5, r1, #3
 8001532:	f025 0503 	bic.w	r5, r5, #3
 8001536:	3508      	adds	r5, #8
 8001538:	2d0c      	cmp	r5, #12
 800153a:	bf38      	it	cc
 800153c:	250c      	movcc	r5, #12
 800153e:	2d00      	cmp	r5, #0
 8001540:	4606      	mov	r6, r0
 8001542:	db01      	blt.n	8001548 <_malloc_r+0x1c>
 8001544:	42a9      	cmp	r1, r5
 8001546:	d904      	bls.n	8001552 <_malloc_r+0x26>
 8001548:	230c      	movs	r3, #12
 800154a:	6033      	str	r3, [r6, #0]
 800154c:	2000      	movs	r0, #0
 800154e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001628 <_malloc_r+0xfc>
 8001556:	f000 f869 	bl	800162c <__malloc_lock>
 800155a:	f8d8 3000 	ldr.w	r3, [r8]
 800155e:	461c      	mov	r4, r3
 8001560:	bb44      	cbnz	r4, 80015b4 <_malloc_r+0x88>
 8001562:	4629      	mov	r1, r5
 8001564:	4630      	mov	r0, r6
 8001566:	f7ff ffbf 	bl	80014e8 <sbrk_aligned>
 800156a:	1c43      	adds	r3, r0, #1
 800156c:	4604      	mov	r4, r0
 800156e:	d158      	bne.n	8001622 <_malloc_r+0xf6>
 8001570:	f8d8 4000 	ldr.w	r4, [r8]
 8001574:	4627      	mov	r7, r4
 8001576:	2f00      	cmp	r7, #0
 8001578:	d143      	bne.n	8001602 <_malloc_r+0xd6>
 800157a:	2c00      	cmp	r4, #0
 800157c:	d04b      	beq.n	8001616 <_malloc_r+0xea>
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	4639      	mov	r1, r7
 8001582:	4630      	mov	r0, r6
 8001584:	eb04 0903 	add.w	r9, r4, r3
 8001588:	f000 fb5c 	bl	8001c44 <_sbrk_r>
 800158c:	4581      	cmp	r9, r0
 800158e:	d142      	bne.n	8001616 <_malloc_r+0xea>
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	1a6d      	subs	r5, r5, r1
 8001594:	4629      	mov	r1, r5
 8001596:	4630      	mov	r0, r6
 8001598:	f7ff ffa6 	bl	80014e8 <sbrk_aligned>
 800159c:	3001      	adds	r0, #1
 800159e:	d03a      	beq.n	8001616 <_malloc_r+0xea>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	442b      	add	r3, r5
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	f8d8 3000 	ldr.w	r3, [r8]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	bb62      	cbnz	r2, 8001608 <_malloc_r+0xdc>
 80015ae:	f8c8 7000 	str.w	r7, [r8]
 80015b2:	e00f      	b.n	80015d4 <_malloc_r+0xa8>
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	1b52      	subs	r2, r2, r5
 80015b8:	d420      	bmi.n	80015fc <_malloc_r+0xd0>
 80015ba:	2a0b      	cmp	r2, #11
 80015bc:	d917      	bls.n	80015ee <_malloc_r+0xc2>
 80015be:	1961      	adds	r1, r4, r5
 80015c0:	42a3      	cmp	r3, r4
 80015c2:	6025      	str	r5, [r4, #0]
 80015c4:	bf18      	it	ne
 80015c6:	6059      	strne	r1, [r3, #4]
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	bf08      	it	eq
 80015cc:	f8c8 1000 	streq.w	r1, [r8]
 80015d0:	5162      	str	r2, [r4, r5]
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	4630      	mov	r0, r6
 80015d6:	f000 f82f 	bl	8001638 <__malloc_unlock>
 80015da:	f104 000b 	add.w	r0, r4, #11
 80015de:	1d23      	adds	r3, r4, #4
 80015e0:	f020 0007 	bic.w	r0, r0, #7
 80015e4:	1ac2      	subs	r2, r0, r3
 80015e6:	bf1c      	itt	ne
 80015e8:	1a1b      	subne	r3, r3, r0
 80015ea:	50a3      	strne	r3, [r4, r2]
 80015ec:	e7af      	b.n	800154e <_malloc_r+0x22>
 80015ee:	6862      	ldr	r2, [r4, #4]
 80015f0:	42a3      	cmp	r3, r4
 80015f2:	bf0c      	ite	eq
 80015f4:	f8c8 2000 	streq.w	r2, [r8]
 80015f8:	605a      	strne	r2, [r3, #4]
 80015fa:	e7eb      	b.n	80015d4 <_malloc_r+0xa8>
 80015fc:	4623      	mov	r3, r4
 80015fe:	6864      	ldr	r4, [r4, #4]
 8001600:	e7ae      	b.n	8001560 <_malloc_r+0x34>
 8001602:	463c      	mov	r4, r7
 8001604:	687f      	ldr	r7, [r7, #4]
 8001606:	e7b6      	b.n	8001576 <_malloc_r+0x4a>
 8001608:	461a      	mov	r2, r3
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	42a3      	cmp	r3, r4
 800160e:	d1fb      	bne.n	8001608 <_malloc_r+0xdc>
 8001610:	2300      	movs	r3, #0
 8001612:	6053      	str	r3, [r2, #4]
 8001614:	e7de      	b.n	80015d4 <_malloc_r+0xa8>
 8001616:	230c      	movs	r3, #12
 8001618:	6033      	str	r3, [r6, #0]
 800161a:	4630      	mov	r0, r6
 800161c:	f000 f80c 	bl	8001638 <__malloc_unlock>
 8001620:	e794      	b.n	800154c <_malloc_r+0x20>
 8001622:	6005      	str	r5, [r0, #0]
 8001624:	e7d6      	b.n	80015d4 <_malloc_r+0xa8>
 8001626:	bf00      	nop
 8001628:	20000218 	.word	0x20000218

0800162c <__malloc_lock>:
 800162c:	4801      	ldr	r0, [pc, #4]	@ (8001634 <__malloc_lock+0x8>)
 800162e:	f7ff bf0f 	b.w	8001450 <__retarget_lock_acquire_recursive>
 8001632:	bf00      	nop
 8001634:	20000210 	.word	0x20000210

08001638 <__malloc_unlock>:
 8001638:	4801      	ldr	r0, [pc, #4]	@ (8001640 <__malloc_unlock+0x8>)
 800163a:	f7ff bf0a 	b.w	8001452 <__retarget_lock_release_recursive>
 800163e:	bf00      	nop
 8001640:	20000210 	.word	0x20000210

08001644 <__ssputs_r>:
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001648:	688e      	ldr	r6, [r1, #8]
 800164a:	461f      	mov	r7, r3
 800164c:	42be      	cmp	r6, r7
 800164e:	680b      	ldr	r3, [r1, #0]
 8001650:	4682      	mov	sl, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4690      	mov	r8, r2
 8001656:	d82d      	bhi.n	80016b4 <__ssputs_r+0x70>
 8001658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800165c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001660:	d026      	beq.n	80016b0 <__ssputs_r+0x6c>
 8001662:	6965      	ldr	r5, [r4, #20]
 8001664:	6909      	ldr	r1, [r1, #16]
 8001666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800166a:	eba3 0901 	sub.w	r9, r3, r1
 800166e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001672:	1c7b      	adds	r3, r7, #1
 8001674:	444b      	add	r3, r9
 8001676:	106d      	asrs	r5, r5, #1
 8001678:	429d      	cmp	r5, r3
 800167a:	bf38      	it	cc
 800167c:	461d      	movcc	r5, r3
 800167e:	0553      	lsls	r3, r2, #21
 8001680:	d527      	bpl.n	80016d2 <__ssputs_r+0x8e>
 8001682:	4629      	mov	r1, r5
 8001684:	f7ff ff52 	bl	800152c <_malloc_r>
 8001688:	4606      	mov	r6, r0
 800168a:	b360      	cbz	r0, 80016e6 <__ssputs_r+0xa2>
 800168c:	6921      	ldr	r1, [r4, #16]
 800168e:	464a      	mov	r2, r9
 8001690:	f000 fae8 	bl	8001c64 <memcpy>
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169e:	81a3      	strh	r3, [r4, #12]
 80016a0:	6126      	str	r6, [r4, #16]
 80016a2:	6165      	str	r5, [r4, #20]
 80016a4:	444e      	add	r6, r9
 80016a6:	eba5 0509 	sub.w	r5, r5, r9
 80016aa:	6026      	str	r6, [r4, #0]
 80016ac:	60a5      	str	r5, [r4, #8]
 80016ae:	463e      	mov	r6, r7
 80016b0:	42be      	cmp	r6, r7
 80016b2:	d900      	bls.n	80016b6 <__ssputs_r+0x72>
 80016b4:	463e      	mov	r6, r7
 80016b6:	6820      	ldr	r0, [r4, #0]
 80016b8:	4632      	mov	r2, r6
 80016ba:	4641      	mov	r1, r8
 80016bc:	f000 faa8 	bl	8001c10 <memmove>
 80016c0:	68a3      	ldr	r3, [r4, #8]
 80016c2:	1b9b      	subs	r3, r3, r6
 80016c4:	60a3      	str	r3, [r4, #8]
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	4433      	add	r3, r6
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	2000      	movs	r0, #0
 80016ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d2:	462a      	mov	r2, r5
 80016d4:	f000 fad4 	bl	8001c80 <_realloc_r>
 80016d8:	4606      	mov	r6, r0
 80016da:	2800      	cmp	r0, #0
 80016dc:	d1e0      	bne.n	80016a0 <__ssputs_r+0x5c>
 80016de:	6921      	ldr	r1, [r4, #16]
 80016e0:	4650      	mov	r0, sl
 80016e2:	f7ff feb7 	bl	8001454 <_free_r>
 80016e6:	230c      	movs	r3, #12
 80016e8:	f8ca 3000 	str.w	r3, [sl]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f2:	81a3      	strh	r3, [r4, #12]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f8:	e7e9      	b.n	80016ce <__ssputs_r+0x8a>
	...

080016fc <_svfiprintf_r>:
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	4698      	mov	r8, r3
 8001702:	898b      	ldrh	r3, [r1, #12]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	b09d      	sub	sp, #116	@ 0x74
 8001708:	4607      	mov	r7, r0
 800170a:	460d      	mov	r5, r1
 800170c:	4614      	mov	r4, r2
 800170e:	d510      	bpl.n	8001732 <_svfiprintf_r+0x36>
 8001710:	690b      	ldr	r3, [r1, #16]
 8001712:	b973      	cbnz	r3, 8001732 <_svfiprintf_r+0x36>
 8001714:	2140      	movs	r1, #64	@ 0x40
 8001716:	f7ff ff09 	bl	800152c <_malloc_r>
 800171a:	6028      	str	r0, [r5, #0]
 800171c:	6128      	str	r0, [r5, #16]
 800171e:	b930      	cbnz	r0, 800172e <_svfiprintf_r+0x32>
 8001720:	230c      	movs	r3, #12
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001728:	b01d      	add	sp, #116	@ 0x74
 800172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800172e:	2340      	movs	r3, #64	@ 0x40
 8001730:	616b      	str	r3, [r5, #20]
 8001732:	2300      	movs	r3, #0
 8001734:	9309      	str	r3, [sp, #36]	@ 0x24
 8001736:	2320      	movs	r3, #32
 8001738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800173c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001740:	2330      	movs	r3, #48	@ 0x30
 8001742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80018e0 <_svfiprintf_r+0x1e4>
 8001746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800174a:	f04f 0901 	mov.w	r9, #1
 800174e:	4623      	mov	r3, r4
 8001750:	469a      	mov	sl, r3
 8001752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001756:	b10a      	cbz	r2, 800175c <_svfiprintf_r+0x60>
 8001758:	2a25      	cmp	r2, #37	@ 0x25
 800175a:	d1f9      	bne.n	8001750 <_svfiprintf_r+0x54>
 800175c:	ebba 0b04 	subs.w	fp, sl, r4
 8001760:	d00b      	beq.n	800177a <_svfiprintf_r+0x7e>
 8001762:	465b      	mov	r3, fp
 8001764:	4622      	mov	r2, r4
 8001766:	4629      	mov	r1, r5
 8001768:	4638      	mov	r0, r7
 800176a:	f7ff ff6b 	bl	8001644 <__ssputs_r>
 800176e:	3001      	adds	r0, #1
 8001770:	f000 80a7 	beq.w	80018c2 <_svfiprintf_r+0x1c6>
 8001774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001776:	445a      	add	r2, fp
 8001778:	9209      	str	r2, [sp, #36]	@ 0x24
 800177a:	f89a 3000 	ldrb.w	r3, [sl]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809f 	beq.w	80018c2 <_svfiprintf_r+0x1c6>
 8001784:	2300      	movs	r3, #0
 8001786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800178a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800178e:	f10a 0a01 	add.w	sl, sl, #1
 8001792:	9304      	str	r3, [sp, #16]
 8001794:	9307      	str	r3, [sp, #28]
 8001796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800179a:	931a      	str	r3, [sp, #104]	@ 0x68
 800179c:	4654      	mov	r4, sl
 800179e:	2205      	movs	r2, #5
 80017a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a4:	484e      	ldr	r0, [pc, #312]	@ (80018e0 <_svfiprintf_r+0x1e4>)
 80017a6:	f7fe fd23 	bl	80001f0 <memchr>
 80017aa:	9a04      	ldr	r2, [sp, #16]
 80017ac:	b9d8      	cbnz	r0, 80017e6 <_svfiprintf_r+0xea>
 80017ae:	06d0      	lsls	r0, r2, #27
 80017b0:	bf44      	itt	mi
 80017b2:	2320      	movmi	r3, #32
 80017b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017b8:	0711      	lsls	r1, r2, #28
 80017ba:	bf44      	itt	mi
 80017bc:	232b      	movmi	r3, #43	@ 0x2b
 80017be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017c2:	f89a 3000 	ldrb.w	r3, [sl]
 80017c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80017c8:	d015      	beq.n	80017f6 <_svfiprintf_r+0xfa>
 80017ca:	9a07      	ldr	r2, [sp, #28]
 80017cc:	4654      	mov	r4, sl
 80017ce:	2000      	movs	r0, #0
 80017d0:	f04f 0c0a 	mov.w	ip, #10
 80017d4:	4621      	mov	r1, r4
 80017d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017da:	3b30      	subs	r3, #48	@ 0x30
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d94b      	bls.n	8001878 <_svfiprintf_r+0x17c>
 80017e0:	b1b0      	cbz	r0, 8001810 <_svfiprintf_r+0x114>
 80017e2:	9207      	str	r2, [sp, #28]
 80017e4:	e014      	b.n	8001810 <_svfiprintf_r+0x114>
 80017e6:	eba0 0308 	sub.w	r3, r0, r8
 80017ea:	fa09 f303 	lsl.w	r3, r9, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	9304      	str	r3, [sp, #16]
 80017f2:	46a2      	mov	sl, r4
 80017f4:	e7d2      	b.n	800179c <_svfiprintf_r+0xa0>
 80017f6:	9b03      	ldr	r3, [sp, #12]
 80017f8:	1d19      	adds	r1, r3, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	9103      	str	r1, [sp, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bfbb      	ittet	lt
 8001802:	425b      	neglt	r3, r3
 8001804:	f042 0202 	orrlt.w	r2, r2, #2
 8001808:	9307      	strge	r3, [sp, #28]
 800180a:	9307      	strlt	r3, [sp, #28]
 800180c:	bfb8      	it	lt
 800180e:	9204      	strlt	r2, [sp, #16]
 8001810:	7823      	ldrb	r3, [r4, #0]
 8001812:	2b2e      	cmp	r3, #46	@ 0x2e
 8001814:	d10a      	bne.n	800182c <_svfiprintf_r+0x130>
 8001816:	7863      	ldrb	r3, [r4, #1]
 8001818:	2b2a      	cmp	r3, #42	@ 0x2a
 800181a:	d132      	bne.n	8001882 <_svfiprintf_r+0x186>
 800181c:	9b03      	ldr	r3, [sp, #12]
 800181e:	1d1a      	adds	r2, r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	9203      	str	r2, [sp, #12]
 8001824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001828:	3402      	adds	r4, #2
 800182a:	9305      	str	r3, [sp, #20]
 800182c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80018f0 <_svfiprintf_r+0x1f4>
 8001830:	7821      	ldrb	r1, [r4, #0]
 8001832:	2203      	movs	r2, #3
 8001834:	4650      	mov	r0, sl
 8001836:	f7fe fcdb 	bl	80001f0 <memchr>
 800183a:	b138      	cbz	r0, 800184c <_svfiprintf_r+0x150>
 800183c:	9b04      	ldr	r3, [sp, #16]
 800183e:	eba0 000a 	sub.w	r0, r0, sl
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	4082      	lsls	r2, r0
 8001846:	4313      	orrs	r3, r2
 8001848:	3401      	adds	r4, #1
 800184a:	9304      	str	r3, [sp, #16]
 800184c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001850:	4824      	ldr	r0, [pc, #144]	@ (80018e4 <_svfiprintf_r+0x1e8>)
 8001852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001856:	2206      	movs	r2, #6
 8001858:	f7fe fcca 	bl	80001f0 <memchr>
 800185c:	2800      	cmp	r0, #0
 800185e:	d036      	beq.n	80018ce <_svfiprintf_r+0x1d2>
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <_svfiprintf_r+0x1ec>)
 8001862:	bb1b      	cbnz	r3, 80018ac <_svfiprintf_r+0x1b0>
 8001864:	9b03      	ldr	r3, [sp, #12]
 8001866:	3307      	adds	r3, #7
 8001868:	f023 0307 	bic.w	r3, r3, #7
 800186c:	3308      	adds	r3, #8
 800186e:	9303      	str	r3, [sp, #12]
 8001870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001872:	4433      	add	r3, r6
 8001874:	9309      	str	r3, [sp, #36]	@ 0x24
 8001876:	e76a      	b.n	800174e <_svfiprintf_r+0x52>
 8001878:	fb0c 3202 	mla	r2, ip, r2, r3
 800187c:	460c      	mov	r4, r1
 800187e:	2001      	movs	r0, #1
 8001880:	e7a8      	b.n	80017d4 <_svfiprintf_r+0xd8>
 8001882:	2300      	movs	r3, #0
 8001884:	3401      	adds	r4, #1
 8001886:	9305      	str	r3, [sp, #20]
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0c0a 	mov.w	ip, #10
 800188e:	4620      	mov	r0, r4
 8001890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001894:	3a30      	subs	r2, #48	@ 0x30
 8001896:	2a09      	cmp	r2, #9
 8001898:	d903      	bls.n	80018a2 <_svfiprintf_r+0x1a6>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0c6      	beq.n	800182c <_svfiprintf_r+0x130>
 800189e:	9105      	str	r1, [sp, #20]
 80018a0:	e7c4      	b.n	800182c <_svfiprintf_r+0x130>
 80018a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80018a6:	4604      	mov	r4, r0
 80018a8:	2301      	movs	r3, #1
 80018aa:	e7f0      	b.n	800188e <_svfiprintf_r+0x192>
 80018ac:	ab03      	add	r3, sp, #12
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	462a      	mov	r2, r5
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <_svfiprintf_r+0x1f0>)
 80018b4:	a904      	add	r1, sp, #16
 80018b6:	4638      	mov	r0, r7
 80018b8:	f3af 8000 	nop.w
 80018bc:	1c42      	adds	r2, r0, #1
 80018be:	4606      	mov	r6, r0
 80018c0:	d1d6      	bne.n	8001870 <_svfiprintf_r+0x174>
 80018c2:	89ab      	ldrh	r3, [r5, #12]
 80018c4:	065b      	lsls	r3, r3, #25
 80018c6:	f53f af2d 	bmi.w	8001724 <_svfiprintf_r+0x28>
 80018ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80018cc:	e72c      	b.n	8001728 <_svfiprintf_r+0x2c>
 80018ce:	ab03      	add	r3, sp, #12
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	462a      	mov	r2, r5
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <_svfiprintf_r+0x1f0>)
 80018d6:	a904      	add	r1, sp, #16
 80018d8:	4638      	mov	r0, r7
 80018da:	f000 f879 	bl	80019d0 <_printf_i>
 80018de:	e7ed      	b.n	80018bc <_svfiprintf_r+0x1c0>
 80018e0:	08001d20 	.word	0x08001d20
 80018e4:	08001d2a 	.word	0x08001d2a
 80018e8:	00000000 	.word	0x00000000
 80018ec:	08001645 	.word	0x08001645
 80018f0:	08001d26 	.word	0x08001d26

080018f4 <_printf_common>:
 80018f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f8:	4616      	mov	r6, r2
 80018fa:	4698      	mov	r8, r3
 80018fc:	688a      	ldr	r2, [r1, #8]
 80018fe:	690b      	ldr	r3, [r1, #16]
 8001900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001904:	4293      	cmp	r3, r2
 8001906:	bfb8      	it	lt
 8001908:	4613      	movlt	r3, r2
 800190a:	6033      	str	r3, [r6, #0]
 800190c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001910:	4607      	mov	r7, r0
 8001912:	460c      	mov	r4, r1
 8001914:	b10a      	cbz	r2, 800191a <_printf_common+0x26>
 8001916:	3301      	adds	r3, #1
 8001918:	6033      	str	r3, [r6, #0]
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	0699      	lsls	r1, r3, #26
 800191e:	bf42      	ittt	mi
 8001920:	6833      	ldrmi	r3, [r6, #0]
 8001922:	3302      	addmi	r3, #2
 8001924:	6033      	strmi	r3, [r6, #0]
 8001926:	6825      	ldr	r5, [r4, #0]
 8001928:	f015 0506 	ands.w	r5, r5, #6
 800192c:	d106      	bne.n	800193c <_printf_common+0x48>
 800192e:	f104 0a19 	add.w	sl, r4, #25
 8001932:	68e3      	ldr	r3, [r4, #12]
 8001934:	6832      	ldr	r2, [r6, #0]
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	42ab      	cmp	r3, r5
 800193a:	dc26      	bgt.n	800198a <_printf_common+0x96>
 800193c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	3b00      	subs	r3, #0
 8001944:	bf18      	it	ne
 8001946:	2301      	movne	r3, #1
 8001948:	0692      	lsls	r2, r2, #26
 800194a:	d42b      	bmi.n	80019a4 <_printf_common+0xb0>
 800194c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001950:	4641      	mov	r1, r8
 8001952:	4638      	mov	r0, r7
 8001954:	47c8      	blx	r9
 8001956:	3001      	adds	r0, #1
 8001958:	d01e      	beq.n	8001998 <_printf_common+0xa4>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	6922      	ldr	r2, [r4, #16]
 800195e:	f003 0306 	and.w	r3, r3, #6
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf02      	ittt	eq
 8001966:	68e5      	ldreq	r5, [r4, #12]
 8001968:	6833      	ldreq	r3, [r6, #0]
 800196a:	1aed      	subeq	r5, r5, r3
 800196c:	68a3      	ldr	r3, [r4, #8]
 800196e:	bf0c      	ite	eq
 8001970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001974:	2500      	movne	r5, #0
 8001976:	4293      	cmp	r3, r2
 8001978:	bfc4      	itt	gt
 800197a:	1a9b      	subgt	r3, r3, r2
 800197c:	18ed      	addgt	r5, r5, r3
 800197e:	2600      	movs	r6, #0
 8001980:	341a      	adds	r4, #26
 8001982:	42b5      	cmp	r5, r6
 8001984:	d11a      	bne.n	80019bc <_printf_common+0xc8>
 8001986:	2000      	movs	r0, #0
 8001988:	e008      	b.n	800199c <_printf_common+0xa8>
 800198a:	2301      	movs	r3, #1
 800198c:	4652      	mov	r2, sl
 800198e:	4641      	mov	r1, r8
 8001990:	4638      	mov	r0, r7
 8001992:	47c8      	blx	r9
 8001994:	3001      	adds	r0, #1
 8001996:	d103      	bne.n	80019a0 <_printf_common+0xac>
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800199c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a0:	3501      	adds	r5, #1
 80019a2:	e7c6      	b.n	8001932 <_printf_common+0x3e>
 80019a4:	18e1      	adds	r1, r4, r3
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	2030      	movs	r0, #48	@ 0x30
 80019aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019ae:	4422      	add	r2, r4
 80019b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019b8:	3302      	adds	r3, #2
 80019ba:	e7c7      	b.n	800194c <_printf_common+0x58>
 80019bc:	2301      	movs	r3, #1
 80019be:	4622      	mov	r2, r4
 80019c0:	4641      	mov	r1, r8
 80019c2:	4638      	mov	r0, r7
 80019c4:	47c8      	blx	r9
 80019c6:	3001      	adds	r0, #1
 80019c8:	d0e6      	beq.n	8001998 <_printf_common+0xa4>
 80019ca:	3601      	adds	r6, #1
 80019cc:	e7d9      	b.n	8001982 <_printf_common+0x8e>
	...

080019d0 <_printf_i>:
 80019d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d4:	7e0f      	ldrb	r7, [r1, #24]
 80019d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80019d8:	2f78      	cmp	r7, #120	@ 0x78
 80019da:	4691      	mov	r9, r2
 80019dc:	4680      	mov	r8, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	469a      	mov	sl, r3
 80019e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80019e6:	d807      	bhi.n	80019f8 <_printf_i+0x28>
 80019e8:	2f62      	cmp	r7, #98	@ 0x62
 80019ea:	d80a      	bhi.n	8001a02 <_printf_i+0x32>
 80019ec:	2f00      	cmp	r7, #0
 80019ee:	f000 80d2 	beq.w	8001b96 <_printf_i+0x1c6>
 80019f2:	2f58      	cmp	r7, #88	@ 0x58
 80019f4:	f000 80b9 	beq.w	8001b6a <_printf_i+0x19a>
 80019f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80019fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a00:	e03a      	b.n	8001a78 <_printf_i+0xa8>
 8001a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a06:	2b15      	cmp	r3, #21
 8001a08:	d8f6      	bhi.n	80019f8 <_printf_i+0x28>
 8001a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8001a10 <_printf_i+0x40>)
 8001a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a10:	08001a69 	.word	0x08001a69
 8001a14:	08001a7d 	.word	0x08001a7d
 8001a18:	080019f9 	.word	0x080019f9
 8001a1c:	080019f9 	.word	0x080019f9
 8001a20:	080019f9 	.word	0x080019f9
 8001a24:	080019f9 	.word	0x080019f9
 8001a28:	08001a7d 	.word	0x08001a7d
 8001a2c:	080019f9 	.word	0x080019f9
 8001a30:	080019f9 	.word	0x080019f9
 8001a34:	080019f9 	.word	0x080019f9
 8001a38:	080019f9 	.word	0x080019f9
 8001a3c:	08001b7d 	.word	0x08001b7d
 8001a40:	08001aa7 	.word	0x08001aa7
 8001a44:	08001b37 	.word	0x08001b37
 8001a48:	080019f9 	.word	0x080019f9
 8001a4c:	080019f9 	.word	0x080019f9
 8001a50:	08001b9f 	.word	0x08001b9f
 8001a54:	080019f9 	.word	0x080019f9
 8001a58:	08001aa7 	.word	0x08001aa7
 8001a5c:	080019f9 	.word	0x080019f9
 8001a60:	080019f9 	.word	0x080019f9
 8001a64:	08001b3f 	.word	0x08001b3f
 8001a68:	6833      	ldr	r3, [r6, #0]
 8001a6a:	1d1a      	adds	r2, r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6032      	str	r2, [r6, #0]
 8001a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e09d      	b.n	8001bb8 <_printf_i+0x1e8>
 8001a7c:	6833      	ldr	r3, [r6, #0]
 8001a7e:	6820      	ldr	r0, [r4, #0]
 8001a80:	1d19      	adds	r1, r3, #4
 8001a82:	6031      	str	r1, [r6, #0]
 8001a84:	0606      	lsls	r6, r0, #24
 8001a86:	d501      	bpl.n	8001a8c <_printf_i+0xbc>
 8001a88:	681d      	ldr	r5, [r3, #0]
 8001a8a:	e003      	b.n	8001a94 <_printf_i+0xc4>
 8001a8c:	0645      	lsls	r5, r0, #25
 8001a8e:	d5fb      	bpl.n	8001a88 <_printf_i+0xb8>
 8001a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	da03      	bge.n	8001aa0 <_printf_i+0xd0>
 8001a98:	232d      	movs	r3, #45	@ 0x2d
 8001a9a:	426d      	negs	r5, r5
 8001a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001aa0:	4859      	ldr	r0, [pc, #356]	@ (8001c08 <_printf_i+0x238>)
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	e011      	b.n	8001aca <_printf_i+0xfa>
 8001aa6:	6821      	ldr	r1, [r4, #0]
 8001aa8:	6833      	ldr	r3, [r6, #0]
 8001aaa:	0608      	lsls	r0, r1, #24
 8001aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ab0:	d402      	bmi.n	8001ab8 <_printf_i+0xe8>
 8001ab2:	0649      	lsls	r1, r1, #25
 8001ab4:	bf48      	it	mi
 8001ab6:	b2ad      	uxthmi	r5, r5
 8001ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001aba:	4853      	ldr	r0, [pc, #332]	@ (8001c08 <_printf_i+0x238>)
 8001abc:	6033      	str	r3, [r6, #0]
 8001abe:	bf14      	ite	ne
 8001ac0:	230a      	movne	r3, #10
 8001ac2:	2308      	moveq	r3, #8
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001aca:	6866      	ldr	r6, [r4, #4]
 8001acc:	60a6      	str	r6, [r4, #8]
 8001ace:	2e00      	cmp	r6, #0
 8001ad0:	bfa2      	ittt	ge
 8001ad2:	6821      	ldrge	r1, [r4, #0]
 8001ad4:	f021 0104 	bicge.w	r1, r1, #4
 8001ad8:	6021      	strge	r1, [r4, #0]
 8001ada:	b90d      	cbnz	r5, 8001ae0 <_printf_i+0x110>
 8001adc:	2e00      	cmp	r6, #0
 8001ade:	d04b      	beq.n	8001b78 <_printf_i+0x1a8>
 8001ae0:	4616      	mov	r6, r2
 8001ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8001aea:	5dc7      	ldrb	r7, [r0, r7]
 8001aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001af0:	462f      	mov	r7, r5
 8001af2:	42bb      	cmp	r3, r7
 8001af4:	460d      	mov	r5, r1
 8001af6:	d9f4      	bls.n	8001ae2 <_printf_i+0x112>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d10b      	bne.n	8001b14 <_printf_i+0x144>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	07df      	lsls	r7, r3, #31
 8001b00:	d508      	bpl.n	8001b14 <_printf_i+0x144>
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	6861      	ldr	r1, [r4, #4]
 8001b06:	4299      	cmp	r1, r3
 8001b08:	bfde      	ittt	le
 8001b0a:	2330      	movle	r3, #48	@ 0x30
 8001b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001b14:	1b92      	subs	r2, r2, r6
 8001b16:	6122      	str	r2, [r4, #16]
 8001b18:	f8cd a000 	str.w	sl, [sp]
 8001b1c:	464b      	mov	r3, r9
 8001b1e:	aa03      	add	r2, sp, #12
 8001b20:	4621      	mov	r1, r4
 8001b22:	4640      	mov	r0, r8
 8001b24:	f7ff fee6 	bl	80018f4 <_printf_common>
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d14a      	bne.n	8001bc2 <_printf_i+0x1f2>
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b30:	b004      	add	sp, #16
 8001b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	4833      	ldr	r0, [pc, #204]	@ (8001c0c <_printf_i+0x23c>)
 8001b40:	2778      	movs	r7, #120	@ 0x78
 8001b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	6831      	ldr	r1, [r6, #0]
 8001b4a:	061f      	lsls	r7, r3, #24
 8001b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b50:	d402      	bmi.n	8001b58 <_printf_i+0x188>
 8001b52:	065f      	lsls	r7, r3, #25
 8001b54:	bf48      	it	mi
 8001b56:	b2ad      	uxthmi	r5, r5
 8001b58:	6031      	str	r1, [r6, #0]
 8001b5a:	07d9      	lsls	r1, r3, #31
 8001b5c:	bf44      	itt	mi
 8001b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8001b62:	6023      	strmi	r3, [r4, #0]
 8001b64:	b11d      	cbz	r5, 8001b6e <_printf_i+0x19e>
 8001b66:	2310      	movs	r3, #16
 8001b68:	e7ac      	b.n	8001ac4 <_printf_i+0xf4>
 8001b6a:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <_printf_i+0x238>)
 8001b6c:	e7e9      	b.n	8001b42 <_printf_i+0x172>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f023 0320 	bic.w	r3, r3, #32
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	e7f6      	b.n	8001b66 <_printf_i+0x196>
 8001b78:	4616      	mov	r6, r2
 8001b7a:	e7bd      	b.n	8001af8 <_printf_i+0x128>
 8001b7c:	6833      	ldr	r3, [r6, #0]
 8001b7e:	6825      	ldr	r5, [r4, #0]
 8001b80:	6961      	ldr	r1, [r4, #20]
 8001b82:	1d18      	adds	r0, r3, #4
 8001b84:	6030      	str	r0, [r6, #0]
 8001b86:	062e      	lsls	r6, r5, #24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	d501      	bpl.n	8001b90 <_printf_i+0x1c0>
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	e002      	b.n	8001b96 <_printf_i+0x1c6>
 8001b90:	0668      	lsls	r0, r5, #25
 8001b92:	d5fb      	bpl.n	8001b8c <_printf_i+0x1bc>
 8001b94:	8019      	strh	r1, [r3, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	6123      	str	r3, [r4, #16]
 8001b9a:	4616      	mov	r6, r2
 8001b9c:	e7bc      	b.n	8001b18 <_printf_i+0x148>
 8001b9e:	6833      	ldr	r3, [r6, #0]
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	6032      	str	r2, [r6, #0]
 8001ba4:	681e      	ldr	r6, [r3, #0]
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7fe fb20 	bl	80001f0 <memchr>
 8001bb0:	b108      	cbz	r0, 8001bb6 <_printf_i+0x1e6>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	6060      	str	r0, [r4, #4]
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	6123      	str	r3, [r4, #16]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bc0:	e7aa      	b.n	8001b18 <_printf_i+0x148>
 8001bc2:	6923      	ldr	r3, [r4, #16]
 8001bc4:	4632      	mov	r2, r6
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	4640      	mov	r0, r8
 8001bca:	47d0      	blx	sl
 8001bcc:	3001      	adds	r0, #1
 8001bce:	d0ad      	beq.n	8001b2c <_printf_i+0x15c>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	079b      	lsls	r3, r3, #30
 8001bd4:	d413      	bmi.n	8001bfe <_printf_i+0x22e>
 8001bd6:	68e0      	ldr	r0, [r4, #12]
 8001bd8:	9b03      	ldr	r3, [sp, #12]
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	bfb8      	it	lt
 8001bde:	4618      	movlt	r0, r3
 8001be0:	e7a6      	b.n	8001b30 <_printf_i+0x160>
 8001be2:	2301      	movs	r3, #1
 8001be4:	4632      	mov	r2, r6
 8001be6:	4649      	mov	r1, r9
 8001be8:	4640      	mov	r0, r8
 8001bea:	47d0      	blx	sl
 8001bec:	3001      	adds	r0, #1
 8001bee:	d09d      	beq.n	8001b2c <_printf_i+0x15c>
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	68e3      	ldr	r3, [r4, #12]
 8001bf4:	9903      	ldr	r1, [sp, #12]
 8001bf6:	1a5b      	subs	r3, r3, r1
 8001bf8:	42ab      	cmp	r3, r5
 8001bfa:	dcf2      	bgt.n	8001be2 <_printf_i+0x212>
 8001bfc:	e7eb      	b.n	8001bd6 <_printf_i+0x206>
 8001bfe:	2500      	movs	r5, #0
 8001c00:	f104 0619 	add.w	r6, r4, #25
 8001c04:	e7f5      	b.n	8001bf2 <_printf_i+0x222>
 8001c06:	bf00      	nop
 8001c08:	08001d31 	.word	0x08001d31
 8001c0c:	08001d42 	.word	0x08001d42

08001c10 <memmove>:
 8001c10:	4288      	cmp	r0, r1
 8001c12:	b510      	push	{r4, lr}
 8001c14:	eb01 0402 	add.w	r4, r1, r2
 8001c18:	d902      	bls.n	8001c20 <memmove+0x10>
 8001c1a:	4284      	cmp	r4, r0
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	d807      	bhi.n	8001c30 <memmove+0x20>
 8001c20:	1e43      	subs	r3, r0, #1
 8001c22:	42a1      	cmp	r1, r4
 8001c24:	d008      	beq.n	8001c38 <memmove+0x28>
 8001c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c2e:	e7f8      	b.n	8001c22 <memmove+0x12>
 8001c30:	4402      	add	r2, r0
 8001c32:	4601      	mov	r1, r0
 8001c34:	428a      	cmp	r2, r1
 8001c36:	d100      	bne.n	8001c3a <memmove+0x2a>
 8001c38:	bd10      	pop	{r4, pc}
 8001c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c42:	e7f7      	b.n	8001c34 <memmove+0x24>

08001c44 <_sbrk_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4d06      	ldr	r5, [pc, #24]	@ (8001c60 <_sbrk_r+0x1c>)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	f7ff fb42 	bl	80012d8 <_sbrk>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_sbrk_r+0x1a>
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_sbrk_r+0x1a>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	2000020c 	.word	0x2000020c

08001c64 <memcpy>:
 8001c64:	440a      	add	r2, r1
 8001c66:	4291      	cmp	r1, r2
 8001c68:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001c6c:	d100      	bne.n	8001c70 <memcpy+0xc>
 8001c6e:	4770      	bx	lr
 8001c70:	b510      	push	{r4, lr}
 8001c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c7a:	4291      	cmp	r1, r2
 8001c7c:	d1f9      	bne.n	8001c72 <memcpy+0xe>
 8001c7e:	bd10      	pop	{r4, pc}

08001c80 <_realloc_r>:
 8001c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c84:	4680      	mov	r8, r0
 8001c86:	4615      	mov	r5, r2
 8001c88:	460c      	mov	r4, r1
 8001c8a:	b921      	cbnz	r1, 8001c96 <_realloc_r+0x16>
 8001c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c90:	4611      	mov	r1, r2
 8001c92:	f7ff bc4b 	b.w	800152c <_malloc_r>
 8001c96:	b92a      	cbnz	r2, 8001ca4 <_realloc_r+0x24>
 8001c98:	f7ff fbdc 	bl	8001454 <_free_r>
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca4:	f000 f81a 	bl	8001cdc <_malloc_usable_size_r>
 8001ca8:	4285      	cmp	r5, r0
 8001caa:	4606      	mov	r6, r0
 8001cac:	d802      	bhi.n	8001cb4 <_realloc_r+0x34>
 8001cae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001cb2:	d8f4      	bhi.n	8001c9e <_realloc_r+0x1e>
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	f7ff fc38 	bl	800152c <_malloc_r>
 8001cbc:	4607      	mov	r7, r0
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d0ec      	beq.n	8001c9c <_realloc_r+0x1c>
 8001cc2:	42b5      	cmp	r5, r6
 8001cc4:	462a      	mov	r2, r5
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	bf28      	it	cs
 8001cca:	4632      	movcs	r2, r6
 8001ccc:	f7ff ffca 	bl	8001c64 <memcpy>
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	f7ff fbbe 	bl	8001454 <_free_r>
 8001cd8:	463c      	mov	r4, r7
 8001cda:	e7e0      	b.n	8001c9e <_realloc_r+0x1e>

08001cdc <_malloc_usable_size_r>:
 8001cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ce0:	1f18      	subs	r0, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bfbc      	itt	lt
 8001ce6:	580b      	ldrlt	r3, [r1, r0]
 8001ce8:	18c0      	addlt	r0, r0, r3
 8001cea:	4770      	bx	lr

08001cec <_init>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr

08001cf8 <_fini>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr
