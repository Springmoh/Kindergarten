
uP_grp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001014  0800101c  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001014  08001014  0000201c  2**0
                  CONTENTS
  4 .ARM          00000000  08001014  08001014  0000201c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001014  0800101c  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001014  08001014  00002014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001018  08001018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  0800101c  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  0800101c  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016bc  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d8  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00003be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000134  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de45  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001731  00000000  00000000  00011d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050545  00000000  00000000  00013432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00063977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000568  00000000  00000000  000639bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00063f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ffc 	.word	0x08000ffc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000ffc 	.word	0x08000ffc

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <SegUpdate>:
#define sensor1 	GPIOC_IN->bit15
#define sensor2 	GPIOC_IN->bit14

uint8_t Seg1Value, Seg2Value;

void SegUpdate() {
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
	switch (Seg1Value) {
 8000216:	4b61      	ldr	r3, [pc, #388]	@ (800039c <SegUpdate+0x18c>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b09      	cmp	r3, #9
 800021c:	d83e      	bhi.n	800029c <SegUpdate+0x8c>
 800021e:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <SegUpdate+0x14>)
 8000220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000224:	0800024d 	.word	0x0800024d
 8000228:	08000255 	.word	0x08000255
 800022c:	0800025d 	.word	0x0800025d
 8000230:	08000265 	.word	0x08000265
 8000234:	0800026d 	.word	0x0800026d
 8000238:	08000275 	.word	0x08000275
 800023c:	0800027d 	.word	0x0800027d
 8000240:	08000285 	.word	0x08000285
 8000244:	0800028d 	.word	0x0800028d
 8000248:	08000295 	.word	0x08000295
	case 0:
		SegData.Seg[0] = 0b01111110;
 800024c:	4b54      	ldr	r3, [pc, #336]	@ (80003a0 <SegUpdate+0x190>)
 800024e:	227e      	movs	r2, #126	@ 0x7e
 8000250:	701a      	strb	r2, [r3, #0]
		break;
 8000252:	e024      	b.n	800029e <SegUpdate+0x8e>
	case 1:
		SegData.Seg[0] = 0b01100000;
 8000254:	4b52      	ldr	r3, [pc, #328]	@ (80003a0 <SegUpdate+0x190>)
 8000256:	2260      	movs	r2, #96	@ 0x60
 8000258:	701a      	strb	r2, [r3, #0]
		break;
 800025a:	e020      	b.n	800029e <SegUpdate+0x8e>
	case 2:
		SegData.Seg[0] = 0b10110110;
 800025c:	4b50      	ldr	r3, [pc, #320]	@ (80003a0 <SegUpdate+0x190>)
 800025e:	22b6      	movs	r2, #182	@ 0xb6
 8000260:	701a      	strb	r2, [r3, #0]
		break;
 8000262:	e01c      	b.n	800029e <SegUpdate+0x8e>
	case 3:
		SegData.Seg[0] = 0b11110100;
 8000264:	4b4e      	ldr	r3, [pc, #312]	@ (80003a0 <SegUpdate+0x190>)
 8000266:	22f4      	movs	r2, #244	@ 0xf4
 8000268:	701a      	strb	r2, [r3, #0]
		break;
 800026a:	e018      	b.n	800029e <SegUpdate+0x8e>
	case 4:
		SegData.Seg[0] = 0b11101000;
 800026c:	4b4c      	ldr	r3, [pc, #304]	@ (80003a0 <SegUpdate+0x190>)
 800026e:	22e8      	movs	r2, #232	@ 0xe8
 8000270:	701a      	strb	r2, [r3, #0]
		break;
 8000272:	e014      	b.n	800029e <SegUpdate+0x8e>
	case 5:
		SegData.Seg[0] = 0b11011100;
 8000274:	4b4a      	ldr	r3, [pc, #296]	@ (80003a0 <SegUpdate+0x190>)
 8000276:	22dc      	movs	r2, #220	@ 0xdc
 8000278:	701a      	strb	r2, [r3, #0]
		break;
 800027a:	e010      	b.n	800029e <SegUpdate+0x8e>
	case 6:
		SegData.Seg[0] = 0b11011110;
 800027c:	4b48      	ldr	r3, [pc, #288]	@ (80003a0 <SegUpdate+0x190>)
 800027e:	22de      	movs	r2, #222	@ 0xde
 8000280:	701a      	strb	r2, [r3, #0]
		break;
 8000282:	e00c      	b.n	800029e <SegUpdate+0x8e>
	case 7:
		SegData.Seg[0] = 0b01110000;
 8000284:	4b46      	ldr	r3, [pc, #280]	@ (80003a0 <SegUpdate+0x190>)
 8000286:	2270      	movs	r2, #112	@ 0x70
 8000288:	701a      	strb	r2, [r3, #0]
		break;
 800028a:	e008      	b.n	800029e <SegUpdate+0x8e>
	case 8:
		SegData.Seg[0] = 0b11111110;
 800028c:	4b44      	ldr	r3, [pc, #272]	@ (80003a0 <SegUpdate+0x190>)
 800028e:	22fe      	movs	r2, #254	@ 0xfe
 8000290:	701a      	strb	r2, [r3, #0]
		break;
 8000292:	e004      	b.n	800029e <SegUpdate+0x8e>
	case 9:
		SegData.Seg[0] = 0b11111100;
 8000294:	4b42      	ldr	r3, [pc, #264]	@ (80003a0 <SegUpdate+0x190>)
 8000296:	22fc      	movs	r2, #252	@ 0xfc
 8000298:	701a      	strb	r2, [r3, #0]
		break;
 800029a:	e000      	b.n	800029e <SegUpdate+0x8e>
	default:
		break;
 800029c:	bf00      	nop
	}

	switch (Seg2Value) {
 800029e:	4b41      	ldr	r3, [pc, #260]	@ (80003a4 <SegUpdate+0x194>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b09      	cmp	r3, #9
 80002a4:	d83e      	bhi.n	8000324 <SegUpdate+0x114>
 80002a6:	a201      	add	r2, pc, #4	@ (adr r2, 80002ac <SegUpdate+0x9c>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002d5 	.word	0x080002d5
 80002b0:	080002dd 	.word	0x080002dd
 80002b4:	080002e5 	.word	0x080002e5
 80002b8:	080002ed 	.word	0x080002ed
 80002bc:	080002f5 	.word	0x080002f5
 80002c0:	080002fd 	.word	0x080002fd
 80002c4:	08000305 	.word	0x08000305
 80002c8:	0800030d 	.word	0x0800030d
 80002cc:	08000315 	.word	0x08000315
 80002d0:	0800031d 	.word	0x0800031d
	case 0:
		SegData.Seg[1] = 0b11101110;
 80002d4:	4b32      	ldr	r3, [pc, #200]	@ (80003a0 <SegUpdate+0x190>)
 80002d6:	22ee      	movs	r2, #238	@ 0xee
 80002d8:	705a      	strb	r2, [r3, #1]
		break;
 80002da:	e024      	b.n	8000326 <SegUpdate+0x116>
	case 1:
		SegData.Seg[1] = 0b00101000;
 80002dc:	4b30      	ldr	r3, [pc, #192]	@ (80003a0 <SegUpdate+0x190>)
 80002de:	2228      	movs	r2, #40	@ 0x28
 80002e0:	705a      	strb	r2, [r3, #1]
		break;
 80002e2:	e020      	b.n	8000326 <SegUpdate+0x116>
	case 2:
		SegData.Seg[1] = 0b11011100;
 80002e4:	4b2e      	ldr	r3, [pc, #184]	@ (80003a0 <SegUpdate+0x190>)
 80002e6:	22dc      	movs	r2, #220	@ 0xdc
 80002e8:	705a      	strb	r2, [r3, #1]
		break;
 80002ea:	e01c      	b.n	8000326 <SegUpdate+0x116>
	case 3:
		SegData.Seg[1] = 0b01111100;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	@ (80003a0 <SegUpdate+0x190>)
 80002ee:	227c      	movs	r2, #124	@ 0x7c
 80002f0:	705a      	strb	r2, [r3, #1]
		break;
 80002f2:	e018      	b.n	8000326 <SegUpdate+0x116>
	case 4:
		SegData.Seg[1] = 0b00111010;
 80002f4:	4b2a      	ldr	r3, [pc, #168]	@ (80003a0 <SegUpdate+0x190>)
 80002f6:	223a      	movs	r2, #58	@ 0x3a
 80002f8:	705a      	strb	r2, [r3, #1]
		break;
 80002fa:	e014      	b.n	8000326 <SegUpdate+0x116>
	case 5:
		SegData.Seg[1] = 0b01110110;
 80002fc:	4b28      	ldr	r3, [pc, #160]	@ (80003a0 <SegUpdate+0x190>)
 80002fe:	2276      	movs	r2, #118	@ 0x76
 8000300:	705a      	strb	r2, [r3, #1]
		break;
 8000302:	e010      	b.n	8000326 <SegUpdate+0x116>
	case 6:
		SegData.Seg[1] = 0b11110110;
 8000304:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <SegUpdate+0x190>)
 8000306:	22f6      	movs	r2, #246	@ 0xf6
 8000308:	705a      	strb	r2, [r3, #1]
		break;
 800030a:	e00c      	b.n	8000326 <SegUpdate+0x116>
	case 7:
		SegData.Seg[1] = 0b00101100;
 800030c:	4b24      	ldr	r3, [pc, #144]	@ (80003a0 <SegUpdate+0x190>)
 800030e:	222c      	movs	r2, #44	@ 0x2c
 8000310:	705a      	strb	r2, [r3, #1]
		break;
 8000312:	e008      	b.n	8000326 <SegUpdate+0x116>
	case 8:
		SegData.Seg[1] = 0b11111110;
 8000314:	4b22      	ldr	r3, [pc, #136]	@ (80003a0 <SegUpdate+0x190>)
 8000316:	22fe      	movs	r2, #254	@ 0xfe
 8000318:	705a      	strb	r2, [r3, #1]
		break;
 800031a:	e004      	b.n	8000326 <SegUpdate+0x116>
	case 9:
		SegData.Seg[1] = 0b01111110;
 800031c:	4b20      	ldr	r3, [pc, #128]	@ (80003a0 <SegUpdate+0x190>)
 800031e:	227e      	movs	r2, #126	@ 0x7e
 8000320:	705a      	strb	r2, [r3, #1]
		break;
 8000322:	e000      	b.n	8000326 <SegUpdate+0x116>
	default:
		break;
 8000324:	bf00      	nop
	}

	for (int i = 15; i >= 0; i--) {
 8000326:	230f      	movs	r3, #15
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e024      	b.n	8000376 <SegUpdate+0x166>
		uint16_t bit = (SegData.bit >> i) & 0x01;
 800032c:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <SegUpdate+0x190>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	fa42 f303 	asr.w	r3, r2, r3
 8000338:	b29b      	uxth	r3, r3
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	807b      	strh	r3, [r7, #2]
		if (bit) {
 8000340:	887b      	ldrh	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d005      	beq.n	8000352 <SegUpdate+0x142>
			SRdata = 1;
 8000346:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <SegUpdate+0x198>)
 8000348:	7813      	ldrb	r3, [r2, #0]
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	7013      	strb	r3, [r2, #0]
 8000350:	e004      	b.n	800035c <SegUpdate+0x14c>
		} else {
			SRdata = 0;
 8000352:	4a15      	ldr	r2, [pc, #84]	@ (80003a8 <SegUpdate+0x198>)
 8000354:	7813      	ldrb	r3, [r2, #0]
 8000356:	f36f 03c3 	bfc	r3, #3, #1
 800035a:	7013      	strb	r3, [r2, #0]
		}
		SRclock = 1;
 800035c:	4a12      	ldr	r2, [pc, #72]	@ (80003a8 <SegUpdate+0x198>)
 800035e:	7813      	ldrb	r3, [r2, #0]
 8000360:	f043 0320 	orr.w	r3, r3, #32
 8000364:	7013      	strb	r3, [r2, #0]
//			Delay_ms(2);
		SRclock = 0;
 8000366:	4a10      	ldr	r2, [pc, #64]	@ (80003a8 <SegUpdate+0x198>)
 8000368:	7813      	ldrb	r3, [r2, #0]
 800036a:	f36f 1345 	bfc	r3, #5, #1
 800036e:	7013      	strb	r3, [r2, #0]
	for (int i = 15; i >= 0; i--) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b00      	cmp	r3, #0
 800037a:	dad7      	bge.n	800032c <SegUpdate+0x11c>
	}
	SRlatch = 1;
 800037c:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <SegUpdate+0x198>)
 800037e:	7813      	ldrb	r3, [r2, #0]
 8000380:	f043 0310 	orr.w	r3, r3, #16
 8000384:	7013      	strb	r3, [r2, #0]
//		Delay_ms(2);
	SRlatch = 0;
 8000386:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <SegUpdate+0x198>)
 8000388:	7813      	ldrb	r3, [r2, #0]
 800038a:	f36f 1304 	bfc	r3, #4, #1
 800038e:	7013      	strb	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	2000001e 	.word	0x2000001e
 80003a0:	2000001c 	.word	0x2000001c
 80003a4:	2000001f 	.word	0x2000001f
 80003a8:	40020414 	.word	0x40020414

080003ac <Motor>:

void Motor(uint8_t number, int pwm){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
	switch(number){
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d002      	beq.n	80003c4 <Motor+0x18>
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d020      	beq.n	8000404 <Motor+0x58>
			M_IN4 = 1;
		}
		M_PWM34 = abs(pwm);
		break;
	}
}
 80003c2:	e03f      	b.n	8000444 <Motor+0x98>
		if (pwm >= 0) {
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db0a      	blt.n	80003e0 <Motor+0x34>
			M_IN1 = 0;
 80003ca:	4a21      	ldr	r2, [pc, #132]	@ (8000450 <Motor+0xa4>)
 80003cc:	7853      	ldrb	r3, [r2, #1]
 80003ce:	f36f 13c7 	bfc	r3, #7, #1
 80003d2:	7053      	strb	r3, [r2, #1]
			M_IN2 = 1;
 80003d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000454 <Motor+0xa8>)
 80003d6:	7853      	ldrb	r3, [r2, #1]
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	7053      	strb	r3, [r2, #1]
 80003de:	e009      	b.n	80003f4 <Motor+0x48>
			M_IN1 = 1;
 80003e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <Motor+0xa4>)
 80003e2:	7853      	ldrb	r3, [r2, #1]
 80003e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e8:	7053      	strb	r3, [r2, #1]
			M_IN2 = 0;
 80003ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000454 <Motor+0xa8>)
 80003ec:	7853      	ldrb	r3, [r2, #1]
 80003ee:	f36f 0300 	bfc	r3, #0, #1
 80003f2:	7053      	strb	r3, [r2, #1]
		M_PWM12 = abs(pwm);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80003fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <Motor+0xac>)
 8000400:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000402:	e01f      	b.n	8000444 <Motor+0x98>
		if (pwm >= 0) {
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	db0a      	blt.n	8000420 <Motor+0x74>
			M_IN3 = 1;
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <Motor+0xa8>)
 800040c:	7853      	ldrb	r3, [r2, #1]
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	7053      	strb	r3, [r2, #1]
			M_IN4 = 0;
 8000414:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <Motor+0xa4>)
 8000416:	7853      	ldrb	r3, [r2, #1]
 8000418:	f36f 1386 	bfc	r3, #6, #1
 800041c:	7053      	strb	r3, [r2, #1]
 800041e:	e009      	b.n	8000434 <Motor+0x88>
			M_IN3 = 0;
 8000420:	4a0c      	ldr	r2, [pc, #48]	@ (8000454 <Motor+0xa8>)
 8000422:	7853      	ldrb	r3, [r2, #1]
 8000424:	f36f 0341 	bfc	r3, #1, #1
 8000428:	7053      	strb	r3, [r2, #1]
			M_IN4 = 1;
 800042a:	4a09      	ldr	r2, [pc, #36]	@ (8000450 <Motor+0xa4>)
 800042c:	7853      	ldrb	r3, [r2, #1]
 800042e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000432:	7053      	strb	r3, [r2, #1]
		M_PWM34 = abs(pwm);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800043a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <Motor+0xac>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8000442:	bf00      	nop
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40020414 	.word	0x40020414
 8000454:	40020014 	.word	0x40020014
 8000458:	40010000 	.word	0x40010000

0800045c <SysClockConfig>:
#define PLL_N 168
#define PLL_P 0 // PLLP = 2


void SysClockConfig(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	/* 1) Enable the HSE and wait for confirmation*/
	RCC->CR |= RCC_CR_HSEON;
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <SysClockConfig+0xa8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a27      	ldr	r2, [pc, #156]	@ (8000504 <SysClockConfig+0xa8>)
 8000466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800046a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 800046c:	bf00      	nop
 800046e:	4b25      	ldr	r3, [pc, #148]	@ (8000504 <SysClockConfig+0xa8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <SysClockConfig+0x12>

	/* 2) Set POWER ENABLE CLOCK(POWEREN)  and VOLTAGE REGULATOR(VOS)*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800047a:	4b22      	ldr	r3, [pc, #136]	@ (8000504 <SysClockConfig+0xa8>)
 800047c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800047e:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <SysClockConfig+0xa8>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 8000486:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <SysClockConfig+0xac>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a1f      	ldr	r2, [pc, #124]	@ (8000508 <SysClockConfig+0xac>)
 800048c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000490:	6013      	str	r3, [r2, #0]

	/*3) Configure the FLASH PREFETCH and the LATENCY Related Settings*/
	FLASH->ACR |= FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_PRFTEN |FLASH_ACR_LATENCY_2WS;
 8000492:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <SysClockConfig+0xb0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a1d      	ldr	r2, [pc, #116]	@ (800050c <SysClockConfig+0xb0>)
 8000498:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	6013      	str	r3, [r2, #0]

	/*4) Configure the PRESCALARS HCLK, PCLK1, PCLK2*/
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004a2:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <SysClockConfig+0xa8>)
 80004a4:	4a17      	ldr	r2, [pc, #92]	@ (8000504 <SysClockConfig+0xa8>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80004aa:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <SysClockConfig+0xa8>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <SysClockConfig+0xa8>)
 80004b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004b4:	6093      	str	r3, [r2, #8]

	//APB2 PR
	RCC->CFGR |=RCC_CFGR_PPRE2_DIV1;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <SysClockConfig+0xa8>)
 80004b8:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <SysClockConfig+0xa8>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	6093      	str	r3, [r2, #8]

	/*5) Configure the MAIN PLL*/
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <SysClockConfig+0xa8>)
 80004c0:	4a13      	ldr	r2, [pc, #76]	@ (8000510 <SysClockConfig+0xb4>)
 80004c2:	605a      	str	r2, [r3, #4]

	/*6) Enable the PLL and wait for it to become ready*/
	RCC->CR |= RCC_CR_PLLON;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <SysClockConfig+0xa8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <SysClockConfig+0xa8>)
 80004ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ce:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80004d0:	bf00      	nop
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <SysClockConfig+0xa8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <SysClockConfig+0x76>

	/*7) Select the Clock Source and wait for it to be set*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <SysClockConfig+0xa8>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <SysClockConfig+0xa8>)
 80004e4:	f043 0302 	orr.w	r3, r3, #2
 80004e8:	6093      	str	r3, [r2, #8]
//	while(!(RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80004ea:	bf00      	nop
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <SysClockConfig+0xa8>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d1f9      	bne.n	80004ec <SysClockConfig+0x90>

}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40023800 	.word	0x40023800
 8000508:	40007000 	.word	0x40007000
 800050c:	40023c00 	.word	0x40023c00
 8000510:	00402a19 	.word	0x00402a19

08000514 <I2C1_Config>:
void I2C1_Write(uint8_t data);
void I2C1_Address(uint8_t Address);
void I2C1_Stop(void);
void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size);

void I2C1_Config(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

	/* 1. Enable the I2C CLOCK and GPIO CLOCK */
	RCC->APB1ENR |= (1 << 21); // ENABLE I2C1 Clock
 8000518:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <I2C1_Config+0xa0>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	4a25      	ldr	r2, [pc, #148]	@ (80005b4 <I2C1_Config+0xa0>)
 800051e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000522:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= (1 << 1); // ENABLE GPIOB Clock (SCL: PB6 SDA: PB7)
 8000524:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <I2C1_Config+0xa0>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000528:	4a22      	ldr	r2, [pc, #136]	@ (80005b4 <I2C1_Config+0xa0>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* 2. Configure the I2C PINs for ALternate Functions */
	GPIOB->MODER |= (2 << 12) | (2 << 14);// Alternate Function of PB6 & PB7 in MODER Register
 8000530:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <I2C1_Config+0xa4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a20      	ldr	r2, [pc, #128]	@ (80005b8 <I2C1_Config+0xa4>)
 8000536:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800053a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1 << 6) | (1 << 7);	//Open Drain Output of PB6 & PB7
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <I2C1_Config+0xa4>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	4a1d      	ldr	r2, [pc, #116]	@ (80005b8 <I2C1_Config+0xa4>)
 8000542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000546:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3 << 12) | (3 << 14);//High SPEED for the Pins PB6 & PB7
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <I2C1_Config+0xa4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a1a      	ldr	r2, [pc, #104]	@ (80005b8 <I2C1_Config+0xa4>)
 800054e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000552:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1 << 12) | (1 << 14);//Pull-up for both the Pins PB6 & PB7
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <I2C1_Config+0xa4>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <I2C1_Config+0xa4>)
 800055a:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 800055e:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= (4 << 24) | (4 << 28);	//Configure the Alternate Function in AFR Register
 8000560:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <I2C1_Config+0xa4>)
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <I2C1_Config+0xa4>)
 8000566:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800056a:	6213      	str	r3, [r2, #32]

	/* 3. Reset the I2C */
	I2C1->CR1 |= (1 << 15);
 800056c:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <I2C1_Config+0xa8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <I2C1_Config+0xa8>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1 << 15);
 8000578:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <I2C1_Config+0xa8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <I2C1_Config+0xa8>)
 800057e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000582:	6013      	str	r3, [r2, #0]

	/* 4. Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings */
	I2C1->CR2 |= (42 << 0); // PCLK1 FREQUENCY in MHz
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <I2C1_Config+0xa8>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <I2C1_Config+0xa8>)
 800058a:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 800058e:	6053      	str	r3, [r2, #4]

	/* 5. Configure the clock control registers */
	I2C1->CCR = 210 << 0;
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <I2C1_Config+0xa8>)
 8000592:	22d2      	movs	r2, #210	@ 0xd2
 8000594:	61da      	str	r2, [r3, #28]

	/* 6. Configure the rise time register */
	I2C1->TRISE = 43;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <I2C1_Config+0xa8>)
 8000598:	222b      	movs	r2, #43	@ 0x2b
 800059a:	621a      	str	r2, [r3, #32]

	/* 7. Program the I2C_CR1 register to enable the peripheral */
	I2C1->CR1 |= (1 << 0); // Enable I2C
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <I2C1_Config+0xa8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <I2C1_Config+0xa8>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40005400 	.word	0x40005400

080005c0 <I2C1_Start>:

void I2C1_Start(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	/* 1. Enable the ACK */
	I2C1->CR1 |= (1 << 10);  // Enable the ACK
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <I2C1_Start+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <I2C1_Start+0x38>)
 80005ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ce:	6013      	str	r3, [r2, #0]

	/* 2. Send the START condition */
	I2C1->CR1 |= (1 << 8);  // Generate START
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <I2C1_Start+0x38>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <I2C1_Start+0x38>)
 80005d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005da:	6013      	str	r3, [r2, #0]

	/* 3. Wait for the SB ( Bit 0 in SR1) to set means the start condition is generated */
	while (!(I2C1->SR1 & (1 << 0)))
 80005dc:	bf00      	nop
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <I2C1_Start+0x38>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <I2C1_Start+0x1e>
		;
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40005400 	.word	0x40005400

080005fc <I2C1_Write>:

void I2C1_Write(uint8_t data) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait for the TXE (bit 7 in SR1) to set. This indicates that the DR is empty */
	while (!(I2C1->SR1 & (1 << 7)))
 8000606:	bf00      	nop
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <I2C1_Write+0x3c>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f9      	beq.n	8000608 <I2C1_Write+0xc>
		;
	/* 2. Send the DATA to the DR Register */
	I2C1->DR = data;
 8000614:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <I2C1_Write+0x3c>)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	6113      	str	r3, [r2, #16]
	/* 3. Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission */
	while (!(I2C1->SR1 & (1 << 2)))
 800061a:	bf00      	nop
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <I2C1_Write+0x3c>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <I2C1_Write+0x20>
		;
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40005400 	.word	0x40005400

0800063c <I2C1_Address>:

void I2C1_Address(uint8_t Address) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	/* 1. Send the Slave Address to the DR Register */
	I2C1->DR = Address;
 8000646:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <I2C1_Address+0x3c>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	6113      	str	r3, [r2, #16]
	/* 2. Wait for the ADDR (bit 1 in SR1) to set. This indicates the end of address transmission */
	while (!(I2C1->SR1 & (1 << 1)));
 800064c:	bf00      	nop
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <I2C1_Address+0x3c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <I2C1_Address+0x12>
	/* 3. clear the ADDR by reading the SR1 and SR2 */
	uint8_t temp = I2C1->SR1 | I2C1->SR2;
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <I2C1_Address+0x3c>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <I2C1_Address+0x3c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	73fb      	strb	r3, [r7, #15]
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400

0800067c <I2C1_Stop>:

void I2C1_Stop(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1 << 9); // Stop I2C
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <I2C1_Stop+0x1c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <I2C1_Stop+0x1c>)
 8000686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40005400 	.word	0x40005400

0800069c <I2C1_Read>:

void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	 f) To generate the nonacknowledge pulse after the last received data byte, the ACK bit must be cleared just after reading the
	 second last data byte (after second last RxNE event)
	 g) In order to generate the Stop/Restart condition, software must set the STOP/START bit
	 after reading the second last data byte (after the second last RxNE event)
	 */
	int remaining = size;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	60fb      	str	r3, [r7, #12]

	/**** STEP 1 ****/
	if (size == 1) {
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d12f      	bne.n	8000716 <I2C1_Read+0x7a>
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 80006b6:	4a4b      	ldr	r2, [pc, #300]	@ (80007e4 <I2C1_Read+0x148>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 80006bc:	bf00      	nop
 80006be:	4b49      	ldr	r3, [pc, #292]	@ (80007e4 <I2C1_Read+0x148>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <I2C1_Read+0x22>
			;  // wait for ADDR bit to set

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 80006ca:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <I2C1_Read+0x148>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a45      	ldr	r2, [pc, #276]	@ (80007e4 <I2C1_Read+0x148>)
 80006d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006d4:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 80006d6:	4b43      	ldr	r3, [pc, #268]	@ (80007e4 <I2C1_Read+0x148>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <I2C1_Read+0x148>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <I2C1_Read+0x148>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a3e      	ldr	r2, [pc, #248]	@ (80007e4 <I2C1_Read+0x148>)
 80006ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006f0:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1 << 6)))
 80006f2:	bf00      	nop
 80006f4:	4b3b      	ldr	r3, [pc, #236]	@ (80007e4 <I2C1_Read+0x148>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f9      	beq.n	80006f4 <I2C1_Read+0x58>
			;  // wait for RxNE to set

		/**** STEP 1-d ****/
		buffer[size - remaining] = I2C1->DR; // Read the data from the DATA REGISTER
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <I2C1_Read+0x148>)
 8000702:	6919      	ldr	r1, [r3, #16]
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	461a      	mov	r2, r3
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	b2ca      	uxtb	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
		while (!(I2C1->SR1 & (1 << 6)))
			;  // wait for RxNE to set
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 8000714:	e060      	b.n	80007d8 <I2C1_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 8000716:	4a33      	ldr	r2, [pc, #204]	@ (80007e4 <I2C1_Read+0x148>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1 << 1)))
 800071c:	bf00      	nop
 800071e:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <I2C1_Read+0x148>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f9      	beq.n	800071e <I2C1_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit
 800072a:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <I2C1_Read+0x148>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <I2C1_Read+0x148>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	72fb      	strb	r3, [r7, #11]
		while (remaining > 2) {
 800073a:	e019      	b.n	8000770 <I2C1_Read+0xd4>
			while (!(I2C1->SR1 & (1 << 6)))
 800073c:	bf00      	nop
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <I2C1_Read+0x148>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <I2C1_Read+0xa2>
			buffer[size - remaining] = I2C1->DR; // copy the data into the buffer
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <I2C1_Read+0x148>)
 800074c:	6919      	ldr	r1, [r3, #16]
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	461a      	mov	r2, r3
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	4413      	add	r3, r2
 800075a:	b2ca      	uxtb	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1 << 10; // Set the ACK bit to Acknowledge the data received
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <I2C1_Read+0x148>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a20      	ldr	r2, [pc, #128]	@ (80007e4 <I2C1_Read+0x148>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6013      	str	r3, [r2, #0]
			remaining--;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3b01      	subs	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
		while (remaining > 2) {
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b02      	cmp	r3, #2
 8000774:	dce2      	bgt.n	800073c <I2C1_Read+0xa0>
		while (!(I2C1->SR1 & (1 << 6)))
 8000776:	bf00      	nop
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <I2C1_Read+0x148>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f9      	beq.n	8000778 <I2C1_Read+0xdc>
		buffer[size - remaining] = I2C1->DR;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <I2C1_Read+0x148>)
 8000786:	6919      	ldr	r1, [r3, #16]
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	461a      	mov	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	b2ca      	uxtb	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1 << 10);  // clear the ACK bit
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <I2C1_Read+0x148>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a11      	ldr	r2, [pc, #68]	@ (80007e4 <I2C1_Read+0x148>)
 800079e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007a2:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1 << 9);  // Stop I2C
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <I2C1_Read+0x148>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <I2C1_Read+0x148>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ae:	6013      	str	r3, [r2, #0]
		remaining--;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1 << 6)))
 80007b6:	bf00      	nop
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <I2C1_Read+0x148>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f9      	beq.n	80007b8 <I2C1_Read+0x11c>
		buffer[size - remaining] = I2C1->DR;  // copy the data into the buffer
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <I2C1_Read+0x148>)
 80007c6:	6919      	ldr	r1, [r3, #16]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2ca      	uxtb	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40005400 	.word	0x40005400

080007e8 <TIM9Config>:
void TIM9Config(void);
void Delay_us (uint16_t us);
void Delay_ms (uint16_t ms);

void TIM9Config(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	/* 1) Enable Timer Clock*/
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN; // Enable timer 9 clock
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <TIM9Config+0x44>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <TIM9Config+0x44>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007f6:	6453      	str	r3, [r2, #68]	@ 0x44

	/* 2) Set the prescalar and the ARR*/
	TIM9->PSC = 84-1; // 84MHz/84 = 1MHz ~ 1us delay
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <TIM9Config+0x48>)
 80007fa:	2253      	movs	r2, #83	@ 0x53
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM9->ARR = 0xFFFF;// Max ARR value
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <TIM9Config+0x48>)
 8000800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* 3) Enable the Timer, and wait for the update Flag to set*/
	TIM9->CR1 |= (1<<0); //Enable the Counter
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <TIM9Config+0x48>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <TIM9Config+0x48>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6013      	str	r3, [r2, #0]
	while(!(TIM9->SR & (1<<0))); //Update interrupt flag
 8000812:	bf00      	nop
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <TIM9Config+0x48>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f9      	beq.n	8000814 <TIM9Config+0x2c>
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40023800 	.word	0x40023800
 8000830:	40014000 	.word	0x40014000

08000834 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	/* 1) RESET the Counter */
	TIM9->CNT = 0;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <Delay_us+0x2c>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
	/* 2) Wait for the Counter to reach the entered value. each count would be 1us */
	while(TIM9->CNT < us);
 8000844:	bf00      	nop
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <Delay_us+0x2c>)
 8000848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3fa      	bcc.n	8000846 <Delay_us+0x12>

}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40014000 	.word	0x40014000

08000864 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ms; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	81fb      	strh	r3, [r7, #14]
 8000872:	e006      	b.n	8000882 <Delay_ms+0x1e>
	{
		Delay_us(1000); //Delay of 1ms
 8000874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000878:	f7ff ffdc 	bl	8000834 <Delay_us>
	for (uint16_t i = 0; i < ms; i++)
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	3301      	adds	r3, #1
 8000880:	81fb      	strh	r3, [r7, #14]
 8000882:	89fa      	ldrh	r2, [r7, #14]
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	429a      	cmp	r2, r3
 8000888:	d3f4      	bcc.n	8000874 <Delay_ms+0x10>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <write8>:
void getRGB(int *R, int *G, int *B);


/* Writes a register and an 8 bit value over I2C */
void write8 (uint8_t reg, uint32_t value)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 80008b0:	f7ff fe86 	bl	80005c0 <I2C1_Start>
	I2C1_Address(TCS34725_ADDRESS);
 80008b4:	2052      	movs	r0, #82	@ 0x52
 80008b6:	f7ff fec1 	bl	800063c <I2C1_Address>
	I2C1_Write(txBuffer[0]);
 80008ba:	7b3b      	ldrb	r3, [r7, #12]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe9d 	bl	80005fc <I2C1_Write>
	I2C1_Write(txBuffer[1]);
 80008c2:	7b7b      	ldrb	r3, [r7, #13]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe99 	bl	80005fc <I2C1_Write>
	I2C1_Stop();
 80008ca:	f7ff fed7 	bl	800067c <I2C1_Stop>
//    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <read8>:

/* Reads an 8 bit value over I2C */
uint8_t read8(uint8_t reg) {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008e6:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[1];

    I2C1_Start();                                // Generate start condition
 80008e8:	f7ff fe6a 	bl	80005c0 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 80008ec:	2052      	movs	r0, #82	@ 0x52
 80008ee:	f7ff fea5 	bl	800063c <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe81 	bl	80005fc <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 80008fa:	f7ff febf 	bl	800067c <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 80008fe:	f7ff fe5f 	bl	80005c0 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 1); // Read 1 byte
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2053      	movs	r0, #83	@ 0x53
 800090c:	f7ff fec6 	bl	800069c <I2C1_Read>
    return rxBuffer[0];
 8000910:	7b3b      	ldrb	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <read16>:


/* Reads a 16 bit values over I2C */
uint16_t read16(uint8_t reg) {
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer = (TCS34725_COMMAND_BIT | reg);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800092a:	73fb      	strb	r3, [r7, #15]
    uint8_t rxBuffer[2];

    I2C1_Start();                                // Generate start condition
 800092c:	f7ff fe48 	bl	80005c0 <I2C1_Start>
    I2C1_Address(TCS34725_ADDRESS);             // Send sensor address
 8000930:	2052      	movs	r0, #82	@ 0x52
 8000932:	f7ff fe83 	bl	800063c <I2C1_Address>
    I2C1_Write(txBuffer);                       // Write register address
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe5f 	bl	80005fc <I2C1_Write>
    I2C1_Stop();                                // Generate stop condition
 800093e:	f7ff fe9d 	bl	800067c <I2C1_Stop>

    I2C1_Start();                                // Restart for read
 8000942:	f7ff fe3d 	bl	80005c0 <I2C1_Start>
    I2C1_Read(TCS34725_ADDRESS | 0x01, rxBuffer, 2); // Read 2 bytes
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2202      	movs	r2, #2
 800094c:	4619      	mov	r1, r3
 800094e:	2053      	movs	r0, #83	@ 0x53
 8000950:	f7ff fea4 	bl	800069c <I2C1_Read>

    uint16_t ret = (rxBuffer[1] << 8) | rxBuffer[0];
 8000954:	7a7b      	ldrb	r3, [r7, #9]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	7a3b      	ldrb	r3, [r7, #8]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	81bb      	strh	r3, [r7, #12]
    return ret;
 8000964:	89bb      	ldrh	r3, [r7, #12]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <enable>:


void enable(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8000972:	2101      	movs	r1, #1
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff8d 	bl	8000894 <write8>
  Delay_ms (3);
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff ff72 	bl	8000864 <Delay_ms>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8000980:	2103      	movs	r1, #3
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ff86 	bl	8000894 <write8>
  Delay_ms (50);
 8000988:	2032      	movs	r0, #50	@ 0x32
 800098a:	f7ff ff6b 	bl	8000864 <Delay_ms>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <setIntegrationTime>:
  reg = read8(TCS34725_ENABLE);
  write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}

void setIntegrationTime(uint8_t itime)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <setIntegrationTime+0x28>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <setIntegrationTime+0x16>
 80009a6:	f000 f821 	bl	80009ec <tcs3272_init>
  write8(TCS34725_ATIME, itime);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ff70 	bl	8000894 <write8>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000020 	.word	0x20000020

080009c0 <setGain>:

void setGain(uint8_t gain)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if (_tcs34725Initialised == 0) tcs3272_init();
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <setGain+0x28>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <setGain+0x16>
 80009d2:	f000 f80b 	bl	80009ec <tcs3272_init>
  write8(TCS34725_CONTROL, gain);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4619      	mov	r1, r3
 80009da:	200f      	movs	r0, #15
 80009dc:	f7ff ff5a 	bl	8000894 <write8>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000020 	.word	0x20000020

080009ec <tcs3272_init>:

void tcs3272_init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Make sure we're actually connected */
  readValue = read8(TCS34725_ID);
 80009f0:	2012      	movs	r0, #18
 80009f2:	f7ff ff70 	bl	80008d6 <read8>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <tcs3272_init+0x40>)
 80009fc:	701a      	strb	r2, [r3, #0]
  if ((readValue != 0x44) && (readValue != 0x4d))
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <tcs3272_init+0x40>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b44      	cmp	r3, #68	@ 0x44
 8000a04:	d003      	beq.n	8000a0e <tcs3272_init+0x22>
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <tcs3272_init+0x40>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a0c:	d10b      	bne.n	8000a26 <tcs3272_init+0x3a>
  {

    return;
  }
  _tcs34725Initialised = 1;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <tcs3272_init+0x44>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
  /* Set default integration time and gain */
  setIntegrationTime(TCS34725_INTEGRATIONTIME_50MS);
 8000a14:	20eb      	movs	r0, #235	@ 0xeb
 8000a16:	f7ff ffbd 	bl	8000994 <setIntegrationTime>
  setGain(TCS34725_GAIN_4X);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ffd0 	bl	80009c0 <setGain>
  /* Note: by default, the device is in power down mode on bootup */
  enable();
 8000a20:	f7ff ffa5 	bl	800096e <enable>
 8000a24:	e000      	b.n	8000a28 <tcs3272_init+0x3c>
    return;
 8000a26:	bf00      	nop
}
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000030 	.word	0x20000030
 8000a30:	20000020 	.word	0x20000020

08000a34 <getRawData>:

/* Get raw data */
void getRawData (uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
  if (_tcs34725Initialised == 0) tcs3272_init();
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <getRawData+0x60>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <getRawData+0x1a>
 8000a4a:	f7ff ffcf 	bl	80009ec <tcs3272_init>

  *c = read16(TCS34725_CDATAL);
 8000a4e:	2014      	movs	r0, #20
 8000a50:	f7ff ff63 	bl	800091a <read16>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	801a      	strh	r2, [r3, #0]
  *r = read16(TCS34725_RDATAL);
 8000a5c:	2016      	movs	r0, #22
 8000a5e:	f7ff ff5c 	bl	800091a <read16>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	801a      	strh	r2, [r3, #0]
  *g = read16(TCS34725_GDATAL);
 8000a6a:	2018      	movs	r0, #24
 8000a6c:	f7ff ff55 	bl	800091a <read16>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	801a      	strh	r2, [r3, #0]
  *b = read16(TCS34725_BDATAL);
 8000a78:	201a      	movs	r0, #26
 8000a7a:	f7ff ff4e 	bl	800091a <read16>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	801a      	strh	r2, [r3, #0]
  /* Delay time is from page no 16/26 from the datasheet  (256 − ATIME)* 2.4ms */
  Delay_ms (50); // Set delay for (256 − 0xEB)* 2.4ms = 50ms
 8000a86:	2032      	movs	r0, #50	@ 0x32
 8000a88:	f7ff feec 	bl	8000864 <Delay_ms>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000020 	.word	0x20000020

08000a98 <getRGB>:

/* Get Red, Green and Blue color from Raw Data */
void getRGB(int *R, int *G, int *B)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
    uint16_t rawRed, rawGreen, rawBlue, rawClear;
    getRawData(&rawRed, &rawGreen, &rawBlue, &rawClear);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	f107 0212 	add.w	r2, r7, #18
 8000aac:	f107 0114 	add.w	r1, r7, #20
 8000ab0:	f107 0016 	add.w	r0, r7, #22
 8000ab4:	f7ff ffbe 	bl	8000a34 <getRawData>
    if(rawClear == 0)
 8000ab8:	8a3b      	ldrh	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d109      	bne.n	8000ad2 <getRGB+0x3a>
    {
      *R = 0;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
      *G = 0;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
      *B = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
    {
      *R = (int)rawRed * 255 / rawClear;
      *G = (int)rawGreen * 255 / rawClear;
      *B = (int)rawBlue * 255 / rawClear;
    }
}
 8000ad0:	e01d      	b.n	8000b0e <getRGB+0x76>
      *R = (int)rawRed * 255 / rawClear;
 8000ad2:	8afb      	ldrh	r3, [r7, #22]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	8a3a      	ldrh	r2, [r7, #16]
 8000ade:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	601a      	str	r2, [r3, #0]
      *G = (int)rawGreen * 255 / rawClear;
 8000ae6:	8abb      	ldrh	r3, [r7, #20]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4613      	mov	r3, r2
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	8a3a      	ldrh	r2, [r7, #16]
 8000af2:	fb93 f2f2 	sdiv	r2, r3, r2
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	601a      	str	r2, [r3, #0]
      *B = (int)rawBlue * 255 / rawClear;
 8000afa:	8a7b      	ldrh	r3, [r7, #18]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4613      	mov	r3, r2
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	8a3a      	ldrh	r2, [r7, #16]
 8000b06:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <Pin_config>:
 */

#ifndef INC_SYSTEM_H_
#define INC_SYSTEM_H_

void Pin_config(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0b111; // Enable GPIOA, GPIOB and GPIOC clocks
 8000b1c:	4b65      	ldr	r3, [pc, #404]	@ (8000cb4 <Pin_config+0x19c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	4a64      	ldr	r2, [pc, #400]	@ (8000cb4 <Pin_config+0x19c>)
 8000b22:	f043 0307 	orr.w	r3, r3, #7
 8000b26:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER &= ~(0b11 << 26); // Clear mode bits for PC13
 8000b28:	4b63      	ldr	r3, [pc, #396]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a62      	ldr	r2, [pc, #392]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b2e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000b32:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 26);  // Set PC13 as output (0b01)
 8000b34:	4b60      	ldr	r3, [pc, #384]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a5f      	ldr	r2, [pc, #380]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b3e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << 13); // Clear bit 13 for push-pull
 8000b40:	4b5d      	ldr	r3, [pc, #372]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	4a5c      	ldr	r2, [pc, #368]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b4a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(0b11 << 26); // Clear speed bits (low speed)
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4a59      	ldr	r2, [pc, #356]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b52:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000b56:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(0b11 << 26); // No pull-up, no pull-down
 8000b58:	4b57      	ldr	r3, [pc, #348]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a56      	ldr	r2, [pc, #344]	@ (8000cb8 <Pin_config+0x1a0>)
 8000b5e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000b62:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear mode bits
 8000b64:	4b55      	ldr	r3, [pc, #340]	@ (8000cbc <Pin_config+0x1a4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a54      	ldr	r2, [pc, #336]	@ (8000cbc <Pin_config+0x1a4>)
 8000b6a:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000b6e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (3 * 2)) | (0b01 << (4 * 2)) | (0b01 << (5 * 2)));  // Set mode to output (0b01)
 8000b70:	4b52      	ldr	r3, [pc, #328]	@ (8000cbc <Pin_config+0x1a4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a51      	ldr	r2, [pc, #324]	@ (8000cbc <Pin_config+0x1a4>)
 8000b76:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000b7a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 3) | (1 << 4) | (1 << 5)); // Clear bits for Push-Pull
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cbc <Pin_config+0x1a4>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a4e      	ldr	r2, [pc, #312]	@ (8000cbc <Pin_config+0x1a4>)
 8000b82:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000b86:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // Clear speed bits
 8000b88:	4b4c      	ldr	r3, [pc, #304]	@ (8000cbc <Pin_config+0x1a4>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8000cbc <Pin_config+0x1a4>)
 8000b8e:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000b92:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (3 * 2)) | (0b11 << (4 * 2)) | (0b11 << (5 * 2))); // No pull-up, no pull-down
 8000b94:	4b49      	ldr	r3, [pc, #292]	@ (8000cbc <Pin_config+0x1a4>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4a48      	ldr	r2, [pc, #288]	@ (8000cbc <Pin_config+0x1a4>)
 8000b9a:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8000b9e:	60d3      	str	r3, [r2, #12]

    // Configure PA10 as Alternate Function (TIM1_CH3)
    GPIOA->MODER &= ~(0b11 << (10 * 2)); // Clear mode bits for PA10
 8000ba0:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <Pin_config+0x1a8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <Pin_config+0x1a8>)
 8000ba6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000baa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (10 * 2));  // Set PA10 to Alternate Function mode
 8000bac:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a43      	ldr	r2, [pc, #268]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((10 - 8) * 4)); // Clear AF bits for PA10
 8000bb8:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbc:	4a40      	ldr	r2, [pc, #256]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bbe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bc2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((10 - 8) * 4));  // Set AF1 (TIM1_CH3)
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bce:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA11 as Alternate Function (TIM1_CH4)
    GPIOA->MODER &= ~(0b11 << (11 * 2)); // Clear mode bits for PA11
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bd6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bda:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << (11 * 2));  // Set PA11 to Alternate Function mode
 8000bdc:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a37      	ldr	r2, [pc, #220]	@ (8000cc0 <Pin_config+0x1a8>)
 8000be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000be6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0b1111 << ((11 - 8) * 4)); // Clear AF bits for PA11
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bec:	4a34      	ldr	r2, [pc, #208]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000bf2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (0b0001 << ((11 - 8) * 4));  // Set AF1 (TIM1_CH4)
 8000bf4:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf8:	4a31      	ldr	r2, [pc, #196]	@ (8000cc0 <Pin_config+0x1a8>)
 8000bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfe:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PA8 and PA9 as outputs
	GPIOA->MODER &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Clear mode bits for PA8, PA9
 8000c00:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c06:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c0a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((0b01 << (8 * 2)) | (0b01 << (9 * 2))); // Set PA8, PA9 as General-purpose output mode (0b01)
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c12:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000c16:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~((1 << 8) | (1 << 9)); // Set Push-Pull mode for PA8, PA9
 8000c18:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a28      	ldr	r2, [pc, #160]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c22:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // Low speed for PA8, PA9
 8000c24:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	4a25      	ldr	r2, [pc, #148]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c2a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c2e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((0b11 << (8 * 2)) | (0b11 << (9 * 2))); // No pull-up, no pull-down for PA8, PA9
 8000c30:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <Pin_config+0x1a8>)
 8000c36:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c3a:	60d3      	str	r3, [r2, #12]

	// Configure PB14 and PB15 as outputs
	GPIOB->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PB14, PB15
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <Pin_config+0x1a4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1e      	ldr	r2, [pc, #120]	@ (8000cbc <Pin_config+0x1a4>)
 8000c42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c46:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((0b01 << (14 * 2)) | (0b01 << (15 * 2))); // Set PB14, PB15 as General-purpose output mode (0b01)
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <Pin_config+0x1a4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <Pin_config+0x1a4>)
 8000c4e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000c52:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~((1 << 14) | (1 << 15)); // Set Push-Pull mode for PB14, PB15
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <Pin_config+0x1a4>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4a18      	ldr	r2, [pc, #96]	@ (8000cbc <Pin_config+0x1a4>)
 8000c5a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c5e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Low speed for PB14, PB15
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <Pin_config+0x1a4>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4a15      	ldr	r2, [pc, #84]	@ (8000cbc <Pin_config+0x1a4>)
 8000c66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c6a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2)));   // No pull-up, no pull-down for PB14, PB15
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <Pin_config+0x1a4>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <Pin_config+0x1a4>)
 8000c72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c76:	60d3      	str	r3, [r2, #12]

	// Configure PB2 and PB10 as inputs
	GPIOB->MODER &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // Clear mode bits for PB2 and PB10
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <Pin_config+0x1a4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <Pin_config+0x1a4>)
 8000c7e:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000c82:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~((0b11 << (2 * 2)) | (0b11 << (10 * 2))); // No pull-up, no pull-down (default)
 8000c84:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <Pin_config+0x1a4>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <Pin_config+0x1a4>)
 8000c8a:	f023 1330 	bic.w	r3, r3, #3145776	@ 0x300030
 8000c8e:	60d3      	str	r3, [r2, #12]

    // Configure PC14 and PC15 as inputs
    GPIOC->MODER &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // Clear mode bits for PC14 and PC15
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <Pin_config+0x1a0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <Pin_config+0x1a0>)
 8000c96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c9a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~((0b11 << (14 * 2)) | (0b11 << (15 * 2))); // No pull-up, no pull-down (default)
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <Pin_config+0x1a0>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <Pin_config+0x1a0>)
 8000ca2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <Configure_TIM1_PWM>:

void Configure_TIM1_PWM(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= (1 << 0); // Enable TIM1 clock (bit 0)
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <Configure_TIM1_PWM+0x90>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ccc:	4a21      	ldr	r2, [pc, #132]	@ (8000d54 <Configure_TIM1_PWM+0x90>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure TIM1 for PWM mode
    TIM1->PSC = 4 - 1;       // Prescaler: 16 MHz / 16 = 1 MHz timer clock
 8000cd4:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 20000 - 1;    // Auto-reload: 1 MHz / 20000 = 50 Hz PWM frequency
 8000cda:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000cdc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode 1 and enable preload
    TIM1->CCMR2 &= ~((0b111 << 4) | (0b111 << 12)); // Clear OC3M and OC4M bits
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000cf0:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 4);  // PWM mode 1 on Channel 3 (PA10)
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000cf8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000cfc:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (0b110 << 12); // PWM mode 1 on Channel 4 (PA11)
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d04:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000d08:	61d3      	str	r3, [r2, #28]
    TIM1->CCMR2 |= (1 << 3) | (1 << 11); // Enable preload for CCR3 and CCR4 (OC3PE and OC4PE)
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	61d3      	str	r3, [r2, #28]

    // Enable channels
    TIM1->CCER |= (1 << 8);  // Enable Channel 3 output (PA10)
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= (1 << 12); // Enable Channel 4 output (PA11)
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d30:	6213      	str	r3, [r2, #32]

    // Enable main output (MOE)
    TIM1->BDTR |= (1 << 15);
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44

    // Start TIM1
    TIM1->CR1 |= (1 << 0); // Enable TIM1 counter
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <Configure_TIM1_PWM+0x94>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40010000 	.word	0x40010000

08000d5c <Configure_Timer2>:

void Configure_Timer2(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= (1 << 0); // TIM2 clock enable
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <Configure_Timer2+0x4c>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <Configure_Timer2+0x4c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set TIM2 for 1 Hz (1-second period)
    TIM2->PSC = 84 - 1;  // Prescaler to divide 84 MHz by 8400 = 10 kHz
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d70:	2253      	movs	r2, #83	@ 0x53
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20000 - 1; // Auto-reload value to count 10000 ticks = 1 second
 8000d74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d78:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable Update Interrupt
    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	60d3      	str	r3, [r2, #12]

    // Enable TIM2
    TIM2->CR1 |= TIM_CR1_CEN; // Enable counter
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8000d9e:	201c      	movs	r0, #28
 8000da0:	f7ff fa18 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800

08000dac <main>:



uint32_t count;

int main(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	SysClockConfig();
 8000db0:	f7ff fb54 	bl	800045c <SysClockConfig>
	Pin_config();
 8000db4:	f7ff feb0 	bl	8000b18 <Pin_config>
	Configure_Timer2();
 8000db8:	f7ff ffd0 	bl	8000d5c <Configure_Timer2>
	Configure_TIM1_PWM();
 8000dbc:	f7ff ff82 	bl	8000cc4 <Configure_TIM1_PWM>
	TIM9Config();
 8000dc0:	f7ff fd12 	bl	80007e8 <TIM9Config>
	I2C1_Config();
 8000dc4:	f7ff fba6 	bl	8000514 <I2C1_Config>
	tcs3272_init();
 8000dc8:	f7ff fe10 	bl	80009ec <tcs3272_init>

	while (1) {
		SegUpdate();
 8000dcc:	f7ff fa20 	bl	8000210 <SegUpdate>
		getRGB(&red, &green, &blue);
 8000dd0:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <main+0x70>)
 8000dd2:	4913      	ldr	r1, [pc, #76]	@ (8000e20 <main+0x74>)
 8000dd4:	4813      	ldr	r0, [pc, #76]	@ (8000e24 <main+0x78>)
 8000dd6:	f7ff fe5f 	bl	8000a98 <getRGB>
		if(PB1){
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <main+0x7c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <main+0x4c>
			Motor(LEFT_MOTOR, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fade 	bl	80003ac <Motor>
			Motor(RIGHT_MOTOR, 0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fada 	bl	80003ac <Motor>
		}
		if(PB2){
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <main+0x7c>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0e2      	beq.n	8000dcc <main+0x20>
			Motor(LEFT_MOTOR, 10000);
 8000e06:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff face 	bl	80003ac <Motor>
			Motor(RIGHT_MOTOR, 10000);
 8000e10:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fac9 	bl	80003ac <Motor>
		SegUpdate();
 8000e1a:	e7d7      	b.n	8000dcc <main+0x20>
 8000e1c:	2000002c 	.word	0x2000002c
 8000e20:	20000028 	.word	0x20000028
 8000e24:	20000024 	.word	0x20000024
 8000e28:	40020410 	.word	0x40020410

08000e2c <TIM2_IRQHandler>:
		}
	}
}

void TIM2_IRQHandler(void) { // Timer Interrupt
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) { // Check update interrupt flag
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d039      	beq.n	8000eb2 <TIM2_IRQHandler+0x86>
        TIM2->SR &= ~TIM_SR_UIF; // Clear update interrupt flag
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6113      	str	r3, [r2, #16]

        led1 = !led1;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <TIM2_IRQHandler+0x90>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <TIM2_IRQHandler+0x90>)
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	7853      	ldrb	r3, [r2, #1]
 8000e66:	f361 1345 	bfi	r3, r1, #5, #1
 8000e6a:	7053      	strb	r3, [r2, #1]
        static int cnt;
		if (++cnt > 50) {
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <TIM2_IRQHandler+0x94>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <TIM2_IRQHandler+0x94>)
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <TIM2_IRQHandler+0x94>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b32      	cmp	r3, #50	@ 0x32
 8000e7c:	dd19      	ble.n	8000eb2 <TIM2_IRQHandler+0x86>
			if (Seg1Value < 9) {
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <TIM2_IRQHandler+0x98>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d80c      	bhi.n	8000ea0 <TIM2_IRQHandler+0x74>
				Seg1Value++;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <TIM2_IRQHandler+0x98>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <TIM2_IRQHandler+0x98>)
 8000e90:	701a      	strb	r2, [r3, #0]
				Seg2Value++;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <TIM2_IRQHandler+0x9c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <TIM2_IRQHandler+0x9c>)
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e005      	b.n	8000eac <TIM2_IRQHandler+0x80>
			} else {
				Seg1Value = 0;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <TIM2_IRQHandler+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
				Seg2Value = 0;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <TIM2_IRQHandler+0x9c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			}
			cnt = 0;
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <TIM2_IRQHandler+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
		}
    }
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40020814 	.word	0x40020814
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	2000001e 	.word	0x2000001e
 8000ec8:	2000001f 	.word	0x2000001f

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	static uint32_t tick;
	tick++;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Handler+0x18>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a03      	ldr	r2, [pc, #12]	@ (8000f38 <SysTick_Handler+0x18>)
 8000f2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000038 	.word	0x20000038

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f64:	f7ff ffea 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	@ (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f000 f811 	bl	8000fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff ff0b 	bl	8000dac <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fa4:	0800101c 	.word	0x0800101c
  ldr r2, =_sbss
 8000fa8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fac:	2000003c 	.word	0x2000003c

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <__libc_init_array>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8000fec <__libc_init_array+0x38>)
 8000fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8000ff0 <__libc_init_array+0x3c>)
 8000fba:	1b64      	subs	r4, r4, r5
 8000fbc:	10a4      	asrs	r4, r4, #2
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	42a6      	cmp	r6, r4
 8000fc2:	d109      	bne.n	8000fd8 <__libc_init_array+0x24>
 8000fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8000ff4 <__libc_init_array+0x40>)
 8000fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8000ff8 <__libc_init_array+0x44>)
 8000fc8:	f000 f818 	bl	8000ffc <_init>
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	42a6      	cmp	r6, r4
 8000fd4:	d105      	bne.n	8000fe2 <__libc_init_array+0x2e>
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fdc:	4798      	blx	r3
 8000fde:	3601      	adds	r6, #1
 8000fe0:	e7ee      	b.n	8000fc0 <__libc_init_array+0xc>
 8000fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe6:	4798      	blx	r3
 8000fe8:	3601      	adds	r6, #1
 8000fea:	e7f2      	b.n	8000fd2 <__libc_init_array+0x1e>
 8000fec:	08001014 	.word	0x08001014
 8000ff0:	08001014 	.word	0x08001014
 8000ff4:	08001014 	.word	0x08001014
 8000ff8:	08001018 	.word	0x08001018

08000ffc <_init>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr

08001008 <_fini>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr
