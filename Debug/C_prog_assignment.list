
C_prog_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae58  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800af68  0800af68  0000bf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d8  0800b4d8  0000c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e0  0800b4e0  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e0  0800b4e0  0000c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4e4  0800b4e4  0000c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b4e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd0  200001d8  0800b6c0  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001da8  0800b6c0  0000dda8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016616  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d1  00000000  00000000  00023817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00026be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  00028048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043d4  00000000  00000000  00029024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b7e  00000000  00000000  0002d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e25  00000000  00000000  00042f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  000d8de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000df8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af50 	.word	0x0800af50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800af50 	.word	0x0800af50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__aeabi_d2ulz+0x34>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <__aeabi_d2ulz+0x38>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb8:	3df00000 	.word	0x3df00000
 8000cbc:	41f00000 	.word	0x41f00000

08000cc0 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <delay+0x2c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time)
 8000cd2:	bf00      	nop
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <delay+0x2c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d3f9      	bcc.n	8000cd4 <delay+0x14>
		;
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	200001f4 	.word	0x200001f4

08000cf0 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA

// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7f1b      	ldrb	r3, [r3, #28]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	f040 8082 	bne.w	8000e06 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8000d02:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11a      	bne.n	8000d40 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f002 f8e9 	bl	8002ee4 <HAL_TIM_ReadCapturedValue>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a41      	ldr	r2, [pc, #260]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d16:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000d18:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6a1a      	ldr	r2, [r3, #32]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 020a 	bic.w	r2, r2, #10
 8000d2c:	621a      	str	r2, [r3, #32]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a1a      	ldr	r2, [r3, #32]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0202 	orr.w	r2, r2, #2
 8000d3c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000d3e:	e062      	b.n	8000e06 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8000d40:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d15e      	bne.n	8000e06 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000d48:	2100      	movs	r1, #0
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f002 f8ca 	bl	8002ee4 <HAL_TIM_ReadCapturedValue>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a33      	ldr	r2, [pc, #204]	@ (8000e20 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d54:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 8000d5e:	4b30      	ldr	r3, [pc, #192]	@ (8000e20 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d907      	bls.n	8000d7a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	4a2b      	ldr	r2, [pc, #172]	@ (8000e24 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e00f      	b.n	8000d9a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d909      	bls.n	8000d9a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000d86:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d94:	33ff      	adds	r3, #255	@ 0xff
 8000d96:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d98:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fb20 	bl	80003e4 <__aeabi_ui2d>
 8000da4:	a31a      	add	r3, pc, #104	@ (adr r3, 8000e10 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fb95 	bl	80004d8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dbe:	f7ff fcb5 	bl	800072c <__aeabi_ddiv>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fe7d 	bl	8000ac8 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000dd2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6a1a      	ldr	r2, [r3, #32]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 020a 	bic.w	r2, r2, #10
 8000de8:	621a      	str	r2, [r3, #32]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6a12      	ldr	r2, [r2, #32]
 8000df4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0202 	bic.w	r2, r2, #2
 8000e04:	60da      	str	r2, [r3, #12]
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	b020c49c 	.word	0xb020c49c
 8000e14:	3fa16872 	.word	0x3fa16872
 8000e18:	200002a4 	.word	0x200002a4
 8000e1c:	20000298 	.word	0x20000298
 8000e20:	2000029c 	.word	0x2000029c
 8000e24:	200002a0 	.word	0x200002a0
 8000e28:	200002a8 	.word	0x200002a8
 8000e2c:	200001f4 	.word	0x200001f4

08000e30 <HCSR04_Read>:

void HCSR04_Read(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <HCSR04_Read+0x38>)
 8000e3c:	f001 f837 	bl	8001eae <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000e40:	200a      	movs	r0, #10
 8000e42:	f7ff ff3d 	bl	8000cc0 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e4c:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <HCSR04_Read+0x38>)
 8000e4e:	f001 f82e 	bl	8001eae <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HCSR04_Read+0x3c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <HCSR04_Read+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0202 	orr.w	r2, r2, #2
 8000e60:	60da      	str	r2, [r3, #12]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	200001f4 	.word	0x200001f4

08000e70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e74:	f000 fcbc 	bl	80017f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e78:	f000 f858 	bl	8000f2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e7c:	f000 f91c 	bl	80010b8 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000e80:	f000 f89a 	bl	8000fb8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000e84:	f000 f8ee 	bl	8001064 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <main+0x7c>)
 8000e8c:	f001 fd7a 	bl	8002984 <HAL_TIM_IC_Start_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000e90:	f002 fff4 	bl	8003e7c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000e94:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <main+0x80>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4816      	ldr	r0, [pc, #88]	@ (8000ef4 <main+0x84>)
 8000e9a:	f003 f855 	bl	8003f48 <osThreadNew>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <main+0x88>)
 8000ea2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000ea4:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <main+0x8c>)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <main+0x90>)
 8000eaa:	f003 f84d 	bl	8003f48 <osThreadNew>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <main+0x94>)
 8000eb2:	6013      	str	r3, [r2, #0]

	/* creation of myTask03 */
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <main+0x98>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <main+0x9c>)
 8000eba:	f003 f845 	bl	8003f48 <osThreadNew>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <main+0xa0>)
 8000ec2:	6013      	str	r3, [r2, #0]

	/* creation of myTask04 */
	myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000ec4:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <main+0xa4>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <main+0xa8>)
 8000eca:	f003 f83d 	bl	8003f48 <osThreadNew>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <main+0xac>)
 8000ed2:	6013      	str	r3, [r2, #0]

	/* creation of myTask05 */
	myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8000ed4:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <main+0xb0>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4812      	ldr	r0, [pc, #72]	@ (8000f24 <main+0xb4>)
 8000eda:	f003 f835 	bl	8003f48 <osThreadNew>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <main+0xb8>)
 8000ee2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000ee4:	f002 fffc 	bl	8003ee0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <main+0x78>
 8000eec:	200001f4 	.word	0x200001f4
 8000ef0:	0800afcc 	.word	0x0800afcc
 8000ef4:	08001195 	.word	0x08001195
 8000ef8:	20000284 	.word	0x20000284
 8000efc:	0800aff0 	.word	0x0800aff0
 8000f00:	08001201 	.word	0x08001201
 8000f04:	20000288 	.word	0x20000288
 8000f08:	0800b014 	.word	0x0800b014
 8000f0c:	08001235 	.word	0x08001235
 8000f10:	2000028c 	.word	0x2000028c
 8000f14:	0800b038 	.word	0x0800b038
 8000f18:	0800126d 	.word	0x0800126d
 8000f1c:	20000290 	.word	0x20000290
 8000f20:	0800b05c 	.word	0x0800b05c
 8000f24:	080012a5 	.word	0x080012a5
 8000f28:	20000294 	.word	0x20000294

08000f2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	2228      	movs	r2, #40	@ 0x28
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fc3f 	bl	80077be <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f56:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ffcb 	bl	8001f10 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x58>
		Error_Handler();
 8000f80:	f000 f9bb 	bl	80012fa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fa38 	bl	8002414 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x82>
		Error_Handler();
 8000faa:	f000 f9a6 	bl	80012fa <Error_Handler>
	}
}
 8000fae:	bf00      	nop
 8000fb0:	3740      	adds	r7, #64	@ 0x40
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000fd6:	4a22      	ldr	r2, [pc, #136]	@ (8001060 <MX_TIM1_Init+0xa8>)
 8000fd8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000fdc:	2247      	movs	r2, #71	@ 0x47
 8000fde:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000fe8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fec:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <MX_TIM1_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8001000:	4816      	ldr	r0, [pc, #88]	@ (800105c <MX_TIM1_Init+0xa4>)
 8001002:	f001 fc6f 	bl	80028e4 <HAL_TIM_IC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x58>
		Error_Handler();
 800100c:	f000 f975 	bl	80012fa <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	480f      	ldr	r0, [pc, #60]	@ (800105c <MX_TIM1_Init+0xa4>)
 8001020:	f002 f954 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800102a:	f000 f966 	bl	80012fa <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001032:	2301      	movs	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_TIM1_Init+0xa4>)
 8001046:	f001 feb1 	bl	8002dac <HAL_TIM_IC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8001050:	f000 f953 	bl	80012fa <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200001f4 	.word	0x200001f4
 8001060:	40012c00 	.word	0x40012c00

08001064 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_USART2_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800109c:	f002 f986 	bl	80033ac <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80010a6:	f000 f928 	bl	80012fa <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000023c 	.word	0x2000023c
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_GPIO_Init+0xd0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <MX_GPIO_Init+0xd0>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_GPIO_Init+0xd0>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800111a:	481c      	ldr	r0, [pc, #112]	@ (800118c <MX_GPIO_Init+0xd4>)
 800111c:	f000 fec7 	bl	8001eae <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8001126:	481a      	ldr	r0, [pc, #104]	@ (8001190 <MX_GPIO_Init+0xd8>)
 8001128:	f000 fec1 	bl	8001eae <HAL_GPIO_WritePin>
			GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_GPIO_Init+0xd4>)
 8001146:	f000 fd17 	bl	8001b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800114a:	2370      	movs	r3, #112	@ 0x70
 800114c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_GPIO_Init+0xd8>)
 800115e:	f000 fd0b 	bl	8001b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001162:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001166:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_GPIO_Init+0xd8>)
 800117c:	f000 fcfc 	bl	8001b78 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	40011000 	.word	0x40011000
 8001190:	40010800 	.word	0x40010800

08001194 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		sprintf(uartbuffer, "%.2f\n", distancebuffer);
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <StartDefaultTask+0x50>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f941 	bl	8000428 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	490f      	ldr	r1, [pc, #60]	@ (80011e8 <StartDefaultTask+0x54>)
 80011ac:	480f      	ldr	r0, [pc, #60]	@ (80011ec <StartDefaultTask+0x58>)
 80011ae:	f006 faa3 	bl	80076f8 <siprintf>
		if (distancebuffer > 10.0) {
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <StartDefaultTask+0x50>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	490e      	ldr	r1, [pc, #56]	@ (80011f0 <StartDefaultTask+0x5c>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd41 	bl	8000c40 <__aeabi_fcmpgt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <StartDefaultTask+0x3a>
			sprintf(uartbuffer, "%s\n", "Err");
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <StartDefaultTask+0x60>)
 80011c6:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <StartDefaultTask+0x64>)
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <StartDefaultTask+0x58>)
 80011ca:	f006 fa95 	bl	80076f8 <siprintf>
		}
		HAL_UART_Transmit_IT(&huart2, (uint8_t*) uartbuffer,
				strlen(uartbuffer));
 80011ce:	4807      	ldr	r0, [pc, #28]	@ (80011ec <StartDefaultTask+0x58>)
 80011d0:	f7fe ffbe 	bl	8000150 <strlen>
 80011d4:	4603      	mov	r3, r0
		HAL_UART_Transmit_IT(&huart2, (uint8_t*) uartbuffer,
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4904      	ldr	r1, [pc, #16]	@ (80011ec <StartDefaultTask+0x58>)
 80011dc:	4807      	ldr	r0, [pc, #28]	@ (80011fc <StartDefaultTask+0x68>)
 80011de:	f002 f935 	bl	800344c <HAL_UART_Transmit_IT>
		sprintf(uartbuffer, "%.2f\n", distancebuffer);
 80011e2:	e7db      	b.n	800119c <StartDefaultTask+0x8>
 80011e4:	200002c0 	.word	0x200002c0
 80011e8:	0800afa4 	.word	0x0800afa4
 80011ec:	200002ac 	.word	0x200002ac
 80011f0:	41200000 	.word	0x41200000
 80011f4:	0800afac 	.word	0x0800afac
 80011f8:	0800afb0 	.word	0x0800afb0
 80011fc:	2000023c 	.word	0x2000023c

08001200 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8001208:	f7ff fe12 	bl	8000e30 <HCSR04_Read>
		distancebuffer = Distance;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <StartTask02+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <StartTask02+0x2c>)
 8001212:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <StartTask02+0x30>)
 800121a:	f000 fe60 	bl	8001ede <HAL_GPIO_TogglePin>
		osDelay(20);
 800121e:	2014      	movs	r0, #20
 8001220:	f002 ff3c 	bl	800409c <osDelay>
		HCSR04_Read();
 8001224:	bf00      	nop
 8001226:	e7ef      	b.n	8001208 <StartTask02+0x8>
 8001228:	200002a8 	.word	0x200002a8
 800122c:	200002c0 	.word	0x200002c0
 8001230:	40011000 	.word	0x40011000

08001234 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(PB2)) {
 800123c:	2120      	movs	r1, #32
 800123e:	480a      	ldr	r0, [pc, #40]	@ (8001268 <StartTask03+0x34>)
 8001240:	f000 fe1e 	bl	8001e80 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f8      	bne.n	800123c <StartTask03+0x8>
			while (!HAL_GPIO_ReadPin(PB2));
 800124a:	bf00      	nop
 800124c:	2120      	movs	r1, #32
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <StartTask03+0x34>)
 8001250:	f000 fe16 	bl	8001e80 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f8      	beq.n	800124c <StartTask03+0x18>
			HAL_GPIO_TogglePin(LED2);
 800125a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125e:	4802      	ldr	r0, [pc, #8]	@ (8001268 <StartTask03+0x34>)
 8001260:	f000 fe3d 	bl	8001ede <HAL_GPIO_TogglePin>
		if (!HAL_GPIO_ReadPin(PB2)) {
 8001264:	e7ea      	b.n	800123c <StartTask03+0x8>
 8001266:	bf00      	nop
 8001268:	40010800 	.word	0x40010800

0800126c <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(PB1)) {
 8001274:	2110      	movs	r1, #16
 8001276:	480a      	ldr	r0, [pc, #40]	@ (80012a0 <StartTask04+0x34>)
 8001278:	f000 fe02 	bl	8001e80 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f8      	bne.n	8001274 <StartTask04+0x8>
			while (!HAL_GPIO_ReadPin(PB1));
 8001282:	bf00      	nop
 8001284:	2110      	movs	r1, #16
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <StartTask04+0x34>)
 8001288:	f000 fdfa 	bl	8001e80 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f8      	beq.n	8001284 <StartTask04+0x18>
			HAL_GPIO_TogglePin(LED1);
 8001292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001296:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <StartTask04+0x34>)
 8001298:	f000 fe21 	bl	8001ede <HAL_GPIO_TogglePin>
		if (!HAL_GPIO_ReadPin(PB1)) {
 800129c:	e7ea      	b.n	8001274 <StartTask04+0x8>
 800129e:	bf00      	nop
 80012a0:	40010800 	.word	0x40010800

080012a4 <StartTask05>:
 * @brief Function implementing the myTask05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(PB3)) {
 80012ac:	2140      	movs	r1, #64	@ 0x40
 80012ae:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <StartTask05+0x34>)
 80012b0:	f000 fde6 	bl	8001e80 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f8      	bne.n	80012ac <StartTask05+0x8>
			while (!HAL_GPIO_ReadPin(PB3));
 80012ba:	bf00      	nop
 80012bc:	2140      	movs	r1, #64	@ 0x40
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <StartTask05+0x34>)
 80012c0:	f000 fdde 	bl	8001e80 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f8      	beq.n	80012bc <StartTask05+0x18>
			HAL_GPIO_TogglePin(LED3);
 80012ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ce:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <StartTask05+0x34>)
 80012d0:	f000 fe05 	bl	8001ede <HAL_GPIO_TogglePin>
		if (!HAL_GPIO_ReadPin(PB3)) {
 80012d4:	e7ea      	b.n	80012ac <StartTask05+0x8>
 80012d6:	bf00      	nop
 80012d8:	40010800 	.word	0x40010800

080012dc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80012ee:	f000 fa95 	bl	800181c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fe:	b672      	cpsid	i
}
 8001300:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001302:	bf00      	nop
 8001304:	e7fd      	b.n	8001302 <Error_Handler+0x8>
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <HAL_MspInit+0x68>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <HAL_MspInit+0x68>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_MspInit+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_MspInit+0x68>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_MspInit+0x68>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_MspInit+0x68>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	210f      	movs	r1, #15
 8001342:	f06f 0001 	mvn.w	r0, #1
 8001346:	f000 fb3a 	bl	80019be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_MspInit+0x6c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_MspInit+0x6c>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_TIM_IC_MspInit+0x84>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12c      	bne.n	80013f2 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 800139e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_TIM_IC_MspInit+0x88>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	@ (8001404 <HAL_TIM_IC_MspInit+0x8c>)
 80013de:	f000 fbcb 	bl	8001b78 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	201b      	movs	r0, #27
 80013e8:	f000 fae9 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013ec:	201b      	movs	r0, #27
 80013ee:	f000 fb02 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <HAL_UART_MspInit+0x98>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d137      	bne.n	8001498 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 800142e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_UART_MspInit+0x9c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001458:	2304      	movs	r3, #4
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <HAL_UART_MspInit+0xa0>)
 800146c:	f000 fb84 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001470:	2308      	movs	r3, #8
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <HAL_UART_MspInit+0xa0>)
 8001484:	f000 fb78 	bl	8001b78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2105      	movs	r1, #5
 800148c:	2026      	movs	r0, #38	@ 0x26
 800148e:	f000 fa96 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001492:	2026      	movs	r0, #38	@ 0x26
 8001494:	f000 faaf 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	@ 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_InitTick+0xe8>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a33      	ldr	r2, [pc, #204]	@ (8001594 <HAL_InitTick+0xe8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <HAL_InitTick+0xe8>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014da:	f107 0210 	add.w	r2, r7, #16
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f905 	bl	80026f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f4:	f001 f8d6 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80014f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80014fa:	e004      	b.n	8001506 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014fc:	f001 f8d2 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8001500:	4603      	mov	r3, r0
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001508:	4a23      	ldr	r2, [pc, #140]	@ (8001598 <HAL_InitTick+0xec>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0c9b      	lsrs	r3, r3, #18
 8001510:	3b01      	subs	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_InitTick+0xf0>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <HAL_InitTick+0xf0>)
 800151e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_InitTick+0xf0>)
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_InitTick+0xf0>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_InitTick+0xf0>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_InitTick+0xf0>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800153c:	4817      	ldr	r0, [pc, #92]	@ (800159c <HAL_InitTick+0xf0>)
 800153e:	f001 f927 	bl	8002790 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001548:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11b      	bne.n	8001588 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001550:	4812      	ldr	r0, [pc, #72]	@ (800159c <HAL_InitTick+0xf0>)
 8001552:	f001 f975 	bl	8002840 <HAL_TIM_Base_Start_IT>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800155c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001564:	201c      	movs	r0, #28
 8001566:	f000 fa46 	bl	80019f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d808      	bhi.n	8001582 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	201c      	movs	r0, #28
 8001576:	f000 fa22 	bl	80019be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <HAL_InitTick+0xf4>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e002      	b.n	8001588 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001588:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800158c:	4618      	mov	r0, r3
 800158e:	3738      	adds	r7, #56	@ 0x38
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	431bde83 	.word	0x431bde83
 800159c:	200002c4 	.word	0x200002c4
 80015a0:	20000004 	.word	0x20000004

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <TIM1_CC_IRQHandler+0x10>)
 80015de:	f001 fadd 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200001f4 	.word	0x200001f4

080015ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <TIM2_IRQHandler+0x10>)
 80015f2:	f001 fad3 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002c4 	.word	0x200002c4

08001600 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <USART2_IRQHandler+0x10>)
 8001606:	f001 ff57 	bl	80034b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000023c 	.word	0x2000023c

08001614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return 1;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <_kill>:

int _kill(int pid, int sig)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162c:	f006 f91a 	bl	8007864 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	2216      	movs	r2, #22
 8001634:	601a      	str	r2, [r3, #0]
  return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_exit>:

void _exit (int status)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffe7 	bl	8001622 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <_exit+0x12>

08001658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
  }

  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
  }
  return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f0:	605a      	str	r2, [r3, #4]
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f006 f882 	bl	8007864 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20005000 	.word	0x20005000
 800178c:	00000400 	.word	0x00000400
 8001790:	2000030c 	.word	0x2000030c
 8001794:	20001da8 	.word	0x20001da8

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a4:	f7ff fff8 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017aa:	490c      	ldr	r1, [pc, #48]	@ (80017dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017c0:	4c09      	ldr	r4, [pc, #36]	@ (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f006 f84f 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7ff fb4d 	bl	8000e70 <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017e0:	0800b4e8 	.word	0x0800b4e8
  ldr r2, =_sbss
 80017e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017e8:	20001da8 	.word	0x20001da8

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f8d1 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f7ff fe50 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fd7c 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	@ (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000008 	.word	0x20000008
 800183c:	20000310 	.word	0x20000310

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	@ (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000310 	.word	0x20000310

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4906      	ldr	r1, [pc, #24]	@ (80018ec <__NVIC_EnableIRQ+0x34>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff4f 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff64 	bl	800189c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ffb2 	bl	8001944 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff81 	bl	80018f0 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff57 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d008      	beq.n	8001a3c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e020      	b.n	8001a7e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020e 	bic.w	r2, r2, #14
 8001a4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d005      	beq.n	8001aac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e051      	b.n	8001b50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a22      	ldr	r2, [pc, #136]	@ (8001b5c <HAL_DMA_Abort_IT+0xd4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d029      	beq.n	8001b2a <HAL_DMA_Abort_IT+0xa2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <HAL_DMA_Abort_IT+0xd8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_Abort_IT+0x9e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <HAL_DMA_Abort_IT+0xdc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x98>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <HAL_DMA_Abort_IT+0xe0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d012      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x92>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <HAL_DMA_Abort_IT+0xe4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00a      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x8c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1b      	ldr	r2, [pc, #108]	@ (8001b70 <HAL_DMA_Abort_IT+0xe8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <HAL_DMA_Abort_IT+0x86>
 8001b08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b0c:	e00e      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b12:	e00b      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b18:	e008      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	e005      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b24:	e002      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b26:	2310      	movs	r3, #16
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_DMA_Abort_IT+0xec>)
 8001b2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
    } 
  }
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	4002001c 	.word	0x4002001c
 8001b64:	40020030 	.word	0x40020030
 8001b68:	40020044 	.word	0x40020044
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	4002006c 	.word	0x4002006c
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	@ 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e169      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8158 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a9a      	ldr	r2, [pc, #616]	@ (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a98      	ldr	r2, [pc, #608]	@ (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d875      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bba:	4a98      	ldr	r2, [pc, #608]	@ (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d058      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bc0:	4a96      	ldr	r2, [pc, #600]	@ (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d86f      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a96      	ldr	r2, [pc, #600]	@ (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d052      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bcc:	4a94      	ldr	r2, [pc, #592]	@ (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d869      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a94      	ldr	r2, [pc, #592]	@ (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04c      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a92      	ldr	r2, [pc, #584]	@ (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d863      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bde:	4a92      	ldr	r2, [pc, #584]	@ (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d046      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001be4:	4a90      	ldr	r2, [pc, #576]	@ (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d85d      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d82a      	bhi.n	8001c44 <HAL_GPIO_Init+0xcc>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d859      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf8 <HAL_GPIO_Init+0x80>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c4d 	.word	0x08001c4d
 8001c00:	08001c5f 	.word	0x08001c5f
 8001c04:	08001ca1 	.word	0x08001ca1
 8001c08:	08001ca7 	.word	0x08001ca7
 8001c0c:	08001ca7 	.word	0x08001ca7
 8001c10:	08001ca7 	.word	0x08001ca7
 8001c14:	08001ca7 	.word	0x08001ca7
 8001c18:	08001ca7 	.word	0x08001ca7
 8001c1c:	08001ca7 	.word	0x08001ca7
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001ca7 	.word	0x08001ca7
 8001c28:	08001ca7 	.word	0x08001ca7
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001ca7 	.word	0x08001ca7
 8001c34:	08001ca7 	.word	0x08001ca7
 8001c38:	08001ca7 	.word	0x08001ca7
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c69 	.word	0x08001c69
 8001c44:	4a79      	ldr	r2, [pc, #484]	@ (8001e2c <HAL_GPIO_Init+0x2b4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4a:	e02c      	b.n	8001ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e029      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e024      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	3308      	adds	r3, #8
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e01f      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e01a      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e013      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	611a      	str	r2, [r3, #16]
          break;
 8001c92:	e009      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	615a      	str	r2, [r3, #20]
          break;
 8001c9e:	e003      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          break;
 8001ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	@ 0xff
 8001cac:	d801      	bhi.n	8001cb2 <HAL_GPIO_Init+0x13a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_Init+0x13e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	@ 0xff
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_GPIO_Init+0x14c>
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x152>
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80b1 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d10:	4a48      	ldr	r2, [pc, #288]	@ (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a40      	ldr	r2, [pc, #256]	@ (8001e38 <HAL_GPIO_Init+0x2c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1ec>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e3c <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1e8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	@ (8001e40 <HAL_GPIO_Init+0x2c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d76:	492f      	ldr	r1, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	492c      	ldr	r1, [pc, #176]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4928      	ldr	r1, [pc, #160]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	491e      	ldr	r1, [pc, #120]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4914      	ldr	r1, [pc, #80]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d021      	beq.n	8001e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490e      	ldr	r1, [pc, #56]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e021      	b.n	8001e5a <HAL_GPIO_Init+0x2e2>
 8001e16:	bf00      	nop
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10220000 	.word	0x10220000
 8001e24:	10210000 	.word	0x10210000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400
 8001e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_GPIO_Init+0x304>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4909      	ldr	r1, [pc, #36]	@ (8001e7c <HAL_GPIO_Init+0x304>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae8e 	bne.w	8001b8c <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	@ 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebe:	787b      	ldrb	r3, [r7, #1]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eca:	e003      	b.n	8001ed4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e272      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8087 	beq.w	800203e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f30:	4b92      	ldr	r3, [pc, #584]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d00c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d112      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5e>
 8001f48:	4b8c      	ldr	r3, [pc, #560]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f54:	d10b      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f56:	4b89      	ldr	r3, [pc, #548]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06c      	beq.n	800203c <HAL_RCC_OscConfig+0x12c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d168      	bne.n	800203c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e24c      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x76>
 8001f78:	4b80      	ldr	r3, [pc, #512]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a7f      	ldr	r2, [pc, #508]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e02e      	b.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7a      	ldr	r2, [pc, #488]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b78      	ldr	r3, [pc, #480]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a77      	ldr	r2, [pc, #476]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e01d      	b.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0xbc>
 8001fb2:	4b72      	ldr	r3, [pc, #456]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a71      	ldr	r2, [pc, #452]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b68      	ldr	r3, [pc, #416]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a67      	ldr	r2, [pc, #412]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fc28 	bl	8001840 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fc24 	bl	8001840 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	@ 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e200      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xe4>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fc14 	bl	8001840 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fc10 	bl	8001840 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	@ 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1ec      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x10c>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d063      	beq.n	8002112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204a:	4b4c      	ldr	r3, [pc, #304]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002056:	4b49      	ldr	r3, [pc, #292]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b08      	cmp	r3, #8
 8002060:	d11c      	bne.n	800209c <HAL_RCC_OscConfig+0x18c>
 8002062:	4b46      	ldr	r3, [pc, #280]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d116      	bne.n	800209c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	4b43      	ldr	r3, [pc, #268]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x176>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e1c0      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4b3d      	ldr	r3, [pc, #244]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4939      	ldr	r1, [pc, #228]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	e03a      	b.n	8002112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a4:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x270>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fbc9 	bl	8001840 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff fbc5 	bl	8001840 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1a1      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4927      	ldr	r1, [pc, #156]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b26      	ldr	r3, [pc, #152]	@ (8002180 <HAL_RCC_OscConfig+0x270>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fba8 	bl	8001840 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fba4 	bl	8001840 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e180      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d03a      	beq.n	8002194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d019      	beq.n	800215a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff fb88 	bl	8001840 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff fb84 	bl	8001840 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e160      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCC_OscConfig+0x26c>)
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002152:	2001      	movs	r0, #1
 8002154:	f000 fafe 	bl	8002754 <RCC_Delay>
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002160:	f7ff fb6e 	bl	8001840 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002166:	e00f      	b.n	8002188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002168:	f7ff fb6a 	bl	8001840 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d908      	bls.n	8002188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e146      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	42420000 	.word	0x42420000
 8002184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e9      	bne.n	8002168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a6 	beq.w	80022ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b8b      	ldr	r3, [pc, #556]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b88      	ldr	r3, [pc, #544]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a87      	ldr	r2, [pc, #540]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b85      	ldr	r3, [pc, #532]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4b82      	ldr	r3, [pc, #520]	@ (80023d8 <HAL_RCC_OscConfig+0x4c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d118      	bne.n	800220c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021da:	4b7f      	ldr	r3, [pc, #508]	@ (80023d8 <HAL_RCC_OscConfig+0x4c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7e      	ldr	r2, [pc, #504]	@ (80023d8 <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb2b 	bl	8001840 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ee:	f7ff fb27 	bl	8001840 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	@ 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e103      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002200:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCC_OscConfig+0x4c8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x312>
 8002214:	4b6f      	ldr	r3, [pc, #444]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e02d      	b.n	800227e <HAL_RCC_OscConfig+0x36e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x334>
 800222a:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a69      	ldr	r2, [pc, #420]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a66      	ldr	r2, [pc, #408]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6213      	str	r3, [r2, #32]
 8002242:	e01c      	b.n	800227e <HAL_RCC_OscConfig+0x36e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_OscConfig+0x356>
 800224c:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a60      	ldr	r2, [pc, #384]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	4b5e      	ldr	r3, [pc, #376]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a5d      	ldr	r2, [pc, #372]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0x36e>
 8002266:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a5a      	ldr	r2, [pc, #360]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a57      	ldr	r2, [pc, #348]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d015      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fadb 	bl	8001840 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff fad7 	bl	8001840 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0b1      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	4b4b      	ldr	r3, [pc, #300]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ee      	beq.n	800228e <HAL_RCC_OscConfig+0x37e>
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fac5 	bl	8001840 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7ff fac1 	bl	8001840 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e09b      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ee      	bne.n	80022ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4b3c      	ldr	r3, [pc, #240]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a3b      	ldr	r2, [pc, #236]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d061      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d146      	bne.n	800239a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b33      	ldr	r3, [pc, #204]	@ (80023dc <HAL_RCC_OscConfig+0x4cc>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fa95 	bl	8001840 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fa91 	bl	8001840 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e06d      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232c:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002340:	d108      	bne.n	8002354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4921      	ldr	r1, [pc, #132]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a19      	ldr	r1, [r3, #32]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	430b      	orrs	r3, r1
 8002366:	491b      	ldr	r1, [pc, #108]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x4cc>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fa65 	bl	8001840 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff fa61 	bl	8001840 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e03d      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x46a>
 8002398:	e035      	b.n	8002406 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_RCC_OscConfig+0x4cc>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fa4e 	bl	8001840 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff fa4a 	bl	8001840 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e026      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x498>
 80023c6:	e01e      	b.n	8002406 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e019      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_OscConfig+0x500>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0d0      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b67      	ldr	r3, [pc, #412]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0207 	bic.w	r2, r3, #7
 800243e:	4965      	ldr	r1, [pc, #404]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a58      	ldr	r2, [pc, #352]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a52      	ldr	r2, [pc, #328]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d040      	beq.n	8002534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e073      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b3d      	ldr	r3, [pc, #244]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06b      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4936      	ldr	r1, [pc, #216]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002504:	f7ff f99c 	bl	8001840 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7ff f998 	bl	8001840 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e053      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002534:	4b27      	ldr	r3, [pc, #156]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d210      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b24      	ldr	r3, [pc, #144]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 0207 	bic.w	r2, r3, #7
 800254a:	4922      	ldr	r1, [pc, #136]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <HAL_RCC_ClockConfig+0x1cc>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1d0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe ff72 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	0800b080 	.word	0x0800b080
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCC_GetSysClockFreq+0x94>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x30>
 8002612:	2b08      	cmp	r3, #8
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x36>
 8002616:	e027      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	613b      	str	r3, [r7, #16]
      break;
 800261c:	e027      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	0c9b      	lsrs	r3, r3, #18
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d010      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_GetSysClockFreq+0x94>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0c5b      	lsrs	r3, r3, #17
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	4a11      	ldr	r2, [pc, #68]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x98>)
 800264a:	fb03 f202 	mul.w	r2, r3, r2
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e004      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a0c      	ldr	r2, [pc, #48]	@ (800268c <HAL_RCC_GetSysClockFreq+0xa4>)
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	613b      	str	r3, [r7, #16]
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x98>)
 800266a:	613b      	str	r3, [r7, #16]
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	693b      	ldr	r3, [r7, #16]
}
 8002670:	4618      	mov	r0, r3
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	007a1200 	.word	0x007a1200
 8002684:	0800b098 	.word	0x0800b098
 8002688:	0800b0a8 	.word	0x0800b0a8
 800268c:	003d0900 	.word	0x003d0900

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b02      	ldr	r3, [pc, #8]	@ (80026a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff2 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	0800b090 	.word	0x0800b090

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffde 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	0800b090 	.word	0x0800b090

080026f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	220f      	movs	r2, #15
 8002702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_RCC_GetClockConfig+0x58>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_RCC_GetClockConfig+0x58>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_GetClockConfig+0x58>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_RCC_GetClockConfig+0x58>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800275c:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <RCC_Delay+0x34>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <RCC_Delay+0x38>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0a5b      	lsrs	r3, r3, #9
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002770:	bf00      	nop
  }
  while (Delay --);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	60fa      	str	r2, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <RCC_Delay+0x1c>
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000000 	.word	0x20000000
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f839 	bl	800282e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 fbe8 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e03a      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002882:	d009      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <HAL_TIM_Base_Start_IT+0x9c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fd34 	bl	8001378 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fb3e 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_IC_Start_IT+0x1e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e013      	b.n	80029ca <HAL_TIM_IC_Start_IT+0x46>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_IC_Start_IT+0x2e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	e00b      	b.n	80029ca <HAL_TIM_IC_Start_IT+0x46>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_IC_Start_IT+0x3e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e003      	b.n	80029ca <HAL_TIM_IC_Start_IT+0x46>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_TIM_IC_Start_IT+0x58>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e013      	b.n	8002a04 <HAL_TIM_IC_Start_IT+0x80>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d104      	bne.n	80029ec <HAL_TIM_IC_Start_IT+0x68>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e00b      	b.n	8002a04 <HAL_TIM_IC_Start_IT+0x80>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d104      	bne.n	80029fc <HAL_TIM_IC_Start_IT+0x78>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e003      	b.n	8002a04 <HAL_TIM_IC_Start_IT+0x80>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d102      	bne.n	8002a12 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a0c:	7b7b      	ldrb	r3, [r7, #13]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0b8      	b.n	8002b88 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_IC_Start_IT+0xa2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a24:	e013      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0xca>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_IC_Start_IT+0xb2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a34:	e00b      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0xca>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_IC_Start_IT+0xc2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a44:	e003      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0xca>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Start_IT+0xda>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a5c:	e013      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x102>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_IC_Start_IT+0xea>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x102>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_IC_Start_IT+0xfa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a7c:	e003      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x102>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d841      	bhi.n	8002b10 <HAL_TIM_IC_Start_IT+0x18c>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <HAL_TIM_IC_Start_IT+0x110>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002b11 	.word	0x08002b11
 8002a9c:	08002b11 	.word	0x08002b11
 8002aa0:	08002b11 	.word	0x08002b11
 8002aa4:	08002adb 	.word	0x08002adb
 8002aa8:	08002b11 	.word	0x08002b11
 8002aac:	08002b11 	.word	0x08002b11
 8002ab0:	08002b11 	.word	0x08002b11
 8002ab4:	08002aed 	.word	0x08002aed
 8002ab8:	08002b11 	.word	0x08002b11
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002aff 	.word	0x08002aff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0202 	orr.w	r2, r2, #2
 8002ad6:	60da      	str	r2, [r3, #12]
      break;
 8002ad8:	e01d      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0204 	orr.w	r2, r2, #4
 8002ae8:	60da      	str	r2, [r3, #12]
      break;
 8002aea:	e014      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	60da      	str	r2, [r3, #12]
      break;
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0210 	orr.w	r2, r2, #16
 8002b0c:	60da      	str	r2, [r3, #12]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d134      	bne.n	8002b86 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fbac 	bl	8003282 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <HAL_TIM_IC_Start_IT+0x20c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_TIM_IC_Start_IT+0x1ce>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d009      	beq.n	8002b52 <HAL_TIM_IC_Start_IT+0x1ce>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <HAL_TIM_IC_Start_IT+0x210>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIM_IC_Start_IT+0x1ce>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <HAL_TIM_IC_Start_IT+0x214>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d111      	bne.n	8002b76 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d010      	beq.n	8002b86 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	e007      	b.n	8002b86 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0202 	mvn.w	r2, #2
 8002bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe f886 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9c0 	bl	8002f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f9c6 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0204 	mvn.w	r2, #4
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe f85c 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f996 	bl	8002f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f99c 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0208 	mvn.w	r2, #8
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f832 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f96c 	bl	8002f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f972 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0210 	mvn.w	r2, #16
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe f808 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f942 	bl	8002f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f948 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0201 	mvn.w	r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fade 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	2b80      	cmp	r3, #128	@ 0x80
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb27 	bl	800339a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d56:	2b40      	cmp	r3, #64	@ 0x40
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f90c 	bl	8002f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0220 	mvn.w	r2, #32
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 faf2 	bl	8003388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_IC_ConfigChannel+0x1e>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e088      	b.n	8002edc <HAL_TIM_IC_ConfigChannel+0x130>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002de8:	f000 f93e 	bl	8003068 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 020c 	bic.w	r2, r2, #12
 8002dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	e060      	b.n	8002ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d11c      	bne.n	8002e50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002e26:	f000 f979 	bl	800311c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6999      	ldr	r1, [r3, #24]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	021a      	lsls	r2, r3, #8
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	619a      	str	r2, [r3, #24]
 8002e4e:	e040      	b.n	8002ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d11b      	bne.n	8002e8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002e66:	f000 f995 	bl	8003194 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020c 	bic.w	r2, r2, #12
 8002e78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
 8002e8c:	e021      	b.n	8002ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d11c      	bne.n	8002ece <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002ea4:	f000 f9b1 	bl	800320a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002eb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69d9      	ldr	r1, [r3, #28]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	021a      	lsls	r2, r3, #8
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	61da      	str	r2, [r3, #28]
 8002ecc:	e001      	b.n	8002ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d831      	bhi.n	8002f5c <HAL_TIM_ReadCapturedValue+0x78>
 8002ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f5d 	.word	0x08002f5d
 8002f08:	08002f5d 	.word	0x08002f5d
 8002f0c:	08002f5d 	.word	0x08002f5d
 8002f10:	08002f3f 	.word	0x08002f3f
 8002f14:	08002f5d 	.word	0x08002f5d
 8002f18:	08002f5d 	.word	0x08002f5d
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f49 	.word	0x08002f49
 8002f24:	08002f5d 	.word	0x08002f5d
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08002f5d 	.word	0x08002f5d
 8002f30:	08002f53 	.word	0x08002f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	60fb      	str	r3, [r7, #12]

      break;
 8002f3c:	e00f      	b.n	8002f5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	60fb      	str	r3, [r7, #12]

      break;
 8002f46:	e00a      	b.n	8002f5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	60fb      	str	r3, [r7, #12]

      break;
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	60fb      	str	r3, [r7, #12]

      break;
 8002f5a:	e000      	b.n	8002f5e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f5c:	bf00      	nop
  }

  return tmpreg;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a29      	ldr	r2, [pc, #164]	@ (800305c <TIM_Base_SetConfig+0xb8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a26      	ldr	r2, [pc, #152]	@ (8003060 <TIM_Base_SetConfig+0xbc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x30>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a25      	ldr	r2, [pc, #148]	@ (8003064 <TIM_Base_SetConfig+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <TIM_Base_SetConfig+0xb8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff4:	d007      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	@ (8003060 <TIM_Base_SetConfig+0xbc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_Base_SetConfig+0x62>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <TIM_Base_SetConfig+0xc0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a07      	ldr	r2, [pc, #28]	@ (800305c <TIM_Base_SetConfig+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d103      	bne.n	800304c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800

08003068 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0201 	bic.w	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <TIM_TI1_SetConfig+0xa8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_TI1_SetConfig+0x46>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309c:	d007      	beq.n	80030ae <TIM_TI1_SetConfig+0x46>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003114 <TIM_TI1_SetConfig+0xac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_TI1_SetConfig+0x46>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <TIM_TI1_SetConfig+0xb0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <TIM_TI1_SetConfig+0x4a>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <TIM_TI1_SetConfig+0x4c>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e003      	b.n	80030d2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f023 030a 	bic.w	r3, r3, #10
 80030ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f003 030a 	and.w	r3, r3, #10
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800

0800311c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	b29b      	uxth	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800316e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	621a      	str	r2, [r3, #32]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	b29b      	uxth	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800325c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	621a      	str	r2, [r3, #32]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	401a      	ands	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e046      	b.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d009      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800

08003388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f818 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	@ 0x24
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fcb5 	bl	8003d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d121      	bne.n	80034aa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UART_Transmit_IT+0x26>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e01a      	b.n	80034ac <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2221      	movs	r2, #33	@ 0x21
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b0ba      	sub	sp, #232	@ 0xe8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_UART_IRQHandler+0x66>
 800350a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fb63 	bl	8003be2 <UART_Receive_IT>
      return;
 800351c:	e25b      	b.n	80039d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800351e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80de 	beq.w	80036e4 <HAL_UART_IRQHandler+0x22c>
 8003528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80d1 	beq.w	80036e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_UART_IRQHandler+0xae>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_UART_IRQHandler+0xd2>
 8003572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	f043 0202 	orr.w	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xf6>
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f043 0204 	orr.w	r2, r3, #4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d011      	beq.n	80035de <HAL_UART_IRQHandler+0x126>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d105      	bne.n	80035d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f043 0208 	orr.w	r2, r3, #8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 81f2 	beq.w	80039cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_IRQHandler+0x14e>
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 faee 	bl	8003be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <HAL_UART_IRQHandler+0x17a>
 800362a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04f      	beq.n	80036d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f9f8 	bl	8003a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d041      	beq.n	80036ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800365c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800367e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800368a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1d9      	bne.n	8003646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369e:	4a7e      	ldr	r2, [pc, #504]	@ (8003898 <HAL_UART_IRQHandler+0x3e0>)
 80036a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe f9ee 	bl	8001a88 <HAL_DMA_Abort_IT>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036bc:	4610      	mov	r0, r2
 80036be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	e00e      	b.n	80036e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f99c 	bl	8003a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	e00a      	b.n	80036e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f998 	bl	8003a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e006      	b.n	80036e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f994 	bl	8003a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036de:	e175      	b.n	80039cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	bf00      	nop
    return;
 80036e2:	e173      	b.n	80039cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f040 814f 	bne.w	800398c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8148 	beq.w	800398c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8141 	beq.w	800398c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80b6 	beq.w	800389c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800373c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8145 	beq.w	80039d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800374a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800374e:	429a      	cmp	r2, r3
 8003750:	f080 813e 	bcs.w	80039d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800375a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b20      	cmp	r3, #32
 8003764:	f000 8088 	beq.w	8003878 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800377e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003782:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003786:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003794:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1d9      	bne.n	8003768 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e1      	bne.n	80037b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3314      	adds	r3, #20
 8003810:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003814:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003816:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800381a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e3      	bne.n	80037f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003848:	f023 0310 	bic.w	r3, r3, #16
 800384c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800385a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800385c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e3      	bne.n	8003836 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe f8cd 	bl	8001a12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003886:	b29b      	uxth	r3, r3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8bf 	bl	8003a12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003894:	e09c      	b.n	80039d0 <HAL_UART_IRQHandler+0x518>
 8003896:	bf00      	nop
 8003898:	08003aed 	.word	0x08003aed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 808e 	beq.w	80039d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8089 	beq.w	80039d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	623b      	str	r3, [r7, #32]
   return(result);
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800391e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e3      	bne.n	80038fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0310 	bic.w	r3, r3, #16
 8003956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003964:	61fa      	str	r2, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	617b      	str	r3, [r7, #20]
   return(result);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e3      	bne.n	8003940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800397e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f844 	bl	8003a12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800398a:	e023      	b.n	80039d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_UART_IRQHandler+0x4f4>
 8003998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8b5 	bl	8003b14 <UART_Transmit_IT>
    return;
 80039aa:	e014      	b.n	80039d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <HAL_UART_IRQHandler+0x51e>
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8f4 	bl	8003bb2 <UART_EndTransmit_IT>
    return;
 80039ca:	e004      	b.n	80039d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039d4:	bf00      	nop
  }
}
 80039d6:	37e8      	adds	r7, #232	@ 0xe8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b095      	sub	sp, #84	@ 0x54
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e5      	bne.n	8003a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d119      	bne.n	8003ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ac0:	61ba      	str	r2, [r7, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ae2:	bf00      	nop
 8003ae4:	3754      	adds	r7, #84	@ 0x54
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff ff7a 	bl	8003a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b21      	cmp	r3, #33	@ 0x21
 8003b26:	d13e      	bne.n	8003ba6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b30:	d114      	bne.n	8003b5c <UART_Transmit_IT+0x48>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d110      	bne.n	8003b5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	1c9a      	adds	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]
 8003b5a:	e008      	b.n	8003b6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6211      	str	r1, [r2, #32]
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ff02 	bl	80039dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08c      	sub	sp, #48	@ 0x30
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b22      	cmp	r3, #34	@ 0x22
 8003bf4:	f040 80ae 	bne.w	8003d54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c00:	d117      	bne.n	8003c32 <UART_Receive_IT+0x50>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c30:	e026      	b.n	8003c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c44:	d007      	beq.n	8003c56 <UART_Receive_IT+0x74>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <UART_Receive_IT+0x82>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e008      	b.n	8003c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d15d      	bne.n	8003d50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0220 	bic.w	r2, r2, #32
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d135      	bne.n	8003d46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 0310 	bic.w	r3, r3, #16
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d00:	623a      	str	r2, [r7, #32]
 8003d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d10a      	bne.n	8003d38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fe67 	bl	8003a12 <HAL_UARTEx_RxEventCallback>
 8003d44:	e002      	b.n	8003d4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fe51 	bl	80039ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e002      	b.n	8003d56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3730      	adds	r7, #48	@ 0x30
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d9a:	f023 030c 	bic.w	r3, r3, #12
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e74 <UART_SetConfig+0x114>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d103      	bne.n	8003dd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dc8:	f7fe fc80 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	e002      	b.n	8003dd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7fe fc68 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <UART_SetConfig+0x118>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	0119      	lsls	r1, r3, #4
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009a      	lsls	r2, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <UART_SetConfig+0x118>)
 8003e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2064      	movs	r0, #100	@ 0x64
 8003e16:	fb00 f303 	mul.w	r3, r0, r3
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	3332      	adds	r3, #50	@ 0x32
 8003e20:	4a15      	ldr	r2, [pc, #84]	@ (8003e78 <UART_SetConfig+0x118>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e2c:	4419      	add	r1, r3
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009a      	lsls	r2, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <UART_SetConfig+0x118>)
 8003e46:	fba3 0302 	umull	r0, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2064      	movs	r0, #100	@ 0x64
 8003e4e:	fb00 f303 	mul.w	r3, r0, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	3332      	adds	r3, #50	@ 0x32
 8003e58:	4a07      	ldr	r2, [pc, #28]	@ (8003e78 <UART_SetConfig+0x118>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	440a      	add	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40013800 	.word	0x40013800
 8003e78:	51eb851f 	.word	0x51eb851f

08003e7c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e82:	f3ef 8305 	mrs	r3, IPSR
 8003e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	607b      	str	r3, [r7, #4]
  return(result);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <osKernelInitialize+0x32>
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <osKernelInitialize+0x60>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d109      	bne.n	8003eb6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003eae:	f06f 0305 	mvn.w	r3, #5
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e00c      	b.n	8003ed0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <osKernelInitialize+0x60>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d105      	bne.n	8003eca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <osKernelInitialize+0x60>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e002      	b.n	8003ed0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ece:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	20000314 	.word	0x20000314

08003ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	607b      	str	r3, [r7, #4]
  return(result);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <osKernelStart+0x32>
 8003efe:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <osKernelStart+0x64>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d109      	bne.n	8003f1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f06:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f12:	f06f 0305 	mvn.w	r3, #5
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e00e      	b.n	8003f38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <osKernelStart+0x64>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <osKernelStart+0x64>)
 8003f24:	2202      	movs	r2, #2
 8003f26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003f28:	f001 f890 	bl	800504c <vTaskStartScheduler>
      stat = osOK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e002      	b.n	8003f38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000314 	.word	0x20000314

08003f48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b092      	sub	sp, #72	@ 0x48
 8003f4c:	af04      	add	r7, sp, #16
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f58:	f3ef 8305 	mrs	r3, IPSR
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8094 	bne.w	800408e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 808d 	bne.w	800408e <osThreadNew+0x146>
 8003f74:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <osThreadNew+0x150>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d106      	bne.n	8003f8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 8082 	bne.w	800408e <osThreadNew+0x146>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d07e      	beq.n	800408e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003f94:	2318      	movs	r3, #24
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003f98:	2300      	movs	r3, #0
 8003f9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003f9c:	f107 031b 	add.w	r3, r7, #27
 8003fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d045      	beq.n	800403a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <osThreadNew+0x74>
        name = attr->name;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <osThreadNew+0x9a>
 8003fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd2:	2b38      	cmp	r3, #56	@ 0x38
 8003fd4:	d805      	bhi.n	8003fe2 <osThreadNew+0x9a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <osThreadNew+0x9e>
        return (NULL);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e054      	b.n	8004090 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <osThreadNew+0xd4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b5b      	cmp	r3, #91	@ 0x5b
 8004004:	d90a      	bls.n	800401c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <osThreadNew+0xd4>
        mem = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401a:	e010      	b.n	800403e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10c      	bne.n	800403e <osThreadNew+0xf6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <osThreadNew+0xf6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <osThreadNew+0xf6>
          mem = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004038:	e001      	b.n	800403e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	2b01      	cmp	r3, #1
 8004042:	d110      	bne.n	8004066 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800404c:	9202      	str	r2, [sp, #8]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004058:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fe24 	bl	8004ca8 <xTaskCreateStatic>
 8004060:	4603      	mov	r3, r0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e013      	b.n	800408e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d110      	bne.n	800408e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	b29a      	uxth	r2, r3
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fe71 	bl	8004d66 <xTaskCreate>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <osThreadNew+0x146>
          hTask = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3738      	adds	r7, #56	@ 0x38
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000314 	.word	0x20000314

0800409c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a4:	f3ef 8305 	mrs	r3, IPSR
 80040a8:	613b      	str	r3, [r7, #16]
  return(result);
 80040aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b0:	f3ef 8310 	mrs	r3, PRIMASK
 80040b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <osDelay+0x34>
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <osDelay+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d109      	bne.n	80040d8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040c4:	f3ef 8311 	mrs	r3, BASEPRI
 80040c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <osDelay+0x3c>
    stat = osErrorISR;
 80040d0:	f06f 0305 	mvn.w	r3, #5
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e007      	b.n	80040e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 ff7c 	bl	8004fe0 <vTaskDelay>
    }
  }

  return (stat);
 80040e8:	697b      	ldr	r3, [r7, #20]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000314 	.word	0x20000314

080040f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a06      	ldr	r2, [pc, #24]	@ (8004120 <vApplicationGetIdleTaskMemory+0x28>)
 8004108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <vApplicationGetIdleTaskMemory+0x2c>)
 800410e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2280      	movs	r2, #128	@ 0x80
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	20000318 	.word	0x20000318
 8004124:	20000374 	.word	0x20000374

08004128 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a07      	ldr	r2, [pc, #28]	@ (8004154 <vApplicationGetTimerTaskMemory+0x2c>)
 8004138:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a06      	ldr	r2, [pc, #24]	@ (8004158 <vApplicationGetTimerTaskMemory+0x30>)
 800413e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000574 	.word	0x20000574
 8004158:	200005d0 	.word	0x200005d0

0800415c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f103 0208 	add.w	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f103 0208 	add.w	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f103 0208 	add.w	r2, r3, #8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800420e:	d103      	bne.n	8004218 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e00c      	b.n	8004232 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3308      	adds	r3, #8
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e002      	b.n	8004226 <vListInsert+0x2e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d2f6      	bcs.n	8004220 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6852      	ldr	r2, [r2, #4]
 8004288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d103      	bne.n	800429c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042e8:	f001 fff8 	bl	80062dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	441a      	add	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	3b01      	subs	r3, #1
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	441a      	add	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	22ff      	movs	r2, #255	@ 0xff
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	22ff      	movs	r2, #255	@ 0xff
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d114      	bne.n	8004368 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01a      	beq.n	800437c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3310      	adds	r3, #16
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f910 	bl	8005570 <xTaskRemoveFromEventList>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <xQueueGenericReset+0xd0>)
 8004358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	e009      	b.n	800437c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3310      	adds	r3, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fef5 	bl	800415c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3324      	adds	r3, #36	@ 0x24
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fef0 	bl	800415c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800437c:	f001 ffde 	bl	800633c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004380:	2301      	movs	r3, #1
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08e      	sub	sp, #56	@ 0x38
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <xQueueGenericCreateStatic+0x56>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <xQueueGenericCreateStatic+0x5a>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericCreateStatic+0x5c>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xQueueGenericCreateStatic+0x84>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueGenericCreateStatic+0x88>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueGenericCreateStatic+0x8a>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004436:	2350      	movs	r3, #80	@ 0x50
 8004438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b50      	cmp	r3, #80	@ 0x50
 800443e:	d00b      	beq.n	8004458 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800446a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800446e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f805 	bl	8004488 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004480:	4618      	mov	r0, r3
 8004482:	3730      	adds	r7, #48	@ 0x30
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e002      	b.n	80044aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044b6:	2101      	movs	r1, #1
 80044b8:	69b8      	ldr	r0, [r7, #24]
 80044ba:	f7ff feff 	bl	80042bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	@ 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <xQueueGenericSend+0x34>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	e7fd      	b.n	8004500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <xQueueGenericSend+0x42>
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <xQueueGenericSend+0x46>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <xQueueGenericSend+0x48>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xQueueGenericSend+0x64>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x72>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <xQueueGenericSend+0x76>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <xQueueGenericSend+0x78>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <xQueueGenericSend+0x94>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004564:	f001 f9c8 	bl	80058f8 <xTaskGetSchedulerState>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <xQueueGenericSend+0xa4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <xQueueGenericSend+0xa8>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <xQueueGenericSend+0xaa>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <xQueueGenericSend+0xc6>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61fb      	str	r3, [r7, #28]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004596:	f001 fea1 	bl	80062dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <xQueueGenericSend+0xdc>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d129      	bne.n	8004600 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045b2:	f000 fa0d 	bl	80049d0 <prvCopyDataToQueue>
 80045b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	3324      	adds	r3, #36	@ 0x24
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ffd3 	bl	8005570 <xTaskRemoveFromEventList>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045d0:	4b3f      	ldr	r3, [pc, #252]	@ (80046d0 <xQueueGenericSend+0x200>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	e00a      	b.n	80045f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045e8:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <xQueueGenericSend+0x200>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045f8:	f001 fea0 	bl	800633c <vPortExitCritical>
				return pdPASS;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e063      	b.n	80046c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004606:	f001 fe99 	bl	800633c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800460a:	2300      	movs	r3, #0
 800460c:	e05c      	b.n	80046c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800460e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f80d 	bl	8005638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800461e:	2301      	movs	r3, #1
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004622:	f001 fe8b 	bl	800633c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004626:	f000 fd79 	bl	800511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800462a:	f001 fe57 	bl	80062dc <vPortEnterCritical>
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004634:	b25b      	sxtb	r3, r3
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800463a:	d103      	bne.n	8004644 <xQueueGenericSend+0x174>
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800464a:	b25b      	sxtb	r3, r3
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x18a>
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800465a:	f001 fe6f 	bl	800633c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800465e:	1d3a      	adds	r2, r7, #4
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fffc 	bl	8005664 <xTaskCheckForTimeOut>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d124      	bne.n	80046bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004672:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004674:	f000 faa4 	bl	8004bc0 <prvIsQueueFull>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d018      	beq.n	80046b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	3310      	adds	r3, #16
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 ff20 	bl	80054cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800468c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800468e:	f000 fa2f 	bl	8004af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004692:	f000 fd51 	bl	8005138 <xTaskResumeAll>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f af7c 	bne.w	8004596 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800469e:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <xQueueGenericSend+0x200>)
 80046a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	e772      	b.n	8004596 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046b2:	f000 fa1d 	bl	8004af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046b6:	f000 fd3f 	bl	8005138 <xTaskResumeAll>
 80046ba:	e76c      	b.n	8004596 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046be:	f000 fa17 	bl	8004af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046c2:	f000 fd39 	bl	8005138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046c6:	2300      	movs	r3, #0
		}
	}
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3738      	adds	r7, #56	@ 0x38
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	@ 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046fe:	bf00      	nop
 8004700:	bf00      	nop
 8004702:	e7fd      	b.n	8004700 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <xQueueGenericSendFromISR+0x3e>
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <xQueueGenericSendFromISR+0x42>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <xQueueGenericSendFromISR+0x44>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	623b      	str	r3, [r7, #32]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d103      	bne.n	8004742 <xQueueGenericSendFromISR+0x6e>
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <xQueueGenericSendFromISR+0x72>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericSendFromISR+0x74>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	61fb      	str	r3, [r7, #28]
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004764:	f001 fe7c 	bl	8006460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004768:	f3ef 8211 	mrs	r2, BASEPRI
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61ba      	str	r2, [r7, #24]
 800477e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004780:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <xQueueGenericSendFromISR+0xc2>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d12c      	bne.n	80047f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800479c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047a6:	f000 f913 	bl	80049d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b2:	d112      	bne.n	80047da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d016      	beq.n	80047ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	3324      	adds	r3, #36	@ 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fed5 	bl	8005570 <xTaskRemoveFromEventList>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e007      	b.n	80047ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047de:	3301      	adds	r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	b25a      	sxtb	r2, r3
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80047ea:	2301      	movs	r3, #1
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80047ee:	e001      	b.n	80047f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004802:	4618      	mov	r0, r3
 8004804:	3738      	adds	r7, #56	@ 0x38
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	@ 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xQueueReceive+0x32>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	623b      	str	r3, [r7, #32]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <xQueueReceive+0x40>
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueReceive+0x44>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueReceive+0x46>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <xQueueReceive+0x62>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61fb      	str	r3, [r7, #28]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800486e:	f001 f843 	bl	80058f8 <xTaskGetSchedulerState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <xQueueReceive+0x72>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xQueueReceive+0x76>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueReceive+0x78>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <xQueueReceive+0x94>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61bb      	str	r3, [r7, #24]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a0:	f001 fd1c 	bl	80062dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b4:	f000 f8f6 	bl	8004aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	3310      	adds	r3, #16
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe4f 	bl	8005570 <xTaskRemoveFromEventList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048d8:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <xQueueReceive+0x1c0>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048e8:	f001 fd28 	bl	800633c <vPortExitCritical>
				return pdPASS;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e069      	b.n	80049c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048f6:	f001 fd21 	bl	800633c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e062      	b.n	80049c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe95 	bl	8005638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800490e:	2301      	movs	r3, #1
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004912:	f001 fd13 	bl	800633c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004916:	f000 fc01 	bl	800511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491a:	f001 fcdf 	bl	80062dc <vPortEnterCritical>
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004924:	b25b      	sxtb	r3, r3
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800492a:	d103      	bne.n	8004934 <xQueueReceive+0x128>
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493a:	b25b      	sxtb	r3, r3
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004940:	d103      	bne.n	800494a <xQueueReceive+0x13e>
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494a:	f001 fcf7 	bl	800633c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800494e:	1d3a      	adds	r2, r7, #4
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fe84 	bl	8005664 <xTaskCheckForTimeOut>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d123      	bne.n	80049aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004964:	f000 f916 	bl	8004b94 <prvIsQueueEmpty>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	3324      	adds	r3, #36	@ 0x24
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fda8 	bl	80054cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800497c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800497e:	f000 f8b7 	bl	8004af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004982:	f000 fbd9 	bl	8005138 <xTaskResumeAll>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d189      	bne.n	80048a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800498c:	4b0f      	ldr	r3, [pc, #60]	@ (80049cc <xQueueReceive+0x1c0>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	e780      	b.n	80048a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800499e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a0:	f000 f8a6 	bl	8004af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a4:	f000 fbc8 	bl	8005138 <xTaskResumeAll>
 80049a8:	e77a      	b.n	80048a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ac:	f000 f8a0 	bl	8004af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b0:	f000 fbc2 	bl	8005138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b6:	f000 f8ed 	bl	8004b94 <prvIsQueueEmpty>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f43f af6f 	beq.w	80048a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3730      	adds	r7, #48	@ 0x30
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d14d      	bne.n	8004a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 ff9a 	bl	8005934 <xTaskPriorityDisinherit>
 8004a00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	e043      	b.n	8004a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d119      	bne.n	8004a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6898      	ldr	r0, [r3, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f002 ff5d 	bl	80078da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d32b      	bcc.n	8004a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	e026      	b.n	8004a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68d8      	ldr	r0, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	f002 ff43 	bl	80078da <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	425b      	negs	r3, r3
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d105      	bne.n	8004a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a9a:	697b      	ldr	r3, [r7, #20]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d303      	bcc.n	8004ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6838      	ldr	r0, [r7, #0]
 8004ae4:	f002 fef9 	bl	80078da <memcpy>
	}
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004af8:	f001 fbf0 	bl	80062dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b04:	e011      	b.n	8004b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d012      	beq.n	8004b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	@ 0x24
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fd2c 	bl	8005570 <xTaskRemoveFromEventList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b1e:	f000 fe05 	bl	800572c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dce9      	bgt.n	8004b06 <prvUnlockQueue+0x16>
 8004b32:	e000      	b.n	8004b36 <prvUnlockQueue+0x46>
					break;
 8004b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b3e:	f001 fbfd 	bl	800633c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b42:	f001 fbcb 	bl	80062dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b4e:	e011      	b.n	8004b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3310      	adds	r3, #16
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fd07 	bl	8005570 <xTaskRemoveFromEventList>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b68:	f000 fde0 	bl	800572c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dce9      	bgt.n	8004b50 <prvUnlockQueue+0x60>
 8004b7c:	e000      	b.n	8004b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	22ff      	movs	r2, #255	@ 0xff
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b88:	f001 fbd8 	bl	800633c <vPortExitCritical>
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b9c:	f001 fb9e 	bl	80062dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e001      	b.n	8004bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bb2:	f001 fbc3 	bl	800633c <vPortExitCritical>

	return xReturn;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc8:	f001 fb88 	bl	80062dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d102      	bne.n	8004bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e001      	b.n	8004be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be2:	f001 fbab 	bl	800633c <vPortExitCritical>

	return xReturn;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e014      	b.n	8004c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c00:	4a0e      	ldr	r2, [pc, #56]	@ (8004c3c <vQueueAddToRegistry+0x4c>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c0c:	490b      	ldr	r1, [pc, #44]	@ (8004c3c <vQueueAddToRegistry+0x4c>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c16:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <vQueueAddToRegistry+0x4c>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c22:	e006      	b.n	8004c32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d9e7      	bls.n	8004c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	200009d0 	.word	0x200009d0

08004c40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c50:	f001 fb44 	bl	80062dc <vPortEnterCritical>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c60:	d103      	bne.n	8004c6a <vQueueWaitForMessageRestricted+0x2a>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c76:	d103      	bne.n	8004c80 <vQueueWaitForMessageRestricted+0x40>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c80:	f001 fb5c 	bl	800633c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3324      	adds	r3, #36	@ 0x24
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fc3f 	bl	8005518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff28 	bl	8004af0 <prvUnlockQueue>
	}
 8004ca0:	bf00      	nop
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	@ 0x38
 8004cac:	af04      	add	r7, sp, #16
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	623b      	str	r3, [r7, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	61fb      	str	r3, [r7, #28]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cf2:	235c      	movs	r3, #92	@ 0x5c
 8004cf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b5c      	cmp	r3, #92	@ 0x5c
 8004cfa:	d00b      	beq.n	8004d14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61bb      	str	r3, [r7, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01e      	beq.n	8004d58 <xTaskCreateStatic+0xb0>
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d32:	2300      	movs	r3, #0
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f850 	bl	8004df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d52:	f000 f8d5 	bl	8004f00 <prvAddNewTaskToReadyList>
 8004d56:	e001      	b.n	8004d5c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d5c:	697b      	ldr	r3, [r7, #20]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	@ 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08c      	sub	sp, #48	@ 0x30
 8004d6a:	af04      	add	r7, sp, #16
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fbb0 	bl	80064e0 <pvPortMalloc>
 8004d80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d88:	205c      	movs	r0, #92	@ 0x5c
 8004d8a:	f001 fba9 	bl	80064e0 <pvPortMalloc>
 8004d8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d9c:	e005      	b.n	8004daa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f001 fc66 	bl	8006670 <vPortFree>
 8004da4:	e001      	b.n	8004daa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d017      	beq.n	8004de0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	9302      	str	r3, [sp, #8]
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f80e 	bl	8004df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dd4:	69f8      	ldr	r0, [r7, #28]
 8004dd6:	f000 f893 	bl	8004f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e002      	b.n	8004de6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004de4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004de6:	69bb      	ldr	r3, [r7, #24]
	}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	21a5      	movs	r1, #165	@ 0xa5
 8004e0a:	f002 fcd8 	bl	80077be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e012      	b.n	8004e76 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	7819      	ldrb	r1, [r3, #0]
 8004e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3334      	adds	r3, #52	@ 0x34
 8004e60:	460a      	mov	r2, r1
 8004e62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d9e9      	bls.n	8004e50 <prvInitialiseNewTask+0x60>
 8004e7c:	e000      	b.n	8004e80 <prvInitialiseNewTask+0x90>
		{
			break;
 8004e7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	2b37      	cmp	r3, #55	@ 0x37
 8004e8c:	d901      	bls.n	8004e92 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e8e:	2337      	movs	r3, #55	@ 0x37
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f976 	bl	800419a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff f971 	bl	800419a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ebc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	f001 f90b 	bl	80060fc <pxPortInitialiseStack>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 f9e8 	bl	80062dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f16:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d110      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f2c:	f000 fc22 	bl	8005774 <prvInitialiseTaskLists>
 8004f30:	e00d      	b.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f32:	4b26      	ldr	r3, [pc, #152]	@ (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3a:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d802      	bhi.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f48:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f4e:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f64:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d903      	bls.n	8004f74 <prvAddNewTaskToReadyList+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a18      	ldr	r2, [pc, #96]	@ (8004fd4 <prvAddNewTaskToReadyList+0xd4>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <prvAddNewTaskToReadyList+0xd8>)
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7ff f911 	bl	80041b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f90:	f001 f9d4 	bl	800633c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f94:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d207      	bcs.n	8004fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <prvAddNewTaskToReadyList+0xdc>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000ee4 	.word	0x20000ee4
 8004fc8:	20000a10 	.word	0x20000a10
 8004fcc:	20000ef0 	.word	0x20000ef0
 8004fd0:	20000f00 	.word	0x20000f00
 8004fd4:	20000eec 	.word	0x20000eec
 8004fd8:	20000a14 	.word	0x20000a14
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d018      	beq.n	8005024 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <vTaskDelay+0x64>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <vTaskDelay+0x32>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60bb      	str	r3, [r7, #8]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005012:	f000 f883 	bl	800511c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005016:	2100      	movs	r1, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fcfb 	bl	8005a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800501e:	f000 f88b 	bl	8005138 <xTaskResumeAll>
 8005022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <vTaskDelay+0x68>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000f0c 	.word	0x20000f0c
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	@ 0x28
 8005050:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800505a:	463a      	mov	r2, r7
 800505c:	1d39      	adds	r1, r7, #4
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f848 	bl	80040f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	9202      	str	r2, [sp, #8]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	2300      	movs	r3, #0
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	460a      	mov	r2, r1
 800507a:	4922      	ldr	r1, [pc, #136]	@ (8005104 <vTaskStartScheduler+0xb8>)
 800507c:	4822      	ldr	r0, [pc, #136]	@ (8005108 <vTaskStartScheduler+0xbc>)
 800507e:	f7ff fe13 	bl	8004ca8 <xTaskCreateStatic>
 8005082:	4603      	mov	r3, r0
 8005084:	4a21      	ldr	r2, [pc, #132]	@ (800510c <vTaskStartScheduler+0xc0>)
 8005086:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005088:	4b20      	ldr	r3, [pc, #128]	@ (800510c <vTaskStartScheduler+0xc0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e001      	b.n	800509a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d102      	bne.n	80050a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050a0:	f000 fd0c 	bl	8005abc <xTimerCreateTimerTask>
 80050a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d116      	bne.n	80050da <vTaskStartScheduler+0x8e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	613b      	str	r3, [r7, #16]
}
 80050be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050c0:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <vTaskStartScheduler+0xc4>)
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050c8:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <vTaskStartScheduler+0xc8>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <vTaskStartScheduler+0xcc>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050d4:	f001 f890 	bl	80061f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050d8:	e00f      	b.n	80050fa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050e0:	d10b      	bne.n	80050fa <vTaskStartScheduler+0xae>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vTaskStartScheduler+0xaa>
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	0800afb4 	.word	0x0800afb4
 8005108:	08005745 	.word	0x08005745
 800510c:	20000f08 	.word	0x20000f08
 8005110:	20000f04 	.word	0x20000f04
 8005114:	20000ef0 	.word	0x20000ef0
 8005118:	20000ee8 	.word	0x20000ee8

0800511c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005120:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <vTaskSuspendAll+0x18>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a03      	ldr	r2, [pc, #12]	@ (8005134 <vTaskSuspendAll+0x18>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000f0c 	.word	0x20000f0c

08005138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005146:	4b42      	ldr	r3, [pc, #264]	@ (8005250 <xTaskResumeAll+0x118>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <xTaskResumeAll+0x2e>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	603b      	str	r3, [r7, #0]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005166:	f001 f8b9 	bl	80062dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800516a:	4b39      	ldr	r3, [pc, #228]	@ (8005250 <xTaskResumeAll+0x118>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3b01      	subs	r3, #1
 8005170:	4a37      	ldr	r2, [pc, #220]	@ (8005250 <xTaskResumeAll+0x118>)
 8005172:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005174:	4b36      	ldr	r3, [pc, #216]	@ (8005250 <xTaskResumeAll+0x118>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d162      	bne.n	8005242 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800517c:	4b35      	ldr	r3, [pc, #212]	@ (8005254 <xTaskResumeAll+0x11c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05e      	beq.n	8005242 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005184:	e02f      	b.n	80051e6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005186:	4b34      	ldr	r3, [pc, #208]	@ (8005258 <xTaskResumeAll+0x120>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3318      	adds	r3, #24
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff f868 	bl	8004268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3304      	adds	r3, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f863 	bl	8004268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a6:	4b2d      	ldr	r3, [pc, #180]	@ (800525c <xTaskResumeAll+0x124>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d903      	bls.n	80051b6 <xTaskResumeAll+0x7e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a2a      	ldr	r2, [pc, #168]	@ (800525c <xTaskResumeAll+0x124>)
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4a27      	ldr	r2, [pc, #156]	@ (8005260 <xTaskResumeAll+0x128>)
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7fe fff0 	bl	80041b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	4b23      	ldr	r3, [pc, #140]	@ (8005264 <xTaskResumeAll+0x12c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	429a      	cmp	r2, r3
 80051de:	d302      	bcc.n	80051e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051e0:	4b21      	ldr	r3, [pc, #132]	@ (8005268 <xTaskResumeAll+0x130>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005258 <xTaskResumeAll+0x120>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1cb      	bne.n	8005186 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051f4:	f000 fb5c 	bl	80058b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051f8:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <xTaskResumeAll+0x134>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005204:	f000 f844 	bl	8005290 <xTaskIncrementTick>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800520e:	4b16      	ldr	r3, [pc, #88]	@ (8005268 <xTaskResumeAll+0x130>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f1      	bne.n	8005204 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005220:	4b12      	ldr	r3, [pc, #72]	@ (800526c <xTaskResumeAll+0x134>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005226:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <xTaskResumeAll+0x130>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005232:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <xTaskResumeAll+0x138>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005242:	f001 f87b 	bl	800633c <vPortExitCritical>

	return xAlreadyYielded;
 8005246:	68bb      	ldr	r3, [r7, #8]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000f0c 	.word	0x20000f0c
 8005254:	20000ee4 	.word	0x20000ee4
 8005258:	20000ea4 	.word	0x20000ea4
 800525c:	20000eec 	.word	0x20000eec
 8005260:	20000a14 	.word	0x20000a14
 8005264:	20000a10 	.word	0x20000a10
 8005268:	20000ef8 	.word	0x20000ef8
 800526c:	20000ef4 	.word	0x20000ef4
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800527a:	4b04      	ldr	r3, [pc, #16]	@ (800528c <xTaskGetTickCount+0x18>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005280:	687b      	ldr	r3, [r7, #4]
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr
 800528c:	20000ee8 	.word	0x20000ee8

08005290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800529a:	4b52      	ldr	r3, [pc, #328]	@ (80053e4 <xTaskIncrementTick+0x154>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 808f 	bne.w	80053c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <xTaskIncrementTick+0x158>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052ac:	4a4e      	ldr	r2, [pc, #312]	@ (80053e8 <xTaskIncrementTick+0x158>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d121      	bne.n	80052fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052b8:	4b4c      	ldr	r3, [pc, #304]	@ (80053ec <xTaskIncrementTick+0x15c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <xTaskIncrementTick+0x4a>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	603b      	str	r3, [r7, #0]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xTaskIncrementTick+0x46>
 80052da:	4b44      	ldr	r3, [pc, #272]	@ (80053ec <xTaskIncrementTick+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	4b43      	ldr	r3, [pc, #268]	@ (80053f0 <xTaskIncrementTick+0x160>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a41      	ldr	r2, [pc, #260]	@ (80053ec <xTaskIncrementTick+0x15c>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4a41      	ldr	r2, [pc, #260]	@ (80053f0 <xTaskIncrementTick+0x160>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b41      	ldr	r3, [pc, #260]	@ (80053f4 <xTaskIncrementTick+0x164>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a3f      	ldr	r2, [pc, #252]	@ (80053f4 <xTaskIncrementTick+0x164>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	f000 fada 	bl	80058b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052fc:	4b3e      	ldr	r3, [pc, #248]	@ (80053f8 <xTaskIncrementTick+0x168>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	d34e      	bcc.n	80053a4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005306:	4b39      	ldr	r3, [pc, #228]	@ (80053ec <xTaskIncrementTick+0x15c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <xTaskIncrementTick+0x84>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <xTaskIncrementTick+0x86>
 8005314:	2300      	movs	r3, #0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <xTaskIncrementTick+0x168>)
 800531c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005320:	601a      	str	r2, [r3, #0]
					break;
 8005322:	e03f      	b.n	80053a4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005324:	4b31      	ldr	r3, [pc, #196]	@ (80053ec <xTaskIncrementTick+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d203      	bcs.n	8005344 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800533c:	4a2e      	ldr	r2, [pc, #184]	@ (80053f8 <xTaskIncrementTick+0x168>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
						break;
 8005342:	e02f      	b.n	80053a4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe ff8d 	bl	8004268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	3318      	adds	r3, #24
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe ff84 	bl	8004268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005364:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <xTaskIncrementTick+0x16c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d903      	bls.n	8005374 <xTaskIncrementTick+0xe4>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	4a22      	ldr	r2, [pc, #136]	@ (80053fc <xTaskIncrementTick+0x16c>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <xTaskIncrementTick+0x170>)
 8005382:	441a      	add	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f7fe ff11 	bl	80041b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <xTaskIncrementTick+0x174>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d3b3      	bcc.n	8005306 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a2:	e7b0      	b.n	8005306 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053a4:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <xTaskIncrementTick+0x174>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053aa:	4915      	ldr	r1, [pc, #84]	@ (8005400 <xTaskIncrementTick+0x170>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d907      	bls.n	80053cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e004      	b.n	80053cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053c2:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <xTaskIncrementTick+0x178>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005408 <xTaskIncrementTick+0x178>)
 80053ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053cc:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <xTaskIncrementTick+0x17c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80053d4:	2301      	movs	r3, #1
 80053d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053d8:	697b      	ldr	r3, [r7, #20]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000f0c 	.word	0x20000f0c
 80053e8:	20000ee8 	.word	0x20000ee8
 80053ec:	20000e9c 	.word	0x20000e9c
 80053f0:	20000ea0 	.word	0x20000ea0
 80053f4:	20000efc 	.word	0x20000efc
 80053f8:	20000f04 	.word	0x20000f04
 80053fc:	20000eec 	.word	0x20000eec
 8005400:	20000a14 	.word	0x20000a14
 8005404:	20000a10 	.word	0x20000a10
 8005408:	20000ef4 	.word	0x20000ef4
 800540c:	20000ef8 	.word	0x20000ef8

08005410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005416:	4b28      	ldr	r3, [pc, #160]	@ (80054b8 <vTaskSwitchContext+0xa8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800541e:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <vTaskSwitchContext+0xac>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005424:	e042      	b.n	80054ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005426:	4b25      	ldr	r3, [pc, #148]	@ (80054bc <vTaskSwitchContext+0xac>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <vTaskSwitchContext+0xb0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e011      	b.n	8005458 <vTaskSwitchContext+0x48>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <vTaskSwitchContext+0x42>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vTaskSwitchContext+0x3e>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	491a      	ldr	r1, [pc, #104]	@ (80054c4 <vTaskSwitchContext+0xb4>)
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0e3      	beq.n	8005434 <vTaskSwitchContext+0x24>
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4a13      	ldr	r2, [pc, #76]	@ (80054c4 <vTaskSwitchContext+0xb4>)
 8005478:	4413      	add	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3308      	adds	r3, #8
 800548e:	429a      	cmp	r2, r3
 8005490:	d104      	bne.n	800549c <vTaskSwitchContext+0x8c>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4a09      	ldr	r2, [pc, #36]	@ (80054c8 <vTaskSwitchContext+0xb8>)
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4a06      	ldr	r2, [pc, #24]	@ (80054c0 <vTaskSwitchContext+0xb0>)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6013      	str	r3, [r2, #0]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000f0c 	.word	0x20000f0c
 80054bc:	20000ef8 	.word	0x20000ef8
 80054c0:	20000eec 	.word	0x20000eec
 80054c4:	20000a14 	.word	0x20000a14
 80054c8:	20000a10 	.word	0x20000a10

080054cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60fb      	str	r3, [r7, #12]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f4:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <vTaskPlaceOnEventList+0x48>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3318      	adds	r3, #24
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fe fe7b 	bl	80041f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005502:	2101      	movs	r1, #1
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f000 fa85 	bl	8005a14 <prvAddCurrentTaskToDelayedList>
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000a10 	.word	0x20000a10

08005518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	617b      	str	r3, [r7, #20]
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	e7fd      	b.n	800553e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <vTaskPlaceOnEventListRestricted+0x54>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3318      	adds	r3, #24
 8005548:	4619      	mov	r1, r3
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7fe fe31 	bl	80041b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800555a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68b8      	ldr	r0, [r7, #8]
 8005560:	f000 fa58 	bl	8005a14 <prvAddCurrentTaskToDelayedList>
	}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000a10 	.word	0x20000a10

08005570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fe60 	bl	8004268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <xTaskRemoveFromEventList+0xb0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d11d      	bne.n	80055ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fe57 	bl	8004268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055be:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <xTaskRemoveFromEventList+0xb4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d903      	bls.n	80055ce <xTaskRemoveFromEventList+0x5e>
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <xTaskRemoveFromEventList+0xb4>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4a13      	ldr	r2, [pc, #76]	@ (8005628 <xTaskRemoveFromEventList+0xb8>)
 80055dc:	441a      	add	r2, r3
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7fe fde4 	bl	80041b2 <vListInsertEnd>
 80055ea:	e005      	b.n	80055f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3318      	adds	r3, #24
 80055f0:	4619      	mov	r1, r3
 80055f2:	480e      	ldr	r0, [pc, #56]	@ (800562c <xTaskRemoveFromEventList+0xbc>)
 80055f4:	f7fe fddd 	bl	80041b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <xTaskRemoveFromEventList+0xc0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	429a      	cmp	r2, r3
 8005604:	d905      	bls.n	8005612 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800560a:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <xTaskRemoveFromEventList+0xc4>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e001      	b.n	8005616 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005616:	697b      	ldr	r3, [r7, #20]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000f0c 	.word	0x20000f0c
 8005624:	20000eec 	.word	0x20000eec
 8005628:	20000a14 	.word	0x20000a14
 800562c:	20000ea4 	.word	0x20000ea4
 8005630:	20000a10 	.word	0x20000a10
 8005634:	20000ef8 	.word	0x20000ef8

08005638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <vTaskInternalSetTimeOutState+0x24>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005648:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <vTaskInternalSetTimeOutState+0x28>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000efc 	.word	0x20000efc
 8005660:	20000ee8 	.word	0x20000ee8

08005664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	613b      	str	r3, [r7, #16]
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60fb      	str	r3, [r7, #12]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056aa:	f000 fe17 	bl	80062dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <xTaskCheckForTimeOut+0xc0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c6:	d102      	bne.n	80056ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e023      	b.n	8005716 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <xTaskCheckForTimeOut+0xc4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d007      	beq.n	80056ea <xTaskCheckForTimeOut+0x86>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	e015      	b.n	8005716 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d20b      	bcs.n	800570c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	1ad2      	subs	r2, r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff99 	bl	8005638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	e004      	b.n	8005716 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005712:	2301      	movs	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f000 fe11 	bl	800633c <vPortExitCritical>

	return xReturn;
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000ee8 	.word	0x20000ee8
 8005728:	20000efc 	.word	0x20000efc

0800572c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <vTaskMissedYield+0x14>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20000ef8 	.word	0x20000ef8

08005744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800574c:	f000 f852 	bl	80057f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <prvIdleTask+0x28>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d9f9      	bls.n	800574c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <prvIdleTask+0x2c>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005768:	e7f0      	b.n	800574c <prvIdleTask+0x8>
 800576a:	bf00      	nop
 800576c:	20000a14 	.word	0x20000a14
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	e00c      	b.n	800579a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4a12      	ldr	r2, [pc, #72]	@ (80057d4 <prvInitialiseTaskLists+0x60>)
 800578c:	4413      	add	r3, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe fce4 	bl	800415c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3301      	adds	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b37      	cmp	r3, #55	@ 0x37
 800579e:	d9ef      	bls.n	8005780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057a0:	480d      	ldr	r0, [pc, #52]	@ (80057d8 <prvInitialiseTaskLists+0x64>)
 80057a2:	f7fe fcdb 	bl	800415c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057a6:	480d      	ldr	r0, [pc, #52]	@ (80057dc <prvInitialiseTaskLists+0x68>)
 80057a8:	f7fe fcd8 	bl	800415c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057ac:	480c      	ldr	r0, [pc, #48]	@ (80057e0 <prvInitialiseTaskLists+0x6c>)
 80057ae:	f7fe fcd5 	bl	800415c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057b2:	480c      	ldr	r0, [pc, #48]	@ (80057e4 <prvInitialiseTaskLists+0x70>)
 80057b4:	f7fe fcd2 	bl	800415c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057b8:	480b      	ldr	r0, [pc, #44]	@ (80057e8 <prvInitialiseTaskLists+0x74>)
 80057ba:	f7fe fccf 	bl	800415c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057be:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <prvInitialiseTaskLists+0x78>)
 80057c0:	4a05      	ldr	r2, [pc, #20]	@ (80057d8 <prvInitialiseTaskLists+0x64>)
 80057c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <prvInitialiseTaskLists+0x7c>)
 80057c6:	4a05      	ldr	r2, [pc, #20]	@ (80057dc <prvInitialiseTaskLists+0x68>)
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000a14 	.word	0x20000a14
 80057d8:	20000e74 	.word	0x20000e74
 80057dc:	20000e88 	.word	0x20000e88
 80057e0:	20000ea4 	.word	0x20000ea4
 80057e4:	20000eb8 	.word	0x20000eb8
 80057e8:	20000ed0 	.word	0x20000ed0
 80057ec:	20000e9c 	.word	0x20000e9c
 80057f0:	20000ea0 	.word	0x20000ea0

080057f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057fa:	e019      	b.n	8005830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057fc:	f000 fd6e 	bl	80062dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005800:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <prvCheckTasksWaitingTermination+0x50>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fd2b 	bl	8004268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <prvCheckTasksWaitingTermination+0x54>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3b01      	subs	r3, #1
 8005818:	4a0b      	ldr	r2, [pc, #44]	@ (8005848 <prvCheckTasksWaitingTermination+0x54>)
 800581a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <prvCheckTasksWaitingTermination+0x58>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	4a0a      	ldr	r2, [pc, #40]	@ (800584c <prvCheckTasksWaitingTermination+0x58>)
 8005824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005826:	f000 fd89 	bl	800633c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f810 	bl	8005850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005830:	4b06      	ldr	r3, [pc, #24]	@ (800584c <prvCheckTasksWaitingTermination+0x58>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e1      	bne.n	80057fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000eb8 	.word	0x20000eb8
 8005848:	20000ee4 	.word	0x20000ee4
 800584c:	20000ecc 	.word	0x20000ecc

08005850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800585e:	2b00      	cmp	r3, #0
 8005860:	d108      	bne.n	8005874 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	4618      	mov	r0, r3
 8005868:	f000 ff02 	bl	8006670 <vPortFree>
				vPortFree( pxTCB );
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 feff 	bl	8006670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005872:	e019      	b.n	80058a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800587a:	2b01      	cmp	r3, #1
 800587c:	d103      	bne.n	8005886 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fef6 	bl	8006670 <vPortFree>
	}
 8005884:	e010      	b.n	80058a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800588c:	2b02      	cmp	r3, #2
 800588e:	d00b      	beq.n	80058a8 <prvDeleteTCB+0x58>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <prvDeleteTCB+0x54>
	}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b6:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <prvResetNextTaskUnblockTime+0x40>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <prvResetNextTaskUnblockTime+0x14>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <prvResetNextTaskUnblockTime+0x16>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ca:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <prvResetNextTaskUnblockTime+0x44>)
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d2:	e008      	b.n	80058e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <prvResetNextTaskUnblockTime+0x40>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4a04      	ldr	r2, [pc, #16]	@ (80058f4 <prvResetNextTaskUnblockTime+0x44>)
 80058e4:	6013      	str	r3, [r2, #0]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	20000e9c 	.word	0x20000e9c
 80058f4:	20000f04 	.word	0x20000f04

080058f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058fe:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <xTaskGetSchedulerState+0x34>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005906:	2301      	movs	r3, #1
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e008      	b.n	800591e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590c:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <xTaskGetSchedulerState+0x38>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005914:	2302      	movs	r3, #2
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	e001      	b.n	800591e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800591a:	2300      	movs	r3, #0
 800591c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800591e:	687b      	ldr	r3, [r7, #4]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000ef0 	.word	0x20000ef0
 8005930:	20000f0c 	.word	0x20000f0c

08005934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d058      	beq.n	80059fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <xTaskPriorityDisinherit+0xd4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d00b      	beq.n	800596c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60bb      	str	r3, [r7, #8]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d02c      	beq.n	80059fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d128      	bne.n	80059fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fc5a 	bl	8004268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <xTaskPriorityDisinherit+0xd8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d903      	bls.n	80059dc <xTaskPriorityDisinherit+0xa8>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <xTaskPriorityDisinherit+0xd8>)
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <xTaskPriorityDisinherit+0xdc>)
 80059ea:	441a      	add	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fe fbdd 	bl	80041b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059fc:	697b      	ldr	r3, [r7, #20]
	}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000a10 	.word	0x20000a10
 8005a0c:	20000eec 	.word	0x20000eec
 8005a10:	20000a14 	.word	0x20000a14

08005a14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a1e:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a24:	4b20      	ldr	r3, [pc, #128]	@ (8005aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fc1c 	bl	8004268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a36:	d10a      	bne.n	8005a4e <prvAddCurrentTaskToDelayedList+0x3a>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4819      	ldr	r0, [pc, #100]	@ (8005aac <prvAddCurrentTaskToDelayedList+0x98>)
 8005a48:	f7fe fbb3 	bl	80041b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a4c:	e026      	b.n	8005a9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a56:	4b14      	ldr	r3, [pc, #80]	@ (8005aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d209      	bcs.n	8005a7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f7fe fbc0 	bl	80041f8 <vListInsert>
}
 8005a78:	e010      	b.n	8005a9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f7fe fbb6 	bl	80041f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d202      	bcs.n	8005a9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000ee8 	.word	0x20000ee8
 8005aa8:	20000a10 	.word	0x20000a10
 8005aac:	20000ed0 	.word	0x20000ed0
 8005ab0:	20000ea0 	.word	0x20000ea0
 8005ab4:	20000e9c 	.word	0x20000e9c
 8005ab8:	20000f04 	.word	0x20000f04

08005abc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ac6:	f000 fad9 	bl	800607c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <xTimerCreateTimerTask+0x84>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d021      	beq.n	8005b16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ada:	1d3a      	adds	r2, r7, #4
 8005adc:	f107 0108 	add.w	r1, r7, #8
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fb1f 	bl	8004128 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	9202      	str	r2, [sp, #8]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	2302      	movs	r3, #2
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	460a      	mov	r2, r1
 8005afc:	4911      	ldr	r1, [pc, #68]	@ (8005b44 <xTimerCreateTimerTask+0x88>)
 8005afe:	4812      	ldr	r0, [pc, #72]	@ (8005b48 <xTimerCreateTimerTask+0x8c>)
 8005b00:	f7ff f8d2 	bl	8004ca8 <xTaskCreateStatic>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <xTimerCreateTimerTask+0x90>)
 8005b08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b0a:	4b10      	ldr	r3, [pc, #64]	@ (8005b4c <xTimerCreateTimerTask+0x90>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b12:	2301      	movs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b34:	697b      	ldr	r3, [r7, #20]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000f40 	.word	0x20000f40
 8005b44:	0800afbc 	.word	0x0800afbc
 8005b48:	08005c71 	.word	0x08005c71
 8005b4c:	20000f44 	.word	0x20000f44

08005b50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b80:	4b19      	ldr	r3, [pc, #100]	@ (8005be8 <xTimerGenericCommand+0x98>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02a      	beq.n	8005bde <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	dc18      	bgt.n	8005bcc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b9a:	f7ff fead 	bl	80058f8 <xTaskGetSchedulerState>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d109      	bne.n	8005bb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ba4:	4b10      	ldr	r3, [pc, #64]	@ (8005be8 <xTimerGenericCommand+0x98>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f107 0110 	add.w	r1, r7, #16
 8005bac:	2300      	movs	r3, #0
 8005bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb0:	f7fe fc8e 	bl	80044d0 <xQueueGenericSend>
 8005bb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bb6:	e012      	b.n	8005bde <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <xTimerGenericCommand+0x98>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	f107 0110 	add.w	r1, r7, #16
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f7fe fc84 	bl	80044d0 <xQueueGenericSend>
 8005bc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bca:	e008      	b.n	8005bde <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bcc:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <xTimerGenericCommand+0x98>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	f107 0110 	add.w	r1, r7, #16
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	f7fe fd7c 	bl	80046d4 <xQueueGenericSendFromISR>
 8005bdc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000f40 	.word	0x20000f40

08005bec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c6c <prvProcessExpiredTimer+0x80>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fb2f 	bl	8004268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d123      	bne.n	8005c5a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	18d1      	adds	r1, r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	6978      	ldr	r0, [r7, #20]
 8005c20:	f000 f8cc 	bl	8005dbc <prvInsertTimerInActiveList>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d017      	beq.n	8005c5a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	2100      	movs	r1, #0
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	f7ff ff8b 	bl	8005b50 <xTimerGenericCommand>
 8005c3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	4798      	blx	r3
}
 8005c62:	bf00      	nop
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000f38 	.word	0x20000f38

08005c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f859 	bl	8005d34 <prvGetNextExpireTime>
 8005c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f805 	bl	8005c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c8e:	f000 f8d7 	bl	8005e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c92:	bf00      	nop
 8005c94:	e7f0      	b.n	8005c78 <prvTimerTask+0x8>
	...

08005c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ca2:	f7ff fa3b 	bl	800511c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ca6:	f107 0308 	add.w	r3, r7, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 f866 	bl	8005d7c <prvSampleTimeNow>
 8005cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d130      	bne.n	8005d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <prvProcessTimerOrBlockTask+0x3c>
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d806      	bhi.n	8005cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cc6:	f7ff fa37 	bl	8005138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff8d 	bl	8005bec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cd2:	e024      	b.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cda:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <prvProcessTimerOrBlockTask+0x90>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cec:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <prvProcessTimerOrBlockTask+0x94>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f7fe ffa1 	bl	8004c40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cfe:	f7ff fa1b 	bl	8005138 <xTaskResumeAll>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <prvProcessTimerOrBlockTask+0x98>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
}
 8005d18:	e001      	b.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d1a:	f7ff fa0d 	bl	8005138 <xTaskResumeAll>
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000f3c 	.word	0x20000f3c
 8005d2c:	20000f40 	.word	0x20000f40
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d78 <prvGetNextExpireTime+0x44>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf0c      	ite	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	2300      	movne	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d105      	bne.n	8005d66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d5a:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <prvGetNextExpireTime+0x44>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e001      	b.n	8005d6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000f38 	.word	0x20000f38

08005d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d84:	f7ff fa76 	bl	8005274 <xTaskGetTickCount>
 8005d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <prvSampleTimeNow+0x3c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d205      	bcs.n	8005da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d94:	f000 f910 	bl	8005fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e002      	b.n	8005da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <prvSampleTimeNow+0x3c>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000f48 	.word	0x20000f48

08005dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d812      	bhi.n	8005e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e01b      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <prvInsertTimerInActiveList+0x7c>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7fe f9f9 	bl	80041f8 <vListInsert>
 8005e06:	e012      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d206      	bcs.n	8005e1e <prvInsertTimerInActiveList+0x62>
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e007      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e1e:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <prvInsertTimerInActiveList+0x80>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe f9e5 	bl	80041f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000f3c 	.word	0x20000f3c
 8005e3c:	20000f38 	.word	0x20000f38

08005e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	@ 0x38
 8005e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e46:	e0a5      	b.n	8005f94 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da19      	bge.n	8005e82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	3304      	adds	r3, #4
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	61fb      	str	r3, [r7, #28]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e78:	6850      	ldr	r0, [r2, #4]
 8005e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f2c0 8085 	blt.w	8005f94 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe f9e4 	bl	8004268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ff6a 	bl	8005d7c <prvSampleTimeNow>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b09      	cmp	r3, #9
 8005eae:	d86c      	bhi.n	8005f8a <prvProcessReceivedCommands+0x14a>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <prvProcessReceivedCommands+0x78>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005f8b 	.word	0x08005f8b
 8005ec8:	08005f3f 	.word	0x08005f3f
 8005ecc:	08005f79 	.word	0x08005f79
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ee1 	.word	0x08005ee1
 8005ed8:	08005f8b 	.word	0x08005f8b
 8005edc:	08005f3f 	.word	0x08005f3f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	18d1      	adds	r1, r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eee:	f7ff ff65 	bl	8005dbc <prvInsertTimerInActiveList>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d04a      	beq.n	8005f8e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005efe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d142      	bne.n	8005f8e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	441a      	add	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f1a:	f7ff fe19 	bl	8005b50 <xTimerGenericCommand>
 8005f1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d133      	bne.n	8005f8e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	61bb      	str	r3, [r7, #24]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	617b      	str	r3, [r7, #20]
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	18d1      	adds	r1, r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f72:	f7ff ff23 	bl	8005dbc <prvInsertTimerInActiveList>
					break;
 8005f76:	e00d      	b.n	8005f94 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f84:	f000 fb74 	bl	8006670 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f88:	e003      	b.n	8005f92 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <prvProcessReceivedCommands+0x154>
					break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <prvProcessReceivedCommands+0x154>
					break;
 8005f92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f94:	4b07      	ldr	r3, [pc, #28]	@ (8005fb4 <prvProcessReceivedCommands+0x174>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1d39      	adds	r1, r7, #4
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fc35 	bl	800480c <xQueueReceive>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f af4f 	bne.w	8005e48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	3730      	adds	r7, #48	@ 0x30
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000f40 	.word	0x20000f40

08005fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fbe:	e046      	b.n	800604e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fca:	4b2a      	ldr	r3, [pc, #168]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe f945 	bl	8004268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d12f      	bne.n	800604e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d90e      	bls.n	800601e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800600c:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe f8ee 	bl	80041f8 <vListInsert>
 800601c:	e017      	b.n	800604e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800601e:	2300      	movs	r3, #0
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	2100      	movs	r1, #0
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fd91 	bl	8005b50 <xTimerGenericCommand>
 800602e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <prvSwitchTimerLists+0x96>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	603b      	str	r3, [r7, #0]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800604e:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1b3      	bne.n	8005fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006058:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800605e:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <prvSwitchTimerLists+0xc0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a04      	ldr	r2, [pc, #16]	@ (8006074 <prvSwitchTimerLists+0xbc>)
 8006064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006066:	4a04      	ldr	r2, [pc, #16]	@ (8006078 <prvSwitchTimerLists+0xc0>)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000f38 	.word	0x20000f38
 8006078:	20000f3c 	.word	0x20000f3c

0800607c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006082:	f000 f92b 	bl	80062dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006086:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <prvCheckForValidListAndQueue+0x60>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d120      	bne.n	80060d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800608e:	4814      	ldr	r0, [pc, #80]	@ (80060e0 <prvCheckForValidListAndQueue+0x64>)
 8006090:	f7fe f864 	bl	800415c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006094:	4813      	ldr	r0, [pc, #76]	@ (80060e4 <prvCheckForValidListAndQueue+0x68>)
 8006096:	f7fe f861 	bl	800415c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800609a:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <prvCheckForValidListAndQueue+0x6c>)
 800609c:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <prvCheckForValidListAndQueue+0x64>)
 800609e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060a0:	4b12      	ldr	r3, [pc, #72]	@ (80060ec <prvCheckForValidListAndQueue+0x70>)
 80060a2:	4a10      	ldr	r2, [pc, #64]	@ (80060e4 <prvCheckForValidListAndQueue+0x68>)
 80060a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060a6:	2300      	movs	r3, #0
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <prvCheckForValidListAndQueue+0x74>)
 80060ac:	4a11      	ldr	r2, [pc, #68]	@ (80060f4 <prvCheckForValidListAndQueue+0x78>)
 80060ae:	2110      	movs	r1, #16
 80060b0:	200a      	movs	r0, #10
 80060b2:	f7fe f96d 	bl	8004390 <xQueueGenericCreateStatic>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4a08      	ldr	r2, [pc, #32]	@ (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	490b      	ldr	r1, [pc, #44]	@ (80060f8 <prvCheckForValidListAndQueue+0x7c>)
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fd90 	bl	8004bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f000 f934 	bl	800633c <vPortExitCritical>
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000f40 	.word	0x20000f40
 80060e0:	20000f10 	.word	0x20000f10
 80060e4:	20000f24 	.word	0x20000f24
 80060e8:	20000f38 	.word	0x20000f38
 80060ec:	20000f3c 	.word	0x20000f3c
 80060f0:	20000fec 	.word	0x20000fec
 80060f4:	20000f4c 	.word	0x20000f4c
 80060f8:	0800afc4 	.word	0x0800afc4

080060fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b04      	subs	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b04      	subs	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800612c:	4a08      	ldr	r2, [pc, #32]	@ (8006150 <pxPortInitialiseStack+0x54>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b14      	subs	r3, #20
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b20      	subs	r3, #32
 8006142:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	08006155 	.word	0x08006155

08006154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800615e:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <prvTaskExitError+0x54>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006166:	d00b      	beq.n	8006180 <prvTaskExitError+0x2c>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	60fb      	str	r3, [r7, #12]
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <prvTaskExitError+0x28>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60bb      	str	r3, [r7, #8]
}
 8006192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006194:	bf00      	nop
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0fc      	beq.n	8006196 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	2000000c 	.word	0x2000000c
 80061ac:	00000000 	.word	0x00000000

080061b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <pxCurrentTCBConst2>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ba:	f380 8809 	msr	PSP, r0
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8811 	msr	BASEPRI, r0
 80061ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80061ce:	4770      	bx	lr

080061d0 <pxCurrentTCBConst2>:
 80061d0:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061d8:	4806      	ldr	r0, [pc, #24]	@ (80061f4 <prvPortStartFirstTask+0x1c>)
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f380 8808 	msr	MSP, r0
 80061e2:	b662      	cpsie	i
 80061e4:	b661      	cpsie	f
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	df00      	svc	0
 80061f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061f2:	bf00      	nop
 80061f4:	e000ed08 	.word	0xe000ed08

080061f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061fe:	4b32      	ldr	r3, [pc, #200]	@ (80062c8 <xPortStartScheduler+0xd0>)
 8006200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	22ff      	movs	r2, #255	@ 0xff
 800620e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b2a      	ldr	r3, [pc, #168]	@ (80062cc <xPortStartScheduler+0xd4>)
 8006224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006226:	4b2a      	ldr	r3, [pc, #168]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006228:	2207      	movs	r2, #7
 800622a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800622c:	e009      	b.n	8006242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800622e:	4b28      	ldr	r3, [pc, #160]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3b01      	subs	r3, #1
 8006234:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624a:	2b80      	cmp	r3, #128	@ 0x80
 800624c:	d0ef      	beq.n	800622e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1c3 0307 	rsb	r3, r3, #7
 8006256:	2b04      	cmp	r3, #4
 8006258:	d00b      	beq.n	8006272 <xPortStartScheduler+0x7a>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60bb      	str	r3, [r7, #8]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006272:	4b17      	ldr	r3, [pc, #92]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <xPortStartScheduler+0xd8>)
 800627a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800627c:	4b14      	ldr	r3, [pc, #80]	@ (80062d0 <xPortStartScheduler+0xd8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006284:	4a12      	ldr	r2, [pc, #72]	@ (80062d0 <xPortStartScheduler+0xd8>)
 8006286:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006290:	4b10      	ldr	r3, [pc, #64]	@ (80062d4 <xPortStartScheduler+0xdc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0f      	ldr	r2, [pc, #60]	@ (80062d4 <xPortStartScheduler+0xdc>)
 8006296:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800629a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800629c:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <xPortStartScheduler+0xdc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0c      	ldr	r2, [pc, #48]	@ (80062d4 <xPortStartScheduler+0xdc>)
 80062a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062a8:	f000 f8b8 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <xPortStartScheduler+0xe0>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062b2:	f7ff ff91 	bl	80061d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062b6:	f7ff f8ab 	bl	8005410 <vTaskSwitchContext>
	prvTaskExitError();
 80062ba:	f7ff ff4b 	bl	8006154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000e400 	.word	0xe000e400
 80062cc:	2000103c 	.word	0x2000103c
 80062d0:	20001040 	.word	0x20001040
 80062d4:	e000ed20 	.word	0xe000ed20
 80062d8:	2000000c 	.word	0x2000000c

080062dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	607b      	str	r3, [r7, #4]
}
 80062f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <vPortEnterCritical+0x58>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006334 <vPortEnterCritical+0x58>)
 80062fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <vPortEnterCritical+0x58>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d110      	bne.n	800632a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006308:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <vPortEnterCritical+0x5c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <vPortEnterCritical+0x4e>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	603b      	str	r3, [r7, #0]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vPortEnterCritical+0x4a>
	}
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	2000000c 	.word	0x2000000c
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006342:	4b12      	ldr	r3, [pc, #72]	@ (800638c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <vPortExitCritical+0x26>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	607b      	str	r3, [r7, #4]
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	e7fd      	b.n	800635e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006362:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <vPortExitCritical+0x50>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3b01      	subs	r3, #1
 8006368:	4a08      	ldr	r2, [pc, #32]	@ (800638c <vPortExitCritical+0x50>)
 800636a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800636c:	4b07      	ldr	r3, [pc, #28]	@ (800638c <vPortExitCritical+0x50>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <vPortExitCritical+0x44>
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c

08006390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006390:	f3ef 8009 	mrs	r0, PSP
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <pxCurrentTCBConst>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063a0:	6010      	str	r0, [r2, #0]
 80063a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063aa:	f380 8811 	msr	BASEPRI, r0
 80063ae:	f7ff f82f 	bl	8005410 <vTaskSwitchContext>
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063c6:	f380 8809 	msr	PSP, r0
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	4770      	bx	lr

080063d0 <pxCurrentTCBConst>:
 80063d0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f7fe ff4d 	bl	8005290 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fc:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <SysTick_Handler+0x40>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <vPortSetupTimerInterrupt+0x30>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <vPortSetupTimerInterrupt+0x38>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <vPortSetupTimerInterrupt+0x3c>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a08      	ldr	r2, [pc, #32]	@ (800645c <vPortSetupTimerInterrupt+0x40>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b03      	ldr	r3, [pc, #12]	@ (800644c <vPortSetupTimerInterrupt+0x30>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	e000e010 	.word	0xe000e010
 8006450:	e000e018 	.word	0xe000e018
 8006454:	20000000 	.word	0x20000000
 8006458:	10624dd3 	.word	0x10624dd3
 800645c:	e000e014 	.word	0xe000e014

08006460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006466:	f3ef 8305 	mrs	r3, IPSR
 800646a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b0f      	cmp	r3, #15
 8006470:	d915      	bls.n	800649e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006472:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <vPortValidateInterruptPriority+0x70>)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800647c:	4b15      	ldr	r3, [pc, #84]	@ (80064d4 <vPortValidateInterruptPriority+0x74>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	7afa      	ldrb	r2, [r7, #11]
 8006482:	429a      	cmp	r2, r3
 8006484:	d20b      	bcs.n	800649e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	607b      	str	r3, [r7, #4]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800649e:	4b0e      	ldr	r3, [pc, #56]	@ (80064d8 <vPortValidateInterruptPriority+0x78>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064a6:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <vPortValidateInterruptPriority+0x7c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d90b      	bls.n	80064c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	603b      	str	r3, [r7, #0]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <vPortValidateInterruptPriority+0x62>
	}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr
 80064d0:	e000e3f0 	.word	0xe000e3f0
 80064d4:	2000103c 	.word	0x2000103c
 80064d8:	e000ed0c 	.word	0xe000ed0c
 80064dc:	20001040 	.word	0x20001040

080064e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064ec:	f7fe fe16 	bl	800511c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064f0:	4b5a      	ldr	r3, [pc, #360]	@ (800665c <pvPortMalloc+0x17c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064f8:	f000 f916 	bl	8006728 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064fc:	4b58      	ldr	r3, [pc, #352]	@ (8006660 <pvPortMalloc+0x180>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 8090 	bne.w	800662a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01e      	beq.n	800654e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006510:	2208      	movs	r2, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	2b00      	cmp	r3, #0
 8006520:	d015      	beq.n	800654e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	3308      	adds	r3, #8
 800652a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <pvPortMalloc+0x6e>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	617b      	str	r3, [r7, #20]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d06a      	beq.n	800662a <pvPortMalloc+0x14a>
 8006554:	4b43      	ldr	r3, [pc, #268]	@ (8006664 <pvPortMalloc+0x184>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d865      	bhi.n	800662a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800655e:	4b42      	ldr	r3, [pc, #264]	@ (8006668 <pvPortMalloc+0x188>)
 8006560:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006562:	4b41      	ldr	r3, [pc, #260]	@ (8006668 <pvPortMalloc+0x188>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006568:	e004      	b.n	8006574 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d903      	bls.n	8006586 <pvPortMalloc+0xa6>
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f1      	bne.n	800656a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006586:	4b35      	ldr	r3, [pc, #212]	@ (800665c <pvPortMalloc+0x17c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658c:	429a      	cmp	r2, r3
 800658e:	d04c      	beq.n	800662a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	4413      	add	r3, r2
 8006598:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	2308      	movs	r3, #8
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d920      	bls.n	80065f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <pvPortMalloc+0xfc>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	613b      	str	r3, [r7, #16]
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1ad2      	subs	r2, r2, r3
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065ee:	69b8      	ldr	r0, [r7, #24]
 80065f0:	f000 f8fc 	bl	80067ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006664 <pvPortMalloc+0x184>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	4a19      	ldr	r2, [pc, #100]	@ (8006664 <pvPortMalloc+0x184>)
 8006600:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006602:	4b18      	ldr	r3, [pc, #96]	@ (8006664 <pvPortMalloc+0x184>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b19      	ldr	r3, [pc, #100]	@ (800666c <pvPortMalloc+0x18c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d203      	bcs.n	8006616 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800660e:	4b15      	ldr	r3, [pc, #84]	@ (8006664 <pvPortMalloc+0x184>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a16      	ldr	r2, [pc, #88]	@ (800666c <pvPortMalloc+0x18c>)
 8006614:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	4b11      	ldr	r3, [pc, #68]	@ (8006660 <pvPortMalloc+0x180>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	431a      	orrs	r2, r3
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800662a:	f7fe fd85 	bl	8005138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <pvPortMalloc+0x170>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60fb      	str	r3, [r7, #12]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <pvPortMalloc+0x16c>
	return pvReturn;
 8006650:	69fb      	ldr	r3, [r7, #28]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3728      	adds	r7, #40	@ 0x28
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20001c4c 	.word	0x20001c4c
 8006660:	20001c58 	.word	0x20001c58
 8006664:	20001c50 	.word	0x20001c50
 8006668:	20001c44 	.word	0x20001c44
 800666c:	20001c54 	.word	0x20001c54

08006670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d04a      	beq.n	8006718 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006682:	2308      	movs	r3, #8
 8006684:	425b      	negs	r3, r3
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	4b22      	ldr	r3, [pc, #136]	@ (8006720 <vPortFree+0xb0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <vPortFree+0x46>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60fb      	str	r3, [r7, #12]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <vPortFree+0x66>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60bb      	str	r3, [r7, #8]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <vPortFree+0xb0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d019      	beq.n	8006718 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <vPortFree+0xb0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066fc:	f7fe fd0e 	bl	800511c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <vPortFree+0xb4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4413      	add	r3, r2
 800670a:	4a06      	ldr	r2, [pc, #24]	@ (8006724 <vPortFree+0xb4>)
 800670c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f000 f86c 	bl	80067ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006714:	f7fe fd10 	bl	8005138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20001c58 	.word	0x20001c58
 8006724:	20001c50 	.word	0x20001c50

08006728 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006732:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006734:	4b27      	ldr	r3, [pc, #156]	@ (80067d4 <prvHeapInit+0xac>)
 8006736:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a1f      	ldr	r2, [pc, #124]	@ (80067d4 <prvHeapInit+0xac>)
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006760:	4a1d      	ldr	r2, [pc, #116]	@ (80067d8 <prvHeapInit+0xb0>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006766:	4b1c      	ldr	r3, [pc, #112]	@ (80067d8 <prvHeapInit+0xb0>)
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006774:	2208      	movs	r2, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a15      	ldr	r2, [pc, #84]	@ (80067dc <prvHeapInit+0xb4>)
 8006788:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800678a:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <prvHeapInit+0xb4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <prvHeapInit+0xb4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <prvHeapInit+0xb4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <prvHeapInit+0xb8>)
 80067b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a09      	ldr	r2, [pc, #36]	@ (80067e4 <prvHeapInit+0xbc>)
 80067be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <prvHeapInit+0xc0>)
 80067c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20001044 	.word	0x20001044
 80067d8:	20001c44 	.word	0x20001c44
 80067dc:	20001c4c 	.word	0x20001c4c
 80067e0:	20001c54 	.word	0x20001c54
 80067e4:	20001c50 	.word	0x20001c50
 80067e8:	20001c58 	.word	0x20001c58

080067ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f4:	4b27      	ldr	r3, [pc, #156]	@ (8006894 <prvInsertBlockIntoFreeList+0xa8>)
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e002      	b.n	8006800 <prvInsertBlockIntoFreeList+0x14>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d8f7      	bhi.n	80067fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d108      	bne.n	800682e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d118      	bne.n	8006874 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b14      	ldr	r3, [pc, #80]	@ (8006898 <prvInsertBlockIntoFreeList+0xac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d00d      	beq.n	800686a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e008      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800686a:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <prvInsertBlockIntoFreeList+0xac>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e003      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d002      	beq.n	800688a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr
 8006894:	20001c44 	.word	0x20001c44
 8006898:	20001c4c 	.word	0x20001c4c

0800689c <__cvt>:
 800689c:	2b00      	cmp	r3, #0
 800689e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a2:	461d      	mov	r5, r3
 80068a4:	bfbb      	ittet	lt
 80068a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80068aa:	461d      	movlt	r5, r3
 80068ac:	2300      	movge	r3, #0
 80068ae:	232d      	movlt	r3, #45	@ 0x2d
 80068b0:	b088      	sub	sp, #32
 80068b2:	4614      	mov	r4, r2
 80068b4:	bfb8      	it	lt
 80068b6:	4614      	movlt	r4, r2
 80068b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068bc:	7013      	strb	r3, [r2, #0]
 80068be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068c4:	f023 0820 	bic.w	r8, r3, #32
 80068c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068cc:	d005      	beq.n	80068da <__cvt+0x3e>
 80068ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068d2:	d100      	bne.n	80068d6 <__cvt+0x3a>
 80068d4:	3601      	adds	r6, #1
 80068d6:	2302      	movs	r3, #2
 80068d8:	e000      	b.n	80068dc <__cvt+0x40>
 80068da:	2303      	movs	r3, #3
 80068dc:	aa07      	add	r2, sp, #28
 80068de:	9204      	str	r2, [sp, #16]
 80068e0:	aa06      	add	r2, sp, #24
 80068e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068e6:	e9cd 3600 	strd	r3, r6, [sp]
 80068ea:	4622      	mov	r2, r4
 80068ec:	462b      	mov	r3, r5
 80068ee:	f001 f88f 	bl	8007a10 <_dtoa_r>
 80068f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068f6:	4607      	mov	r7, r0
 80068f8:	d119      	bne.n	800692e <__cvt+0x92>
 80068fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068fc:	07db      	lsls	r3, r3, #31
 80068fe:	d50e      	bpl.n	800691e <__cvt+0x82>
 8006900:	eb00 0906 	add.w	r9, r0, r6
 8006904:	2200      	movs	r2, #0
 8006906:	2300      	movs	r3, #0
 8006908:	4620      	mov	r0, r4
 800690a:	4629      	mov	r1, r5
 800690c:	f7fa f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8006910:	b108      	cbz	r0, 8006916 <__cvt+0x7a>
 8006912:	f8cd 901c 	str.w	r9, [sp, #28]
 8006916:	2230      	movs	r2, #48	@ 0x30
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	454b      	cmp	r3, r9
 800691c:	d31e      	bcc.n	800695c <__cvt+0xc0>
 800691e:	4638      	mov	r0, r7
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006924:	1bdb      	subs	r3, r3, r7
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	b008      	add	sp, #32
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006932:	eb00 0906 	add.w	r9, r0, r6
 8006936:	d1e5      	bne.n	8006904 <__cvt+0x68>
 8006938:	7803      	ldrb	r3, [r0, #0]
 800693a:	2b30      	cmp	r3, #48	@ 0x30
 800693c:	d10a      	bne.n	8006954 <__cvt+0xb8>
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7fa f82f 	bl	80009a8 <__aeabi_dcmpeq>
 800694a:	b918      	cbnz	r0, 8006954 <__cvt+0xb8>
 800694c:	f1c6 0601 	rsb	r6, r6, #1
 8006950:	f8ca 6000 	str.w	r6, [sl]
 8006954:	f8da 3000 	ldr.w	r3, [sl]
 8006958:	4499      	add	r9, r3
 800695a:	e7d3      	b.n	8006904 <__cvt+0x68>
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	9107      	str	r1, [sp, #28]
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e7d9      	b.n	8006918 <__cvt+0x7c>

08006964 <__exponent>:
 8006964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006966:	2900      	cmp	r1, #0
 8006968:	bfb6      	itet	lt
 800696a:	232d      	movlt	r3, #45	@ 0x2d
 800696c:	232b      	movge	r3, #43	@ 0x2b
 800696e:	4249      	neglt	r1, r1
 8006970:	2909      	cmp	r1, #9
 8006972:	7002      	strb	r2, [r0, #0]
 8006974:	7043      	strb	r3, [r0, #1]
 8006976:	dd29      	ble.n	80069cc <__exponent+0x68>
 8006978:	f10d 0307 	add.w	r3, sp, #7
 800697c:	461d      	mov	r5, r3
 800697e:	270a      	movs	r7, #10
 8006980:	fbb1 f6f7 	udiv	r6, r1, r7
 8006984:	461a      	mov	r2, r3
 8006986:	fb07 1416 	mls	r4, r7, r6, r1
 800698a:	3430      	adds	r4, #48	@ 0x30
 800698c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006990:	460c      	mov	r4, r1
 8006992:	2c63      	cmp	r4, #99	@ 0x63
 8006994:	4631      	mov	r1, r6
 8006996:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800699a:	dcf1      	bgt.n	8006980 <__exponent+0x1c>
 800699c:	3130      	adds	r1, #48	@ 0x30
 800699e:	1e94      	subs	r4, r2, #2
 80069a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069a4:	4623      	mov	r3, r4
 80069a6:	1c41      	adds	r1, r0, #1
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	d30a      	bcc.n	80069c2 <__exponent+0x5e>
 80069ac:	f10d 0309 	add.w	r3, sp, #9
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	42ac      	cmp	r4, r5
 80069b4:	bf88      	it	hi
 80069b6:	2300      	movhi	r3, #0
 80069b8:	3302      	adds	r3, #2
 80069ba:	4403      	add	r3, r0
 80069bc:	1a18      	subs	r0, r3, r0
 80069be:	b003      	add	sp, #12
 80069c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069ca:	e7ed      	b.n	80069a8 <__exponent+0x44>
 80069cc:	2330      	movs	r3, #48	@ 0x30
 80069ce:	3130      	adds	r1, #48	@ 0x30
 80069d0:	7083      	strb	r3, [r0, #2]
 80069d2:	70c1      	strb	r1, [r0, #3]
 80069d4:	1d03      	adds	r3, r0, #4
 80069d6:	e7f1      	b.n	80069bc <__exponent+0x58>

080069d8 <_printf_float>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	b091      	sub	sp, #68	@ 0x44
 80069de:	460c      	mov	r4, r1
 80069e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069e4:	4616      	mov	r6, r2
 80069e6:	461f      	mov	r7, r3
 80069e8:	4605      	mov	r5, r0
 80069ea:	f000 fef1 	bl	80077d0 <_localeconv_r>
 80069ee:	6803      	ldr	r3, [r0, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	9308      	str	r3, [sp, #32]
 80069f4:	f7f9 fbac 	bl	8000150 <strlen>
 80069f8:	2300      	movs	r3, #0
 80069fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80069fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006a00:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a02:	3307      	adds	r3, #7
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	f103 0208 	add.w	r2, r3, #8
 8006a0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a10:	f8d4 b000 	ldr.w	fp, [r4]
 8006a14:	f8c8 2000 	str.w	r2, [r8]
 8006a18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a22:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a32:	4b9c      	ldr	r3, [pc, #624]	@ (8006ca4 <_printf_float+0x2cc>)
 8006a34:	f7f9 ffea 	bl	8000a0c <__aeabi_dcmpun>
 8006a38:	bb70      	cbnz	r0, 8006a98 <_printf_float+0xc0>
 8006a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a42:	4b98      	ldr	r3, [pc, #608]	@ (8006ca4 <_printf_float+0x2cc>)
 8006a44:	f7f9 ffc4 	bl	80009d0 <__aeabi_dcmple>
 8006a48:	bb30      	cbnz	r0, 8006a98 <_printf_float+0xc0>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 ffb3 	bl	80009bc <__aeabi_dcmplt>
 8006a56:	b110      	cbz	r0, 8006a5e <_printf_float+0x86>
 8006a58:	232d      	movs	r3, #45	@ 0x2d
 8006a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a5e:	4a92      	ldr	r2, [pc, #584]	@ (8006ca8 <_printf_float+0x2d0>)
 8006a60:	4b92      	ldr	r3, [pc, #584]	@ (8006cac <_printf_float+0x2d4>)
 8006a62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a66:	bf94      	ite	ls
 8006a68:	4690      	movls	r8, r2
 8006a6a:	4698      	movhi	r8, r3
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	f04f 0900 	mov.w	r9, #0
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	f02b 0304 	bic.w	r3, fp, #4
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	4633      	mov	r3, r6
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	9700      	str	r7, [sp, #0]
 8006a82:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a84:	f000 f9d4 	bl	8006e30 <_printf_common>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f040 8090 	bne.w	8006bae <_printf_float+0x1d6>
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a92:	b011      	add	sp, #68	@ 0x44
 8006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7f9 ffb4 	bl	8000a0c <__aeabi_dcmpun>
 8006aa4:	b148      	cbz	r0, 8006aba <_printf_float+0xe2>
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfb8      	it	lt
 8006aac:	232d      	movlt	r3, #45	@ 0x2d
 8006aae:	4a80      	ldr	r2, [pc, #512]	@ (8006cb0 <_printf_float+0x2d8>)
 8006ab0:	bfb8      	it	lt
 8006ab2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cb4 <_printf_float+0x2dc>)
 8006ab8:	e7d3      	b.n	8006a62 <_printf_float+0x8a>
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	d13f      	bne.n	8006b44 <_printf_float+0x16c>
 8006ac4:	2306      	movs	r3, #6
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	9206      	str	r2, [sp, #24]
 8006ad2:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ad4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ad8:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ada:	9203      	str	r2, [sp, #12]
 8006adc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ae0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	4628      	mov	r0, r5
 8006aec:	464b      	mov	r3, r9
 8006aee:	910a      	str	r1, [sp, #40]	@ 0x28
 8006af0:	f7ff fed4 	bl	800689c <__cvt>
 8006af4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006af6:	4680      	mov	r8, r0
 8006af8:	2947      	cmp	r1, #71	@ 0x47
 8006afa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006afc:	d128      	bne.n	8006b50 <_printf_float+0x178>
 8006afe:	1cc8      	adds	r0, r1, #3
 8006b00:	db02      	blt.n	8006b08 <_printf_float+0x130>
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	4299      	cmp	r1, r3
 8006b06:	dd40      	ble.n	8006b8a <_printf_float+0x1b2>
 8006b08:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b10:	4652      	mov	r2, sl
 8006b12:	3901      	subs	r1, #1
 8006b14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b18:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b1a:	f7ff ff23 	bl	8006964 <__exponent>
 8006b1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b20:	4681      	mov	r9, r0
 8006b22:	1813      	adds	r3, r2, r0
 8006b24:	2a01      	cmp	r2, #1
 8006b26:	6123      	str	r3, [r4, #16]
 8006b28:	dc02      	bgt.n	8006b30 <_printf_float+0x158>
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	07d2      	lsls	r2, r2, #31
 8006b2e:	d501      	bpl.n	8006b34 <_printf_float+0x15c>
 8006b30:	3301      	adds	r3, #1
 8006b32:	6123      	str	r3, [r4, #16]
 8006b34:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d09e      	beq.n	8006a7a <_printf_float+0xa2>
 8006b3c:	232d      	movs	r3, #45	@ 0x2d
 8006b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b42:	e79a      	b.n	8006a7a <_printf_float+0xa2>
 8006b44:	2947      	cmp	r1, #71	@ 0x47
 8006b46:	d1bf      	bne.n	8006ac8 <_printf_float+0xf0>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1bd      	bne.n	8006ac8 <_printf_float+0xf0>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e7ba      	b.n	8006ac6 <_printf_float+0xee>
 8006b50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b54:	d9dc      	bls.n	8006b10 <_printf_float+0x138>
 8006b56:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b5a:	d118      	bne.n	8006b8e <_printf_float+0x1b6>
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	dd0b      	ble.n	8006b7a <_printf_float+0x1a2>
 8006b62:	6121      	str	r1, [r4, #16]
 8006b64:	b913      	cbnz	r3, 8006b6c <_printf_float+0x194>
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	07d0      	lsls	r0, r2, #31
 8006b6a:	d502      	bpl.n	8006b72 <_printf_float+0x19a>
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	440b      	add	r3, r1
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b78:	e7dc      	b.n	8006b34 <_printf_float+0x15c>
 8006b7a:	b913      	cbnz	r3, 8006b82 <_printf_float+0x1aa>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	07d2      	lsls	r2, r2, #31
 8006b80:	d501      	bpl.n	8006b86 <_printf_float+0x1ae>
 8006b82:	3302      	adds	r3, #2
 8006b84:	e7f4      	b.n	8006b70 <_printf_float+0x198>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e7f2      	b.n	8006b70 <_printf_float+0x198>
 8006b8a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b90:	4299      	cmp	r1, r3
 8006b92:	db05      	blt.n	8006ba0 <_printf_float+0x1c8>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	6121      	str	r1, [r4, #16]
 8006b98:	07d8      	lsls	r0, r3, #31
 8006b9a:	d5ea      	bpl.n	8006b72 <_printf_float+0x19a>
 8006b9c:	1c4b      	adds	r3, r1, #1
 8006b9e:	e7e7      	b.n	8006b70 <_printf_float+0x198>
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	bfcc      	ite	gt
 8006ba4:	2201      	movgt	r2, #1
 8006ba6:	f1c1 0202 	rsble	r2, r1, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	e7e0      	b.n	8006b70 <_printf_float+0x198>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	055a      	lsls	r2, r3, #21
 8006bb2:	d407      	bmi.n	8006bc4 <_printf_float+0x1ec>
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d12b      	bne.n	8006c1a <_printf_float+0x242>
 8006bc2:	e764      	b.n	8006a8e <_printf_float+0xb6>
 8006bc4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bc8:	f240 80dc 	bls.w	8006d84 <_printf_float+0x3ac>
 8006bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f7f9 fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d033      	beq.n	8006c44 <_printf_float+0x26c>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	4a35      	ldr	r2, [pc, #212]	@ (8006cb8 <_printf_float+0x2e0>)
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f af51 	beq.w	8006a8e <_printf_float+0xb6>
 8006bec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006bf0:	4543      	cmp	r3, r8
 8006bf2:	db02      	blt.n	8006bfa <_printf_float+0x222>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07d8      	lsls	r0, r3, #31
 8006bf8:	d50f      	bpl.n	8006c1a <_printf_float+0x242>
 8006bfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f af42 	beq.w	8006a8e <_printf_float+0xb6>
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c12:	f104 0a1a 	add.w	sl, r4, #26
 8006c16:	45c8      	cmp	r8, r9
 8006c18:	dc09      	bgt.n	8006c2e <_printf_float+0x256>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	079b      	lsls	r3, r3, #30
 8006c1e:	f100 8102 	bmi.w	8006e26 <_printf_float+0x44e>
 8006c22:	68e0      	ldr	r0, [r4, #12]
 8006c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c26:	4298      	cmp	r0, r3
 8006c28:	bfb8      	it	lt
 8006c2a:	4618      	movlt	r0, r3
 8006c2c:	e731      	b.n	8006a92 <_printf_float+0xba>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4652      	mov	r2, sl
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f af28 	beq.w	8006a8e <_printf_float+0xb6>
 8006c3e:	f109 0901 	add.w	r9, r9, #1
 8006c42:	e7e8      	b.n	8006c16 <_printf_float+0x23e>
 8006c44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dc38      	bgt.n	8006cbc <_printf_float+0x2e4>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	4a19      	ldr	r2, [pc, #100]	@ (8006cb8 <_printf_float+0x2e0>)
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	f43f af1a 	beq.w	8006a8e <_printf_float+0xb6>
 8006c5a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c5e:	ea59 0303 	orrs.w	r3, r9, r3
 8006c62:	d102      	bne.n	8006c6a <_printf_float+0x292>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	07d9      	lsls	r1, r3, #31
 8006c68:	d5d7      	bpl.n	8006c1a <_printf_float+0x242>
 8006c6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f af0a 	beq.w	8006a8e <_printf_float+0xb6>
 8006c7a:	f04f 0a00 	mov.w	sl, #0
 8006c7e:	f104 0b1a 	add.w	fp, r4, #26
 8006c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c84:	425b      	negs	r3, r3
 8006c86:	4553      	cmp	r3, sl
 8006c88:	dc01      	bgt.n	8006c8e <_printf_float+0x2b6>
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	e793      	b.n	8006bb6 <_printf_float+0x1de>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	465a      	mov	r2, fp
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f aef8 	beq.w	8006a8e <_printf_float+0xb6>
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	e7ee      	b.n	8006c82 <_printf_float+0x2aa>
 8006ca4:	7fefffff 	.word	0x7fefffff
 8006ca8:	0800b0aa 	.word	0x0800b0aa
 8006cac:	0800b0ae 	.word	0x0800b0ae
 8006cb0:	0800b0b2 	.word	0x0800b0b2
 8006cb4:	0800b0b6 	.word	0x0800b0b6
 8006cb8:	0800b0ba 	.word	0x0800b0ba
 8006cbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cbe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cc2:	4553      	cmp	r3, sl
 8006cc4:	bfa8      	it	ge
 8006cc6:	4653      	movge	r3, sl
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	4699      	mov	r9, r3
 8006ccc:	dc36      	bgt.n	8006d3c <_printf_float+0x364>
 8006cce:	f04f 0b00 	mov.w	fp, #0
 8006cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd6:	f104 021a 	add.w	r2, r4, #26
 8006cda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cde:	eba3 0309 	sub.w	r3, r3, r9
 8006ce2:	455b      	cmp	r3, fp
 8006ce4:	dc31      	bgt.n	8006d4a <_printf_float+0x372>
 8006ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce8:	459a      	cmp	sl, r3
 8006cea:	dc3a      	bgt.n	8006d62 <_printf_float+0x38a>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	07da      	lsls	r2, r3, #31
 8006cf0:	d437      	bmi.n	8006d62 <_printf_float+0x38a>
 8006cf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf4:	ebaa 0903 	sub.w	r9, sl, r3
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfa:	ebaa 0303 	sub.w	r3, sl, r3
 8006cfe:	4599      	cmp	r9, r3
 8006d00:	bfa8      	it	ge
 8006d02:	4699      	movge	r9, r3
 8006d04:	f1b9 0f00 	cmp.w	r9, #0
 8006d08:	dc33      	bgt.n	8006d72 <_printf_float+0x39a>
 8006d0a:	f04f 0800 	mov.w	r8, #0
 8006d0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d12:	f104 0b1a 	add.w	fp, r4, #26
 8006d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d18:	ebaa 0303 	sub.w	r3, sl, r3
 8006d1c:	eba3 0309 	sub.w	r3, r3, r9
 8006d20:	4543      	cmp	r3, r8
 8006d22:	f77f af7a 	ble.w	8006c1a <_printf_float+0x242>
 8006d26:	2301      	movs	r3, #1
 8006d28:	465a      	mov	r2, fp
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	f43f aeac 	beq.w	8006a8e <_printf_float+0xb6>
 8006d36:	f108 0801 	add.w	r8, r8, #1
 8006d3a:	e7ec      	b.n	8006d16 <_printf_float+0x33e>
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	d1c2      	bne.n	8006cce <_printf_float+0x2f6>
 8006d48:	e6a1      	b.n	8006a8e <_printf_float+0xb6>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f ae9a 	beq.w	8006a8e <_printf_float+0xb6>
 8006d5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d5c:	f10b 0b01 	add.w	fp, fp, #1
 8006d60:	e7bb      	b.n	8006cda <_printf_float+0x302>
 8006d62:	4631      	mov	r1, r6
 8006d64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d1c0      	bne.n	8006cf2 <_printf_float+0x31a>
 8006d70:	e68d      	b.n	8006a8e <_printf_float+0xb6>
 8006d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d74:	464b      	mov	r3, r9
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	4442      	add	r2, r8
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d1c3      	bne.n	8006d0a <_printf_float+0x332>
 8006d82:	e684      	b.n	8006a8e <_printf_float+0xb6>
 8006d84:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d88:	f1ba 0f01 	cmp.w	sl, #1
 8006d8c:	dc01      	bgt.n	8006d92 <_printf_float+0x3ba>
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d536      	bpl.n	8006e00 <_printf_float+0x428>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4642      	mov	r2, r8
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae76 	beq.w	8006a8e <_printf_float+0xb6>
 8006da2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	f43f ae6e 	beq.w	8006a8e <_printf_float+0xb6>
 8006db2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006db6:	2200      	movs	r2, #0
 8006db8:	2300      	movs	r3, #0
 8006dba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006dbe:	f7f9 fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 8006dc2:	b9c0      	cbnz	r0, 8006df6 <_printf_float+0x41e>
 8006dc4:	4653      	mov	r3, sl
 8006dc6:	f108 0201 	add.w	r2, r8, #1
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d10c      	bne.n	8006dee <_printf_float+0x416>
 8006dd4:	e65b      	b.n	8006a8e <_printf_float+0xb6>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	465a      	mov	r2, fp
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	f43f ae54 	beq.w	8006a8e <_printf_float+0xb6>
 8006de6:	f108 0801 	add.w	r8, r8, #1
 8006dea:	45d0      	cmp	r8, sl
 8006dec:	dbf3      	blt.n	8006dd6 <_printf_float+0x3fe>
 8006dee:	464b      	mov	r3, r9
 8006df0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006df4:	e6e0      	b.n	8006bb8 <_printf_float+0x1e0>
 8006df6:	f04f 0800 	mov.w	r8, #0
 8006dfa:	f104 0b1a 	add.w	fp, r4, #26
 8006dfe:	e7f4      	b.n	8006dea <_printf_float+0x412>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4642      	mov	r2, r8
 8006e04:	e7e1      	b.n	8006dca <_printf_float+0x3f2>
 8006e06:	2301      	movs	r3, #1
 8006e08:	464a      	mov	r2, r9
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f ae3c 	beq.w	8006a8e <_printf_float+0xb6>
 8006e16:	f108 0801 	add.w	r8, r8, #1
 8006e1a:	68e3      	ldr	r3, [r4, #12]
 8006e1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e1e:	1a5b      	subs	r3, r3, r1
 8006e20:	4543      	cmp	r3, r8
 8006e22:	dcf0      	bgt.n	8006e06 <_printf_float+0x42e>
 8006e24:	e6fd      	b.n	8006c22 <_printf_float+0x24a>
 8006e26:	f04f 0800 	mov.w	r8, #0
 8006e2a:	f104 0919 	add.w	r9, r4, #25
 8006e2e:	e7f4      	b.n	8006e1a <_printf_float+0x442>

08006e30 <_printf_common>:
 8006e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	4616      	mov	r6, r2
 8006e36:	4698      	mov	r8, r3
 8006e38:	688a      	ldr	r2, [r1, #8]
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	bfb8      	it	lt
 8006e42:	4613      	movlt	r3, r2
 8006e44:	6033      	str	r3, [r6, #0]
 8006e46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e50:	b10a      	cbz	r2, 8006e56 <_printf_common+0x26>
 8006e52:	3301      	adds	r3, #1
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	0699      	lsls	r1, r3, #26
 8006e5a:	bf42      	ittt	mi
 8006e5c:	6833      	ldrmi	r3, [r6, #0]
 8006e5e:	3302      	addmi	r3, #2
 8006e60:	6033      	strmi	r3, [r6, #0]
 8006e62:	6825      	ldr	r5, [r4, #0]
 8006e64:	f015 0506 	ands.w	r5, r5, #6
 8006e68:	d106      	bne.n	8006e78 <_printf_common+0x48>
 8006e6a:	f104 0a19 	add.w	sl, r4, #25
 8006e6e:	68e3      	ldr	r3, [r4, #12]
 8006e70:	6832      	ldr	r2, [r6, #0]
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dc2b      	bgt.n	8006ed0 <_printf_common+0xa0>
 8006e78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	3b00      	subs	r3, #0
 8006e80:	bf18      	it	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	0692      	lsls	r2, r2, #26
 8006e86:	d430      	bmi.n	8006eea <_printf_common+0xba>
 8006e88:	4641      	mov	r1, r8
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e90:	47c8      	blx	r9
 8006e92:	3001      	adds	r0, #1
 8006e94:	d023      	beq.n	8006ede <_printf_common+0xae>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	6922      	ldr	r2, [r4, #16]
 8006e9a:	f003 0306 	and.w	r3, r3, #6
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	bf14      	ite	ne
 8006ea2:	2500      	movne	r5, #0
 8006ea4:	6833      	ldreq	r3, [r6, #0]
 8006ea6:	f04f 0600 	mov.w	r6, #0
 8006eaa:	bf08      	it	eq
 8006eac:	68e5      	ldreq	r5, [r4, #12]
 8006eae:	f104 041a 	add.w	r4, r4, #26
 8006eb2:	bf08      	it	eq
 8006eb4:	1aed      	subeq	r5, r5, r3
 8006eb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006eba:	bf08      	it	eq
 8006ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bfc4      	itt	gt
 8006ec4:	1a9b      	subgt	r3, r3, r2
 8006ec6:	18ed      	addgt	r5, r5, r3
 8006ec8:	42b5      	cmp	r5, r6
 8006eca:	d11a      	bne.n	8006f02 <_printf_common+0xd2>
 8006ecc:	2000      	movs	r0, #0
 8006ece:	e008      	b.n	8006ee2 <_printf_common+0xb2>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c8      	blx	r9
 8006eda:	3001      	adds	r0, #1
 8006edc:	d103      	bne.n	8006ee6 <_printf_common+0xb6>
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee6:	3501      	adds	r5, #1
 8006ee8:	e7c1      	b.n	8006e6e <_printf_common+0x3e>
 8006eea:	2030      	movs	r0, #48	@ 0x30
 8006eec:	18e1      	adds	r1, r4, r3
 8006eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ef8:	4422      	add	r2, r4
 8006efa:	3302      	adds	r3, #2
 8006efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f00:	e7c2      	b.n	8006e88 <_printf_common+0x58>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4622      	mov	r2, r4
 8006f06:	4641      	mov	r1, r8
 8006f08:	4638      	mov	r0, r7
 8006f0a:	47c8      	blx	r9
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d0e6      	beq.n	8006ede <_printf_common+0xae>
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7d9      	b.n	8006ec8 <_printf_common+0x98>

08006f14 <_printf_i>:
 8006f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	7e0f      	ldrb	r7, [r1, #24]
 8006f1a:	4691      	mov	r9, r2
 8006f1c:	2f78      	cmp	r7, #120	@ 0x78
 8006f1e:	4680      	mov	r8, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	469a      	mov	sl, r3
 8006f24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f2a:	d807      	bhi.n	8006f3c <_printf_i+0x28>
 8006f2c:	2f62      	cmp	r7, #98	@ 0x62
 8006f2e:	d80a      	bhi.n	8006f46 <_printf_i+0x32>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f000 80d3 	beq.w	80070dc <_printf_i+0x1c8>
 8006f36:	2f58      	cmp	r7, #88	@ 0x58
 8006f38:	f000 80ba 	beq.w	80070b0 <_printf_i+0x19c>
 8006f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f44:	e03a      	b.n	8006fbc <_printf_i+0xa8>
 8006f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f4a:	2b15      	cmp	r3, #21
 8006f4c:	d8f6      	bhi.n	8006f3c <_printf_i+0x28>
 8006f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f54 <_printf_i+0x40>)
 8006f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006f3d 	.word	0x08006f3d
 8006f60:	08006f3d 	.word	0x08006f3d
 8006f64:	08006f3d 	.word	0x08006f3d
 8006f68:	08006f3d 	.word	0x08006f3d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f3d 	.word	0x08006f3d
 8006f74:	08006f3d 	.word	0x08006f3d
 8006f78:	08006f3d 	.word	0x08006f3d
 8006f7c:	08006f3d 	.word	0x08006f3d
 8006f80:	080070c3 	.word	0x080070c3
 8006f84:	08006feb 	.word	0x08006feb
 8006f88:	0800707d 	.word	0x0800707d
 8006f8c:	08006f3d 	.word	0x08006f3d
 8006f90:	08006f3d 	.word	0x08006f3d
 8006f94:	080070e5 	.word	0x080070e5
 8006f98:	08006f3d 	.word	0x08006f3d
 8006f9c:	08006feb 	.word	0x08006feb
 8006fa0:	08006f3d 	.word	0x08006f3d
 8006fa4:	08006f3d 	.word	0x08006f3d
 8006fa8:	08007085 	.word	0x08007085
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6032      	str	r2, [r6, #0]
 8006fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e09e      	b.n	80070fe <_printf_i+0x1ea>
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	6031      	str	r1, [r6, #0]
 8006fc8:	0606      	lsls	r6, r0, #24
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0xbc>
 8006fcc:	681d      	ldr	r5, [r3, #0]
 8006fce:	e003      	b.n	8006fd8 <_printf_i+0xc4>
 8006fd0:	0645      	lsls	r5, r0, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0xb8>
 8006fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	da03      	bge.n	8006fe4 <_printf_i+0xd0>
 8006fdc:	232d      	movs	r3, #45	@ 0x2d
 8006fde:	426d      	negs	r5, r5
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe4:	230a      	movs	r3, #10
 8006fe6:	4859      	ldr	r0, [pc, #356]	@ (800714c <_printf_i+0x238>)
 8006fe8:	e011      	b.n	800700e <_printf_i+0xfa>
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	0608      	lsls	r0, r1, #24
 8006ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ff4:	d402      	bmi.n	8006ffc <_printf_i+0xe8>
 8006ff6:	0649      	lsls	r1, r1, #25
 8006ff8:	bf48      	it	mi
 8006ffa:	b2ad      	uxthmi	r5, r5
 8006ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ffe:	6033      	str	r3, [r6, #0]
 8007000:	bf14      	ite	ne
 8007002:	230a      	movne	r3, #10
 8007004:	2308      	moveq	r3, #8
 8007006:	4851      	ldr	r0, [pc, #324]	@ (800714c <_printf_i+0x238>)
 8007008:	2100      	movs	r1, #0
 800700a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800700e:	6866      	ldr	r6, [r4, #4]
 8007010:	2e00      	cmp	r6, #0
 8007012:	bfa8      	it	ge
 8007014:	6821      	ldrge	r1, [r4, #0]
 8007016:	60a6      	str	r6, [r4, #8]
 8007018:	bfa4      	itt	ge
 800701a:	f021 0104 	bicge.w	r1, r1, #4
 800701e:	6021      	strge	r1, [r4, #0]
 8007020:	b90d      	cbnz	r5, 8007026 <_printf_i+0x112>
 8007022:	2e00      	cmp	r6, #0
 8007024:	d04b      	beq.n	80070be <_printf_i+0x1aa>
 8007026:	4616      	mov	r6, r2
 8007028:	fbb5 f1f3 	udiv	r1, r5, r3
 800702c:	fb03 5711 	mls	r7, r3, r1, r5
 8007030:	5dc7      	ldrb	r7, [r0, r7]
 8007032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007036:	462f      	mov	r7, r5
 8007038:	42bb      	cmp	r3, r7
 800703a:	460d      	mov	r5, r1
 800703c:	d9f4      	bls.n	8007028 <_printf_i+0x114>
 800703e:	2b08      	cmp	r3, #8
 8007040:	d10b      	bne.n	800705a <_printf_i+0x146>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	07df      	lsls	r7, r3, #31
 8007046:	d508      	bpl.n	800705a <_printf_i+0x146>
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	6861      	ldr	r1, [r4, #4]
 800704c:	4299      	cmp	r1, r3
 800704e:	bfde      	ittt	le
 8007050:	2330      	movle	r3, #48	@ 0x30
 8007052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007056:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800705a:	1b92      	subs	r2, r2, r6
 800705c:	6122      	str	r2, [r4, #16]
 800705e:	464b      	mov	r3, r9
 8007060:	4621      	mov	r1, r4
 8007062:	4640      	mov	r0, r8
 8007064:	f8cd a000 	str.w	sl, [sp]
 8007068:	aa03      	add	r2, sp, #12
 800706a:	f7ff fee1 	bl	8006e30 <_printf_common>
 800706e:	3001      	adds	r0, #1
 8007070:	d14a      	bne.n	8007108 <_printf_i+0x1f4>
 8007072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007076:	b004      	add	sp, #16
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	f043 0320 	orr.w	r3, r3, #32
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	2778      	movs	r7, #120	@ 0x78
 8007086:	4832      	ldr	r0, [pc, #200]	@ (8007150 <_printf_i+0x23c>)
 8007088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	6831      	ldr	r1, [r6, #0]
 8007090:	061f      	lsls	r7, r3, #24
 8007092:	f851 5b04 	ldr.w	r5, [r1], #4
 8007096:	d402      	bmi.n	800709e <_printf_i+0x18a>
 8007098:	065f      	lsls	r7, r3, #25
 800709a:	bf48      	it	mi
 800709c:	b2ad      	uxthmi	r5, r5
 800709e:	6031      	str	r1, [r6, #0]
 80070a0:	07d9      	lsls	r1, r3, #31
 80070a2:	bf44      	itt	mi
 80070a4:	f043 0320 	orrmi.w	r3, r3, #32
 80070a8:	6023      	strmi	r3, [r4, #0]
 80070aa:	b11d      	cbz	r5, 80070b4 <_printf_i+0x1a0>
 80070ac:	2310      	movs	r3, #16
 80070ae:	e7ab      	b.n	8007008 <_printf_i+0xf4>
 80070b0:	4826      	ldr	r0, [pc, #152]	@ (800714c <_printf_i+0x238>)
 80070b2:	e7e9      	b.n	8007088 <_printf_i+0x174>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	f023 0320 	bic.w	r3, r3, #32
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	e7f6      	b.n	80070ac <_printf_i+0x198>
 80070be:	4616      	mov	r6, r2
 80070c0:	e7bd      	b.n	800703e <_printf_i+0x12a>
 80070c2:	6833      	ldr	r3, [r6, #0]
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1d18      	adds	r0, r3, #4
 80070c8:	6961      	ldr	r1, [r4, #20]
 80070ca:	6030      	str	r0, [r6, #0]
 80070cc:	062e      	lsls	r6, r5, #24
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	d501      	bpl.n	80070d6 <_printf_i+0x1c2>
 80070d2:	6019      	str	r1, [r3, #0]
 80070d4:	e002      	b.n	80070dc <_printf_i+0x1c8>
 80070d6:	0668      	lsls	r0, r5, #25
 80070d8:	d5fb      	bpl.n	80070d2 <_printf_i+0x1be>
 80070da:	8019      	strh	r1, [r3, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	4616      	mov	r6, r2
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	e7bc      	b.n	800705e <_printf_i+0x14a>
 80070e4:	6833      	ldr	r3, [r6, #0]
 80070e6:	2100      	movs	r1, #0
 80070e8:	1d1a      	adds	r2, r3, #4
 80070ea:	6032      	str	r2, [r6, #0]
 80070ec:	681e      	ldr	r6, [r3, #0]
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 fbe4 	bl	80078be <memchr>
 80070f6:	b108      	cbz	r0, 80070fc <_printf_i+0x1e8>
 80070f8:	1b80      	subs	r0, r0, r6
 80070fa:	6060      	str	r0, [r4, #4]
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2300      	movs	r3, #0
 8007102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007106:	e7aa      	b.n	800705e <_printf_i+0x14a>
 8007108:	4632      	mov	r2, r6
 800710a:	4649      	mov	r1, r9
 800710c:	4640      	mov	r0, r8
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	47d0      	blx	sl
 8007112:	3001      	adds	r0, #1
 8007114:	d0ad      	beq.n	8007072 <_printf_i+0x15e>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	079b      	lsls	r3, r3, #30
 800711a:	d413      	bmi.n	8007144 <_printf_i+0x230>
 800711c:	68e0      	ldr	r0, [r4, #12]
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	4298      	cmp	r0, r3
 8007122:	bfb8      	it	lt
 8007124:	4618      	movlt	r0, r3
 8007126:	e7a6      	b.n	8007076 <_printf_i+0x162>
 8007128:	2301      	movs	r3, #1
 800712a:	4632      	mov	r2, r6
 800712c:	4649      	mov	r1, r9
 800712e:	4640      	mov	r0, r8
 8007130:	47d0      	blx	sl
 8007132:	3001      	adds	r0, #1
 8007134:	d09d      	beq.n	8007072 <_printf_i+0x15e>
 8007136:	3501      	adds	r5, #1
 8007138:	68e3      	ldr	r3, [r4, #12]
 800713a:	9903      	ldr	r1, [sp, #12]
 800713c:	1a5b      	subs	r3, r3, r1
 800713e:	42ab      	cmp	r3, r5
 8007140:	dcf2      	bgt.n	8007128 <_printf_i+0x214>
 8007142:	e7eb      	b.n	800711c <_printf_i+0x208>
 8007144:	2500      	movs	r5, #0
 8007146:	f104 0619 	add.w	r6, r4, #25
 800714a:	e7f5      	b.n	8007138 <_printf_i+0x224>
 800714c:	0800b0bc 	.word	0x0800b0bc
 8007150:	0800b0cd 	.word	0x0800b0cd

08007154 <_scanf_float>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	b087      	sub	sp, #28
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	688b      	ldr	r3, [r1, #8]
 800715e:	4617      	mov	r7, r2
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007166:	bf82      	ittt	hi
 8007168:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800716c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007170:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007174:	460a      	mov	r2, r1
 8007176:	f04f 0500 	mov.w	r5, #0
 800717a:	bf88      	it	hi
 800717c:	608b      	strhi	r3, [r1, #8]
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	4680      	mov	r8, r0
 8007182:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007186:	f842 3b1c 	str.w	r3, [r2], #28
 800718a:	460c      	mov	r4, r1
 800718c:	bf98      	it	ls
 800718e:	f04f 0b00 	movls.w	fp, #0
 8007192:	4616      	mov	r6, r2
 8007194:	46aa      	mov	sl, r5
 8007196:	46a9      	mov	r9, r5
 8007198:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9502      	str	r5, [sp, #8]
 80071a0:	68a2      	ldr	r2, [r4, #8]
 80071a2:	b152      	cbz	r2, 80071ba <_scanf_float+0x66>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b4e      	cmp	r3, #78	@ 0x4e
 80071aa:	d865      	bhi.n	8007278 <_scanf_float+0x124>
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	d83d      	bhi.n	800722c <_scanf_float+0xd8>
 80071b0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071b4:	b2c8      	uxtb	r0, r1
 80071b6:	280e      	cmp	r0, #14
 80071b8:	d93b      	bls.n	8007232 <_scanf_float+0xde>
 80071ba:	f1b9 0f00 	cmp.w	r9, #0
 80071be:	d003      	beq.n	80071c8 <_scanf_float+0x74>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80071cc:	f1ba 0f01 	cmp.w	sl, #1
 80071d0:	f200 8118 	bhi.w	8007404 <_scanf_float+0x2b0>
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	429e      	cmp	r6, r3
 80071d8:	f200 8109 	bhi.w	80073ee <_scanf_float+0x29a>
 80071dc:	2001      	movs	r0, #1
 80071de:	b007      	add	sp, #28
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80071e8:	2a0d      	cmp	r2, #13
 80071ea:	d8e6      	bhi.n	80071ba <_scanf_float+0x66>
 80071ec:	a101      	add	r1, pc, #4	@ (adr r1, 80071f4 <_scanf_float+0xa0>)
 80071ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	0800733b 	.word	0x0800733b
 80071f8:	080071bb 	.word	0x080071bb
 80071fc:	080071bb 	.word	0x080071bb
 8007200:	080071bb 	.word	0x080071bb
 8007204:	0800739b 	.word	0x0800739b
 8007208:	08007373 	.word	0x08007373
 800720c:	080071bb 	.word	0x080071bb
 8007210:	080071bb 	.word	0x080071bb
 8007214:	08007349 	.word	0x08007349
 8007218:	080071bb 	.word	0x080071bb
 800721c:	080071bb 	.word	0x080071bb
 8007220:	080071bb 	.word	0x080071bb
 8007224:	080071bb 	.word	0x080071bb
 8007228:	08007301 	.word	0x08007301
 800722c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007230:	e7da      	b.n	80071e8 <_scanf_float+0x94>
 8007232:	290e      	cmp	r1, #14
 8007234:	d8c1      	bhi.n	80071ba <_scanf_float+0x66>
 8007236:	a001      	add	r0, pc, #4	@ (adr r0, 800723c <_scanf_float+0xe8>)
 8007238:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800723c:	080072f1 	.word	0x080072f1
 8007240:	080071bb 	.word	0x080071bb
 8007244:	080072f1 	.word	0x080072f1
 8007248:	08007387 	.word	0x08007387
 800724c:	080071bb 	.word	0x080071bb
 8007250:	08007299 	.word	0x08007299
 8007254:	080072d7 	.word	0x080072d7
 8007258:	080072d7 	.word	0x080072d7
 800725c:	080072d7 	.word	0x080072d7
 8007260:	080072d7 	.word	0x080072d7
 8007264:	080072d7 	.word	0x080072d7
 8007268:	080072d7 	.word	0x080072d7
 800726c:	080072d7 	.word	0x080072d7
 8007270:	080072d7 	.word	0x080072d7
 8007274:	080072d7 	.word	0x080072d7
 8007278:	2b6e      	cmp	r3, #110	@ 0x6e
 800727a:	d809      	bhi.n	8007290 <_scanf_float+0x13c>
 800727c:	2b60      	cmp	r3, #96	@ 0x60
 800727e:	d8b1      	bhi.n	80071e4 <_scanf_float+0x90>
 8007280:	2b54      	cmp	r3, #84	@ 0x54
 8007282:	d07b      	beq.n	800737c <_scanf_float+0x228>
 8007284:	2b59      	cmp	r3, #89	@ 0x59
 8007286:	d198      	bne.n	80071ba <_scanf_float+0x66>
 8007288:	2d07      	cmp	r5, #7
 800728a:	d196      	bne.n	80071ba <_scanf_float+0x66>
 800728c:	2508      	movs	r5, #8
 800728e:	e02c      	b.n	80072ea <_scanf_float+0x196>
 8007290:	2b74      	cmp	r3, #116	@ 0x74
 8007292:	d073      	beq.n	800737c <_scanf_float+0x228>
 8007294:	2b79      	cmp	r3, #121	@ 0x79
 8007296:	e7f6      	b.n	8007286 <_scanf_float+0x132>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	05c8      	lsls	r0, r1, #23
 800729c:	d51b      	bpl.n	80072d6 <_scanf_float+0x182>
 800729e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80072a2:	6021      	str	r1, [r4, #0]
 80072a4:	f109 0901 	add.w	r9, r9, #1
 80072a8:	f1bb 0f00 	cmp.w	fp, #0
 80072ac:	d003      	beq.n	80072b6 <_scanf_float+0x162>
 80072ae:	3201      	adds	r2, #1
 80072b0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80072b4:	60a2      	str	r2, [r4, #8]
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	3301      	adds	r3, #1
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	f340 8087 	ble.w	80073dc <_scanf_float+0x288>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	e764      	b.n	80071a0 <_scanf_float+0x4c>
 80072d6:	eb1a 0105 	adds.w	r1, sl, r5
 80072da:	f47f af6e 	bne.w	80071ba <_scanf_float+0x66>
 80072de:	460d      	mov	r5, r1
 80072e0:	468a      	mov	sl, r1
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072e8:	6022      	str	r2, [r4, #0]
 80072ea:	f806 3b01 	strb.w	r3, [r6], #1
 80072ee:	e7e2      	b.n	80072b6 <_scanf_float+0x162>
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	0610      	lsls	r0, r2, #24
 80072f4:	f57f af61 	bpl.w	80071ba <_scanf_float+0x66>
 80072f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	e7f4      	b.n	80072ea <_scanf_float+0x196>
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	d10e      	bne.n	8007324 <_scanf_float+0x1d0>
 8007306:	f1b9 0f00 	cmp.w	r9, #0
 800730a:	d10e      	bne.n	800732a <_scanf_float+0x1d6>
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007312:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007316:	d108      	bne.n	800732a <_scanf_float+0x1d6>
 8007318:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800731c:	f04f 0a01 	mov.w	sl, #1
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	e7e2      	b.n	80072ea <_scanf_float+0x196>
 8007324:	f1ba 0f02 	cmp.w	sl, #2
 8007328:	d055      	beq.n	80073d6 <_scanf_float+0x282>
 800732a:	2d01      	cmp	r5, #1
 800732c:	d002      	beq.n	8007334 <_scanf_float+0x1e0>
 800732e:	2d04      	cmp	r5, #4
 8007330:	f47f af43 	bne.w	80071ba <_scanf_float+0x66>
 8007334:	3501      	adds	r5, #1
 8007336:	b2ed      	uxtb	r5, r5
 8007338:	e7d7      	b.n	80072ea <_scanf_float+0x196>
 800733a:	f1ba 0f01 	cmp.w	sl, #1
 800733e:	f47f af3c 	bne.w	80071ba <_scanf_float+0x66>
 8007342:	f04f 0a02 	mov.w	sl, #2
 8007346:	e7d0      	b.n	80072ea <_scanf_float+0x196>
 8007348:	b97d      	cbnz	r5, 800736a <_scanf_float+0x216>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	f47f af37 	bne.w	80071c0 <_scanf_float+0x6c>
 8007352:	6822      	ldr	r2, [r4, #0]
 8007354:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007358:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800735c:	f040 8103 	bne.w	8007566 <_scanf_float+0x412>
 8007360:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007364:	2501      	movs	r5, #1
 8007366:	6022      	str	r2, [r4, #0]
 8007368:	e7bf      	b.n	80072ea <_scanf_float+0x196>
 800736a:	2d03      	cmp	r5, #3
 800736c:	d0e2      	beq.n	8007334 <_scanf_float+0x1e0>
 800736e:	2d05      	cmp	r5, #5
 8007370:	e7de      	b.n	8007330 <_scanf_float+0x1dc>
 8007372:	2d02      	cmp	r5, #2
 8007374:	f47f af21 	bne.w	80071ba <_scanf_float+0x66>
 8007378:	2503      	movs	r5, #3
 800737a:	e7b6      	b.n	80072ea <_scanf_float+0x196>
 800737c:	2d06      	cmp	r5, #6
 800737e:	f47f af1c 	bne.w	80071ba <_scanf_float+0x66>
 8007382:	2507      	movs	r5, #7
 8007384:	e7b1      	b.n	80072ea <_scanf_float+0x196>
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	0591      	lsls	r1, r2, #22
 800738a:	f57f af16 	bpl.w	80071ba <_scanf_float+0x66>
 800738e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	f8cd 9008 	str.w	r9, [sp, #8]
 8007398:	e7a7      	b.n	80072ea <_scanf_float+0x196>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80073a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073a4:	d006      	beq.n	80073b4 <_scanf_float+0x260>
 80073a6:	0550      	lsls	r0, r2, #21
 80073a8:	f57f af07 	bpl.w	80071ba <_scanf_float+0x66>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	f000 80d9 	beq.w	8007566 <_scanf_float+0x412>
 80073b4:	0591      	lsls	r1, r2, #22
 80073b6:	bf58      	it	pl
 80073b8:	9902      	ldrpl	r1, [sp, #8]
 80073ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073be:	bf58      	it	pl
 80073c0:	eba9 0101 	subpl.w	r1, r9, r1
 80073c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073c8:	f04f 0900 	mov.w	r9, #0
 80073cc:	bf58      	it	pl
 80073ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073d2:	6022      	str	r2, [r4, #0]
 80073d4:	e789      	b.n	80072ea <_scanf_float+0x196>
 80073d6:	f04f 0a03 	mov.w	sl, #3
 80073da:	e786      	b.n	80072ea <_scanf_float+0x196>
 80073dc:	4639      	mov	r1, r7
 80073de:	4640      	mov	r0, r8
 80073e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073e4:	4798      	blx	r3
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f43f aeda 	beq.w	80071a0 <_scanf_float+0x4c>
 80073ec:	e6e5      	b.n	80071ba <_scanf_float+0x66>
 80073ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073f2:	463a      	mov	r2, r7
 80073f4:	4640      	mov	r0, r8
 80073f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073fa:	4798      	blx	r3
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	3b01      	subs	r3, #1
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	e6e7      	b.n	80071d4 <_scanf_float+0x80>
 8007404:	1e6b      	subs	r3, r5, #1
 8007406:	2b06      	cmp	r3, #6
 8007408:	d824      	bhi.n	8007454 <_scanf_float+0x300>
 800740a:	2d02      	cmp	r5, #2
 800740c:	d836      	bhi.n	800747c <_scanf_float+0x328>
 800740e:	9b01      	ldr	r3, [sp, #4]
 8007410:	429e      	cmp	r6, r3
 8007412:	f67f aee3 	bls.w	80071dc <_scanf_float+0x88>
 8007416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800741a:	463a      	mov	r2, r7
 800741c:	4640      	mov	r0, r8
 800741e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007422:	4798      	blx	r3
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	3b01      	subs	r3, #1
 8007428:	6123      	str	r3, [r4, #16]
 800742a:	e7f0      	b.n	800740e <_scanf_float+0x2ba>
 800742c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007430:	463a      	mov	r2, r7
 8007432:	4640      	mov	r0, r8
 8007434:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007438:	4798      	blx	r3
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	3b01      	subs	r3, #1
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007444:	fa5f fa8a 	uxtb.w	sl, sl
 8007448:	f1ba 0f02 	cmp.w	sl, #2
 800744c:	d1ee      	bne.n	800742c <_scanf_float+0x2d8>
 800744e:	3d03      	subs	r5, #3
 8007450:	b2ed      	uxtb	r5, r5
 8007452:	1b76      	subs	r6, r6, r5
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	05da      	lsls	r2, r3, #23
 8007458:	d530      	bpl.n	80074bc <_scanf_float+0x368>
 800745a:	055b      	lsls	r3, r3, #21
 800745c:	d511      	bpl.n	8007482 <_scanf_float+0x32e>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	429e      	cmp	r6, r3
 8007462:	f67f aebb 	bls.w	80071dc <_scanf_float+0x88>
 8007466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800746a:	463a      	mov	r2, r7
 800746c:	4640      	mov	r0, r8
 800746e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007472:	4798      	blx	r3
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	3b01      	subs	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	e7f0      	b.n	800745e <_scanf_float+0x30a>
 800747c:	46aa      	mov	sl, r5
 800747e:	46b3      	mov	fp, r6
 8007480:	e7de      	b.n	8007440 <_scanf_float+0x2ec>
 8007482:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	2965      	cmp	r1, #101	@ 0x65
 800748a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800748e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	d00c      	beq.n	80074b0 <_scanf_float+0x35c>
 8007496:	2945      	cmp	r1, #69	@ 0x45
 8007498:	d00a      	beq.n	80074b0 <_scanf_float+0x35c>
 800749a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800749e:	463a      	mov	r2, r7
 80074a0:	4640      	mov	r0, r8
 80074a2:	4798      	blx	r3
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	1eb5      	subs	r5, r6, #2
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	463a      	mov	r2, r7
 80074b2:	4640      	mov	r0, r8
 80074b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074b8:	4798      	blx	r3
 80074ba:	462e      	mov	r6, r5
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	f012 0210 	ands.w	r2, r2, #16
 80074c2:	d001      	beq.n	80074c8 <_scanf_float+0x374>
 80074c4:	2000      	movs	r0, #0
 80074c6:	e68a      	b.n	80071de <_scanf_float+0x8a>
 80074c8:	7032      	strb	r2, [r6, #0]
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d4:	d11c      	bne.n	8007510 <_scanf_float+0x3bc>
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	454b      	cmp	r3, r9
 80074da:	eba3 0209 	sub.w	r2, r3, r9
 80074de:	d123      	bne.n	8007528 <_scanf_float+0x3d4>
 80074e0:	2200      	movs	r2, #0
 80074e2:	4640      	mov	r0, r8
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	f002 fbfb 	bl	8009ce0 <_strtod_r>
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	6825      	ldr	r5, [r4, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f015 0f02 	tst.w	r5, #2
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	f103 0204 	add.w	r2, r3, #4
 80074fc:	d01f      	beq.n	800753e <_scanf_float+0x3ea>
 80074fe:	9903      	ldr	r1, [sp, #12]
 8007500:	600a      	str	r2, [r1, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	e9c3 6700 	strd	r6, r7, [r3]
 8007508:	68e3      	ldr	r3, [r4, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60e3      	str	r3, [r4, #12]
 800750e:	e7d9      	b.n	80074c4 <_scanf_float+0x370>
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0e4      	beq.n	80074e0 <_scanf_float+0x38c>
 8007516:	9905      	ldr	r1, [sp, #20]
 8007518:	230a      	movs	r3, #10
 800751a:	4640      	mov	r0, r8
 800751c:	3101      	adds	r1, #1
 800751e:	f002 fc5f 	bl	8009de0 <_strtol_r>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	9e05      	ldr	r6, [sp, #20]
 8007526:	1ac2      	subs	r2, r0, r3
 8007528:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800752c:	429e      	cmp	r6, r3
 800752e:	bf28      	it	cs
 8007530:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007534:	4630      	mov	r0, r6
 8007536:	490d      	ldr	r1, [pc, #52]	@ (800756c <_scanf_float+0x418>)
 8007538:	f000 f8de 	bl	80076f8 <siprintf>
 800753c:	e7d0      	b.n	80074e0 <_scanf_float+0x38c>
 800753e:	076d      	lsls	r5, r5, #29
 8007540:	d4dd      	bmi.n	80074fe <_scanf_float+0x3aa>
 8007542:	9d03      	ldr	r5, [sp, #12]
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	681d      	ldr	r5, [r3, #0]
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	f7f9 fa5e 	bl	8000a0c <__aeabi_dcmpun>
 8007550:	b120      	cbz	r0, 800755c <_scanf_float+0x408>
 8007552:	4807      	ldr	r0, [pc, #28]	@ (8007570 <_scanf_float+0x41c>)
 8007554:	f000 f9d0 	bl	80078f8 <nanf>
 8007558:	6028      	str	r0, [r5, #0]
 800755a:	e7d5      	b.n	8007508 <_scanf_float+0x3b4>
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fab2 	bl	8000ac8 <__aeabi_d2f>
 8007564:	e7f8      	b.n	8007558 <_scanf_float+0x404>
 8007566:	f04f 0900 	mov.w	r9, #0
 800756a:	e62d      	b.n	80071c8 <_scanf_float+0x74>
 800756c:	0800b0de 	.word	0x0800b0de
 8007570:	0800b475 	.word	0x0800b475

08007574 <std>:
 8007574:	2300      	movs	r3, #0
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	e9c0 3300 	strd	r3, r3, [r0]
 800757e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007582:	6083      	str	r3, [r0, #8]
 8007584:	8181      	strh	r1, [r0, #12]
 8007586:	6643      	str	r3, [r0, #100]	@ 0x64
 8007588:	81c2      	strh	r2, [r0, #14]
 800758a:	6183      	str	r3, [r0, #24]
 800758c:	4619      	mov	r1, r3
 800758e:	2208      	movs	r2, #8
 8007590:	305c      	adds	r0, #92	@ 0x5c
 8007592:	f000 f914 	bl	80077be <memset>
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <std+0x58>)
 8007598:	6224      	str	r4, [r4, #32]
 800759a:	6263      	str	r3, [r4, #36]	@ 0x24
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <std+0x5c>)
 800759e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <std+0x60>)
 80075a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075a4:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <std+0x64>)
 80075a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80075a8:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <std+0x68>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d006      	beq.n	80075bc <std+0x48>
 80075ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075b2:	4294      	cmp	r4, r2
 80075b4:	d002      	beq.n	80075bc <std+0x48>
 80075b6:	33d0      	adds	r3, #208	@ 0xd0
 80075b8:	429c      	cmp	r4, r3
 80075ba:	d105      	bne.n	80075c8 <std+0x54>
 80075bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f000 b978 	b.w	80078b8 <__retarget_lock_init_recursive>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	08007739 	.word	0x08007739
 80075d0:	0800775b 	.word	0x0800775b
 80075d4:	08007793 	.word	0x08007793
 80075d8:	080077b7 	.word	0x080077b7
 80075dc:	20001c5c 	.word	0x20001c5c

080075e0 <stdio_exit_handler>:
 80075e0:	4a02      	ldr	r2, [pc, #8]	@ (80075ec <stdio_exit_handler+0xc>)
 80075e2:	4903      	ldr	r1, [pc, #12]	@ (80075f0 <stdio_exit_handler+0x10>)
 80075e4:	4803      	ldr	r0, [pc, #12]	@ (80075f4 <stdio_exit_handler+0x14>)
 80075e6:	f000 b869 	b.w	80076bc <_fwalk_sglue>
 80075ea:	bf00      	nop
 80075ec:	20000010 	.word	0x20000010
 80075f0:	0800a195 	.word	0x0800a195
 80075f4:	20000020 	.word	0x20000020

080075f8 <cleanup_stdio>:
 80075f8:	6841      	ldr	r1, [r0, #4]
 80075fa:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <cleanup_stdio+0x34>)
 80075fc:	b510      	push	{r4, lr}
 80075fe:	4299      	cmp	r1, r3
 8007600:	4604      	mov	r4, r0
 8007602:	d001      	beq.n	8007608 <cleanup_stdio+0x10>
 8007604:	f002 fdc6 	bl	800a194 <_fflush_r>
 8007608:	68a1      	ldr	r1, [r4, #8]
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <cleanup_stdio+0x38>)
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <cleanup_stdio+0x1e>
 8007610:	4620      	mov	r0, r4
 8007612:	f002 fdbf 	bl	800a194 <_fflush_r>
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <cleanup_stdio+0x3c>)
 800761a:	4299      	cmp	r1, r3
 800761c:	d004      	beq.n	8007628 <cleanup_stdio+0x30>
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f002 bdb6 	b.w	800a194 <_fflush_r>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	20001c5c 	.word	0x20001c5c
 8007630:	20001cc4 	.word	0x20001cc4
 8007634:	20001d2c 	.word	0x20001d2c

08007638 <global_stdio_init.part.0>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <global_stdio_init.part.0+0x30>)
 800763c:	4c0b      	ldr	r4, [pc, #44]	@ (800766c <global_stdio_init.part.0+0x34>)
 800763e:	4a0c      	ldr	r2, [pc, #48]	@ (8007670 <global_stdio_init.part.0+0x38>)
 8007640:	4620      	mov	r0, r4
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2104      	movs	r1, #4
 8007646:	2200      	movs	r2, #0
 8007648:	f7ff ff94 	bl	8007574 <std>
 800764c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007650:	2201      	movs	r2, #1
 8007652:	2109      	movs	r1, #9
 8007654:	f7ff ff8e 	bl	8007574 <std>
 8007658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800765c:	2202      	movs	r2, #2
 800765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007662:	2112      	movs	r1, #18
 8007664:	f7ff bf86 	b.w	8007574 <std>
 8007668:	20001d94 	.word	0x20001d94
 800766c:	20001c5c 	.word	0x20001c5c
 8007670:	080075e1 	.word	0x080075e1

08007674 <__sfp_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__sfp_lock_acquire+0x8>)
 8007676:	f000 b920 	b.w	80078ba <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	20001d9d 	.word	0x20001d9d

08007680 <__sfp_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	@ (8007688 <__sfp_lock_release+0x8>)
 8007682:	f000 b91b 	b.w	80078bc <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	20001d9d 	.word	0x20001d9d

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sfp_lock_acquire>
 8007694:	6a23      	ldr	r3, [r4, #32]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sfp_lock_release>
 80076a0:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <__sinit+0x28>)
 80076a2:	6223      	str	r3, [r4, #32]
 80076a4:	4b04      	ldr	r3, [pc, #16]	@ (80076b8 <__sinit+0x2c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f5      	bne.n	8007698 <__sinit+0xc>
 80076ac:	f7ff ffc4 	bl	8007638 <global_stdio_init.part.0>
 80076b0:	e7f2      	b.n	8007698 <__sinit+0xc>
 80076b2:	bf00      	nop
 80076b4:	080075f9 	.word	0x080075f9
 80076b8:	20001d94 	.word	0x20001d94

080076bc <_fwalk_sglue>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	4607      	mov	r7, r0
 80076c2:	4688      	mov	r8, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	2600      	movs	r6, #0
 80076c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076cc:	f1b9 0901 	subs.w	r9, r9, #1
 80076d0:	d505      	bpl.n	80076de <_fwalk_sglue+0x22>
 80076d2:	6824      	ldr	r4, [r4, #0]
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d1f7      	bne.n	80076c8 <_fwalk_sglue+0xc>
 80076d8:	4630      	mov	r0, r6
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d907      	bls.n	80076f4 <_fwalk_sglue+0x38>
 80076e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e8:	3301      	adds	r3, #1
 80076ea:	d003      	beq.n	80076f4 <_fwalk_sglue+0x38>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4638      	mov	r0, r7
 80076f0:	47c0      	blx	r8
 80076f2:	4306      	orrs	r6, r0
 80076f4:	3568      	adds	r5, #104	@ 0x68
 80076f6:	e7e9      	b.n	80076cc <_fwalk_sglue+0x10>

080076f8 <siprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076fe:	b500      	push	{lr}
 8007700:	b09c      	sub	sp, #112	@ 0x70
 8007702:	ab1d      	add	r3, sp, #116	@ 0x74
 8007704:	9002      	str	r0, [sp, #8]
 8007706:	9006      	str	r0, [sp, #24]
 8007708:	9107      	str	r1, [sp, #28]
 800770a:	9104      	str	r1, [sp, #16]
 800770c:	4808      	ldr	r0, [pc, #32]	@ (8007730 <siprintf+0x38>)
 800770e:	4909      	ldr	r1, [pc, #36]	@ (8007734 <siprintf+0x3c>)
 8007710:	f853 2b04 	ldr.w	r2, [r3], #4
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	a902      	add	r1, sp, #8
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	f002 fbbe 	bl	8009e9c <_svfiprintf_r>
 8007720:	2200      	movs	r2, #0
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	b01c      	add	sp, #112	@ 0x70
 8007728:	f85d eb04 	ldr.w	lr, [sp], #4
 800772c:	b003      	add	sp, #12
 800772e:	4770      	bx	lr
 8007730:	2000001c 	.word	0x2000001c
 8007734:	ffff0208 	.word	0xffff0208

08007738 <__sread>:
 8007738:	b510      	push	{r4, lr}
 800773a:	460c      	mov	r4, r1
 800773c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007740:	f000 f86c 	bl	800781c <_read_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	bfab      	itete	ge
 8007748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800774a:	89a3      	ldrhlt	r3, [r4, #12]
 800774c:	181b      	addge	r3, r3, r0
 800774e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007752:	bfac      	ite	ge
 8007754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007756:	81a3      	strhlt	r3, [r4, #12]
 8007758:	bd10      	pop	{r4, pc}

0800775a <__swrite>:
 800775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	461f      	mov	r7, r3
 8007760:	898b      	ldrh	r3, [r1, #12]
 8007762:	4605      	mov	r5, r0
 8007764:	05db      	lsls	r3, r3, #23
 8007766:	460c      	mov	r4, r1
 8007768:	4616      	mov	r6, r2
 800776a:	d505      	bpl.n	8007778 <__swrite+0x1e>
 800776c:	2302      	movs	r3, #2
 800776e:	2200      	movs	r2, #0
 8007770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007774:	f000 f840 	bl	80077f8 <_lseek_r>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	4632      	mov	r2, r6
 800777c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	4628      	mov	r0, r5
 8007784:	463b      	mov	r3, r7
 8007786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	f000 b857 	b.w	8007840 <_write_r>

08007792 <__sseek>:
 8007792:	b510      	push	{r4, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779a:	f000 f82d 	bl	80077f8 <_lseek_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	bf15      	itete	ne
 80077a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ae:	81a3      	strheq	r3, [r4, #12]
 80077b0:	bf18      	it	ne
 80077b2:	81a3      	strhne	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__sclose>:
 80077b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ba:	f000 b80d 	b.w	80077d8 <_close_r>

080077be <memset>:
 80077be:	4603      	mov	r3, r0
 80077c0:	4402      	add	r2, r0
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d100      	bne.n	80077c8 <memset+0xa>
 80077c6:	4770      	bx	lr
 80077c8:	f803 1b01 	strb.w	r1, [r3], #1
 80077cc:	e7f9      	b.n	80077c2 <memset+0x4>
	...

080077d0 <_localeconv_r>:
 80077d0:	4800      	ldr	r0, [pc, #0]	@ (80077d4 <_localeconv_r+0x4>)
 80077d2:	4770      	bx	lr
 80077d4:	2000015c 	.word	0x2000015c

080077d8 <_close_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	2300      	movs	r3, #0
 80077dc:	4d05      	ldr	r5, [pc, #20]	@ (80077f4 <_close_r+0x1c>)
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7f9 ff71 	bl	80016ca <_close>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_close_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_close_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	20001d98 	.word	0x20001d98

080077f8 <_lseek_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	2200      	movs	r2, #0
 8007802:	4d05      	ldr	r5, [pc, #20]	@ (8007818 <_lseek_r+0x20>)
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7f9 ff83 	bl	8001712 <_lseek>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_lseek_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_lseek_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20001d98 	.word	0x20001d98

0800781c <_read_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	2200      	movs	r2, #0
 8007826:	4d05      	ldr	r5, [pc, #20]	@ (800783c <_read_r+0x20>)
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7f9 ff14 	bl	8001658 <_read>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_read_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_read_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20001d98 	.word	0x20001d98

08007840 <_write_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	2200      	movs	r2, #0
 800784a:	4d05      	ldr	r5, [pc, #20]	@ (8007860 <_write_r+0x20>)
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f7f9 ff1f 	bl	8001692 <_write>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_write_r+0x1e>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_write_r+0x1e>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20001d98 	.word	0x20001d98

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	@ (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	2000001c 	.word	0x2000001c

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	2600      	movs	r6, #0
 8007874:	4d0c      	ldr	r5, [pc, #48]	@ (80078a8 <__libc_init_array+0x38>)
 8007876:	4c0d      	ldr	r4, [pc, #52]	@ (80078ac <__libc_init_array+0x3c>)
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	f003 fb66 	bl	800af50 <_init>
 8007884:	2600      	movs	r6, #0
 8007886:	4d0a      	ldr	r5, [pc, #40]	@ (80078b0 <__libc_init_array+0x40>)
 8007888:	4c0a      	ldr	r4, [pc, #40]	@ (80078b4 <__libc_init_array+0x44>)
 800788a:	1b64      	subs	r4, r4, r5
 800788c:	10a4      	asrs	r4, r4, #2
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	0800b4e0 	.word	0x0800b4e0
 80078ac:	0800b4e0 	.word	0x0800b4e0
 80078b0:	0800b4e0 	.word	0x0800b4e0
 80078b4:	0800b4e4 	.word	0x0800b4e4

080078b8 <__retarget_lock_init_recursive>:
 80078b8:	4770      	bx	lr

080078ba <__retarget_lock_acquire_recursive>:
 80078ba:	4770      	bx	lr

080078bc <__retarget_lock_release_recursive>:
 80078bc:	4770      	bx	lr

080078be <memchr>:
 80078be:	4603      	mov	r3, r0
 80078c0:	b510      	push	{r4, lr}
 80078c2:	b2c9      	uxtb	r1, r1
 80078c4:	4402      	add	r2, r0
 80078c6:	4293      	cmp	r3, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	d101      	bne.n	80078d0 <memchr+0x12>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e003      	b.n	80078d8 <memchr+0x1a>
 80078d0:	7804      	ldrb	r4, [r0, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	428c      	cmp	r4, r1
 80078d6:	d1f6      	bne.n	80078c6 <memchr+0x8>
 80078d8:	bd10      	pop	{r4, pc}

080078da <memcpy>:
 80078da:	440a      	add	r2, r1
 80078dc:	4291      	cmp	r1, r2
 80078de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80078e2:	d100      	bne.n	80078e6 <memcpy+0xc>
 80078e4:	4770      	bx	lr
 80078e6:	b510      	push	{r4, lr}
 80078e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ec:	4291      	cmp	r1, r2
 80078ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078f2:	d1f9      	bne.n	80078e8 <memcpy+0xe>
 80078f4:	bd10      	pop	{r4, pc}
	...

080078f8 <nanf>:
 80078f8:	4800      	ldr	r0, [pc, #0]	@ (80078fc <nanf+0x4>)
 80078fa:	4770      	bx	lr
 80078fc:	7fc00000 	.word	0x7fc00000

08007900 <quorem>:
 8007900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	6903      	ldr	r3, [r0, #16]
 8007906:	690c      	ldr	r4, [r1, #16]
 8007908:	4607      	mov	r7, r0
 800790a:	42a3      	cmp	r3, r4
 800790c:	db7e      	blt.n	8007a0c <quorem+0x10c>
 800790e:	3c01      	subs	r4, #1
 8007910:	00a3      	lsls	r3, r4, #2
 8007912:	f100 0514 	add.w	r5, r0, #20
 8007916:	f101 0814 	add.w	r8, r1, #20
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800792a:	3301      	adds	r3, #1
 800792c:	429a      	cmp	r2, r3
 800792e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007932:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007936:	d32e      	bcc.n	8007996 <quorem+0x96>
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	46c4      	mov	ip, r8
 800793e:	46ae      	mov	lr, r5
 8007940:	46d3      	mov	fp, sl
 8007942:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007946:	b298      	uxth	r0, r3
 8007948:	fb06 a000 	mla	r0, r6, r0, sl
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	0c02      	lsrs	r2, r0, #16
 8007950:	fb06 2303 	mla	r3, r6, r3, r2
 8007954:	f8de 2000 	ldr.w	r2, [lr]
 8007958:	b280      	uxth	r0, r0
 800795a:	b292      	uxth	r2, r2
 800795c:	1a12      	subs	r2, r2, r0
 800795e:	445a      	add	r2, fp
 8007960:	f8de 0000 	ldr.w	r0, [lr]
 8007964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007968:	b29b      	uxth	r3, r3
 800796a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800796e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007972:	b292      	uxth	r2, r2
 8007974:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007978:	45e1      	cmp	r9, ip
 800797a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800797e:	f84e 2b04 	str.w	r2, [lr], #4
 8007982:	d2de      	bcs.n	8007942 <quorem+0x42>
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	58eb      	ldr	r3, [r5, r3]
 8007988:	b92b      	cbnz	r3, 8007996 <quorem+0x96>
 800798a:	9b01      	ldr	r3, [sp, #4]
 800798c:	3b04      	subs	r3, #4
 800798e:	429d      	cmp	r5, r3
 8007990:	461a      	mov	r2, r3
 8007992:	d32f      	bcc.n	80079f4 <quorem+0xf4>
 8007994:	613c      	str	r4, [r7, #16]
 8007996:	4638      	mov	r0, r7
 8007998:	f001 f9c2 	bl	8008d20 <__mcmp>
 800799c:	2800      	cmp	r0, #0
 800799e:	db25      	blt.n	80079ec <quorem+0xec>
 80079a0:	4629      	mov	r1, r5
 80079a2:	2000      	movs	r0, #0
 80079a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079a8:	f8d1 c000 	ldr.w	ip, [r1]
 80079ac:	fa1f fe82 	uxth.w	lr, r2
 80079b0:	fa1f f38c 	uxth.w	r3, ip
 80079b4:	eba3 030e 	sub.w	r3, r3, lr
 80079b8:	4403      	add	r3, r0
 80079ba:	0c12      	lsrs	r2, r2, #16
 80079bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ca:	45c1      	cmp	r9, r8
 80079cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079d0:	f841 3b04 	str.w	r3, [r1], #4
 80079d4:	d2e6      	bcs.n	80079a4 <quorem+0xa4>
 80079d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079de:	b922      	cbnz	r2, 80079ea <quorem+0xea>
 80079e0:	3b04      	subs	r3, #4
 80079e2:	429d      	cmp	r5, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	d30b      	bcc.n	8007a00 <quorem+0x100>
 80079e8:	613c      	str	r4, [r7, #16]
 80079ea:	3601      	adds	r6, #1
 80079ec:	4630      	mov	r0, r6
 80079ee:	b003      	add	sp, #12
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	3b04      	subs	r3, #4
 80079f8:	2a00      	cmp	r2, #0
 80079fa:	d1cb      	bne.n	8007994 <quorem+0x94>
 80079fc:	3c01      	subs	r4, #1
 80079fe:	e7c6      	b.n	800798e <quorem+0x8e>
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	3b04      	subs	r3, #4
 8007a04:	2a00      	cmp	r2, #0
 8007a06:	d1ef      	bne.n	80079e8 <quorem+0xe8>
 8007a08:	3c01      	subs	r4, #1
 8007a0a:	e7ea      	b.n	80079e2 <quorem+0xe2>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e7ee      	b.n	80079ee <quorem+0xee>

08007a10 <_dtoa_r>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4614      	mov	r4, r2
 8007a16:	461d      	mov	r5, r3
 8007a18:	69c7      	ldr	r7, [r0, #28]
 8007a1a:	b097      	sub	sp, #92	@ 0x5c
 8007a1c:	4683      	mov	fp, r0
 8007a1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a24:	b97f      	cbnz	r7, 8007a46 <_dtoa_r+0x36>
 8007a26:	2010      	movs	r0, #16
 8007a28:	f000 fe02 	bl	8008630 <malloc>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a32:	b920      	cbnz	r0, 8007a3e <_dtoa_r+0x2e>
 8007a34:	21ef      	movs	r1, #239	@ 0xef
 8007a36:	4ba8      	ldr	r3, [pc, #672]	@ (8007cd8 <_dtoa_r+0x2c8>)
 8007a38:	48a8      	ldr	r0, [pc, #672]	@ (8007cdc <_dtoa_r+0x2cc>)
 8007a3a:	f002 fc15 	bl	800a268 <__assert_func>
 8007a3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a42:	6007      	str	r7, [r0, #0]
 8007a44:	60c7      	str	r7, [r0, #12]
 8007a46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a4a:	6819      	ldr	r1, [r3, #0]
 8007a4c:	b159      	cbz	r1, 8007a66 <_dtoa_r+0x56>
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	2301      	movs	r3, #1
 8007a52:	4093      	lsls	r3, r2
 8007a54:	604a      	str	r2, [r1, #4]
 8007a56:	608b      	str	r3, [r1, #8]
 8007a58:	4658      	mov	r0, fp
 8007a5a:	f000 fedf 	bl	800881c <_Bfree>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	1e2b      	subs	r3, r5, #0
 8007a68:	bfaf      	iteee	ge
 8007a6a:	2300      	movge	r3, #0
 8007a6c:	2201      	movlt	r2, #1
 8007a6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a72:	9303      	strlt	r3, [sp, #12]
 8007a74:	bfa8      	it	ge
 8007a76:	6033      	strge	r3, [r6, #0]
 8007a78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a7c:	4b98      	ldr	r3, [pc, #608]	@ (8007ce0 <_dtoa_r+0x2d0>)
 8007a7e:	bfb8      	it	lt
 8007a80:	6032      	strlt	r2, [r6, #0]
 8007a82:	ea33 0308 	bics.w	r3, r3, r8
 8007a86:	d112      	bne.n	8007aae <_dtoa_r+0x9e>
 8007a88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a94:	4323      	orrs	r3, r4
 8007a96:	f000 8550 	beq.w	800853a <_dtoa_r+0xb2a>
 8007a9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007ce4 <_dtoa_r+0x2d4>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8552 	beq.w	800854a <_dtoa_r+0xb3a>
 8007aa6:	f10a 0303 	add.w	r3, sl, #3
 8007aaa:	f000 bd4c 	b.w	8008546 <_dtoa_r+0xb36>
 8007aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ab2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	f7f8 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 8007ac2:	4607      	mov	r7, r0
 8007ac4:	b158      	cbz	r0, 8007ade <_dtoa_r+0xce>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ace:	b113      	cbz	r3, 8007ad6 <_dtoa_r+0xc6>
 8007ad0:	4b85      	ldr	r3, [pc, #532]	@ (8007ce8 <_dtoa_r+0x2d8>)
 8007ad2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007cec <_dtoa_r+0x2dc>
 8007ada:	f000 bd36 	b.w	800854a <_dtoa_r+0xb3a>
 8007ade:	ab14      	add	r3, sp, #80	@ 0x50
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	ab15      	add	r3, sp, #84	@ 0x54
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007aec:	f001 fa30 	bl	8008f50 <__d2b>
 8007af0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007af4:	4681      	mov	r9, r0
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d077      	beq.n	8007bea <_dtoa_r+0x1da>
 8007afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b10:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b12:	4619      	mov	r1, r3
 8007b14:	2200      	movs	r2, #0
 8007b16:	4b76      	ldr	r3, [pc, #472]	@ (8007cf0 <_dtoa_r+0x2e0>)
 8007b18:	f7f8 fb26 	bl	8000168 <__aeabi_dsub>
 8007b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8007cc0 <_dtoa_r+0x2b0>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f7f8 fcd9 	bl	80004d8 <__aeabi_dmul>
 8007b26:	a368      	add	r3, pc, #416	@ (adr r3, 8007cc8 <_dtoa_r+0x2b8>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f7f8 fb1e 	bl	800016c <__adddf3>
 8007b30:	4604      	mov	r4, r0
 8007b32:	4630      	mov	r0, r6
 8007b34:	460d      	mov	r5, r1
 8007b36:	f7f8 fc65 	bl	8000404 <__aeabi_i2d>
 8007b3a:	a365      	add	r3, pc, #404	@ (adr r3, 8007cd0 <_dtoa_r+0x2c0>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fcca 	bl	80004d8 <__aeabi_dmul>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 fb0e 	bl	800016c <__adddf3>
 8007b50:	4604      	mov	r4, r0
 8007b52:	460d      	mov	r5, r1
 8007b54:	f7f8 ff70 	bl	8000a38 <__aeabi_d2iz>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 ff2b 	bl	80009bc <__aeabi_dcmplt>
 8007b66:	b140      	cbz	r0, 8007b7a <_dtoa_r+0x16a>
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7f8 fc4b 	bl	8000404 <__aeabi_i2d>
 8007b6e:	4622      	mov	r2, r4
 8007b70:	462b      	mov	r3, r5
 8007b72:	f7f8 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8007b76:	b900      	cbnz	r0, 8007b7a <_dtoa_r+0x16a>
 8007b78:	3f01      	subs	r7, #1
 8007b7a:	2f16      	cmp	r7, #22
 8007b7c:	d853      	bhi.n	8007c26 <_dtoa_r+0x216>
 8007b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b82:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf4 <_dtoa_r+0x2e4>)
 8007b84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 ff16 	bl	80009bc <__aeabi_dcmplt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d04a      	beq.n	8007c2a <_dtoa_r+0x21a>
 8007b94:	2300      	movs	r3, #0
 8007b96:	3f01      	subs	r7, #1
 8007b98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b9c:	1b9b      	subs	r3, r3, r6
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	bf46      	itte	mi
 8007ba2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ba6:	2300      	movmi	r3, #0
 8007ba8:	f04f 0800 	movpl.w	r8, #0
 8007bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bae:	bf48      	it	mi
 8007bb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007bb2:	2f00      	cmp	r7, #0
 8007bb4:	db3b      	blt.n	8007c2e <_dtoa_r+0x21e>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007bba:	443b      	add	r3, r7
 8007bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d866      	bhi.n	8007c96 <_dtoa_r+0x286>
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	bfc4      	itt	gt
 8007bcc:	3b04      	subgt	r3, #4
 8007bce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007bd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bd2:	bfc8      	it	gt
 8007bd4:	2400      	movgt	r4, #0
 8007bd6:	f1a3 0302 	sub.w	r3, r3, #2
 8007bda:	bfd8      	it	le
 8007bdc:	2401      	movle	r4, #1
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d864      	bhi.n	8007cac <_dtoa_r+0x29c>
 8007be2:	e8df f003 	tbb	[pc, r3]
 8007be6:	382b      	.short	0x382b
 8007be8:	5636      	.short	0x5636
 8007bea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bee:	441e      	add	r6, r3
 8007bf0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	bfc1      	itttt	gt
 8007bf8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c08:	bfd6      	itet	le
 8007c0a:	f1c3 0320 	rsble	r3, r3, #32
 8007c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c12:	fa04 f003 	lslle.w	r0, r4, r3
 8007c16:	f7f8 fbe5 	bl	80003e4 <__aeabi_ui2d>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c20:	3e01      	subs	r6, #1
 8007c22:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c24:	e775      	b.n	8007b12 <_dtoa_r+0x102>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7b6      	b.n	8007b98 <_dtoa_r+0x188>
 8007c2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c2c:	e7b5      	b.n	8007b9a <_dtoa_r+0x18a>
 8007c2e:	427b      	negs	r3, r7
 8007c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c32:	2300      	movs	r3, #0
 8007c34:	eba8 0807 	sub.w	r8, r8, r7
 8007c38:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c3a:	e7c2      	b.n	8007bc2 <_dtoa_r+0x1b2>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc35      	bgt.n	8007cb2 <_dtoa_r+0x2a2>
 8007c46:	2301      	movs	r3, #1
 8007c48:	461a      	mov	r2, r3
 8007c4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c50:	e00b      	b.n	8007c6a <_dtoa_r+0x25a>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e7f3      	b.n	8007c3e <_dtoa_r+0x22e>
 8007c56:	2300      	movs	r3, #0
 8007c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	9308      	str	r3, [sp, #32]
 8007c60:	3301      	adds	r3, #1
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	9307      	str	r3, [sp, #28]
 8007c66:	bfb8      	it	lt
 8007c68:	2301      	movlt	r3, #1
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c72:	f102 0514 	add.w	r5, r2, #20
 8007c76:	429d      	cmp	r5, r3
 8007c78:	d91f      	bls.n	8007cba <_dtoa_r+0x2aa>
 8007c7a:	6041      	str	r1, [r0, #4]
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	f000 fd8d 	bl	800879c <_Balloc>
 8007c82:	4682      	mov	sl, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d139      	bne.n	8007cfc <_dtoa_r+0x2ec>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <_dtoa_r+0x2e8>)
 8007c90:	e6d2      	b.n	8007a38 <_dtoa_r+0x28>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e7e0      	b.n	8007c58 <_dtoa_r+0x248>
 8007c96:	2401      	movs	r4, #1
 8007c98:	2300      	movs	r3, #0
 8007c9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ca8:	2312      	movs	r3, #18
 8007caa:	e7d0      	b.n	8007c4e <_dtoa_r+0x23e>
 8007cac:	2301      	movs	r3, #1
 8007cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cb0:	e7f5      	b.n	8007c9e <_dtoa_r+0x28e>
 8007cb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cb8:	e7d7      	b.n	8007c6a <_dtoa_r+0x25a>
 8007cba:	3101      	adds	r1, #1
 8007cbc:	0052      	lsls	r2, r2, #1
 8007cbe:	e7d8      	b.n	8007c72 <_dtoa_r+0x262>
 8007cc0:	636f4361 	.word	0x636f4361
 8007cc4:	3fd287a7 	.word	0x3fd287a7
 8007cc8:	8b60c8b3 	.word	0x8b60c8b3
 8007ccc:	3fc68a28 	.word	0x3fc68a28
 8007cd0:	509f79fb 	.word	0x509f79fb
 8007cd4:	3fd34413 	.word	0x3fd34413
 8007cd8:	0800b0f0 	.word	0x0800b0f0
 8007cdc:	0800b107 	.word	0x0800b107
 8007ce0:	7ff00000 	.word	0x7ff00000
 8007ce4:	0800b0ec 	.word	0x0800b0ec
 8007ce8:	0800b0bb 	.word	0x0800b0bb
 8007cec:	0800b0ba 	.word	0x0800b0ba
 8007cf0:	3ff80000 	.word	0x3ff80000
 8007cf4:	0800b200 	.word	0x0800b200
 8007cf8:	0800b15f 	.word	0x0800b15f
 8007cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d00:	6018      	str	r0, [r3, #0]
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	2b0e      	cmp	r3, #14
 8007d06:	f200 80a4 	bhi.w	8007e52 <_dtoa_r+0x442>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	f000 80a1 	beq.w	8007e52 <_dtoa_r+0x442>
 8007d10:	2f00      	cmp	r7, #0
 8007d12:	dd33      	ble.n	8007d7c <_dtoa_r+0x36c>
 8007d14:	4b86      	ldr	r3, [pc, #536]	@ (8007f30 <_dtoa_r+0x520>)
 8007d16:	f007 020f 	and.w	r2, r7, #15
 8007d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d1e:	05f8      	lsls	r0, r7, #23
 8007d20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d2c:	d516      	bpl.n	8007d5c <_dtoa_r+0x34c>
 8007d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d32:	4b80      	ldr	r3, [pc, #512]	@ (8007f34 <_dtoa_r+0x524>)
 8007d34:	2603      	movs	r6, #3
 8007d36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d3a:	f7f8 fcf7 	bl	800072c <__aeabi_ddiv>
 8007d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d42:	f004 040f 	and.w	r4, r4, #15
 8007d46:	4d7b      	ldr	r5, [pc, #492]	@ (8007f34 <_dtoa_r+0x524>)
 8007d48:	b954      	cbnz	r4, 8007d60 <_dtoa_r+0x350>
 8007d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d52:	f7f8 fceb 	bl	800072c <__aeabi_ddiv>
 8007d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d5a:	e028      	b.n	8007dae <_dtoa_r+0x39e>
 8007d5c:	2602      	movs	r6, #2
 8007d5e:	e7f2      	b.n	8007d46 <_dtoa_r+0x336>
 8007d60:	07e1      	lsls	r1, r4, #31
 8007d62:	d508      	bpl.n	8007d76 <_dtoa_r+0x366>
 8007d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d6c:	f7f8 fbb4 	bl	80004d8 <__aeabi_dmul>
 8007d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d74:	3601      	adds	r6, #1
 8007d76:	1064      	asrs	r4, r4, #1
 8007d78:	3508      	adds	r5, #8
 8007d7a:	e7e5      	b.n	8007d48 <_dtoa_r+0x338>
 8007d7c:	f000 80d2 	beq.w	8007f24 <_dtoa_r+0x514>
 8007d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d84:	427c      	negs	r4, r7
 8007d86:	4b6a      	ldr	r3, [pc, #424]	@ (8007f30 <_dtoa_r+0x520>)
 8007d88:	f004 020f 	and.w	r2, r4, #15
 8007d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f7f8 fba0 	bl	80004d8 <__aeabi_dmul>
 8007d98:	2602      	movs	r6, #2
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da0:	4d64      	ldr	r5, [pc, #400]	@ (8007f34 <_dtoa_r+0x524>)
 8007da2:	1124      	asrs	r4, r4, #4
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	f040 80b2 	bne.w	8007f0e <_dtoa_r+0x4fe>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1d3      	bne.n	8007d56 <_dtoa_r+0x346>
 8007dae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80b7 	beq.w	8007f28 <_dtoa_r+0x518>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f38 <_dtoa_r+0x528>)
 8007dc2:	f7f8 fdfb 	bl	80009bc <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f000 80ae 	beq.w	8007f28 <_dtoa_r+0x518>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80aa 	beq.w	8007f28 <_dtoa_r+0x518>
 8007dd4:	9b08      	ldr	r3, [sp, #32]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dd37      	ble.n	8007e4a <_dtoa_r+0x43a>
 8007dda:	1e7b      	subs	r3, r7, #1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	2200      	movs	r2, #0
 8007de2:	4629      	mov	r1, r5
 8007de4:	4b55      	ldr	r3, [pc, #340]	@ (8007f3c <_dtoa_r+0x52c>)
 8007de6:	f7f8 fb77 	bl	80004d8 <__aeabi_dmul>
 8007dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dee:	9c08      	ldr	r4, [sp, #32]
 8007df0:	3601      	adds	r6, #1
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7f8 fb06 	bl	8000404 <__aeabi_i2d>
 8007df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfc:	f7f8 fb6c 	bl	80004d8 <__aeabi_dmul>
 8007e00:	2200      	movs	r2, #0
 8007e02:	4b4f      	ldr	r3, [pc, #316]	@ (8007f40 <_dtoa_r+0x530>)
 8007e04:	f7f8 f9b2 	bl	800016c <__adddf3>
 8007e08:	4605      	mov	r5, r0
 8007e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	f040 809a 	bne.w	8007f48 <_dtoa_r+0x538>
 8007e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f44 <_dtoa_r+0x534>)
 8007e1c:	f7f8 f9a4 	bl	8000168 <__aeabi_dsub>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4633      	mov	r3, r6
 8007e2c:	f7f8 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f040 828e 	bne.w	8008352 <_dtoa_r+0x942>
 8007e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e40:	f7f8 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f040 8127 	bne.w	8008098 <_dtoa_r+0x688>
 8007e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f2c0 8163 	blt.w	8008120 <_dtoa_r+0x710>
 8007e5a:	2f0e      	cmp	r7, #14
 8007e5c:	f300 8160 	bgt.w	8008120 <_dtoa_r+0x710>
 8007e60:	4b33      	ldr	r3, [pc, #204]	@ (8007f30 <_dtoa_r+0x520>)
 8007e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da03      	bge.n	8007e7c <_dtoa_r+0x46c>
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f340 8100 	ble.w	800807c <_dtoa_r+0x66c>
 8007e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e80:	4656      	mov	r6, sl
 8007e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 fc4f 	bl	800072c <__aeabi_ddiv>
 8007e8e:	f7f8 fdd3 	bl	8000a38 <__aeabi_d2iz>
 8007e92:	4680      	mov	r8, r0
 8007e94:	f7f8 fab6 	bl	8000404 <__aeabi_i2d>
 8007e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e9c:	f7f8 fb1c 	bl	80004d8 <__aeabi_dmul>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 f95e 	bl	8000168 <__aeabi_dsub>
 8007eac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007eb0:	9d07      	ldr	r5, [sp, #28]
 8007eb2:	f806 4b01 	strb.w	r4, [r6], #1
 8007eb6:	eba6 040a 	sub.w	r4, r6, sl
 8007eba:	42a5      	cmp	r5, r4
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	f040 8116 	bne.w	80080f0 <_dtoa_r+0x6e0>
 8007ec4:	f7f8 f952 	bl	800016c <__adddf3>
 8007ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
 8007ed0:	f7f8 fd92 	bl	80009f8 <__aeabi_dcmpgt>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f040 80f8 	bne.w	80080ca <_dtoa_r+0x6ba>
 8007eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8007ee6:	b118      	cbz	r0, 8007ef0 <_dtoa_r+0x4e0>
 8007ee8:	f018 0f01 	tst.w	r8, #1
 8007eec:	f040 80ed 	bne.w	80080ca <_dtoa_r+0x6ba>
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	f000 fc92 	bl	800881c <_Bfree>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	7033      	strb	r3, [r6, #0]
 8007efc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007efe:	3701      	adds	r7, #1
 8007f00:	601f      	str	r7, [r3, #0]
 8007f02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8320 	beq.w	800854a <_dtoa_r+0xb3a>
 8007f0a:	601e      	str	r6, [r3, #0]
 8007f0c:	e31d      	b.n	800854a <_dtoa_r+0xb3a>
 8007f0e:	07e2      	lsls	r2, r4, #31
 8007f10:	d505      	bpl.n	8007f1e <_dtoa_r+0x50e>
 8007f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f16:	f7f8 fadf 	bl	80004d8 <__aeabi_dmul>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	1064      	asrs	r4, r4, #1
 8007f20:	3508      	adds	r5, #8
 8007f22:	e73f      	b.n	8007da4 <_dtoa_r+0x394>
 8007f24:	2602      	movs	r6, #2
 8007f26:	e742      	b.n	8007dae <_dtoa_r+0x39e>
 8007f28:	9c07      	ldr	r4, [sp, #28]
 8007f2a:	9704      	str	r7, [sp, #16]
 8007f2c:	e761      	b.n	8007df2 <_dtoa_r+0x3e2>
 8007f2e:	bf00      	nop
 8007f30:	0800b200 	.word	0x0800b200
 8007f34:	0800b1d8 	.word	0x0800b1d8
 8007f38:	3ff00000 	.word	0x3ff00000
 8007f3c:	40240000 	.word	0x40240000
 8007f40:	401c0000 	.word	0x401c0000
 8007f44:	40140000 	.word	0x40140000
 8007f48:	4b70      	ldr	r3, [pc, #448]	@ (800810c <_dtoa_r+0x6fc>)
 8007f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f54:	4454      	add	r4, sl
 8007f56:	2900      	cmp	r1, #0
 8007f58:	d045      	beq.n	8007fe6 <_dtoa_r+0x5d6>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	496c      	ldr	r1, [pc, #432]	@ (8008110 <_dtoa_r+0x700>)
 8007f5e:	f7f8 fbe5 	bl	800072c <__aeabi_ddiv>
 8007f62:	4633      	mov	r3, r6
 8007f64:	462a      	mov	r2, r5
 8007f66:	f7f8 f8ff 	bl	8000168 <__aeabi_dsub>
 8007f6a:	4656      	mov	r6, sl
 8007f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f74:	f7f8 fd60 	bl	8000a38 <__aeabi_d2iz>
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f7f8 fa43 	bl	8000404 <__aeabi_i2d>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f86:	f7f8 f8ef 	bl	8000168 <__aeabi_dsub>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	3530      	adds	r5, #48	@ 0x30
 8007f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f98:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9c:	f7f8 fd0e 	bl	80009bc <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d163      	bne.n	800806c <_dtoa_r+0x65c>
 8007fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	495a      	ldr	r1, [pc, #360]	@ (8008114 <_dtoa_r+0x704>)
 8007fac:	f7f8 f8dc 	bl	8000168 <__aeabi_dsub>
 8007fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fb4:	f7f8 fd02 	bl	80009bc <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f040 8087 	bne.w	80080cc <_dtoa_r+0x6bc>
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	f43f af43 	beq.w	8007e4a <_dtoa_r+0x43a>
 8007fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4b53      	ldr	r3, [pc, #332]	@ (8008118 <_dtoa_r+0x708>)
 8007fcc:	f7f8 fa84 	bl	80004d8 <__aeabi_dmul>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fda:	4b4f      	ldr	r3, [pc, #316]	@ (8008118 <_dtoa_r+0x708>)
 8007fdc:	f7f8 fa7c 	bl	80004d8 <__aeabi_dmul>
 8007fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe4:	e7c4      	b.n	8007f70 <_dtoa_r+0x560>
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7f8 fa75 	bl	80004d8 <__aeabi_dmul>
 8007fee:	4656      	mov	r6, sl
 8007ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ff4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffa:	f7f8 fd1d 	bl	8000a38 <__aeabi_d2iz>
 8007ffe:	4605      	mov	r5, r0
 8008000:	f7f8 fa00 	bl	8000404 <__aeabi_i2d>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800c:	f7f8 f8ac 	bl	8000168 <__aeabi_dsub>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	3530      	adds	r5, #48	@ 0x30
 8008016:	f806 5b01 	strb.w	r5, [r6], #1
 800801a:	42a6      	cmp	r6, r4
 800801c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	d124      	bne.n	8008070 <_dtoa_r+0x660>
 8008026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800802a:	4b39      	ldr	r3, [pc, #228]	@ (8008110 <_dtoa_r+0x700>)
 800802c:	f7f8 f89e 	bl	800016c <__adddf3>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008038:	f7f8 fcde 	bl	80009f8 <__aeabi_dcmpgt>
 800803c:	2800      	cmp	r0, #0
 800803e:	d145      	bne.n	80080cc <_dtoa_r+0x6bc>
 8008040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008044:	2000      	movs	r0, #0
 8008046:	4932      	ldr	r1, [pc, #200]	@ (8008110 <_dtoa_r+0x700>)
 8008048:	f7f8 f88e 	bl	8000168 <__aeabi_dsub>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008054:	f7f8 fcb2 	bl	80009bc <__aeabi_dcmplt>
 8008058:	2800      	cmp	r0, #0
 800805a:	f43f aef6 	beq.w	8007e4a <_dtoa_r+0x43a>
 800805e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008060:	1e73      	subs	r3, r6, #1
 8008062:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008068:	2b30      	cmp	r3, #48	@ 0x30
 800806a:	d0f8      	beq.n	800805e <_dtoa_r+0x64e>
 800806c:	9f04      	ldr	r7, [sp, #16]
 800806e:	e73f      	b.n	8007ef0 <_dtoa_r+0x4e0>
 8008070:	4b29      	ldr	r3, [pc, #164]	@ (8008118 <_dtoa_r+0x708>)
 8008072:	f7f8 fa31 	bl	80004d8 <__aeabi_dmul>
 8008076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800807a:	e7bc      	b.n	8007ff6 <_dtoa_r+0x5e6>
 800807c:	d10c      	bne.n	8008098 <_dtoa_r+0x688>
 800807e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008082:	2200      	movs	r2, #0
 8008084:	4b25      	ldr	r3, [pc, #148]	@ (800811c <_dtoa_r+0x70c>)
 8008086:	f7f8 fa27 	bl	80004d8 <__aeabi_dmul>
 800808a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808e:	f7f8 fca9 	bl	80009e4 <__aeabi_dcmpge>
 8008092:	2800      	cmp	r0, #0
 8008094:	f000 815b 	beq.w	800834e <_dtoa_r+0x93e>
 8008098:	2400      	movs	r4, #0
 800809a:	4625      	mov	r5, r4
 800809c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800809e:	4656      	mov	r6, sl
 80080a0:	43db      	mvns	r3, r3
 80080a2:	9304      	str	r3, [sp, #16]
 80080a4:	2700      	movs	r7, #0
 80080a6:	4621      	mov	r1, r4
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fbb7 	bl	800881c <_Bfree>
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	d0dc      	beq.n	800806c <_dtoa_r+0x65c>
 80080b2:	b12f      	cbz	r7, 80080c0 <_dtoa_r+0x6b0>
 80080b4:	42af      	cmp	r7, r5
 80080b6:	d003      	beq.n	80080c0 <_dtoa_r+0x6b0>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4658      	mov	r0, fp
 80080bc:	f000 fbae 	bl	800881c <_Bfree>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4658      	mov	r0, fp
 80080c4:	f000 fbaa 	bl	800881c <_Bfree>
 80080c8:	e7d0      	b.n	800806c <_dtoa_r+0x65c>
 80080ca:	9704      	str	r7, [sp, #16]
 80080cc:	4633      	mov	r3, r6
 80080ce:	461e      	mov	r6, r3
 80080d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080d4:	2a39      	cmp	r2, #57	@ 0x39
 80080d6:	d107      	bne.n	80080e8 <_dtoa_r+0x6d8>
 80080d8:	459a      	cmp	sl, r3
 80080da:	d1f8      	bne.n	80080ce <_dtoa_r+0x6be>
 80080dc:	9a04      	ldr	r2, [sp, #16]
 80080de:	3201      	adds	r2, #1
 80080e0:	9204      	str	r2, [sp, #16]
 80080e2:	2230      	movs	r2, #48	@ 0x30
 80080e4:	f88a 2000 	strb.w	r2, [sl]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	3201      	adds	r2, #1
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	e7bd      	b.n	800806c <_dtoa_r+0x65c>
 80080f0:	2200      	movs	r2, #0
 80080f2:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <_dtoa_r+0x708>)
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	2200      	movs	r2, #0
 80080fa:	2300      	movs	r3, #0
 80080fc:	4604      	mov	r4, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	f7f8 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8008104:	2800      	cmp	r0, #0
 8008106:	f43f aebc 	beq.w	8007e82 <_dtoa_r+0x472>
 800810a:	e6f1      	b.n	8007ef0 <_dtoa_r+0x4e0>
 800810c:	0800b200 	.word	0x0800b200
 8008110:	3fe00000 	.word	0x3fe00000
 8008114:	3ff00000 	.word	0x3ff00000
 8008118:	40240000 	.word	0x40240000
 800811c:	40140000 	.word	0x40140000
 8008120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008122:	2a00      	cmp	r2, #0
 8008124:	f000 80db 	beq.w	80082de <_dtoa_r+0x8ce>
 8008128:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800812a:	2a01      	cmp	r2, #1
 800812c:	f300 80bf 	bgt.w	80082ae <_dtoa_r+0x89e>
 8008130:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008132:	2a00      	cmp	r2, #0
 8008134:	f000 80b7 	beq.w	80082a6 <_dtoa_r+0x896>
 8008138:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800813c:	4646      	mov	r6, r8
 800813e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008142:	2101      	movs	r1, #1
 8008144:	441a      	add	r2, r3
 8008146:	4658      	mov	r0, fp
 8008148:	4498      	add	r8, r3
 800814a:	9209      	str	r2, [sp, #36]	@ 0x24
 800814c:	f000 fc64 	bl	8008a18 <__i2b>
 8008150:	4605      	mov	r5, r0
 8008152:	b15e      	cbz	r6, 800816c <_dtoa_r+0x75c>
 8008154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	dd08      	ble.n	800816c <_dtoa_r+0x75c>
 800815a:	42b3      	cmp	r3, r6
 800815c:	bfa8      	it	ge
 800815e:	4633      	movge	r3, r6
 8008160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008162:	eba8 0803 	sub.w	r8, r8, r3
 8008166:	1af6      	subs	r6, r6, r3
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	9309      	str	r3, [sp, #36]	@ 0x24
 800816c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800816e:	b1f3      	cbz	r3, 80081ae <_dtoa_r+0x79e>
 8008170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80b7 	beq.w	80082e6 <_dtoa_r+0x8d6>
 8008178:	b18c      	cbz	r4, 800819e <_dtoa_r+0x78e>
 800817a:	4629      	mov	r1, r5
 800817c:	4622      	mov	r2, r4
 800817e:	4658      	mov	r0, fp
 8008180:	f000 fd08 	bl	8008b94 <__pow5mult>
 8008184:	464a      	mov	r2, r9
 8008186:	4601      	mov	r1, r0
 8008188:	4605      	mov	r5, r0
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fc5a 	bl	8008a44 <__multiply>
 8008190:	4649      	mov	r1, r9
 8008192:	9004      	str	r0, [sp, #16]
 8008194:	4658      	mov	r0, fp
 8008196:	f000 fb41 	bl	800881c <_Bfree>
 800819a:	9b04      	ldr	r3, [sp, #16]
 800819c:	4699      	mov	r9, r3
 800819e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a0:	1b1a      	subs	r2, r3, r4
 80081a2:	d004      	beq.n	80081ae <_dtoa_r+0x79e>
 80081a4:	4649      	mov	r1, r9
 80081a6:	4658      	mov	r0, fp
 80081a8:	f000 fcf4 	bl	8008b94 <__pow5mult>
 80081ac:	4681      	mov	r9, r0
 80081ae:	2101      	movs	r1, #1
 80081b0:	4658      	mov	r0, fp
 80081b2:	f000 fc31 	bl	8008a18 <__i2b>
 80081b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081b8:	4604      	mov	r4, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 81c9 	beq.w	8008552 <_dtoa_r+0xb42>
 80081c0:	461a      	mov	r2, r3
 80081c2:	4601      	mov	r1, r0
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fce5 	bl	8008b94 <__pow5mult>
 80081ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081cc:	4604      	mov	r4, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	f300 808f 	bgt.w	80082f2 <_dtoa_r+0x8e2>
 80081d4:	9b02      	ldr	r3, [sp, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f040 8087 	bne.w	80082ea <_dtoa_r+0x8da>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 8083 	bne.w	80082ee <_dtoa_r+0x8de>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081ee:	0d1b      	lsrs	r3, r3, #20
 80081f0:	051b      	lsls	r3, r3, #20
 80081f2:	b12b      	cbz	r3, 8008200 <_dtoa_r+0x7f0>
 80081f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f6:	f108 0801 	add.w	r8, r8, #1
 80081fa:	3301      	adds	r3, #1
 80081fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fe:	2301      	movs	r3, #1
 8008200:	930a      	str	r3, [sp, #40]	@ 0x28
 8008202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 81aa 	beq.w	800855e <_dtoa_r+0xb4e>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008210:	6918      	ldr	r0, [r3, #16]
 8008212:	f000 fbb5 	bl	8008980 <__hi0bits>
 8008216:	f1c0 0020 	rsb	r0, r0, #32
 800821a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800821c:	4418      	add	r0, r3
 800821e:	f010 001f 	ands.w	r0, r0, #31
 8008222:	d071      	beq.n	8008308 <_dtoa_r+0x8f8>
 8008224:	f1c0 0320 	rsb	r3, r0, #32
 8008228:	2b04      	cmp	r3, #4
 800822a:	dd65      	ble.n	80082f8 <_dtoa_r+0x8e8>
 800822c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822e:	f1c0 001c 	rsb	r0, r0, #28
 8008232:	4403      	add	r3, r0
 8008234:	4480      	add	r8, r0
 8008236:	4406      	add	r6, r0
 8008238:	9309      	str	r3, [sp, #36]	@ 0x24
 800823a:	f1b8 0f00 	cmp.w	r8, #0
 800823e:	dd05      	ble.n	800824c <_dtoa_r+0x83c>
 8008240:	4649      	mov	r1, r9
 8008242:	4642      	mov	r2, r8
 8008244:	4658      	mov	r0, fp
 8008246:	f000 fcff 	bl	8008c48 <__lshift>
 800824a:	4681      	mov	r9, r0
 800824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd05      	ble.n	800825e <_dtoa_r+0x84e>
 8008252:	4621      	mov	r1, r4
 8008254:	461a      	mov	r2, r3
 8008256:	4658      	mov	r0, fp
 8008258:	f000 fcf6 	bl	8008c48 <__lshift>
 800825c:	4604      	mov	r4, r0
 800825e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d053      	beq.n	800830c <_dtoa_r+0x8fc>
 8008264:	4621      	mov	r1, r4
 8008266:	4648      	mov	r0, r9
 8008268:	f000 fd5a 	bl	8008d20 <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	da4d      	bge.n	800830c <_dtoa_r+0x8fc>
 8008270:	1e7b      	subs	r3, r7, #1
 8008272:	4649      	mov	r1, r9
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	220a      	movs	r2, #10
 8008278:	2300      	movs	r3, #0
 800827a:	4658      	mov	r0, fp
 800827c:	f000 faf0 	bl	8008860 <__multadd>
 8008280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008282:	4681      	mov	r9, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 816c 	beq.w	8008562 <_dtoa_r+0xb52>
 800828a:	2300      	movs	r3, #0
 800828c:	4629      	mov	r1, r5
 800828e:	220a      	movs	r2, #10
 8008290:	4658      	mov	r0, fp
 8008292:	f000 fae5 	bl	8008860 <__multadd>
 8008296:	9b08      	ldr	r3, [sp, #32]
 8008298:	4605      	mov	r5, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc61      	bgt.n	8008362 <_dtoa_r+0x952>
 800829e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	dc3b      	bgt.n	800831c <_dtoa_r+0x90c>
 80082a4:	e05d      	b.n	8008362 <_dtoa_r+0x952>
 80082a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082ac:	e746      	b.n	800813c <_dtoa_r+0x72c>
 80082ae:	9b07      	ldr	r3, [sp, #28]
 80082b0:	1e5c      	subs	r4, r3, #1
 80082b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	bfbf      	itttt	lt
 80082b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80082bc:	1ae3      	sublt	r3, r4, r3
 80082be:	18d2      	addlt	r2, r2, r3
 80082c0:	bfa8      	it	ge
 80082c2:	1b1c      	subge	r4, r3, r4
 80082c4:	9b07      	ldr	r3, [sp, #28]
 80082c6:	bfbe      	ittt	lt
 80082c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80082ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80082cc:	2400      	movlt	r4, #0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfb5      	itete	lt
 80082d2:	eba8 0603 	sublt.w	r6, r8, r3
 80082d6:	4646      	movge	r6, r8
 80082d8:	2300      	movlt	r3, #0
 80082da:	9b07      	ldrge	r3, [sp, #28]
 80082dc:	e730      	b.n	8008140 <_dtoa_r+0x730>
 80082de:	4646      	mov	r6, r8
 80082e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082e4:	e735      	b.n	8008152 <_dtoa_r+0x742>
 80082e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082e8:	e75c      	b.n	80081a4 <_dtoa_r+0x794>
 80082ea:	2300      	movs	r3, #0
 80082ec:	e788      	b.n	8008200 <_dtoa_r+0x7f0>
 80082ee:	9b02      	ldr	r3, [sp, #8]
 80082f0:	e786      	b.n	8008200 <_dtoa_r+0x7f0>
 80082f2:	2300      	movs	r3, #0
 80082f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f6:	e788      	b.n	800820a <_dtoa_r+0x7fa>
 80082f8:	d09f      	beq.n	800823a <_dtoa_r+0x82a>
 80082fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082fc:	331c      	adds	r3, #28
 80082fe:	441a      	add	r2, r3
 8008300:	4498      	add	r8, r3
 8008302:	441e      	add	r6, r3
 8008304:	9209      	str	r2, [sp, #36]	@ 0x24
 8008306:	e798      	b.n	800823a <_dtoa_r+0x82a>
 8008308:	4603      	mov	r3, r0
 800830a:	e7f6      	b.n	80082fa <_dtoa_r+0x8ea>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	9704      	str	r7, [sp, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc20      	bgt.n	8008356 <_dtoa_r+0x946>
 8008314:	9308      	str	r3, [sp, #32]
 8008316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008318:	2b02      	cmp	r3, #2
 800831a:	dd1e      	ble.n	800835a <_dtoa_r+0x94a>
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f47f aebc 	bne.w	800809c <_dtoa_r+0x68c>
 8008324:	4621      	mov	r1, r4
 8008326:	2205      	movs	r2, #5
 8008328:	4658      	mov	r0, fp
 800832a:	f000 fa99 	bl	8008860 <__multadd>
 800832e:	4601      	mov	r1, r0
 8008330:	4604      	mov	r4, r0
 8008332:	4648      	mov	r0, r9
 8008334:	f000 fcf4 	bl	8008d20 <__mcmp>
 8008338:	2800      	cmp	r0, #0
 800833a:	f77f aeaf 	ble.w	800809c <_dtoa_r+0x68c>
 800833e:	2331      	movs	r3, #49	@ 0x31
 8008340:	4656      	mov	r6, sl
 8008342:	f806 3b01 	strb.w	r3, [r6], #1
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	3301      	adds	r3, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	e6aa      	b.n	80080a4 <_dtoa_r+0x694>
 800834e:	9c07      	ldr	r4, [sp, #28]
 8008350:	9704      	str	r7, [sp, #16]
 8008352:	4625      	mov	r5, r4
 8008354:	e7f3      	b.n	800833e <_dtoa_r+0x92e>
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8104 	beq.w	800856a <_dtoa_r+0xb5a>
 8008362:	2e00      	cmp	r6, #0
 8008364:	dd05      	ble.n	8008372 <_dtoa_r+0x962>
 8008366:	4629      	mov	r1, r5
 8008368:	4632      	mov	r2, r6
 800836a:	4658      	mov	r0, fp
 800836c:	f000 fc6c 	bl	8008c48 <__lshift>
 8008370:	4605      	mov	r5, r0
 8008372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05a      	beq.n	800842e <_dtoa_r+0xa1e>
 8008378:	4658      	mov	r0, fp
 800837a:	6869      	ldr	r1, [r5, #4]
 800837c:	f000 fa0e 	bl	800879c <_Balloc>
 8008380:	4606      	mov	r6, r0
 8008382:	b928      	cbnz	r0, 8008390 <_dtoa_r+0x980>
 8008384:	4602      	mov	r2, r0
 8008386:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800838a:	4b83      	ldr	r3, [pc, #524]	@ (8008598 <_dtoa_r+0xb88>)
 800838c:	f7ff bb54 	b.w	8007a38 <_dtoa_r+0x28>
 8008390:	692a      	ldr	r2, [r5, #16]
 8008392:	f105 010c 	add.w	r1, r5, #12
 8008396:	3202      	adds	r2, #2
 8008398:	0092      	lsls	r2, r2, #2
 800839a:	300c      	adds	r0, #12
 800839c:	f7ff fa9d 	bl	80078da <memcpy>
 80083a0:	2201      	movs	r2, #1
 80083a2:	4631      	mov	r1, r6
 80083a4:	4658      	mov	r0, fp
 80083a6:	f000 fc4f 	bl	8008c48 <__lshift>
 80083aa:	462f      	mov	r7, r5
 80083ac:	4605      	mov	r5, r0
 80083ae:	f10a 0301 	add.w	r3, sl, #1
 80083b2:	9307      	str	r3, [sp, #28]
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	4453      	add	r3, sl
 80083b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c2:	9b07      	ldr	r3, [sp, #28]
 80083c4:	4621      	mov	r1, r4
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4648      	mov	r0, r9
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	f7ff fa98 	bl	8007900 <quorem>
 80083d0:	4639      	mov	r1, r7
 80083d2:	9008      	str	r0, [sp, #32]
 80083d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083d8:	4648      	mov	r0, r9
 80083da:	f000 fca1 	bl	8008d20 <__mcmp>
 80083de:	462a      	mov	r2, r5
 80083e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80083e2:	4621      	mov	r1, r4
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fcb7 	bl	8008d58 <__mdiff>
 80083ea:	68c2      	ldr	r2, [r0, #12]
 80083ec:	4606      	mov	r6, r0
 80083ee:	bb02      	cbnz	r2, 8008432 <_dtoa_r+0xa22>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4648      	mov	r0, r9
 80083f4:	f000 fc94 	bl	8008d20 <__mcmp>
 80083f8:	4602      	mov	r2, r0
 80083fa:	4631      	mov	r1, r6
 80083fc:	4658      	mov	r0, fp
 80083fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008400:	f000 fa0c 	bl	800881c <_Bfree>
 8008404:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008408:	9e07      	ldr	r6, [sp, #28]
 800840a:	ea43 0102 	orr.w	r1, r3, r2
 800840e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008410:	4319      	orrs	r1, r3
 8008412:	d110      	bne.n	8008436 <_dtoa_r+0xa26>
 8008414:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008418:	d029      	beq.n	800846e <_dtoa_r+0xa5e>
 800841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd02      	ble.n	8008426 <_dtoa_r+0xa16>
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	f883 8000 	strb.w	r8, [r3]
 800842c:	e63b      	b.n	80080a6 <_dtoa_r+0x696>
 800842e:	4628      	mov	r0, r5
 8008430:	e7bb      	b.n	80083aa <_dtoa_r+0x99a>
 8008432:	2201      	movs	r2, #1
 8008434:	e7e1      	b.n	80083fa <_dtoa_r+0x9ea>
 8008436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	db04      	blt.n	8008446 <_dtoa_r+0xa36>
 800843c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800843e:	430b      	orrs	r3, r1
 8008440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008442:	430b      	orrs	r3, r1
 8008444:	d120      	bne.n	8008488 <_dtoa_r+0xa78>
 8008446:	2a00      	cmp	r2, #0
 8008448:	dded      	ble.n	8008426 <_dtoa_r+0xa16>
 800844a:	4649      	mov	r1, r9
 800844c:	2201      	movs	r2, #1
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fbfa 	bl	8008c48 <__lshift>
 8008454:	4621      	mov	r1, r4
 8008456:	4681      	mov	r9, r0
 8008458:	f000 fc62 	bl	8008d20 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dc03      	bgt.n	8008468 <_dtoa_r+0xa58>
 8008460:	d1e1      	bne.n	8008426 <_dtoa_r+0xa16>
 8008462:	f018 0f01 	tst.w	r8, #1
 8008466:	d0de      	beq.n	8008426 <_dtoa_r+0xa16>
 8008468:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800846c:	d1d8      	bne.n	8008420 <_dtoa_r+0xa10>
 800846e:	2339      	movs	r3, #57	@ 0x39
 8008470:	9a02      	ldr	r2, [sp, #8]
 8008472:	7013      	strb	r3, [r2, #0]
 8008474:	4633      	mov	r3, r6
 8008476:	461e      	mov	r6, r3
 8008478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800847c:	3b01      	subs	r3, #1
 800847e:	2a39      	cmp	r2, #57	@ 0x39
 8008480:	d052      	beq.n	8008528 <_dtoa_r+0xb18>
 8008482:	3201      	adds	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e60e      	b.n	80080a6 <_dtoa_r+0x696>
 8008488:	2a00      	cmp	r2, #0
 800848a:	dd07      	ble.n	800849c <_dtoa_r+0xa8c>
 800848c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008490:	d0ed      	beq.n	800846e <_dtoa_r+0xa5e>
 8008492:	9a02      	ldr	r2, [sp, #8]
 8008494:	f108 0301 	add.w	r3, r8, #1
 8008498:	7013      	strb	r3, [r2, #0]
 800849a:	e604      	b.n	80080a6 <_dtoa_r+0x696>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9a07      	ldr	r2, [sp, #28]
 80084a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d028      	beq.n	80084fc <_dtoa_r+0xaec>
 80084aa:	4649      	mov	r1, r9
 80084ac:	2300      	movs	r3, #0
 80084ae:	220a      	movs	r2, #10
 80084b0:	4658      	mov	r0, fp
 80084b2:	f000 f9d5 	bl	8008860 <__multadd>
 80084b6:	42af      	cmp	r7, r5
 80084b8:	4681      	mov	r9, r0
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	f04f 020a 	mov.w	r2, #10
 80084c2:	4639      	mov	r1, r7
 80084c4:	4658      	mov	r0, fp
 80084c6:	d107      	bne.n	80084d8 <_dtoa_r+0xac8>
 80084c8:	f000 f9ca 	bl	8008860 <__multadd>
 80084cc:	4607      	mov	r7, r0
 80084ce:	4605      	mov	r5, r0
 80084d0:	9b07      	ldr	r3, [sp, #28]
 80084d2:	3301      	adds	r3, #1
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	e774      	b.n	80083c2 <_dtoa_r+0x9b2>
 80084d8:	f000 f9c2 	bl	8008860 <__multadd>
 80084dc:	4629      	mov	r1, r5
 80084de:	4607      	mov	r7, r0
 80084e0:	2300      	movs	r3, #0
 80084e2:	220a      	movs	r2, #10
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 f9bb 	bl	8008860 <__multadd>
 80084ea:	4605      	mov	r5, r0
 80084ec:	e7f0      	b.n	80084d0 <_dtoa_r+0xac0>
 80084ee:	9b08      	ldr	r3, [sp, #32]
 80084f0:	2700      	movs	r7, #0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfcc      	ite	gt
 80084f6:	461e      	movgt	r6, r3
 80084f8:	2601      	movle	r6, #1
 80084fa:	4456      	add	r6, sl
 80084fc:	4649      	mov	r1, r9
 80084fe:	2201      	movs	r2, #1
 8008500:	4658      	mov	r0, fp
 8008502:	f000 fba1 	bl	8008c48 <__lshift>
 8008506:	4621      	mov	r1, r4
 8008508:	4681      	mov	r9, r0
 800850a:	f000 fc09 	bl	8008d20 <__mcmp>
 800850e:	2800      	cmp	r0, #0
 8008510:	dcb0      	bgt.n	8008474 <_dtoa_r+0xa64>
 8008512:	d102      	bne.n	800851a <_dtoa_r+0xb0a>
 8008514:	f018 0f01 	tst.w	r8, #1
 8008518:	d1ac      	bne.n	8008474 <_dtoa_r+0xa64>
 800851a:	4633      	mov	r3, r6
 800851c:	461e      	mov	r6, r3
 800851e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008522:	2a30      	cmp	r2, #48	@ 0x30
 8008524:	d0fa      	beq.n	800851c <_dtoa_r+0xb0c>
 8008526:	e5be      	b.n	80080a6 <_dtoa_r+0x696>
 8008528:	459a      	cmp	sl, r3
 800852a:	d1a4      	bne.n	8008476 <_dtoa_r+0xa66>
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	3301      	adds	r3, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	2331      	movs	r3, #49	@ 0x31
 8008534:	f88a 3000 	strb.w	r3, [sl]
 8008538:	e5b5      	b.n	80080a6 <_dtoa_r+0x696>
 800853a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800853c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800859c <_dtoa_r+0xb8c>
 8008540:	b11b      	cbz	r3, 800854a <_dtoa_r+0xb3a>
 8008542:	f10a 0308 	add.w	r3, sl, #8
 8008546:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	4650      	mov	r0, sl
 800854c:	b017      	add	sp, #92	@ 0x5c
 800854e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008552:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008554:	2b01      	cmp	r3, #1
 8008556:	f77f ae3d 	ble.w	80081d4 <_dtoa_r+0x7c4>
 800855a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855c:	930a      	str	r3, [sp, #40]	@ 0x28
 800855e:	2001      	movs	r0, #1
 8008560:	e65b      	b.n	800821a <_dtoa_r+0x80a>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f77f aed6 	ble.w	8008316 <_dtoa_r+0x906>
 800856a:	4656      	mov	r6, sl
 800856c:	4621      	mov	r1, r4
 800856e:	4648      	mov	r0, r9
 8008570:	f7ff f9c6 	bl	8007900 <quorem>
 8008574:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	f806 8b01 	strb.w	r8, [r6], #1
 800857e:	eba6 020a 	sub.w	r2, r6, sl
 8008582:	4293      	cmp	r3, r2
 8008584:	ddb3      	ble.n	80084ee <_dtoa_r+0xade>
 8008586:	4649      	mov	r1, r9
 8008588:	2300      	movs	r3, #0
 800858a:	220a      	movs	r2, #10
 800858c:	4658      	mov	r0, fp
 800858e:	f000 f967 	bl	8008860 <__multadd>
 8008592:	4681      	mov	r9, r0
 8008594:	e7ea      	b.n	800856c <_dtoa_r+0xb5c>
 8008596:	bf00      	nop
 8008598:	0800b15f 	.word	0x0800b15f
 800859c:	0800b0e3 	.word	0x0800b0e3

080085a0 <_free_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4605      	mov	r5, r0
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d040      	beq.n	800862a <_free_r+0x8a>
 80085a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ac:	1f0c      	subs	r4, r1, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfb8      	it	lt
 80085b2:	18e4      	addlt	r4, r4, r3
 80085b4:	f000 f8e6 	bl	8008784 <__malloc_lock>
 80085b8:	4a1c      	ldr	r2, [pc, #112]	@ (800862c <_free_r+0x8c>)
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	b933      	cbnz	r3, 80085cc <_free_r+0x2c>
 80085be:	6063      	str	r3, [r4, #4]
 80085c0:	6014      	str	r4, [r2, #0]
 80085c2:	4628      	mov	r0, r5
 80085c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c8:	f000 b8e2 	b.w	8008790 <__malloc_unlock>
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d908      	bls.n	80085e2 <_free_r+0x42>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	1821      	adds	r1, r4, r0
 80085d4:	428b      	cmp	r3, r1
 80085d6:	bf01      	itttt	eq
 80085d8:	6819      	ldreq	r1, [r3, #0]
 80085da:	685b      	ldreq	r3, [r3, #4]
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	e7ed      	b.n	80085be <_free_r+0x1e>
 80085e2:	461a      	mov	r2, r3
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b10b      	cbz	r3, 80085ec <_free_r+0x4c>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d9fa      	bls.n	80085e2 <_free_r+0x42>
 80085ec:	6811      	ldr	r1, [r2, #0]
 80085ee:	1850      	adds	r0, r2, r1
 80085f0:	42a0      	cmp	r0, r4
 80085f2:	d10b      	bne.n	800860c <_free_r+0x6c>
 80085f4:	6820      	ldr	r0, [r4, #0]
 80085f6:	4401      	add	r1, r0
 80085f8:	1850      	adds	r0, r2, r1
 80085fa:	4283      	cmp	r3, r0
 80085fc:	6011      	str	r1, [r2, #0]
 80085fe:	d1e0      	bne.n	80085c2 <_free_r+0x22>
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	4408      	add	r0, r1
 8008606:	6010      	str	r0, [r2, #0]
 8008608:	6053      	str	r3, [r2, #4]
 800860a:	e7da      	b.n	80085c2 <_free_r+0x22>
 800860c:	d902      	bls.n	8008614 <_free_r+0x74>
 800860e:	230c      	movs	r3, #12
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	e7d6      	b.n	80085c2 <_free_r+0x22>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	1821      	adds	r1, r4, r0
 8008618:	428b      	cmp	r3, r1
 800861a:	bf01      	itttt	eq
 800861c:	6819      	ldreq	r1, [r3, #0]
 800861e:	685b      	ldreq	r3, [r3, #4]
 8008620:	1809      	addeq	r1, r1, r0
 8008622:	6021      	streq	r1, [r4, #0]
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	6054      	str	r4, [r2, #4]
 8008628:	e7cb      	b.n	80085c2 <_free_r+0x22>
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20001da4 	.word	0x20001da4

08008630 <malloc>:
 8008630:	4b02      	ldr	r3, [pc, #8]	@ (800863c <malloc+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f000 b825 	b.w	8008684 <_malloc_r>
 800863a:	bf00      	nop
 800863c:	2000001c 	.word	0x2000001c

08008640 <sbrk_aligned>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4e0f      	ldr	r6, [pc, #60]	@ (8008680 <sbrk_aligned+0x40>)
 8008644:	460c      	mov	r4, r1
 8008646:	6831      	ldr	r1, [r6, #0]
 8008648:	4605      	mov	r5, r0
 800864a:	b911      	cbnz	r1, 8008652 <sbrk_aligned+0x12>
 800864c:	f001 fdf6 	bl	800a23c <_sbrk_r>
 8008650:	6030      	str	r0, [r6, #0]
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f001 fdf1 	bl	800a23c <_sbrk_r>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d103      	bne.n	8008666 <sbrk_aligned+0x26>
 800865e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008662:	4620      	mov	r0, r4
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	1cc4      	adds	r4, r0, #3
 8008668:	f024 0403 	bic.w	r4, r4, #3
 800866c:	42a0      	cmp	r0, r4
 800866e:	d0f8      	beq.n	8008662 <sbrk_aligned+0x22>
 8008670:	1a21      	subs	r1, r4, r0
 8008672:	4628      	mov	r0, r5
 8008674:	f001 fde2 	bl	800a23c <_sbrk_r>
 8008678:	3001      	adds	r0, #1
 800867a:	d1f2      	bne.n	8008662 <sbrk_aligned+0x22>
 800867c:	e7ef      	b.n	800865e <sbrk_aligned+0x1e>
 800867e:	bf00      	nop
 8008680:	20001da0 	.word	0x20001da0

08008684 <_malloc_r>:
 8008684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008688:	1ccd      	adds	r5, r1, #3
 800868a:	f025 0503 	bic.w	r5, r5, #3
 800868e:	3508      	adds	r5, #8
 8008690:	2d0c      	cmp	r5, #12
 8008692:	bf38      	it	cc
 8008694:	250c      	movcc	r5, #12
 8008696:	2d00      	cmp	r5, #0
 8008698:	4606      	mov	r6, r0
 800869a:	db01      	blt.n	80086a0 <_malloc_r+0x1c>
 800869c:	42a9      	cmp	r1, r5
 800869e:	d904      	bls.n	80086aa <_malloc_r+0x26>
 80086a0:	230c      	movs	r3, #12
 80086a2:	6033      	str	r3, [r6, #0]
 80086a4:	2000      	movs	r0, #0
 80086a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008780 <_malloc_r+0xfc>
 80086ae:	f000 f869 	bl	8008784 <__malloc_lock>
 80086b2:	f8d8 3000 	ldr.w	r3, [r8]
 80086b6:	461c      	mov	r4, r3
 80086b8:	bb44      	cbnz	r4, 800870c <_malloc_r+0x88>
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbf 	bl	8008640 <sbrk_aligned>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	4604      	mov	r4, r0
 80086c6:	d158      	bne.n	800877a <_malloc_r+0xf6>
 80086c8:	f8d8 4000 	ldr.w	r4, [r8]
 80086cc:	4627      	mov	r7, r4
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	d143      	bne.n	800875a <_malloc_r+0xd6>
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	d04b      	beq.n	800876e <_malloc_r+0xea>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	4639      	mov	r1, r7
 80086da:	4630      	mov	r0, r6
 80086dc:	eb04 0903 	add.w	r9, r4, r3
 80086e0:	f001 fdac 	bl	800a23c <_sbrk_r>
 80086e4:	4581      	cmp	r9, r0
 80086e6:	d142      	bne.n	800876e <_malloc_r+0xea>
 80086e8:	6821      	ldr	r1, [r4, #0]
 80086ea:	4630      	mov	r0, r6
 80086ec:	1a6d      	subs	r5, r5, r1
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7ff ffa6 	bl	8008640 <sbrk_aligned>
 80086f4:	3001      	adds	r0, #1
 80086f6:	d03a      	beq.n	800876e <_malloc_r+0xea>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	442b      	add	r3, r5
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	bb62      	cbnz	r2, 8008760 <_malloc_r+0xdc>
 8008706:	f8c8 7000 	str.w	r7, [r8]
 800870a:	e00f      	b.n	800872c <_malloc_r+0xa8>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	1b52      	subs	r2, r2, r5
 8008710:	d420      	bmi.n	8008754 <_malloc_r+0xd0>
 8008712:	2a0b      	cmp	r2, #11
 8008714:	d917      	bls.n	8008746 <_malloc_r+0xc2>
 8008716:	1961      	adds	r1, r4, r5
 8008718:	42a3      	cmp	r3, r4
 800871a:	6025      	str	r5, [r4, #0]
 800871c:	bf18      	it	ne
 800871e:	6059      	strne	r1, [r3, #4]
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	bf08      	it	eq
 8008724:	f8c8 1000 	streq.w	r1, [r8]
 8008728:	5162      	str	r2, [r4, r5]
 800872a:	604b      	str	r3, [r1, #4]
 800872c:	4630      	mov	r0, r6
 800872e:	f000 f82f 	bl	8008790 <__malloc_unlock>
 8008732:	f104 000b 	add.w	r0, r4, #11
 8008736:	1d23      	adds	r3, r4, #4
 8008738:	f020 0007 	bic.w	r0, r0, #7
 800873c:	1ac2      	subs	r2, r0, r3
 800873e:	bf1c      	itt	ne
 8008740:	1a1b      	subne	r3, r3, r0
 8008742:	50a3      	strne	r3, [r4, r2]
 8008744:	e7af      	b.n	80086a6 <_malloc_r+0x22>
 8008746:	6862      	ldr	r2, [r4, #4]
 8008748:	42a3      	cmp	r3, r4
 800874a:	bf0c      	ite	eq
 800874c:	f8c8 2000 	streq.w	r2, [r8]
 8008750:	605a      	strne	r2, [r3, #4]
 8008752:	e7eb      	b.n	800872c <_malloc_r+0xa8>
 8008754:	4623      	mov	r3, r4
 8008756:	6864      	ldr	r4, [r4, #4]
 8008758:	e7ae      	b.n	80086b8 <_malloc_r+0x34>
 800875a:	463c      	mov	r4, r7
 800875c:	687f      	ldr	r7, [r7, #4]
 800875e:	e7b6      	b.n	80086ce <_malloc_r+0x4a>
 8008760:	461a      	mov	r2, r3
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	42a3      	cmp	r3, r4
 8008766:	d1fb      	bne.n	8008760 <_malloc_r+0xdc>
 8008768:	2300      	movs	r3, #0
 800876a:	6053      	str	r3, [r2, #4]
 800876c:	e7de      	b.n	800872c <_malloc_r+0xa8>
 800876e:	230c      	movs	r3, #12
 8008770:	4630      	mov	r0, r6
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	f000 f80c 	bl	8008790 <__malloc_unlock>
 8008778:	e794      	b.n	80086a4 <_malloc_r+0x20>
 800877a:	6005      	str	r5, [r0, #0]
 800877c:	e7d6      	b.n	800872c <_malloc_r+0xa8>
 800877e:	bf00      	nop
 8008780:	20001da4 	.word	0x20001da4

08008784 <__malloc_lock>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__malloc_lock+0x8>)
 8008786:	f7ff b898 	b.w	80078ba <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	20001d9c 	.word	0x20001d9c

08008790 <__malloc_unlock>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__malloc_unlock+0x8>)
 8008792:	f7ff b893 	b.w	80078bc <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	20001d9c 	.word	0x20001d9c

0800879c <_Balloc>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	69c6      	ldr	r6, [r0, #28]
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	b976      	cbnz	r6, 80087c4 <_Balloc+0x28>
 80087a6:	2010      	movs	r0, #16
 80087a8:	f7ff ff42 	bl	8008630 <malloc>
 80087ac:	4602      	mov	r2, r0
 80087ae:	61e0      	str	r0, [r4, #28]
 80087b0:	b920      	cbnz	r0, 80087bc <_Balloc+0x20>
 80087b2:	216b      	movs	r1, #107	@ 0x6b
 80087b4:	4b17      	ldr	r3, [pc, #92]	@ (8008814 <_Balloc+0x78>)
 80087b6:	4818      	ldr	r0, [pc, #96]	@ (8008818 <_Balloc+0x7c>)
 80087b8:	f001 fd56 	bl	800a268 <__assert_func>
 80087bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087c0:	6006      	str	r6, [r0, #0]
 80087c2:	60c6      	str	r6, [r0, #12]
 80087c4:	69e6      	ldr	r6, [r4, #28]
 80087c6:	68f3      	ldr	r3, [r6, #12]
 80087c8:	b183      	cbz	r3, 80087ec <_Balloc+0x50>
 80087ca:	69e3      	ldr	r3, [r4, #28]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087d2:	b9b8      	cbnz	r0, 8008804 <_Balloc+0x68>
 80087d4:	2101      	movs	r1, #1
 80087d6:	fa01 f605 	lsl.w	r6, r1, r5
 80087da:	1d72      	adds	r2, r6, #5
 80087dc:	4620      	mov	r0, r4
 80087de:	0092      	lsls	r2, r2, #2
 80087e0:	f001 fd60 	bl	800a2a4 <_calloc_r>
 80087e4:	b160      	cbz	r0, 8008800 <_Balloc+0x64>
 80087e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087ea:	e00e      	b.n	800880a <_Balloc+0x6e>
 80087ec:	2221      	movs	r2, #33	@ 0x21
 80087ee:	2104      	movs	r1, #4
 80087f0:	4620      	mov	r0, r4
 80087f2:	f001 fd57 	bl	800a2a4 <_calloc_r>
 80087f6:	69e3      	ldr	r3, [r4, #28]
 80087f8:	60f0      	str	r0, [r6, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e4      	bne.n	80087ca <_Balloc+0x2e>
 8008800:	2000      	movs	r0, #0
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	6802      	ldr	r2, [r0, #0]
 8008806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800880a:	2300      	movs	r3, #0
 800880c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008810:	e7f7      	b.n	8008802 <_Balloc+0x66>
 8008812:	bf00      	nop
 8008814:	0800b0f0 	.word	0x0800b0f0
 8008818:	0800b170 	.word	0x0800b170

0800881c <_Bfree>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	69c6      	ldr	r6, [r0, #28]
 8008820:	4605      	mov	r5, r0
 8008822:	460c      	mov	r4, r1
 8008824:	b976      	cbnz	r6, 8008844 <_Bfree+0x28>
 8008826:	2010      	movs	r0, #16
 8008828:	f7ff ff02 	bl	8008630 <malloc>
 800882c:	4602      	mov	r2, r0
 800882e:	61e8      	str	r0, [r5, #28]
 8008830:	b920      	cbnz	r0, 800883c <_Bfree+0x20>
 8008832:	218f      	movs	r1, #143	@ 0x8f
 8008834:	4b08      	ldr	r3, [pc, #32]	@ (8008858 <_Bfree+0x3c>)
 8008836:	4809      	ldr	r0, [pc, #36]	@ (800885c <_Bfree+0x40>)
 8008838:	f001 fd16 	bl	800a268 <__assert_func>
 800883c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008840:	6006      	str	r6, [r0, #0]
 8008842:	60c6      	str	r6, [r0, #12]
 8008844:	b13c      	cbz	r4, 8008856 <_Bfree+0x3a>
 8008846:	69eb      	ldr	r3, [r5, #28]
 8008848:	6862      	ldr	r2, [r4, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008850:	6021      	str	r1, [r4, #0]
 8008852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0800b0f0 	.word	0x0800b0f0
 800885c:	0800b170 	.word	0x0800b170

08008860 <__multadd>:
 8008860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	4607      	mov	r7, r0
 8008866:	460c      	mov	r4, r1
 8008868:	461e      	mov	r6, r3
 800886a:	2000      	movs	r0, #0
 800886c:	690d      	ldr	r5, [r1, #16]
 800886e:	f101 0c14 	add.w	ip, r1, #20
 8008872:	f8dc 3000 	ldr.w	r3, [ip]
 8008876:	3001      	adds	r0, #1
 8008878:	b299      	uxth	r1, r3
 800887a:	fb02 6101 	mla	r1, r2, r1, r6
 800887e:	0c1e      	lsrs	r6, r3, #16
 8008880:	0c0b      	lsrs	r3, r1, #16
 8008882:	fb02 3306 	mla	r3, r2, r6, r3
 8008886:	b289      	uxth	r1, r1
 8008888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800888c:	4285      	cmp	r5, r0
 800888e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008892:	f84c 1b04 	str.w	r1, [ip], #4
 8008896:	dcec      	bgt.n	8008872 <__multadd+0x12>
 8008898:	b30e      	cbz	r6, 80088de <__multadd+0x7e>
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	42ab      	cmp	r3, r5
 800889e:	dc19      	bgt.n	80088d4 <__multadd+0x74>
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	4638      	mov	r0, r7
 80088a4:	3101      	adds	r1, #1
 80088a6:	f7ff ff79 	bl	800879c <_Balloc>
 80088aa:	4680      	mov	r8, r0
 80088ac:	b928      	cbnz	r0, 80088ba <__multadd+0x5a>
 80088ae:	4602      	mov	r2, r0
 80088b0:	21ba      	movs	r1, #186	@ 0xba
 80088b2:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <__multadd+0x84>)
 80088b4:	480c      	ldr	r0, [pc, #48]	@ (80088e8 <__multadd+0x88>)
 80088b6:	f001 fcd7 	bl	800a268 <__assert_func>
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	f104 010c 	add.w	r1, r4, #12
 80088c0:	3202      	adds	r2, #2
 80088c2:	0092      	lsls	r2, r2, #2
 80088c4:	300c      	adds	r0, #12
 80088c6:	f7ff f808 	bl	80078da <memcpy>
 80088ca:	4621      	mov	r1, r4
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ffa5 	bl	800881c <_Bfree>
 80088d2:	4644      	mov	r4, r8
 80088d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088d8:	3501      	adds	r5, #1
 80088da:	615e      	str	r6, [r3, #20]
 80088dc:	6125      	str	r5, [r4, #16]
 80088de:	4620      	mov	r0, r4
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	0800b15f 	.word	0x0800b15f
 80088e8:	0800b170 	.word	0x0800b170

080088ec <__s2b>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	2209      	movs	r2, #9
 80088f4:	461f      	mov	r7, r3
 80088f6:	3308      	adds	r3, #8
 80088f8:	460c      	mov	r4, r1
 80088fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80088fe:	4606      	mov	r6, r0
 8008900:	2201      	movs	r2, #1
 8008902:	2100      	movs	r1, #0
 8008904:	429a      	cmp	r2, r3
 8008906:	db09      	blt.n	800891c <__s2b+0x30>
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ff47 	bl	800879c <_Balloc>
 800890e:	b940      	cbnz	r0, 8008922 <__s2b+0x36>
 8008910:	4602      	mov	r2, r0
 8008912:	21d3      	movs	r1, #211	@ 0xd3
 8008914:	4b18      	ldr	r3, [pc, #96]	@ (8008978 <__s2b+0x8c>)
 8008916:	4819      	ldr	r0, [pc, #100]	@ (800897c <__s2b+0x90>)
 8008918:	f001 fca6 	bl	800a268 <__assert_func>
 800891c:	0052      	lsls	r2, r2, #1
 800891e:	3101      	adds	r1, #1
 8008920:	e7f0      	b.n	8008904 <__s2b+0x18>
 8008922:	9b08      	ldr	r3, [sp, #32]
 8008924:	2d09      	cmp	r5, #9
 8008926:	6143      	str	r3, [r0, #20]
 8008928:	f04f 0301 	mov.w	r3, #1
 800892c:	6103      	str	r3, [r0, #16]
 800892e:	dd16      	ble.n	800895e <__s2b+0x72>
 8008930:	f104 0909 	add.w	r9, r4, #9
 8008934:	46c8      	mov	r8, r9
 8008936:	442c      	add	r4, r5
 8008938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800893c:	4601      	mov	r1, r0
 800893e:	220a      	movs	r2, #10
 8008940:	4630      	mov	r0, r6
 8008942:	3b30      	subs	r3, #48	@ 0x30
 8008944:	f7ff ff8c 	bl	8008860 <__multadd>
 8008948:	45a0      	cmp	r8, r4
 800894a:	d1f5      	bne.n	8008938 <__s2b+0x4c>
 800894c:	f1a5 0408 	sub.w	r4, r5, #8
 8008950:	444c      	add	r4, r9
 8008952:	1b2d      	subs	r5, r5, r4
 8008954:	1963      	adds	r3, r4, r5
 8008956:	42bb      	cmp	r3, r7
 8008958:	db04      	blt.n	8008964 <__s2b+0x78>
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	2509      	movs	r5, #9
 8008960:	340a      	adds	r4, #10
 8008962:	e7f6      	b.n	8008952 <__s2b+0x66>
 8008964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008968:	4601      	mov	r1, r0
 800896a:	220a      	movs	r2, #10
 800896c:	4630      	mov	r0, r6
 800896e:	3b30      	subs	r3, #48	@ 0x30
 8008970:	f7ff ff76 	bl	8008860 <__multadd>
 8008974:	e7ee      	b.n	8008954 <__s2b+0x68>
 8008976:	bf00      	nop
 8008978:	0800b15f 	.word	0x0800b15f
 800897c:	0800b170 	.word	0x0800b170

08008980 <__hi0bits>:
 8008980:	4603      	mov	r3, r0
 8008982:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008986:	bf3a      	itte	cc
 8008988:	0403      	lslcc	r3, r0, #16
 800898a:	2010      	movcc	r0, #16
 800898c:	2000      	movcs	r0, #0
 800898e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008992:	bf3c      	itt	cc
 8008994:	021b      	lslcc	r3, r3, #8
 8008996:	3008      	addcc	r0, #8
 8008998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800899c:	bf3c      	itt	cc
 800899e:	011b      	lslcc	r3, r3, #4
 80089a0:	3004      	addcc	r0, #4
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a6:	bf3c      	itt	cc
 80089a8:	009b      	lslcc	r3, r3, #2
 80089aa:	3002      	addcc	r0, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db05      	blt.n	80089bc <__hi0bits+0x3c>
 80089b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089b4:	f100 0001 	add.w	r0, r0, #1
 80089b8:	bf08      	it	eq
 80089ba:	2020      	moveq	r0, #32
 80089bc:	4770      	bx	lr

080089be <__lo0bits>:
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	4602      	mov	r2, r0
 80089c2:	f013 0007 	ands.w	r0, r3, #7
 80089c6:	d00b      	beq.n	80089e0 <__lo0bits+0x22>
 80089c8:	07d9      	lsls	r1, r3, #31
 80089ca:	d421      	bmi.n	8008a10 <__lo0bits+0x52>
 80089cc:	0798      	lsls	r0, r3, #30
 80089ce:	bf49      	itett	mi
 80089d0:	085b      	lsrmi	r3, r3, #1
 80089d2:	089b      	lsrpl	r3, r3, #2
 80089d4:	2001      	movmi	r0, #1
 80089d6:	6013      	strmi	r3, [r2, #0]
 80089d8:	bf5c      	itt	pl
 80089da:	2002      	movpl	r0, #2
 80089dc:	6013      	strpl	r3, [r2, #0]
 80089de:	4770      	bx	lr
 80089e0:	b299      	uxth	r1, r3
 80089e2:	b909      	cbnz	r1, 80089e8 <__lo0bits+0x2a>
 80089e4:	2010      	movs	r0, #16
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	b2d9      	uxtb	r1, r3
 80089ea:	b909      	cbnz	r1, 80089f0 <__lo0bits+0x32>
 80089ec:	3008      	adds	r0, #8
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	bf04      	itt	eq
 80089f4:	091b      	lsreq	r3, r3, #4
 80089f6:	3004      	addeq	r0, #4
 80089f8:	0799      	lsls	r1, r3, #30
 80089fa:	bf04      	itt	eq
 80089fc:	089b      	lsreq	r3, r3, #2
 80089fe:	3002      	addeq	r0, #2
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	d403      	bmi.n	8008a0c <__lo0bits+0x4e>
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	f100 0001 	add.w	r0, r0, #1
 8008a0a:	d003      	beq.n	8008a14 <__lo0bits+0x56>
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	4770      	bx	lr
 8008a10:	2000      	movs	r0, #0
 8008a12:	4770      	bx	lr
 8008a14:	2020      	movs	r0, #32
 8008a16:	4770      	bx	lr

08008a18 <__i2b>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7ff febd 	bl	800879c <_Balloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__i2b+0x1a>
 8008a26:	f240 1145 	movw	r1, #325	@ 0x145
 8008a2a:	4b04      	ldr	r3, [pc, #16]	@ (8008a3c <__i2b+0x24>)
 8008a2c:	4804      	ldr	r0, [pc, #16]	@ (8008a40 <__i2b+0x28>)
 8008a2e:	f001 fc1b 	bl	800a268 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	6144      	str	r4, [r0, #20]
 8008a36:	6103      	str	r3, [r0, #16]
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	0800b15f 	.word	0x0800b15f
 8008a40:	0800b170 	.word	0x0800b170

08008a44 <__multiply>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4614      	mov	r4, r2
 8008a4a:	690a      	ldr	r2, [r1, #16]
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	460f      	mov	r7, r1
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfa2      	ittt	ge
 8008a54:	4623      	movge	r3, r4
 8008a56:	460c      	movge	r4, r1
 8008a58:	461f      	movge	r7, r3
 8008a5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	6861      	ldr	r1, [r4, #4]
 8008a66:	eb0a 0609 	add.w	r6, sl, r9
 8008a6a:	42b3      	cmp	r3, r6
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	bfb8      	it	lt
 8008a70:	3101      	addlt	r1, #1
 8008a72:	f7ff fe93 	bl	800879c <_Balloc>
 8008a76:	b930      	cbnz	r0, 8008a86 <__multiply+0x42>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a7e:	4b43      	ldr	r3, [pc, #268]	@ (8008b8c <__multiply+0x148>)
 8008a80:	4843      	ldr	r0, [pc, #268]	@ (8008b90 <__multiply+0x14c>)
 8008a82:	f001 fbf1 	bl	800a268 <__assert_func>
 8008a86:	f100 0514 	add.w	r5, r0, #20
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a92:	4543      	cmp	r3, r8
 8008a94:	d321      	bcc.n	8008ada <__multiply+0x96>
 8008a96:	f107 0114 	add.w	r1, r7, #20
 8008a9a:	f104 0214 	add.w	r2, r4, #20
 8008a9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008aa2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008aa6:	9302      	str	r3, [sp, #8]
 8008aa8:	1b13      	subs	r3, r2, r4
 8008aaa:	3b15      	subs	r3, #21
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	f104 0715 	add.w	r7, r4, #21
 8008ab6:	42ba      	cmp	r2, r7
 8008ab8:	bf38      	it	cc
 8008aba:	2304      	movcc	r3, #4
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	9b02      	ldr	r3, [sp, #8]
 8008ac0:	9103      	str	r1, [sp, #12]
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	d80c      	bhi.n	8008ae0 <__multiply+0x9c>
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	dd03      	ble.n	8008ad2 <__multiply+0x8e>
 8008aca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d05a      	beq.n	8008b88 <__multiply+0x144>
 8008ad2:	6106      	str	r6, [r0, #16]
 8008ad4:	b005      	add	sp, #20
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	f843 2b04 	str.w	r2, [r3], #4
 8008ade:	e7d8      	b.n	8008a92 <__multiply+0x4e>
 8008ae0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ae4:	f1ba 0f00 	cmp.w	sl, #0
 8008ae8:	d023      	beq.n	8008b32 <__multiply+0xee>
 8008aea:	46a9      	mov	r9, r5
 8008aec:	f04f 0c00 	mov.w	ip, #0
 8008af0:	f104 0e14 	add.w	lr, r4, #20
 8008af4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008af8:	f8d9 3000 	ldr.w	r3, [r9]
 8008afc:	fa1f fb87 	uxth.w	fp, r7
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b06:	4463      	add	r3, ip
 8008b08:	f8d9 c000 	ldr.w	ip, [r9]
 8008b0c:	0c3f      	lsrs	r7, r7, #16
 8008b0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b12:	fb0a c707 	mla	r7, sl, r7, ip
 8008b16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b20:	4572      	cmp	r2, lr
 8008b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b26:	f849 3b04 	str.w	r3, [r9], #4
 8008b2a:	d8e3      	bhi.n	8008af4 <__multiply+0xb0>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	f845 c003 	str.w	ip, [r5, r3]
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	3104      	adds	r1, #4
 8008b36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d021      	beq.n	8008b84 <__multiply+0x140>
 8008b40:	46ae      	mov	lr, r5
 8008b42:	f04f 0a00 	mov.w	sl, #0
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	f104 0c14 	add.w	ip, r4, #20
 8008b4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	fb09 770b 	mla	r7, r9, fp, r7
 8008b5a:	4457      	add	r7, sl
 8008b5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b60:	f84e 3b04 	str.w	r3, [lr], #4
 8008b64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b6c:	f8be 3000 	ldrh.w	r3, [lr]
 8008b70:	4562      	cmp	r2, ip
 8008b72:	fb09 330a 	mla	r3, r9, sl, r3
 8008b76:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b7e:	d8e5      	bhi.n	8008b4c <__multiply+0x108>
 8008b80:	9f01      	ldr	r7, [sp, #4]
 8008b82:	51eb      	str	r3, [r5, r7]
 8008b84:	3504      	adds	r5, #4
 8008b86:	e79a      	b.n	8008abe <__multiply+0x7a>
 8008b88:	3e01      	subs	r6, #1
 8008b8a:	e79c      	b.n	8008ac6 <__multiply+0x82>
 8008b8c:	0800b15f 	.word	0x0800b15f
 8008b90:	0800b170 	.word	0x0800b170

08008b94 <__pow5mult>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4615      	mov	r5, r2
 8008b9a:	f012 0203 	ands.w	r2, r2, #3
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	460e      	mov	r6, r1
 8008ba2:	d007      	beq.n	8008bb4 <__pow5mult+0x20>
 8008ba4:	4c25      	ldr	r4, [pc, #148]	@ (8008c3c <__pow5mult+0xa8>)
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bae:	f7ff fe57 	bl	8008860 <__multadd>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	10ad      	asrs	r5, r5, #2
 8008bb6:	d03d      	beq.n	8008c34 <__pow5mult+0xa0>
 8008bb8:	69fc      	ldr	r4, [r7, #28]
 8008bba:	b97c      	cbnz	r4, 8008bdc <__pow5mult+0x48>
 8008bbc:	2010      	movs	r0, #16
 8008bbe:	f7ff fd37 	bl	8008630 <malloc>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	61f8      	str	r0, [r7, #28]
 8008bc6:	b928      	cbnz	r0, 8008bd4 <__pow5mult+0x40>
 8008bc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8008c40 <__pow5mult+0xac>)
 8008bce:	481d      	ldr	r0, [pc, #116]	@ (8008c44 <__pow5mult+0xb0>)
 8008bd0:	f001 fb4a 	bl	800a268 <__assert_func>
 8008bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd8:	6004      	str	r4, [r0, #0]
 8008bda:	60c4      	str	r4, [r0, #12]
 8008bdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008be0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be4:	b94c      	cbnz	r4, 8008bfa <__pow5mult+0x66>
 8008be6:	f240 2171 	movw	r1, #625	@ 0x271
 8008bea:	4638      	mov	r0, r7
 8008bec:	f7ff ff14 	bl	8008a18 <__i2b>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bf8:	6003      	str	r3, [r0, #0]
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	07eb      	lsls	r3, r5, #31
 8008c00:	d50a      	bpl.n	8008c18 <__pow5mult+0x84>
 8008c02:	4631      	mov	r1, r6
 8008c04:	4622      	mov	r2, r4
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7ff ff1c 	bl	8008a44 <__multiply>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff fe03 	bl	800881c <_Bfree>
 8008c16:	4646      	mov	r6, r8
 8008c18:	106d      	asrs	r5, r5, #1
 8008c1a:	d00b      	beq.n	8008c34 <__pow5mult+0xa0>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	b938      	cbnz	r0, 8008c30 <__pow5mult+0x9c>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4621      	mov	r1, r4
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ff0d 	bl	8008a44 <__multiply>
 8008c2a:	6020      	str	r0, [r4, #0]
 8008c2c:	f8c0 9000 	str.w	r9, [r0]
 8008c30:	4604      	mov	r4, r0
 8008c32:	e7e4      	b.n	8008bfe <__pow5mult+0x6a>
 8008c34:	4630      	mov	r0, r6
 8008c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800b1cc 	.word	0x0800b1cc
 8008c40:	0800b0f0 	.word	0x0800b0f0
 8008c44:	0800b170 	.word	0x0800b170

08008c48 <__lshift>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4691      	mov	r9, r2
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	6849      	ldr	r1, [r1, #4]
 8008c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c60:	f108 0601 	add.w	r6, r8, #1
 8008c64:	42b3      	cmp	r3, r6
 8008c66:	db0b      	blt.n	8008c80 <__lshift+0x38>
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff fd97 	bl	800879c <_Balloc>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b948      	cbnz	r0, 8008c86 <__lshift+0x3e>
 8008c72:	4602      	mov	r2, r0
 8008c74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c78:	4b27      	ldr	r3, [pc, #156]	@ (8008d18 <__lshift+0xd0>)
 8008c7a:	4828      	ldr	r0, [pc, #160]	@ (8008d1c <__lshift+0xd4>)
 8008c7c:	f001 faf4 	bl	800a268 <__assert_func>
 8008c80:	3101      	adds	r1, #1
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	e7ee      	b.n	8008c64 <__lshift+0x1c>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f100 0114 	add.w	r1, r0, #20
 8008c8c:	f100 0210 	add.w	r2, r0, #16
 8008c90:	4618      	mov	r0, r3
 8008c92:	4553      	cmp	r3, sl
 8008c94:	db33      	blt.n	8008cfe <__lshift+0xb6>
 8008c96:	6920      	ldr	r0, [r4, #16]
 8008c98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c9c:	f104 0314 	add.w	r3, r4, #20
 8008ca0:	f019 091f 	ands.w	r9, r9, #31
 8008ca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cac:	d02b      	beq.n	8008d06 <__lshift+0xbe>
 8008cae:	468a      	mov	sl, r1
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	fa00 f009 	lsl.w	r0, r0, r9
 8008cbc:	4310      	orrs	r0, r2
 8008cbe:	f84a 0b04 	str.w	r0, [sl], #4
 8008cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc6:	459c      	cmp	ip, r3
 8008cc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ccc:	d8f3      	bhi.n	8008cb6 <__lshift+0x6e>
 8008cce:	ebac 0304 	sub.w	r3, ip, r4
 8008cd2:	3b15      	subs	r3, #21
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	3304      	adds	r3, #4
 8008cda:	f104 0015 	add.w	r0, r4, #21
 8008cde:	4584      	cmp	ip, r0
 8008ce0:	bf38      	it	cc
 8008ce2:	2304      	movcc	r3, #4
 8008ce4:	50ca      	str	r2, [r1, r3]
 8008ce6:	b10a      	cbz	r2, 8008cec <__lshift+0xa4>
 8008ce8:	f108 0602 	add.w	r6, r8, #2
 8008cec:	3e01      	subs	r6, #1
 8008cee:	4638      	mov	r0, r7
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	612e      	str	r6, [r5, #16]
 8008cf4:	f7ff fd92 	bl	800881c <_Bfree>
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d02:	3301      	adds	r3, #1
 8008d04:	e7c5      	b.n	8008c92 <__lshift+0x4a>
 8008d06:	3904      	subs	r1, #4
 8008d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0c:	459c      	cmp	ip, r3
 8008d0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d12:	d8f9      	bhi.n	8008d08 <__lshift+0xc0>
 8008d14:	e7ea      	b.n	8008cec <__lshift+0xa4>
 8008d16:	bf00      	nop
 8008d18:	0800b15f 	.word	0x0800b15f
 8008d1c:	0800b170 	.word	0x0800b170

08008d20 <__mcmp>:
 8008d20:	4603      	mov	r3, r0
 8008d22:	690a      	ldr	r2, [r1, #16]
 8008d24:	6900      	ldr	r0, [r0, #16]
 8008d26:	b530      	push	{r4, r5, lr}
 8008d28:	1a80      	subs	r0, r0, r2
 8008d2a:	d10e      	bne.n	8008d4a <__mcmp+0x2a>
 8008d2c:	3314      	adds	r3, #20
 8008d2e:	3114      	adds	r1, #20
 8008d30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d40:	4295      	cmp	r5, r2
 8008d42:	d003      	beq.n	8008d4c <__mcmp+0x2c>
 8008d44:	d205      	bcs.n	8008d52 <__mcmp+0x32>
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d4a:	bd30      	pop	{r4, r5, pc}
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d3f3      	bcc.n	8008d38 <__mcmp+0x18>
 8008d50:	e7fb      	b.n	8008d4a <__mcmp+0x2a>
 8008d52:	2001      	movs	r0, #1
 8008d54:	e7f9      	b.n	8008d4a <__mcmp+0x2a>
	...

08008d58 <__mdiff>:
 8008d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	4689      	mov	r9, r1
 8008d5e:	4606      	mov	r6, r0
 8008d60:	4611      	mov	r1, r2
 8008d62:	4648      	mov	r0, r9
 8008d64:	4614      	mov	r4, r2
 8008d66:	f7ff ffdb 	bl	8008d20 <__mcmp>
 8008d6a:	1e05      	subs	r5, r0, #0
 8008d6c:	d112      	bne.n	8008d94 <__mdiff+0x3c>
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff fd13 	bl	800879c <_Balloc>
 8008d76:	4602      	mov	r2, r0
 8008d78:	b928      	cbnz	r0, 8008d86 <__mdiff+0x2e>
 8008d7a:	f240 2137 	movw	r1, #567	@ 0x237
 8008d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e78 <__mdiff+0x120>)
 8008d80:	483e      	ldr	r0, [pc, #248]	@ (8008e7c <__mdiff+0x124>)
 8008d82:	f001 fa71 	bl	800a268 <__assert_func>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	b003      	add	sp, #12
 8008d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d94:	bfbc      	itt	lt
 8008d96:	464b      	movlt	r3, r9
 8008d98:	46a1      	movlt	r9, r4
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008da0:	bfba      	itte	lt
 8008da2:	461c      	movlt	r4, r3
 8008da4:	2501      	movlt	r5, #1
 8008da6:	2500      	movge	r5, #0
 8008da8:	f7ff fcf8 	bl	800879c <_Balloc>
 8008dac:	4602      	mov	r2, r0
 8008dae:	b918      	cbnz	r0, 8008db8 <__mdiff+0x60>
 8008db0:	f240 2145 	movw	r1, #581	@ 0x245
 8008db4:	4b30      	ldr	r3, [pc, #192]	@ (8008e78 <__mdiff+0x120>)
 8008db6:	e7e3      	b.n	8008d80 <__mdiff+0x28>
 8008db8:	f100 0b14 	add.w	fp, r0, #20
 8008dbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dc0:	f109 0310 	add.w	r3, r9, #16
 8008dc4:	60c5      	str	r5, [r0, #12]
 8008dc6:	f04f 0c00 	mov.w	ip, #0
 8008dca:	f109 0514 	add.w	r5, r9, #20
 8008dce:	46d9      	mov	r9, fp
 8008dd0:	6926      	ldr	r6, [r4, #16]
 8008dd2:	f104 0e14 	add.w	lr, r4, #20
 8008dd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dda:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	9b01      	ldr	r3, [sp, #4]
 8008de2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008de6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dea:	b281      	uxth	r1, r0
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	fa1f f38a 	uxth.w	r3, sl
 8008df2:	1a5b      	subs	r3, r3, r1
 8008df4:	0c00      	lsrs	r0, r0, #16
 8008df6:	4463      	add	r3, ip
 8008df8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dfc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e06:	4576      	cmp	r6, lr
 8008e08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e0c:	f849 3b04 	str.w	r3, [r9], #4
 8008e10:	d8e6      	bhi.n	8008de0 <__mdiff+0x88>
 8008e12:	1b33      	subs	r3, r6, r4
 8008e14:	3b15      	subs	r3, #21
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	3415      	adds	r4, #21
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	bf38      	it	cc
 8008e22:	2304      	movcc	r3, #4
 8008e24:	441d      	add	r5, r3
 8008e26:	445b      	add	r3, fp
 8008e28:	461e      	mov	r6, r3
 8008e2a:	462c      	mov	r4, r5
 8008e2c:	4544      	cmp	r4, r8
 8008e2e:	d30e      	bcc.n	8008e4e <__mdiff+0xf6>
 8008e30:	f108 0103 	add.w	r1, r8, #3
 8008e34:	1b49      	subs	r1, r1, r5
 8008e36:	f021 0103 	bic.w	r1, r1, #3
 8008e3a:	3d03      	subs	r5, #3
 8008e3c:	45a8      	cmp	r8, r5
 8008e3e:	bf38      	it	cc
 8008e40:	2100      	movcc	r1, #0
 8008e42:	440b      	add	r3, r1
 8008e44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e48:	b199      	cbz	r1, 8008e72 <__mdiff+0x11a>
 8008e4a:	6117      	str	r7, [r2, #16]
 8008e4c:	e79e      	b.n	8008d8c <__mdiff+0x34>
 8008e4e:	46e6      	mov	lr, ip
 8008e50:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e54:	fa1f fc81 	uxth.w	ip, r1
 8008e58:	44f4      	add	ip, lr
 8008e5a:	0c08      	lsrs	r0, r1, #16
 8008e5c:	4471      	add	r1, lr
 8008e5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e62:	b289      	uxth	r1, r1
 8008e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e6c:	f846 1b04 	str.w	r1, [r6], #4
 8008e70:	e7dc      	b.n	8008e2c <__mdiff+0xd4>
 8008e72:	3f01      	subs	r7, #1
 8008e74:	e7e6      	b.n	8008e44 <__mdiff+0xec>
 8008e76:	bf00      	nop
 8008e78:	0800b15f 	.word	0x0800b15f
 8008e7c:	0800b170 	.word	0x0800b170

08008e80 <__ulp>:
 8008e80:	4b0e      	ldr	r3, [pc, #56]	@ (8008ebc <__ulp+0x3c>)
 8008e82:	400b      	ands	r3, r1
 8008e84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc08      	bgt.n	8008e9e <__ulp+0x1e>
 8008e8c:	425b      	negs	r3, r3
 8008e8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e96:	da04      	bge.n	8008ea2 <__ulp+0x22>
 8008e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e9c:	4113      	asrs	r3, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	e008      	b.n	8008eb4 <__ulp+0x34>
 8008ea2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ea6:	2b1e      	cmp	r3, #30
 8008ea8:	bfd6      	itet	le
 8008eaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008eae:	2201      	movgt	r2, #1
 8008eb0:	40da      	lsrle	r2, r3
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	7ff00000 	.word	0x7ff00000

08008ec0 <__b2d>:
 8008ec0:	6902      	ldr	r2, [r0, #16]
 8008ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec4:	f100 0614 	add.w	r6, r0, #20
 8008ec8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008ecc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008ed0:	4f1e      	ldr	r7, [pc, #120]	@ (8008f4c <__b2d+0x8c>)
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff fd54 	bl	8008980 <__hi0bits>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f1c0 0020 	rsb	r0, r0, #32
 8008ede:	2b0a      	cmp	r3, #10
 8008ee0:	f1a2 0504 	sub.w	r5, r2, #4
 8008ee4:	6008      	str	r0, [r1, #0]
 8008ee6:	dc12      	bgt.n	8008f0e <__b2d+0x4e>
 8008ee8:	42ae      	cmp	r6, r5
 8008eea:	bf2c      	ite	cs
 8008eec:	2200      	movcs	r2, #0
 8008eee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008ef2:	f1c3 0c0b 	rsb	ip, r3, #11
 8008ef6:	3315      	adds	r3, #21
 8008ef8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008efc:	fa04 f303 	lsl.w	r3, r4, r3
 8008f00:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f04:	ea4e 0107 	orr.w	r1, lr, r7
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f0e:	42ae      	cmp	r6, r5
 8008f10:	bf36      	itet	cc
 8008f12:	f1a2 0508 	subcc.w	r5, r2, #8
 8008f16:	2200      	movcs	r2, #0
 8008f18:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f1c:	3b0b      	subs	r3, #11
 8008f1e:	d012      	beq.n	8008f46 <__b2d+0x86>
 8008f20:	f1c3 0720 	rsb	r7, r3, #32
 8008f24:	fa22 f107 	lsr.w	r1, r2, r7
 8008f28:	409c      	lsls	r4, r3
 8008f2a:	430c      	orrs	r4, r1
 8008f2c:	42b5      	cmp	r5, r6
 8008f2e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008f32:	bf94      	ite	ls
 8008f34:	2400      	movls	r4, #0
 8008f36:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008f3a:	409a      	lsls	r2, r3
 8008f3c:	40fc      	lsrs	r4, r7
 8008f3e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f42:	4322      	orrs	r2, r4
 8008f44:	e7e1      	b.n	8008f0a <__b2d+0x4a>
 8008f46:	ea44 0107 	orr.w	r1, r4, r7
 8008f4a:	e7de      	b.n	8008f0a <__b2d+0x4a>
 8008f4c:	3ff00000 	.word	0x3ff00000

08008f50 <__d2b>:
 8008f50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008f54:	2101      	movs	r1, #1
 8008f56:	4690      	mov	r8, r2
 8008f58:	4699      	mov	r9, r3
 8008f5a:	9e08      	ldr	r6, [sp, #32]
 8008f5c:	f7ff fc1e 	bl	800879c <_Balloc>
 8008f60:	4604      	mov	r4, r0
 8008f62:	b930      	cbnz	r0, 8008f72 <__d2b+0x22>
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <__d2b+0xa8>)
 8008f6c:	4823      	ldr	r0, [pc, #140]	@ (8008ffc <__d2b+0xac>)
 8008f6e:	f001 f97b 	bl	800a268 <__assert_func>
 8008f72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f7a:	b10d      	cbz	r5, 8008f80 <__d2b+0x30>
 8008f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f1b8 0300 	subs.w	r3, r8, #0
 8008f86:	d024      	beq.n	8008fd2 <__d2b+0x82>
 8008f88:	4668      	mov	r0, sp
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	f7ff fd17 	bl	80089be <__lo0bits>
 8008f90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f94:	b1d8      	cbz	r0, 8008fce <__d2b+0x7e>
 8008f96:	f1c0 0320 	rsb	r3, r0, #32
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	40c2      	lsrs	r2, r0
 8008fa2:	6163      	str	r3, [r4, #20]
 8008fa4:	9201      	str	r2, [sp, #4]
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf0c      	ite	eq
 8008fac:	2201      	moveq	r2, #1
 8008fae:	2202      	movne	r2, #2
 8008fb0:	61a3      	str	r3, [r4, #24]
 8008fb2:	6122      	str	r2, [r4, #16]
 8008fb4:	b1ad      	cbz	r5, 8008fe2 <__d2b+0x92>
 8008fb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fba:	4405      	add	r5, r0
 8008fbc:	6035      	str	r5, [r6, #0]
 8008fbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc4:	6018      	str	r0, [r3, #0]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	b002      	add	sp, #8
 8008fca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008fce:	6161      	str	r1, [r4, #20]
 8008fd0:	e7e9      	b.n	8008fa6 <__d2b+0x56>
 8008fd2:	a801      	add	r0, sp, #4
 8008fd4:	f7ff fcf3 	bl	80089be <__lo0bits>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	6163      	str	r3, [r4, #20]
 8008fde:	3020      	adds	r0, #32
 8008fe0:	e7e7      	b.n	8008fb2 <__d2b+0x62>
 8008fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fea:	6030      	str	r0, [r6, #0]
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	f7ff fcc7 	bl	8008980 <__hi0bits>
 8008ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ff6:	e7e4      	b.n	8008fc2 <__d2b+0x72>
 8008ff8:	0800b15f 	.word	0x0800b15f
 8008ffc:	0800b170 	.word	0x0800b170

08009000 <__ratio>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b085      	sub	sp, #20
 8009006:	e9cd 1000 	strd	r1, r0, [sp]
 800900a:	a902      	add	r1, sp, #8
 800900c:	f7ff ff58 	bl	8008ec0 <__b2d>
 8009010:	468b      	mov	fp, r1
 8009012:	4606      	mov	r6, r0
 8009014:	460f      	mov	r7, r1
 8009016:	9800      	ldr	r0, [sp, #0]
 8009018:	a903      	add	r1, sp, #12
 800901a:	f7ff ff51 	bl	8008ec0 <__b2d>
 800901e:	460d      	mov	r5, r1
 8009020:	9b01      	ldr	r3, [sp, #4]
 8009022:	4689      	mov	r9, r1
 8009024:	6919      	ldr	r1, [r3, #16]
 8009026:	9b00      	ldr	r3, [sp, #0]
 8009028:	4604      	mov	r4, r0
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	4630      	mov	r0, r6
 800902e:	1ac9      	subs	r1, r1, r3
 8009030:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800903a:	2b00      	cmp	r3, #0
 800903c:	bfcd      	iteet	gt
 800903e:	463a      	movgt	r2, r7
 8009040:	462a      	movle	r2, r5
 8009042:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009046:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800904a:	bfd8      	it	le
 800904c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009050:	464b      	mov	r3, r9
 8009052:	4622      	mov	r2, r4
 8009054:	4659      	mov	r1, fp
 8009056:	f7f7 fb69 	bl	800072c <__aeabi_ddiv>
 800905a:	b005      	add	sp, #20
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009060 <__copybits>:
 8009060:	3901      	subs	r1, #1
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	1149      	asrs	r1, r1, #5
 8009066:	6914      	ldr	r4, [r2, #16]
 8009068:	3101      	adds	r1, #1
 800906a:	f102 0314 	add.w	r3, r2, #20
 800906e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009076:	1f05      	subs	r5, r0, #4
 8009078:	42a3      	cmp	r3, r4
 800907a:	d30c      	bcc.n	8009096 <__copybits+0x36>
 800907c:	1aa3      	subs	r3, r4, r2
 800907e:	3b11      	subs	r3, #17
 8009080:	f023 0303 	bic.w	r3, r3, #3
 8009084:	3211      	adds	r2, #17
 8009086:	42a2      	cmp	r2, r4
 8009088:	bf88      	it	hi
 800908a:	2300      	movhi	r3, #0
 800908c:	4418      	add	r0, r3
 800908e:	2300      	movs	r3, #0
 8009090:	4288      	cmp	r0, r1
 8009092:	d305      	bcc.n	80090a0 <__copybits+0x40>
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	f853 6b04 	ldr.w	r6, [r3], #4
 800909a:	f845 6f04 	str.w	r6, [r5, #4]!
 800909e:	e7eb      	b.n	8009078 <__copybits+0x18>
 80090a0:	f840 3b04 	str.w	r3, [r0], #4
 80090a4:	e7f4      	b.n	8009090 <__copybits+0x30>

080090a6 <__any_on>:
 80090a6:	f100 0214 	add.w	r2, r0, #20
 80090aa:	6900      	ldr	r0, [r0, #16]
 80090ac:	114b      	asrs	r3, r1, #5
 80090ae:	4298      	cmp	r0, r3
 80090b0:	b510      	push	{r4, lr}
 80090b2:	db11      	blt.n	80090d8 <__any_on+0x32>
 80090b4:	dd0a      	ble.n	80090cc <__any_on+0x26>
 80090b6:	f011 011f 	ands.w	r1, r1, #31
 80090ba:	d007      	beq.n	80090cc <__any_on+0x26>
 80090bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090c0:	fa24 f001 	lsr.w	r0, r4, r1
 80090c4:	fa00 f101 	lsl.w	r1, r0, r1
 80090c8:	428c      	cmp	r4, r1
 80090ca:	d10b      	bne.n	80090e4 <__any_on+0x3e>
 80090cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d803      	bhi.n	80090dc <__any_on+0x36>
 80090d4:	2000      	movs	r0, #0
 80090d6:	bd10      	pop	{r4, pc}
 80090d8:	4603      	mov	r3, r0
 80090da:	e7f7      	b.n	80090cc <__any_on+0x26>
 80090dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d0f5      	beq.n	80090d0 <__any_on+0x2a>
 80090e4:	2001      	movs	r0, #1
 80090e6:	e7f6      	b.n	80090d6 <__any_on+0x30>

080090e8 <sulp>:
 80090e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ec:	460f      	mov	r7, r1
 80090ee:	4690      	mov	r8, r2
 80090f0:	f7ff fec6 	bl	8008e80 <__ulp>
 80090f4:	4604      	mov	r4, r0
 80090f6:	460d      	mov	r5, r1
 80090f8:	f1b8 0f00 	cmp.w	r8, #0
 80090fc:	d011      	beq.n	8009122 <sulp+0x3a>
 80090fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009102:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd0b      	ble.n	8009122 <sulp+0x3a>
 800910a:	2400      	movs	r4, #0
 800910c:	051b      	lsls	r3, r3, #20
 800910e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009112:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	f7f7 f9dd 	bl	80004d8 <__aeabi_dmul>
 800911e:	4604      	mov	r4, r0
 8009120:	460d      	mov	r5, r1
 8009122:	4620      	mov	r0, r4
 8009124:	4629      	mov	r1, r5
 8009126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912a:	0000      	movs	r0, r0
 800912c:	0000      	movs	r0, r0
	...

08009130 <_strtod_l>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	b09f      	sub	sp, #124	@ 0x7c
 8009136:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009138:	2200      	movs	r2, #0
 800913a:	460c      	mov	r4, r1
 800913c:	921a      	str	r2, [sp, #104]	@ 0x68
 800913e:	f04f 0a00 	mov.w	sl, #0
 8009142:	f04f 0b00 	mov.w	fp, #0
 8009146:	460a      	mov	r2, r1
 8009148:	9005      	str	r0, [sp, #20]
 800914a:	9219      	str	r2, [sp, #100]	@ 0x64
 800914c:	7811      	ldrb	r1, [r2, #0]
 800914e:	292b      	cmp	r1, #43	@ 0x2b
 8009150:	d048      	beq.n	80091e4 <_strtod_l+0xb4>
 8009152:	d836      	bhi.n	80091c2 <_strtod_l+0x92>
 8009154:	290d      	cmp	r1, #13
 8009156:	d830      	bhi.n	80091ba <_strtod_l+0x8a>
 8009158:	2908      	cmp	r1, #8
 800915a:	d830      	bhi.n	80091be <_strtod_l+0x8e>
 800915c:	2900      	cmp	r1, #0
 800915e:	d039      	beq.n	80091d4 <_strtod_l+0xa4>
 8009160:	2200      	movs	r2, #0
 8009162:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009166:	782a      	ldrb	r2, [r5, #0]
 8009168:	2a30      	cmp	r2, #48	@ 0x30
 800916a:	f040 80b1 	bne.w	80092d0 <_strtod_l+0x1a0>
 800916e:	786a      	ldrb	r2, [r5, #1]
 8009170:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009174:	2a58      	cmp	r2, #88	@ 0x58
 8009176:	d16c      	bne.n	8009252 <_strtod_l+0x122>
 8009178:	9302      	str	r3, [sp, #8]
 800917a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917c:	4a8e      	ldr	r2, [pc, #568]	@ (80093b8 <_strtod_l+0x288>)
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	ab1a      	add	r3, sp, #104	@ 0x68
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009188:	a919      	add	r1, sp, #100	@ 0x64
 800918a:	f001 f907 	bl	800a39c <__gethex>
 800918e:	f010 060f 	ands.w	r6, r0, #15
 8009192:	4604      	mov	r4, r0
 8009194:	d005      	beq.n	80091a2 <_strtod_l+0x72>
 8009196:	2e06      	cmp	r6, #6
 8009198:	d126      	bne.n	80091e8 <_strtod_l+0xb8>
 800919a:	2300      	movs	r3, #0
 800919c:	3501      	adds	r5, #1
 800919e:	9519      	str	r5, [sp, #100]	@ 0x64
 80091a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f040 8584 	bne.w	8009cb2 <_strtod_l+0xb82>
 80091aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ac:	b1bb      	cbz	r3, 80091de <_strtod_l+0xae>
 80091ae:	4650      	mov	r0, sl
 80091b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80091b4:	b01f      	add	sp, #124	@ 0x7c
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	2920      	cmp	r1, #32
 80091bc:	d1d0      	bne.n	8009160 <_strtod_l+0x30>
 80091be:	3201      	adds	r2, #1
 80091c0:	e7c3      	b.n	800914a <_strtod_l+0x1a>
 80091c2:	292d      	cmp	r1, #45	@ 0x2d
 80091c4:	d1cc      	bne.n	8009160 <_strtod_l+0x30>
 80091c6:	2101      	movs	r1, #1
 80091c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091ca:	1c51      	adds	r1, r2, #1
 80091cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ce:	7852      	ldrb	r2, [r2, #1]
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	d1c7      	bne.n	8009164 <_strtod_l+0x34>
 80091d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 8568 	bne.w	8009cae <_strtod_l+0xb7e>
 80091de:	4650      	mov	r0, sl
 80091e0:	4659      	mov	r1, fp
 80091e2:	e7e7      	b.n	80091b4 <_strtod_l+0x84>
 80091e4:	2100      	movs	r1, #0
 80091e6:	e7ef      	b.n	80091c8 <_strtod_l+0x98>
 80091e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091ea:	b13a      	cbz	r2, 80091fc <_strtod_l+0xcc>
 80091ec:	2135      	movs	r1, #53	@ 0x35
 80091ee:	a81c      	add	r0, sp, #112	@ 0x70
 80091f0:	f7ff ff36 	bl	8009060 <__copybits>
 80091f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091f6:	9805      	ldr	r0, [sp, #20]
 80091f8:	f7ff fb10 	bl	800881c <_Bfree>
 80091fc:	3e01      	subs	r6, #1
 80091fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009200:	2e04      	cmp	r6, #4
 8009202:	d806      	bhi.n	8009212 <_strtod_l+0xe2>
 8009204:	e8df f006 	tbb	[pc, r6]
 8009208:	201d0314 	.word	0x201d0314
 800920c:	14          	.byte	0x14
 800920d:	00          	.byte	0x00
 800920e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009212:	05e1      	lsls	r1, r4, #23
 8009214:	bf48      	it	mi
 8009216:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800921a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921e:	0d1b      	lsrs	r3, r3, #20
 8009220:	051b      	lsls	r3, r3, #20
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1bd      	bne.n	80091a2 <_strtod_l+0x72>
 8009226:	f7fe fb1d 	bl	8007864 <__errno>
 800922a:	2322      	movs	r3, #34	@ 0x22
 800922c:	6003      	str	r3, [r0, #0]
 800922e:	e7b8      	b.n	80091a2 <_strtod_l+0x72>
 8009230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009234:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800923c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009240:	e7e7      	b.n	8009212 <_strtod_l+0xe2>
 8009242:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80093bc <_strtod_l+0x28c>
 8009246:	e7e4      	b.n	8009212 <_strtod_l+0xe2>
 8009248:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800924c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009250:	e7df      	b.n	8009212 <_strtod_l+0xe2>
 8009252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	9219      	str	r2, [sp, #100]	@ 0x64
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2b30      	cmp	r3, #48	@ 0x30
 800925c:	d0f9      	beq.n	8009252 <_strtod_l+0x122>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d09f      	beq.n	80091a2 <_strtod_l+0x72>
 8009262:	2301      	movs	r3, #1
 8009264:	9309      	str	r3, [sp, #36]	@ 0x24
 8009266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009268:	220a      	movs	r2, #10
 800926a:	930c      	str	r3, [sp, #48]	@ 0x30
 800926c:	2300      	movs	r3, #0
 800926e:	461f      	mov	r7, r3
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	930a      	str	r3, [sp, #40]	@ 0x28
 8009274:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009276:	7805      	ldrb	r5, [r0, #0]
 8009278:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800927c:	b2d9      	uxtb	r1, r3
 800927e:	2909      	cmp	r1, #9
 8009280:	d928      	bls.n	80092d4 <_strtod_l+0x1a4>
 8009282:	2201      	movs	r2, #1
 8009284:	494e      	ldr	r1, [pc, #312]	@ (80093c0 <_strtod_l+0x290>)
 8009286:	f000 ffc7 	bl	800a218 <strncmp>
 800928a:	2800      	cmp	r0, #0
 800928c:	d032      	beq.n	80092f4 <_strtod_l+0x1c4>
 800928e:	2000      	movs	r0, #0
 8009290:	462a      	mov	r2, r5
 8009292:	4681      	mov	r9, r0
 8009294:	463d      	mov	r5, r7
 8009296:	4603      	mov	r3, r0
 8009298:	2a65      	cmp	r2, #101	@ 0x65
 800929a:	d001      	beq.n	80092a0 <_strtod_l+0x170>
 800929c:	2a45      	cmp	r2, #69	@ 0x45
 800929e:	d114      	bne.n	80092ca <_strtod_l+0x19a>
 80092a0:	b91d      	cbnz	r5, 80092aa <_strtod_l+0x17a>
 80092a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a4:	4302      	orrs	r2, r0
 80092a6:	d095      	beq.n	80091d4 <_strtod_l+0xa4>
 80092a8:	2500      	movs	r5, #0
 80092aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092ac:	1c62      	adds	r2, r4, #1
 80092ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80092b0:	7862      	ldrb	r2, [r4, #1]
 80092b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80092b4:	d077      	beq.n	80093a6 <_strtod_l+0x276>
 80092b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80092b8:	d07b      	beq.n	80093b2 <_strtod_l+0x282>
 80092ba:	f04f 0c00 	mov.w	ip, #0
 80092be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092c2:	2909      	cmp	r1, #9
 80092c4:	f240 8082 	bls.w	80093cc <_strtod_l+0x29c>
 80092c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	e0a2      	b.n	8009416 <_strtod_l+0x2e6>
 80092d0:	2300      	movs	r3, #0
 80092d2:	e7c7      	b.n	8009264 <_strtod_l+0x134>
 80092d4:	2f08      	cmp	r7, #8
 80092d6:	bfd5      	itete	le
 80092d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092da:	9908      	ldrgt	r1, [sp, #32]
 80092dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80092e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092e4:	f100 0001 	add.w	r0, r0, #1
 80092e8:	bfd4      	ite	le
 80092ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092ec:	9308      	strgt	r3, [sp, #32]
 80092ee:	3701      	adds	r7, #1
 80092f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80092f2:	e7bf      	b.n	8009274 <_strtod_l+0x144>
 80092f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092fa:	785a      	ldrb	r2, [r3, #1]
 80092fc:	b37f      	cbz	r7, 800935e <_strtod_l+0x22e>
 80092fe:	4681      	mov	r9, r0
 8009300:	463d      	mov	r5, r7
 8009302:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009306:	2b09      	cmp	r3, #9
 8009308:	d912      	bls.n	8009330 <_strtod_l+0x200>
 800930a:	2301      	movs	r3, #1
 800930c:	e7c4      	b.n	8009298 <_strtod_l+0x168>
 800930e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009310:	3001      	adds	r0, #1
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	9219      	str	r2, [sp, #100]	@ 0x64
 8009316:	785a      	ldrb	r2, [r3, #1]
 8009318:	2a30      	cmp	r2, #48	@ 0x30
 800931a:	d0f8      	beq.n	800930e <_strtod_l+0x1de>
 800931c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009320:	2b08      	cmp	r3, #8
 8009322:	f200 84cb 	bhi.w	8009cbc <_strtod_l+0xb8c>
 8009326:	4681      	mov	r9, r0
 8009328:	2000      	movs	r0, #0
 800932a:	4605      	mov	r5, r0
 800932c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800932e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009330:	3a30      	subs	r2, #48	@ 0x30
 8009332:	f100 0301 	add.w	r3, r0, #1
 8009336:	d02a      	beq.n	800938e <_strtod_l+0x25e>
 8009338:	4499      	add	r9, r3
 800933a:	210a      	movs	r1, #10
 800933c:	462b      	mov	r3, r5
 800933e:	eb00 0c05 	add.w	ip, r0, r5
 8009342:	4563      	cmp	r3, ip
 8009344:	d10d      	bne.n	8009362 <_strtod_l+0x232>
 8009346:	1c69      	adds	r1, r5, #1
 8009348:	4401      	add	r1, r0
 800934a:	4428      	add	r0, r5
 800934c:	2808      	cmp	r0, #8
 800934e:	dc16      	bgt.n	800937e <_strtod_l+0x24e>
 8009350:	230a      	movs	r3, #10
 8009352:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009354:	fb03 2300 	mla	r3, r3, r0, r2
 8009358:	930a      	str	r3, [sp, #40]	@ 0x28
 800935a:	2300      	movs	r3, #0
 800935c:	e018      	b.n	8009390 <_strtod_l+0x260>
 800935e:	4638      	mov	r0, r7
 8009360:	e7da      	b.n	8009318 <_strtod_l+0x1e8>
 8009362:	2b08      	cmp	r3, #8
 8009364:	f103 0301 	add.w	r3, r3, #1
 8009368:	dc03      	bgt.n	8009372 <_strtod_l+0x242>
 800936a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800936c:	434e      	muls	r6, r1
 800936e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009370:	e7e7      	b.n	8009342 <_strtod_l+0x212>
 8009372:	2b10      	cmp	r3, #16
 8009374:	bfde      	ittt	le
 8009376:	9e08      	ldrle	r6, [sp, #32]
 8009378:	434e      	mulle	r6, r1
 800937a:	9608      	strle	r6, [sp, #32]
 800937c:	e7e1      	b.n	8009342 <_strtod_l+0x212>
 800937e:	280f      	cmp	r0, #15
 8009380:	dceb      	bgt.n	800935a <_strtod_l+0x22a>
 8009382:	230a      	movs	r3, #10
 8009384:	9808      	ldr	r0, [sp, #32]
 8009386:	fb03 2300 	mla	r3, r3, r0, r2
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	e7e5      	b.n	800935a <_strtod_l+0x22a>
 800938e:	4629      	mov	r1, r5
 8009390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009392:	460d      	mov	r5, r1
 8009394:	1c50      	adds	r0, r2, #1
 8009396:	9019      	str	r0, [sp, #100]	@ 0x64
 8009398:	7852      	ldrb	r2, [r2, #1]
 800939a:	4618      	mov	r0, r3
 800939c:	e7b1      	b.n	8009302 <_strtod_l+0x1d2>
 800939e:	f04f 0900 	mov.w	r9, #0
 80093a2:	2301      	movs	r3, #1
 80093a4:	e77d      	b.n	80092a2 <_strtod_l+0x172>
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	1ca2      	adds	r2, r4, #2
 80093ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ae:	78a2      	ldrb	r2, [r4, #2]
 80093b0:	e785      	b.n	80092be <_strtod_l+0x18e>
 80093b2:	f04f 0c01 	mov.w	ip, #1
 80093b6:	e7f8      	b.n	80093aa <_strtod_l+0x27a>
 80093b8:	0800b2e0 	.word	0x0800b2e0
 80093bc:	7ff00000 	.word	0x7ff00000
 80093c0:	0800b2c8 	.word	0x0800b2c8
 80093c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c6:	1c51      	adds	r1, r2, #1
 80093c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ca:	7852      	ldrb	r2, [r2, #1]
 80093cc:	2a30      	cmp	r2, #48	@ 0x30
 80093ce:	d0f9      	beq.n	80093c4 <_strtod_l+0x294>
 80093d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093d4:	2908      	cmp	r1, #8
 80093d6:	f63f af78 	bhi.w	80092ca <_strtod_l+0x19a>
 80093da:	f04f 080a 	mov.w	r8, #10
 80093de:	3a30      	subs	r2, #48	@ 0x30
 80093e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e8:	1c56      	adds	r6, r2, #1
 80093ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80093ec:	7852      	ldrb	r2, [r2, #1]
 80093ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093f2:	f1be 0f09 	cmp.w	lr, #9
 80093f6:	d939      	bls.n	800946c <_strtod_l+0x33c>
 80093f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093fe:	1a76      	subs	r6, r6, r1
 8009400:	2e08      	cmp	r6, #8
 8009402:	dc03      	bgt.n	800940c <_strtod_l+0x2dc>
 8009404:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009406:	4588      	cmp	r8, r1
 8009408:	bfa8      	it	ge
 800940a:	4688      	movge	r8, r1
 800940c:	f1bc 0f00 	cmp.w	ip, #0
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x2e6>
 8009412:	f1c8 0800 	rsb	r8, r8, #0
 8009416:	2d00      	cmp	r5, #0
 8009418:	d14e      	bne.n	80094b8 <_strtod_l+0x388>
 800941a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800941c:	4308      	orrs	r0, r1
 800941e:	f47f aec0 	bne.w	80091a2 <_strtod_l+0x72>
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f aed6 	bne.w	80091d4 <_strtod_l+0xa4>
 8009428:	2a69      	cmp	r2, #105	@ 0x69
 800942a:	d028      	beq.n	800947e <_strtod_l+0x34e>
 800942c:	dc25      	bgt.n	800947a <_strtod_l+0x34a>
 800942e:	2a49      	cmp	r2, #73	@ 0x49
 8009430:	d025      	beq.n	800947e <_strtod_l+0x34e>
 8009432:	2a4e      	cmp	r2, #78	@ 0x4e
 8009434:	f47f aece 	bne.w	80091d4 <_strtod_l+0xa4>
 8009438:	499a      	ldr	r1, [pc, #616]	@ (80096a4 <_strtod_l+0x574>)
 800943a:	a819      	add	r0, sp, #100	@ 0x64
 800943c:	f001 f9d0 	bl	800a7e0 <__match>
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f aec7 	beq.w	80091d4 <_strtod_l+0xa4>
 8009446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b28      	cmp	r3, #40	@ 0x28
 800944c:	d12e      	bne.n	80094ac <_strtod_l+0x37c>
 800944e:	4996      	ldr	r1, [pc, #600]	@ (80096a8 <_strtod_l+0x578>)
 8009450:	aa1c      	add	r2, sp, #112	@ 0x70
 8009452:	a819      	add	r0, sp, #100	@ 0x64
 8009454:	f001 f9d8 	bl	800a808 <__hexnan>
 8009458:	2805      	cmp	r0, #5
 800945a:	d127      	bne.n	80094ac <_strtod_l+0x37c>
 800945c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800945e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800946a:	e69a      	b.n	80091a2 <_strtod_l+0x72>
 800946c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800946e:	fb08 2101 	mla	r1, r8, r1, r2
 8009472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009476:	920e      	str	r2, [sp, #56]	@ 0x38
 8009478:	e7b5      	b.n	80093e6 <_strtod_l+0x2b6>
 800947a:	2a6e      	cmp	r2, #110	@ 0x6e
 800947c:	e7da      	b.n	8009434 <_strtod_l+0x304>
 800947e:	498b      	ldr	r1, [pc, #556]	@ (80096ac <_strtod_l+0x57c>)
 8009480:	a819      	add	r0, sp, #100	@ 0x64
 8009482:	f001 f9ad 	bl	800a7e0 <__match>
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f aea4 	beq.w	80091d4 <_strtod_l+0xa4>
 800948c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948e:	4988      	ldr	r1, [pc, #544]	@ (80096b0 <_strtod_l+0x580>)
 8009490:	3b01      	subs	r3, #1
 8009492:	a819      	add	r0, sp, #100	@ 0x64
 8009494:	9319      	str	r3, [sp, #100]	@ 0x64
 8009496:	f001 f9a3 	bl	800a7e0 <__match>
 800949a:	b910      	cbnz	r0, 80094a2 <_strtod_l+0x372>
 800949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949e:	3301      	adds	r3, #1
 80094a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094a2:	f04f 0a00 	mov.w	sl, #0
 80094a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80096b4 <_strtod_l+0x584>
 80094aa:	e67a      	b.n	80091a2 <_strtod_l+0x72>
 80094ac:	4882      	ldr	r0, [pc, #520]	@ (80096b8 <_strtod_l+0x588>)
 80094ae:	f000 fed5 	bl	800a25c <nan>
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	e674      	b.n	80091a2 <_strtod_l+0x72>
 80094b8:	eba8 0309 	sub.w	r3, r8, r9
 80094bc:	2f00      	cmp	r7, #0
 80094be:	bf08      	it	eq
 80094c0:	462f      	moveq	r7, r5
 80094c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094c4:	2d10      	cmp	r5, #16
 80094c6:	462c      	mov	r4, r5
 80094c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ca:	bfa8      	it	ge
 80094cc:	2410      	movge	r4, #16
 80094ce:	f7f6 ff89 	bl	80003e4 <__aeabi_ui2d>
 80094d2:	2d09      	cmp	r5, #9
 80094d4:	4682      	mov	sl, r0
 80094d6:	468b      	mov	fp, r1
 80094d8:	dc11      	bgt.n	80094fe <_strtod_l+0x3ce>
 80094da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f43f ae60 	beq.w	80091a2 <_strtod_l+0x72>
 80094e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e4:	dd76      	ble.n	80095d4 <_strtod_l+0x4a4>
 80094e6:	2b16      	cmp	r3, #22
 80094e8:	dc5d      	bgt.n	80095a6 <_strtod_l+0x476>
 80094ea:	4974      	ldr	r1, [pc, #464]	@ (80096bc <_strtod_l+0x58c>)
 80094ec:	4652      	mov	r2, sl
 80094ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094f2:	465b      	mov	r3, fp
 80094f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f8:	f7f6 ffee 	bl	80004d8 <__aeabi_dmul>
 80094fc:	e7d9      	b.n	80094b2 <_strtod_l+0x382>
 80094fe:	4b6f      	ldr	r3, [pc, #444]	@ (80096bc <_strtod_l+0x58c>)
 8009500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009508:	f7f6 ffe6 	bl	80004d8 <__aeabi_dmul>
 800950c:	4682      	mov	sl, r0
 800950e:	9808      	ldr	r0, [sp, #32]
 8009510:	468b      	mov	fp, r1
 8009512:	f7f6 ff67 	bl	80003e4 <__aeabi_ui2d>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4650      	mov	r0, sl
 800951c:	4659      	mov	r1, fp
 800951e:	f7f6 fe25 	bl	800016c <__adddf3>
 8009522:	2d0f      	cmp	r5, #15
 8009524:	4682      	mov	sl, r0
 8009526:	468b      	mov	fp, r1
 8009528:	ddd7      	ble.n	80094da <_strtod_l+0x3aa>
 800952a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952c:	1b2c      	subs	r4, r5, r4
 800952e:	441c      	add	r4, r3
 8009530:	2c00      	cmp	r4, #0
 8009532:	f340 8096 	ble.w	8009662 <_strtod_l+0x532>
 8009536:	f014 030f 	ands.w	r3, r4, #15
 800953a:	d00a      	beq.n	8009552 <_strtod_l+0x422>
 800953c:	495f      	ldr	r1, [pc, #380]	@ (80096bc <_strtod_l+0x58c>)
 800953e:	4652      	mov	r2, sl
 8009540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009548:	465b      	mov	r3, fp
 800954a:	f7f6 ffc5 	bl	80004d8 <__aeabi_dmul>
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	f034 040f 	bics.w	r4, r4, #15
 8009556:	d073      	beq.n	8009640 <_strtod_l+0x510>
 8009558:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800955c:	dd48      	ble.n	80095f0 <_strtod_l+0x4c0>
 800955e:	2400      	movs	r4, #0
 8009560:	46a0      	mov	r8, r4
 8009562:	46a1      	mov	r9, r4
 8009564:	940a      	str	r4, [sp, #40]	@ 0x28
 8009566:	2322      	movs	r3, #34	@ 0x22
 8009568:	f04f 0a00 	mov.w	sl, #0
 800956c:	9a05      	ldr	r2, [sp, #20]
 800956e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80096b4 <_strtod_l+0x584>
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	f43f ae13 	beq.w	80091a2 <_strtod_l+0x72>
 800957c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f7ff f94c 	bl	800881c <_Bfree>
 8009584:	4649      	mov	r1, r9
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7ff f948 	bl	800881c <_Bfree>
 800958c:	4641      	mov	r1, r8
 800958e:	9805      	ldr	r0, [sp, #20]
 8009590:	f7ff f944 	bl	800881c <_Bfree>
 8009594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	f7ff f940 	bl	800881c <_Bfree>
 800959c:	4621      	mov	r1, r4
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f93c 	bl	800881c <_Bfree>
 80095a4:	e5fd      	b.n	80091a2 <_strtod_l+0x72>
 80095a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095ac:	4293      	cmp	r3, r2
 80095ae:	dbbc      	blt.n	800952a <_strtod_l+0x3fa>
 80095b0:	4c42      	ldr	r4, [pc, #264]	@ (80096bc <_strtod_l+0x58c>)
 80095b2:	f1c5 050f 	rsb	r5, r5, #15
 80095b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095ba:	4652      	mov	r2, sl
 80095bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c0:	465b      	mov	r3, fp
 80095c2:	f7f6 ff89 	bl	80004d8 <__aeabi_dmul>
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	1b5d      	subs	r5, r3, r5
 80095ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095d2:	e791      	b.n	80094f8 <_strtod_l+0x3c8>
 80095d4:	3316      	adds	r3, #22
 80095d6:	dba8      	blt.n	800952a <_strtod_l+0x3fa>
 80095d8:	4b38      	ldr	r3, [pc, #224]	@ (80096bc <_strtod_l+0x58c>)
 80095da:	eba9 0808 	sub.w	r8, r9, r8
 80095de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095e2:	4650      	mov	r0, sl
 80095e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095e8:	4659      	mov	r1, fp
 80095ea:	f7f7 f89f 	bl	800072c <__aeabi_ddiv>
 80095ee:	e760      	b.n	80094b2 <_strtod_l+0x382>
 80095f0:	4b33      	ldr	r3, [pc, #204]	@ (80096c0 <_strtod_l+0x590>)
 80095f2:	4650      	mov	r0, sl
 80095f4:	9308      	str	r3, [sp, #32]
 80095f6:	2300      	movs	r3, #0
 80095f8:	4659      	mov	r1, fp
 80095fa:	461e      	mov	r6, r3
 80095fc:	1124      	asrs	r4, r4, #4
 80095fe:	2c01      	cmp	r4, #1
 8009600:	dc21      	bgt.n	8009646 <_strtod_l+0x516>
 8009602:	b10b      	cbz	r3, 8009608 <_strtod_l+0x4d8>
 8009604:	4682      	mov	sl, r0
 8009606:	468b      	mov	fp, r1
 8009608:	492d      	ldr	r1, [pc, #180]	@ (80096c0 <_strtod_l+0x590>)
 800960a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800960e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009612:	4652      	mov	r2, sl
 8009614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009618:	465b      	mov	r3, fp
 800961a:	f7f6 ff5d 	bl	80004d8 <__aeabi_dmul>
 800961e:	4b25      	ldr	r3, [pc, #148]	@ (80096b4 <_strtod_l+0x584>)
 8009620:	460a      	mov	r2, r1
 8009622:	400b      	ands	r3, r1
 8009624:	4927      	ldr	r1, [pc, #156]	@ (80096c4 <_strtod_l+0x594>)
 8009626:	4682      	mov	sl, r0
 8009628:	428b      	cmp	r3, r1
 800962a:	d898      	bhi.n	800955e <_strtod_l+0x42e>
 800962c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009630:	428b      	cmp	r3, r1
 8009632:	bf86      	itte	hi
 8009634:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009638:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80096c8 <_strtod_l+0x598>
 800963c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009640:	2300      	movs	r3, #0
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	e07a      	b.n	800973c <_strtod_l+0x60c>
 8009646:	07e2      	lsls	r2, r4, #31
 8009648:	d505      	bpl.n	8009656 <_strtod_l+0x526>
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 ff42 	bl	80004d8 <__aeabi_dmul>
 8009654:	2301      	movs	r3, #1
 8009656:	9a08      	ldr	r2, [sp, #32]
 8009658:	3601      	adds	r6, #1
 800965a:	3208      	adds	r2, #8
 800965c:	1064      	asrs	r4, r4, #1
 800965e:	9208      	str	r2, [sp, #32]
 8009660:	e7cd      	b.n	80095fe <_strtod_l+0x4ce>
 8009662:	d0ed      	beq.n	8009640 <_strtod_l+0x510>
 8009664:	4264      	negs	r4, r4
 8009666:	f014 020f 	ands.w	r2, r4, #15
 800966a:	d00a      	beq.n	8009682 <_strtod_l+0x552>
 800966c:	4b13      	ldr	r3, [pc, #76]	@ (80096bc <_strtod_l+0x58c>)
 800966e:	4650      	mov	r0, sl
 8009670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009674:	4659      	mov	r1, fp
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f7 f857 	bl	800072c <__aeabi_ddiv>
 800967e:	4682      	mov	sl, r0
 8009680:	468b      	mov	fp, r1
 8009682:	1124      	asrs	r4, r4, #4
 8009684:	d0dc      	beq.n	8009640 <_strtod_l+0x510>
 8009686:	2c1f      	cmp	r4, #31
 8009688:	dd20      	ble.n	80096cc <_strtod_l+0x59c>
 800968a:	2400      	movs	r4, #0
 800968c:	46a0      	mov	r8, r4
 800968e:	46a1      	mov	r9, r4
 8009690:	940a      	str	r4, [sp, #40]	@ 0x28
 8009692:	2322      	movs	r3, #34	@ 0x22
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	f04f 0a00 	mov.w	sl, #0
 800969a:	f04f 0b00 	mov.w	fp, #0
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	e768      	b.n	8009574 <_strtod_l+0x444>
 80096a2:	bf00      	nop
 80096a4:	0800b0b7 	.word	0x0800b0b7
 80096a8:	0800b2cc 	.word	0x0800b2cc
 80096ac:	0800b0af 	.word	0x0800b0af
 80096b0:	0800b0e6 	.word	0x0800b0e6
 80096b4:	7ff00000 	.word	0x7ff00000
 80096b8:	0800b475 	.word	0x0800b475
 80096bc:	0800b200 	.word	0x0800b200
 80096c0:	0800b1d8 	.word	0x0800b1d8
 80096c4:	7ca00000 	.word	0x7ca00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	f014 0310 	ands.w	r3, r4, #16
 80096d0:	bf18      	it	ne
 80096d2:	236a      	movne	r3, #106	@ 0x6a
 80096d4:	4650      	mov	r0, sl
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	4659      	mov	r1, fp
 80096da:	2300      	movs	r3, #0
 80096dc:	4ea9      	ldr	r6, [pc, #676]	@ (8009984 <_strtod_l+0x854>)
 80096de:	07e2      	lsls	r2, r4, #31
 80096e0:	d504      	bpl.n	80096ec <_strtod_l+0x5bc>
 80096e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e6:	f7f6 fef7 	bl	80004d8 <__aeabi_dmul>
 80096ea:	2301      	movs	r3, #1
 80096ec:	1064      	asrs	r4, r4, #1
 80096ee:	f106 0608 	add.w	r6, r6, #8
 80096f2:	d1f4      	bne.n	80096de <_strtod_l+0x5ae>
 80096f4:	b10b      	cbz	r3, 80096fa <_strtod_l+0x5ca>
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	b1b3      	cbz	r3, 800972c <_strtod_l+0x5fc>
 80096fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009706:	2b00      	cmp	r3, #0
 8009708:	4659      	mov	r1, fp
 800970a:	dd0f      	ble.n	800972c <_strtod_l+0x5fc>
 800970c:	2b1f      	cmp	r3, #31
 800970e:	dd57      	ble.n	80097c0 <_strtod_l+0x690>
 8009710:	2b34      	cmp	r3, #52	@ 0x34
 8009712:	bfd8      	it	le
 8009714:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009718:	f04f 0a00 	mov.w	sl, #0
 800971c:	bfcf      	iteee	gt
 800971e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009722:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009726:	4093      	lslle	r3, r2
 8009728:	ea03 0b01 	andle.w	fp, r3, r1
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	f7f7 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8009738:	2800      	cmp	r0, #0
 800973a:	d1a6      	bne.n	800968a <_strtod_l+0x55a>
 800973c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973e:	463a      	mov	r2, r7
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009744:	462b      	mov	r3, r5
 8009746:	9805      	ldr	r0, [sp, #20]
 8009748:	f7ff f8d0 	bl	80088ec <__s2b>
 800974c:	900a      	str	r0, [sp, #40]	@ 0x28
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f af05 	beq.w	800955e <_strtod_l+0x42e>
 8009754:	2400      	movs	r4, #0
 8009756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009758:	eba9 0308 	sub.w	r3, r9, r8
 800975c:	2a00      	cmp	r2, #0
 800975e:	bfa8      	it	ge
 8009760:	2300      	movge	r3, #0
 8009762:	46a0      	mov	r8, r4
 8009764:	9312      	str	r3, [sp, #72]	@ 0x48
 8009766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800976a:	9316      	str	r3, [sp, #88]	@ 0x58
 800976c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800976e:	9805      	ldr	r0, [sp, #20]
 8009770:	6859      	ldr	r1, [r3, #4]
 8009772:	f7ff f813 	bl	800879c <_Balloc>
 8009776:	4681      	mov	r9, r0
 8009778:	2800      	cmp	r0, #0
 800977a:	f43f aef4 	beq.w	8009566 <_strtod_l+0x436>
 800977e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009780:	300c      	adds	r0, #12
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	f103 010c 	add.w	r1, r3, #12
 8009788:	3202      	adds	r2, #2
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	f7fe f8a5 	bl	80078da <memcpy>
 8009790:	ab1c      	add	r3, sp, #112	@ 0x70
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4652      	mov	r2, sl
 800979a:	465b      	mov	r3, fp
 800979c:	9805      	ldr	r0, [sp, #20]
 800979e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097a2:	f7ff fbd5 	bl	8008f50 <__d2b>
 80097a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f43f aedc 	beq.w	8009566 <_strtod_l+0x436>
 80097ae:	2101      	movs	r1, #1
 80097b0:	9805      	ldr	r0, [sp, #20]
 80097b2:	f7ff f931 	bl	8008a18 <__i2b>
 80097b6:	4680      	mov	r8, r0
 80097b8:	b948      	cbnz	r0, 80097ce <_strtod_l+0x69e>
 80097ba:	f04f 0800 	mov.w	r8, #0
 80097be:	e6d2      	b.n	8009566 <_strtod_l+0x436>
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	ea03 0a0a 	and.w	sl, r3, sl
 80097cc:	e7ae      	b.n	800972c <_strtod_l+0x5fc>
 80097ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097d2:	2d00      	cmp	r5, #0
 80097d4:	bfab      	itete	ge
 80097d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097da:	18ef      	addge	r7, r5, r3
 80097dc:	1b5e      	sublt	r6, r3, r5
 80097de:	9b08      	ldr	r3, [sp, #32]
 80097e0:	bfa8      	it	ge
 80097e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097e4:	eba5 0503 	sub.w	r5, r5, r3
 80097e8:	4415      	add	r5, r2
 80097ea:	4b67      	ldr	r3, [pc, #412]	@ (8009988 <_strtod_l+0x858>)
 80097ec:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80097f0:	bfb8      	it	lt
 80097f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097f4:	429d      	cmp	r5, r3
 80097f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097fa:	da50      	bge.n	800989e <_strtod_l+0x76e>
 80097fc:	1b5b      	subs	r3, r3, r5
 80097fe:	2b1f      	cmp	r3, #31
 8009800:	f04f 0101 	mov.w	r1, #1
 8009804:	eba2 0203 	sub.w	r2, r2, r3
 8009808:	dc3d      	bgt.n	8009886 <_strtod_l+0x756>
 800980a:	fa01 f303 	lsl.w	r3, r1, r3
 800980e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009810:	2300      	movs	r3, #0
 8009812:	9310      	str	r3, [sp, #64]	@ 0x40
 8009814:	18bd      	adds	r5, r7, r2
 8009816:	9b08      	ldr	r3, [sp, #32]
 8009818:	42af      	cmp	r7, r5
 800981a:	4416      	add	r6, r2
 800981c:	441e      	add	r6, r3
 800981e:	463b      	mov	r3, r7
 8009820:	bfa8      	it	ge
 8009822:	462b      	movge	r3, r5
 8009824:	42b3      	cmp	r3, r6
 8009826:	bfa8      	it	ge
 8009828:	4633      	movge	r3, r6
 800982a:	2b00      	cmp	r3, #0
 800982c:	bfc2      	ittt	gt
 800982e:	1aed      	subgt	r5, r5, r3
 8009830:	1af6      	subgt	r6, r6, r3
 8009832:	1aff      	subgt	r7, r7, r3
 8009834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009836:	2b00      	cmp	r3, #0
 8009838:	dd16      	ble.n	8009868 <_strtod_l+0x738>
 800983a:	4641      	mov	r1, r8
 800983c:	461a      	mov	r2, r3
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7ff f9a8 	bl	8008b94 <__pow5mult>
 8009844:	4680      	mov	r8, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d0b7      	beq.n	80097ba <_strtod_l+0x68a>
 800984a:	4601      	mov	r1, r0
 800984c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f7ff f8f8 	bl	8008a44 <__multiply>
 8009854:	900e      	str	r0, [sp, #56]	@ 0x38
 8009856:	2800      	cmp	r0, #0
 8009858:	f43f ae85 	beq.w	8009566 <_strtod_l+0x436>
 800985c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800985e:	9805      	ldr	r0, [sp, #20]
 8009860:	f7fe ffdc 	bl	800881c <_Bfree>
 8009864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009866:	931a      	str	r3, [sp, #104]	@ 0x68
 8009868:	2d00      	cmp	r5, #0
 800986a:	dc1d      	bgt.n	80098a8 <_strtod_l+0x778>
 800986c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd23      	ble.n	80098ba <_strtod_l+0x78a>
 8009872:	4649      	mov	r1, r9
 8009874:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009876:	9805      	ldr	r0, [sp, #20]
 8009878:	f7ff f98c 	bl	8008b94 <__pow5mult>
 800987c:	4681      	mov	r9, r0
 800987e:	b9e0      	cbnz	r0, 80098ba <_strtod_l+0x78a>
 8009880:	f04f 0900 	mov.w	r9, #0
 8009884:	e66f      	b.n	8009566 <_strtod_l+0x436>
 8009886:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800988a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800988e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009892:	35e2      	adds	r5, #226	@ 0xe2
 8009894:	fa01 f305 	lsl.w	r3, r1, r5
 8009898:	9310      	str	r3, [sp, #64]	@ 0x40
 800989a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800989c:	e7ba      	b.n	8009814 <_strtod_l+0x6e4>
 800989e:	2300      	movs	r3, #0
 80098a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80098a2:	2301      	movs	r3, #1
 80098a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098a6:	e7b5      	b.n	8009814 <_strtod_l+0x6e4>
 80098a8:	462a      	mov	r2, r5
 80098aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ac:	9805      	ldr	r0, [sp, #20]
 80098ae:	f7ff f9cb 	bl	8008c48 <__lshift>
 80098b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1d9      	bne.n	800986c <_strtod_l+0x73c>
 80098b8:	e655      	b.n	8009566 <_strtod_l+0x436>
 80098ba:	2e00      	cmp	r6, #0
 80098bc:	dd07      	ble.n	80098ce <_strtod_l+0x79e>
 80098be:	4649      	mov	r1, r9
 80098c0:	4632      	mov	r2, r6
 80098c2:	9805      	ldr	r0, [sp, #20]
 80098c4:	f7ff f9c0 	bl	8008c48 <__lshift>
 80098c8:	4681      	mov	r9, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d0d8      	beq.n	8009880 <_strtod_l+0x750>
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	dd08      	ble.n	80098e4 <_strtod_l+0x7b4>
 80098d2:	4641      	mov	r1, r8
 80098d4:	463a      	mov	r2, r7
 80098d6:	9805      	ldr	r0, [sp, #20]
 80098d8:	f7ff f9b6 	bl	8008c48 <__lshift>
 80098dc:	4680      	mov	r8, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f ae41 	beq.w	8009566 <_strtod_l+0x436>
 80098e4:	464a      	mov	r2, r9
 80098e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098e8:	9805      	ldr	r0, [sp, #20]
 80098ea:	f7ff fa35 	bl	8008d58 <__mdiff>
 80098ee:	4604      	mov	r4, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f43f ae38 	beq.w	8009566 <_strtod_l+0x436>
 80098f6:	68c3      	ldr	r3, [r0, #12]
 80098f8:	4641      	mov	r1, r8
 80098fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098fc:	2300      	movs	r3, #0
 80098fe:	60c3      	str	r3, [r0, #12]
 8009900:	f7ff fa0e 	bl	8008d20 <__mcmp>
 8009904:	2800      	cmp	r0, #0
 8009906:	da45      	bge.n	8009994 <_strtod_l+0x864>
 8009908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800990a:	ea53 030a 	orrs.w	r3, r3, sl
 800990e:	d16b      	bne.n	80099e8 <_strtod_l+0x8b8>
 8009910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009914:	2b00      	cmp	r3, #0
 8009916:	d167      	bne.n	80099e8 <_strtod_l+0x8b8>
 8009918:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800991c:	0d1b      	lsrs	r3, r3, #20
 800991e:	051b      	lsls	r3, r3, #20
 8009920:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009924:	d960      	bls.n	80099e8 <_strtod_l+0x8b8>
 8009926:	6963      	ldr	r3, [r4, #20]
 8009928:	b913      	cbnz	r3, 8009930 <_strtod_l+0x800>
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	2b01      	cmp	r3, #1
 800992e:	dd5b      	ble.n	80099e8 <_strtod_l+0x8b8>
 8009930:	4621      	mov	r1, r4
 8009932:	2201      	movs	r2, #1
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	f7ff f987 	bl	8008c48 <__lshift>
 800993a:	4641      	mov	r1, r8
 800993c:	4604      	mov	r4, r0
 800993e:	f7ff f9ef 	bl	8008d20 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	dd50      	ble.n	80099e8 <_strtod_l+0x8b8>
 8009946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800994a:	9a08      	ldr	r2, [sp, #32]
 800994c:	0d1b      	lsrs	r3, r3, #20
 800994e:	051b      	lsls	r3, r3, #20
 8009950:	2a00      	cmp	r2, #0
 8009952:	d06a      	beq.n	8009a2a <_strtod_l+0x8fa>
 8009954:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009958:	d867      	bhi.n	8009a2a <_strtod_l+0x8fa>
 800995a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800995e:	f67f ae98 	bls.w	8009692 <_strtod_l+0x562>
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	4b09      	ldr	r3, [pc, #36]	@ (800998c <_strtod_l+0x85c>)
 8009968:	2200      	movs	r2, #0
 800996a:	f7f6 fdb5 	bl	80004d8 <__aeabi_dmul>
 800996e:	4b08      	ldr	r3, [pc, #32]	@ (8009990 <_strtod_l+0x860>)
 8009970:	4682      	mov	sl, r0
 8009972:	400b      	ands	r3, r1
 8009974:	468b      	mov	fp, r1
 8009976:	2b00      	cmp	r3, #0
 8009978:	f47f ae00 	bne.w	800957c <_strtod_l+0x44c>
 800997c:	2322      	movs	r3, #34	@ 0x22
 800997e:	9a05      	ldr	r2, [sp, #20]
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	e5fb      	b.n	800957c <_strtod_l+0x44c>
 8009984:	0800b2f8 	.word	0x0800b2f8
 8009988:	fffffc02 	.word	0xfffffc02
 800998c:	39500000 	.word	0x39500000
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009998:	d165      	bne.n	8009a66 <_strtod_l+0x936>
 800999a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800999c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099a0:	b35a      	cbz	r2, 80099fa <_strtod_l+0x8ca>
 80099a2:	4a99      	ldr	r2, [pc, #612]	@ (8009c08 <_strtod_l+0xad8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d12b      	bne.n	8009a00 <_strtod_l+0x8d0>
 80099a8:	9b08      	ldr	r3, [sp, #32]
 80099aa:	4651      	mov	r1, sl
 80099ac:	b303      	cbz	r3, 80099f0 <_strtod_l+0x8c0>
 80099ae:	465a      	mov	r2, fp
 80099b0:	4b96      	ldr	r3, [pc, #600]	@ (8009c0c <_strtod_l+0xadc>)
 80099b2:	4013      	ands	r3, r2
 80099b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099bc:	d81b      	bhi.n	80099f6 <_strtod_l+0x8c6>
 80099be:	0d1b      	lsrs	r3, r3, #20
 80099c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	4299      	cmp	r1, r3
 80099ca:	d119      	bne.n	8009a00 <_strtod_l+0x8d0>
 80099cc:	4b90      	ldr	r3, [pc, #576]	@ (8009c10 <_strtod_l+0xae0>)
 80099ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d102      	bne.n	80099da <_strtod_l+0x8aa>
 80099d4:	3101      	adds	r1, #1
 80099d6:	f43f adc6 	beq.w	8009566 <_strtod_l+0x436>
 80099da:	f04f 0a00 	mov.w	sl, #0
 80099de:	4b8b      	ldr	r3, [pc, #556]	@ (8009c0c <_strtod_l+0xadc>)
 80099e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099e2:	401a      	ands	r2, r3
 80099e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099e8:	9b08      	ldr	r3, [sp, #32]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1b9      	bne.n	8009962 <_strtod_l+0x832>
 80099ee:	e5c5      	b.n	800957c <_strtod_l+0x44c>
 80099f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099f4:	e7e8      	b.n	80099c8 <_strtod_l+0x898>
 80099f6:	4613      	mov	r3, r2
 80099f8:	e7e6      	b.n	80099c8 <_strtod_l+0x898>
 80099fa:	ea53 030a 	orrs.w	r3, r3, sl
 80099fe:	d0a2      	beq.n	8009946 <_strtod_l+0x816>
 8009a00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a02:	b1db      	cbz	r3, 8009a3c <_strtod_l+0x90c>
 8009a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a06:	4213      	tst	r3, r2
 8009a08:	d0ee      	beq.n	80099e8 <_strtod_l+0x8b8>
 8009a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	4659      	mov	r1, fp
 8009a10:	9a08      	ldr	r2, [sp, #32]
 8009a12:	b1bb      	cbz	r3, 8009a44 <_strtod_l+0x914>
 8009a14:	f7ff fb68 	bl	80090e8 <sulp>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a20:	f7f6 fba4 	bl	800016c <__adddf3>
 8009a24:	4682      	mov	sl, r0
 8009a26:	468b      	mov	fp, r1
 8009a28:	e7de      	b.n	80099e8 <_strtod_l+0x8b8>
 8009a2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a32:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009a36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a3a:	e7d5      	b.n	80099e8 <_strtod_l+0x8b8>
 8009a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a3e:	ea13 0f0a 	tst.w	r3, sl
 8009a42:	e7e1      	b.n	8009a08 <_strtod_l+0x8d8>
 8009a44:	f7ff fb50 	bl	80090e8 <sulp>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a50:	f7f6 fb8a 	bl	8000168 <__aeabi_dsub>
 8009a54:	2200      	movs	r2, #0
 8009a56:	2300      	movs	r3, #0
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	f7f6 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0c1      	beq.n	80099e8 <_strtod_l+0x8b8>
 8009a64:	e615      	b.n	8009692 <_strtod_l+0x562>
 8009a66:	4641      	mov	r1, r8
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7ff fac9 	bl	8009000 <__ratio>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	f7f6 ffaa 	bl	80009d0 <__aeabi_dcmple>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d06d      	beq.n	8009b5c <_strtod_l+0xa2c>
 8009a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d178      	bne.n	8009b78 <_strtod_l+0xa48>
 8009a86:	f1ba 0f00 	cmp.w	sl, #0
 8009a8a:	d156      	bne.n	8009b3a <_strtod_l+0xa0a>
 8009a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d158      	bne.n	8009b48 <_strtod_l+0xa18>
 8009a96:	2200      	movs	r2, #0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4b5d      	ldr	r3, [pc, #372]	@ (8009c14 <_strtod_l+0xae4>)
 8009a9e:	f7f6 ff8d 	bl	80009bc <__aeabi_dcmplt>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d157      	bne.n	8009b56 <_strtod_l+0xa26>
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	2200      	movs	r2, #0
 8009aac:	4b5a      	ldr	r3, [pc, #360]	@ (8009c18 <_strtod_l+0xae8>)
 8009aae:	f7f6 fd13 	bl	80004d8 <__aeabi_dmul>
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009aba:	9606      	str	r6, [sp, #24]
 8009abc:	9307      	str	r3, [sp, #28]
 8009abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ac2:	4d52      	ldr	r5, [pc, #328]	@ (8009c0c <_strtod_l+0xadc>)
 8009ac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aca:	401d      	ands	r5, r3
 8009acc:	4b53      	ldr	r3, [pc, #332]	@ (8009c1c <_strtod_l+0xaec>)
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	f040 80aa 	bne.w	8009c28 <_strtod_l+0xaf8>
 8009ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009adc:	4659      	mov	r1, fp
 8009ade:	f7ff f9cf 	bl	8008e80 <__ulp>
 8009ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ae6:	f7f6 fcf7 	bl	80004d8 <__aeabi_dmul>
 8009aea:	4652      	mov	r2, sl
 8009aec:	465b      	mov	r3, fp
 8009aee:	f7f6 fb3d 	bl	800016c <__adddf3>
 8009af2:	460b      	mov	r3, r1
 8009af4:	4945      	ldr	r1, [pc, #276]	@ (8009c0c <_strtod_l+0xadc>)
 8009af6:	4a4a      	ldr	r2, [pc, #296]	@ (8009c20 <_strtod_l+0xaf0>)
 8009af8:	4019      	ands	r1, r3
 8009afa:	4291      	cmp	r1, r2
 8009afc:	4682      	mov	sl, r0
 8009afe:	d942      	bls.n	8009b86 <_strtod_l+0xa56>
 8009b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b02:	4b43      	ldr	r3, [pc, #268]	@ (8009c10 <_strtod_l+0xae0>)
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d103      	bne.n	8009b10 <_strtod_l+0x9e0>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f43f ad2b 	beq.w	8009566 <_strtod_l+0x436>
 8009b10:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009b14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009c10 <_strtod_l+0xae0>
 8009b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f7fe fe7e 	bl	800881c <_Bfree>
 8009b20:	4649      	mov	r1, r9
 8009b22:	9805      	ldr	r0, [sp, #20]
 8009b24:	f7fe fe7a 	bl	800881c <_Bfree>
 8009b28:	4641      	mov	r1, r8
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	f7fe fe76 	bl	800881c <_Bfree>
 8009b30:	4621      	mov	r1, r4
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	f7fe fe72 	bl	800881c <_Bfree>
 8009b38:	e618      	b.n	800976c <_strtod_l+0x63c>
 8009b3a:	f1ba 0f01 	cmp.w	sl, #1
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0xa18>
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f ada5 	beq.w	8009692 <_strtod_l+0x562>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4b36      	ldr	r3, [pc, #216]	@ (8009c24 <_strtod_l+0xaf4>)
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b52:	4f30      	ldr	r7, [pc, #192]	@ (8009c14 <_strtod_l+0xae4>)
 8009b54:	e7b3      	b.n	8009abe <_strtod_l+0x98e>
 8009b56:	2600      	movs	r6, #0
 8009b58:	4f2f      	ldr	r7, [pc, #188]	@ (8009c18 <_strtod_l+0xae8>)
 8009b5a:	e7ac      	b.n	8009ab6 <_strtod_l+0x986>
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4b2d      	ldr	r3, [pc, #180]	@ (8009c18 <_strtod_l+0xae8>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fcb8 	bl	80004d8 <__aeabi_dmul>
 8009b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0a1      	beq.n	8009ab6 <_strtod_l+0x986>
 8009b72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b76:	e7a2      	b.n	8009abe <_strtod_l+0x98e>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4b26      	ldr	r3, [pc, #152]	@ (8009c14 <_strtod_l+0xae4>)
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	461f      	mov	r7, r3
 8009b80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b84:	e79b      	b.n	8009abe <_strtod_l+0x98e>
 8009b86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b8a:	9b08      	ldr	r3, [sp, #32]
 8009b8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c1      	bne.n	8009b18 <_strtod_l+0x9e8>
 8009b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b98:	0d1b      	lsrs	r3, r3, #20
 8009b9a:	051b      	lsls	r3, r3, #20
 8009b9c:	429d      	cmp	r5, r3
 8009b9e:	d1bb      	bne.n	8009b18 <_strtod_l+0x9e8>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f7 f856 	bl	8000c54 <__aeabi_d2lz>
 8009ba8:	f7f6 fc68 	bl	800047c <__aeabi_l2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fad8 	bl	8000168 <__aeabi_dsub>
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc6:	ea46 060a 	orr.w	r6, r6, sl
 8009bca:	431e      	orrs	r6, r3
 8009bcc:	d069      	beq.n	8009ca2 <_strtod_l+0xb72>
 8009bce:	a30a      	add	r3, pc, #40	@ (adr r3, 8009bf8 <_strtod_l+0xac8>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fef2 	bl	80009bc <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f47f accf 	bne.w	800957c <_strtod_l+0x44c>
 8009bde:	a308      	add	r3, pc, #32	@ (adr r3, 8009c00 <_strtod_l+0xad0>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be8:	f7f6 ff06 	bl	80009f8 <__aeabi_dcmpgt>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d093      	beq.n	8009b18 <_strtod_l+0x9e8>
 8009bf0:	e4c4      	b.n	800957c <_strtod_l+0x44c>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	94a03595 	.word	0x94a03595
 8009bfc:	3fdfffff 	.word	0x3fdfffff
 8009c00:	35afe535 	.word	0x35afe535
 8009c04:	3fe00000 	.word	0x3fe00000
 8009c08:	000fffff 	.word	0x000fffff
 8009c0c:	7ff00000 	.word	0x7ff00000
 8009c10:	7fefffff 	.word	0x7fefffff
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	3fe00000 	.word	0x3fe00000
 8009c1c:	7fe00000 	.word	0x7fe00000
 8009c20:	7c9fffff 	.word	0x7c9fffff
 8009c24:	bff00000 	.word	0xbff00000
 8009c28:	9b08      	ldr	r3, [sp, #32]
 8009c2a:	b323      	cbz	r3, 8009c76 <_strtod_l+0xb46>
 8009c2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c30:	d821      	bhi.n	8009c76 <_strtod_l+0xb46>
 8009c32:	a327      	add	r3, pc, #156	@ (adr r3, 8009cd0 <_strtod_l+0xba0>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 fec8 	bl	80009d0 <__aeabi_dcmple>
 8009c40:	b1a0      	cbz	r0, 8009c6c <_strtod_l+0xb3c>
 8009c42:	4639      	mov	r1, r7
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7f6 ff1f 	bl	8000a88 <__aeabi_d2uiz>
 8009c4a:	2801      	cmp	r0, #1
 8009c4c:	bf38      	it	cc
 8009c4e:	2001      	movcc	r0, #1
 8009c50:	f7f6 fbc8 	bl	80003e4 <__aeabi_ui2d>
 8009c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	b9fb      	cbnz	r3, 8009c9c <_strtod_l+0xb6c>
 8009c5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c60:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c62:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c72:	1b5b      	subs	r3, r3, r5
 8009c74:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c7e:	f7ff f8ff 	bl	8008e80 <__ulp>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4650      	mov	r0, sl
 8009c88:	4659      	mov	r1, fp
 8009c8a:	f7f6 fc25 	bl	80004d8 <__aeabi_dmul>
 8009c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c92:	f7f6 fa6b 	bl	800016c <__adddf3>
 8009c96:	4682      	mov	sl, r0
 8009c98:	468b      	mov	fp, r1
 8009c9a:	e776      	b.n	8009b8a <_strtod_l+0xa5a>
 8009c9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ca0:	e7e0      	b.n	8009c64 <_strtod_l+0xb34>
 8009ca2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009cd8 <_strtod_l+0xba8>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fe88 	bl	80009bc <__aeabi_dcmplt>
 8009cac:	e79e      	b.n	8009bec <_strtod_l+0xabc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	f7ff ba77 	b.w	80091aa <_strtod_l+0x7a>
 8009cbc:	2a65      	cmp	r2, #101	@ 0x65
 8009cbe:	f43f ab6e 	beq.w	800939e <_strtod_l+0x26e>
 8009cc2:	2a45      	cmp	r2, #69	@ 0x45
 8009cc4:	f43f ab6b 	beq.w	800939e <_strtod_l+0x26e>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f7ff bba6 	b.w	800941a <_strtod_l+0x2ea>
 8009cce:	bf00      	nop
 8009cd0:	ffc00000 	.word	0xffc00000
 8009cd4:	41dfffff 	.word	0x41dfffff
 8009cd8:	94a03595 	.word	0x94a03595
 8009cdc:	3fcfffff 	.word	0x3fcfffff

08009ce0 <_strtod_r>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	@ (8009ce8 <_strtod_r+0x8>)
 8009ce2:	f7ff ba25 	b.w	8009130 <_strtod_l>
 8009ce6:	bf00      	nop
 8009ce8:	2000006c 	.word	0x2000006c

08009cec <_strtol_l.constprop.0>:
 8009cec:	2b24      	cmp	r3, #36	@ 0x24
 8009cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf2:	4686      	mov	lr, r0
 8009cf4:	4690      	mov	r8, r2
 8009cf6:	d801      	bhi.n	8009cfc <_strtol_l.constprop.0+0x10>
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d106      	bne.n	8009d0a <_strtol_l.constprop.0+0x1e>
 8009cfc:	f7fd fdb2 	bl	8007864 <__errno>
 8009d00:	2316      	movs	r3, #22
 8009d02:	6003      	str	r3, [r0, #0]
 8009d04:	2000      	movs	r0, #0
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	4833      	ldr	r0, [pc, #204]	@ (8009ddc <_strtol_l.constprop.0+0xf0>)
 8009d0e:	462a      	mov	r2, r5
 8009d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d14:	5d06      	ldrb	r6, [r0, r4]
 8009d16:	f016 0608 	ands.w	r6, r6, #8
 8009d1a:	d1f8      	bne.n	8009d0e <_strtol_l.constprop.0+0x22>
 8009d1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d1e:	d12d      	bne.n	8009d7c <_strtol_l.constprop.0+0x90>
 8009d20:	2601      	movs	r6, #1
 8009d22:	782c      	ldrb	r4, [r5, #0]
 8009d24:	1c95      	adds	r5, r2, #2
 8009d26:	f033 0210 	bics.w	r2, r3, #16
 8009d2a:	d109      	bne.n	8009d40 <_strtol_l.constprop.0+0x54>
 8009d2c:	2c30      	cmp	r4, #48	@ 0x30
 8009d2e:	d12a      	bne.n	8009d86 <_strtol_l.constprop.0+0x9a>
 8009d30:	782a      	ldrb	r2, [r5, #0]
 8009d32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d36:	2a58      	cmp	r2, #88	@ 0x58
 8009d38:	d125      	bne.n	8009d86 <_strtol_l.constprop.0+0x9a>
 8009d3a:	2310      	movs	r3, #16
 8009d3c:	786c      	ldrb	r4, [r5, #1]
 8009d3e:	3502      	adds	r5, #2
 8009d40:	2200      	movs	r2, #0
 8009d42:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d46:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009d4a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d58:	2f09      	cmp	r7, #9
 8009d5a:	d81b      	bhi.n	8009d94 <_strtol_l.constprop.0+0xa8>
 8009d5c:	463c      	mov	r4, r7
 8009d5e:	42a3      	cmp	r3, r4
 8009d60:	dd27      	ble.n	8009db2 <_strtol_l.constprop.0+0xc6>
 8009d62:	1c57      	adds	r7, r2, #1
 8009d64:	d007      	beq.n	8009d76 <_strtol_l.constprop.0+0x8a>
 8009d66:	4581      	cmp	r9, r0
 8009d68:	d320      	bcc.n	8009dac <_strtol_l.constprop.0+0xc0>
 8009d6a:	d101      	bne.n	8009d70 <_strtol_l.constprop.0+0x84>
 8009d6c:	45a2      	cmp	sl, r4
 8009d6e:	db1d      	blt.n	8009dac <_strtol_l.constprop.0+0xc0>
 8009d70:	2201      	movs	r2, #1
 8009d72:	fb00 4003 	mla	r0, r0, r3, r4
 8009d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d7a:	e7eb      	b.n	8009d54 <_strtol_l.constprop.0+0x68>
 8009d7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d7e:	bf04      	itt	eq
 8009d80:	782c      	ldrbeq	r4, [r5, #0]
 8009d82:	1c95      	addeq	r5, r2, #2
 8009d84:	e7cf      	b.n	8009d26 <_strtol_l.constprop.0+0x3a>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1da      	bne.n	8009d40 <_strtol_l.constprop.0+0x54>
 8009d8a:	2c30      	cmp	r4, #48	@ 0x30
 8009d8c:	bf0c      	ite	eq
 8009d8e:	2308      	moveq	r3, #8
 8009d90:	230a      	movne	r3, #10
 8009d92:	e7d5      	b.n	8009d40 <_strtol_l.constprop.0+0x54>
 8009d94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d98:	2f19      	cmp	r7, #25
 8009d9a:	d801      	bhi.n	8009da0 <_strtol_l.constprop.0+0xb4>
 8009d9c:	3c37      	subs	r4, #55	@ 0x37
 8009d9e:	e7de      	b.n	8009d5e <_strtol_l.constprop.0+0x72>
 8009da0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009da4:	2f19      	cmp	r7, #25
 8009da6:	d804      	bhi.n	8009db2 <_strtol_l.constprop.0+0xc6>
 8009da8:	3c57      	subs	r4, #87	@ 0x57
 8009daa:	e7d8      	b.n	8009d5e <_strtol_l.constprop.0+0x72>
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009db0:	e7e1      	b.n	8009d76 <_strtol_l.constprop.0+0x8a>
 8009db2:	1c53      	adds	r3, r2, #1
 8009db4:	d108      	bne.n	8009dc8 <_strtol_l.constprop.0+0xdc>
 8009db6:	2322      	movs	r3, #34	@ 0x22
 8009db8:	4660      	mov	r0, ip
 8009dba:	f8ce 3000 	str.w	r3, [lr]
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	d0a0      	beq.n	8009d06 <_strtol_l.constprop.0+0x1a>
 8009dc4:	1e69      	subs	r1, r5, #1
 8009dc6:	e006      	b.n	8009dd6 <_strtol_l.constprop.0+0xea>
 8009dc8:	b106      	cbz	r6, 8009dcc <_strtol_l.constprop.0+0xe0>
 8009dca:	4240      	negs	r0, r0
 8009dcc:	f1b8 0f00 	cmp.w	r8, #0
 8009dd0:	d099      	beq.n	8009d06 <_strtol_l.constprop.0+0x1a>
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	d1f6      	bne.n	8009dc4 <_strtol_l.constprop.0+0xd8>
 8009dd6:	f8c8 1000 	str.w	r1, [r8]
 8009dda:	e794      	b.n	8009d06 <_strtol_l.constprop.0+0x1a>
 8009ddc:	0800b321 	.word	0x0800b321

08009de0 <_strtol_r>:
 8009de0:	f7ff bf84 	b.w	8009cec <_strtol_l.constprop.0>

08009de4 <__ssputs_r>:
 8009de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	461f      	mov	r7, r3
 8009dea:	688e      	ldr	r6, [r1, #8]
 8009dec:	4682      	mov	sl, r0
 8009dee:	42be      	cmp	r6, r7
 8009df0:	460c      	mov	r4, r1
 8009df2:	4690      	mov	r8, r2
 8009df4:	680b      	ldr	r3, [r1, #0]
 8009df6:	d82d      	bhi.n	8009e54 <__ssputs_r+0x70>
 8009df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e00:	d026      	beq.n	8009e50 <__ssputs_r+0x6c>
 8009e02:	6965      	ldr	r5, [r4, #20]
 8009e04:	6909      	ldr	r1, [r1, #16]
 8009e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e0a:	eba3 0901 	sub.w	r9, r3, r1
 8009e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e12:	1c7b      	adds	r3, r7, #1
 8009e14:	444b      	add	r3, r9
 8009e16:	106d      	asrs	r5, r5, #1
 8009e18:	429d      	cmp	r5, r3
 8009e1a:	bf38      	it	cc
 8009e1c:	461d      	movcc	r5, r3
 8009e1e:	0553      	lsls	r3, r2, #21
 8009e20:	d527      	bpl.n	8009e72 <__ssputs_r+0x8e>
 8009e22:	4629      	mov	r1, r5
 8009e24:	f7fe fc2e 	bl	8008684 <_malloc_r>
 8009e28:	4606      	mov	r6, r0
 8009e2a:	b360      	cbz	r0, 8009e86 <__ssputs_r+0xa2>
 8009e2c:	464a      	mov	r2, r9
 8009e2e:	6921      	ldr	r1, [r4, #16]
 8009e30:	f7fd fd53 	bl	80078da <memcpy>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	6126      	str	r6, [r4, #16]
 8009e42:	444e      	add	r6, r9
 8009e44:	6026      	str	r6, [r4, #0]
 8009e46:	463e      	mov	r6, r7
 8009e48:	6165      	str	r5, [r4, #20]
 8009e4a:	eba5 0509 	sub.w	r5, r5, r9
 8009e4e:	60a5      	str	r5, [r4, #8]
 8009e50:	42be      	cmp	r6, r7
 8009e52:	d900      	bls.n	8009e56 <__ssputs_r+0x72>
 8009e54:	463e      	mov	r6, r7
 8009e56:	4632      	mov	r2, r6
 8009e58:	4641      	mov	r1, r8
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	f000 f9c2 	bl	800a1e4 <memmove>
 8009e60:	2000      	movs	r0, #0
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	1b9b      	subs	r3, r3, r6
 8009e66:	60a3      	str	r3, [r4, #8]
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	4433      	add	r3, r6
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e72:	462a      	mov	r2, r5
 8009e74:	f000 fd75 	bl	800a962 <_realloc_r>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d1e0      	bne.n	8009e40 <__ssputs_r+0x5c>
 8009e7e:	4650      	mov	r0, sl
 8009e80:	6921      	ldr	r1, [r4, #16]
 8009e82:	f7fe fb8d 	bl	80085a0 <_free_r>
 8009e86:	230c      	movs	r3, #12
 8009e88:	f8ca 3000 	str.w	r3, [sl]
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	e7e9      	b.n	8009e6e <__ssputs_r+0x8a>
	...

08009e9c <_svfiprintf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	4698      	mov	r8, r3
 8009ea2:	898b      	ldrh	r3, [r1, #12]
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	061b      	lsls	r3, r3, #24
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	4614      	mov	r4, r2
 8009eac:	b09d      	sub	sp, #116	@ 0x74
 8009eae:	d510      	bpl.n	8009ed2 <_svfiprintf_r+0x36>
 8009eb0:	690b      	ldr	r3, [r1, #16]
 8009eb2:	b973      	cbnz	r3, 8009ed2 <_svfiprintf_r+0x36>
 8009eb4:	2140      	movs	r1, #64	@ 0x40
 8009eb6:	f7fe fbe5 	bl	8008684 <_malloc_r>
 8009eba:	6028      	str	r0, [r5, #0]
 8009ebc:	6128      	str	r0, [r5, #16]
 8009ebe:	b930      	cbnz	r0, 8009ece <_svfiprintf_r+0x32>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ec8:	b01d      	add	sp, #116	@ 0x74
 8009eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	2340      	movs	r3, #64	@ 0x40
 8009ed0:	616b      	str	r3, [r5, #20]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009edc:	2330      	movs	r3, #48	@ 0x30
 8009ede:	f04f 0901 	mov.w	r9, #1
 8009ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a080 <_svfiprintf_r+0x1e4>
 8009eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009eee:	4623      	mov	r3, r4
 8009ef0:	469a      	mov	sl, r3
 8009ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef6:	b10a      	cbz	r2, 8009efc <_svfiprintf_r+0x60>
 8009ef8:	2a25      	cmp	r2, #37	@ 0x25
 8009efa:	d1f9      	bne.n	8009ef0 <_svfiprintf_r+0x54>
 8009efc:	ebba 0b04 	subs.w	fp, sl, r4
 8009f00:	d00b      	beq.n	8009f1a <_svfiprintf_r+0x7e>
 8009f02:	465b      	mov	r3, fp
 8009f04:	4622      	mov	r2, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ff6b 	bl	8009de4 <__ssputs_r>
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f000 80a7 	beq.w	800a062 <_svfiprintf_r+0x1c6>
 8009f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f16:	445a      	add	r2, fp
 8009f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 809f 	beq.w	800a062 <_svfiprintf_r+0x1c6>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f2e:	f10a 0a01 	add.w	sl, sl, #1
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	9307      	str	r3, [sp, #28]
 8009f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f3c:	4654      	mov	r4, sl
 8009f3e:	2205      	movs	r2, #5
 8009f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f44:	484e      	ldr	r0, [pc, #312]	@ (800a080 <_svfiprintf_r+0x1e4>)
 8009f46:	f7fd fcba 	bl	80078be <memchr>
 8009f4a:	9a04      	ldr	r2, [sp, #16]
 8009f4c:	b9d8      	cbnz	r0, 8009f86 <_svfiprintf_r+0xea>
 8009f4e:	06d0      	lsls	r0, r2, #27
 8009f50:	bf44      	itt	mi
 8009f52:	2320      	movmi	r3, #32
 8009f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f58:	0711      	lsls	r1, r2, #28
 8009f5a:	bf44      	itt	mi
 8009f5c:	232b      	movmi	r3, #43	@ 0x2b
 8009f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f62:	f89a 3000 	ldrb.w	r3, [sl]
 8009f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f68:	d015      	beq.n	8009f96 <_svfiprintf_r+0xfa>
 8009f6a:	4654      	mov	r4, sl
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	f04f 0c0a 	mov.w	ip, #10
 8009f72:	9a07      	ldr	r2, [sp, #28]
 8009f74:	4621      	mov	r1, r4
 8009f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f7a:	3b30      	subs	r3, #48	@ 0x30
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d94b      	bls.n	800a018 <_svfiprintf_r+0x17c>
 8009f80:	b1b0      	cbz	r0, 8009fb0 <_svfiprintf_r+0x114>
 8009f82:	9207      	str	r2, [sp, #28]
 8009f84:	e014      	b.n	8009fb0 <_svfiprintf_r+0x114>
 8009f86:	eba0 0308 	sub.w	r3, r0, r8
 8009f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	46a2      	mov	sl, r4
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	e7d2      	b.n	8009f3c <_svfiprintf_r+0xa0>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d19      	adds	r1, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9103      	str	r1, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfbb      	ittet	lt
 8009fa2:	425b      	neglt	r3, r3
 8009fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa8:	9307      	strge	r3, [sp, #28]
 8009faa:	9307      	strlt	r3, [sp, #28]
 8009fac:	bfb8      	it	lt
 8009fae:	9204      	strlt	r2, [sp, #16]
 8009fb0:	7823      	ldrb	r3, [r4, #0]
 8009fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fb4:	d10a      	bne.n	8009fcc <_svfiprintf_r+0x130>
 8009fb6:	7863      	ldrb	r3, [r4, #1]
 8009fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fba:	d132      	bne.n	800a022 <_svfiprintf_r+0x186>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	3402      	adds	r4, #2
 8009fc0:	1d1a      	adds	r2, r3, #4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	9203      	str	r2, [sp, #12]
 8009fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a084 <_svfiprintf_r+0x1e8>
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	7821      	ldrb	r1, [r4, #0]
 8009fd6:	f7fd fc72 	bl	80078be <memchr>
 8009fda:	b138      	cbz	r0, 8009fec <_svfiprintf_r+0x150>
 8009fdc:	2240      	movs	r2, #64	@ 0x40
 8009fde:	9b04      	ldr	r3, [sp, #16]
 8009fe0:	eba0 000a 	sub.w	r0, r0, sl
 8009fe4:	4082      	lsls	r2, r0
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	3401      	adds	r4, #1
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff0:	2206      	movs	r2, #6
 8009ff2:	4825      	ldr	r0, [pc, #148]	@ (800a088 <_svfiprintf_r+0x1ec>)
 8009ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ff8:	f7fd fc61 	bl	80078be <memchr>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d036      	beq.n	800a06e <_svfiprintf_r+0x1d2>
 800a000:	4b22      	ldr	r3, [pc, #136]	@ (800a08c <_svfiprintf_r+0x1f0>)
 800a002:	bb1b      	cbnz	r3, 800a04c <_svfiprintf_r+0x1b0>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	3307      	adds	r3, #7
 800a008:	f023 0307 	bic.w	r3, r3, #7
 800a00c:	3308      	adds	r3, #8
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a012:	4433      	add	r3, r6
 800a014:	9309      	str	r3, [sp, #36]	@ 0x24
 800a016:	e76a      	b.n	8009eee <_svfiprintf_r+0x52>
 800a018:	460c      	mov	r4, r1
 800a01a:	2001      	movs	r0, #1
 800a01c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a020:	e7a8      	b.n	8009f74 <_svfiprintf_r+0xd8>
 800a022:	2300      	movs	r3, #0
 800a024:	f04f 0c0a 	mov.w	ip, #10
 800a028:	4619      	mov	r1, r3
 800a02a:	3401      	adds	r4, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	4620      	mov	r0, r4
 800a030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a034:	3a30      	subs	r2, #48	@ 0x30
 800a036:	2a09      	cmp	r2, #9
 800a038:	d903      	bls.n	800a042 <_svfiprintf_r+0x1a6>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0c6      	beq.n	8009fcc <_svfiprintf_r+0x130>
 800a03e:	9105      	str	r1, [sp, #20]
 800a040:	e7c4      	b.n	8009fcc <_svfiprintf_r+0x130>
 800a042:	4604      	mov	r4, r0
 800a044:	2301      	movs	r3, #1
 800a046:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04a:	e7f0      	b.n	800a02e <_svfiprintf_r+0x192>
 800a04c:	ab03      	add	r3, sp, #12
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	462a      	mov	r2, r5
 800a052:	4638      	mov	r0, r7
 800a054:	4b0e      	ldr	r3, [pc, #56]	@ (800a090 <_svfiprintf_r+0x1f4>)
 800a056:	a904      	add	r1, sp, #16
 800a058:	f7fc fcbe 	bl	80069d8 <_printf_float>
 800a05c:	1c42      	adds	r2, r0, #1
 800a05e:	4606      	mov	r6, r0
 800a060:	d1d6      	bne.n	800a010 <_svfiprintf_r+0x174>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	065b      	lsls	r3, r3, #25
 800a066:	f53f af2d 	bmi.w	8009ec4 <_svfiprintf_r+0x28>
 800a06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a06c:	e72c      	b.n	8009ec8 <_svfiprintf_r+0x2c>
 800a06e:	ab03      	add	r3, sp, #12
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	462a      	mov	r2, r5
 800a074:	4638      	mov	r0, r7
 800a076:	4b06      	ldr	r3, [pc, #24]	@ (800a090 <_svfiprintf_r+0x1f4>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	f7fc ff4b 	bl	8006f14 <_printf_i>
 800a07e:	e7ed      	b.n	800a05c <_svfiprintf_r+0x1c0>
 800a080:	0800b421 	.word	0x0800b421
 800a084:	0800b427 	.word	0x0800b427
 800a088:	0800b42b 	.word	0x0800b42b
 800a08c:	080069d9 	.word	0x080069d9
 800a090:	08009de5 	.word	0x08009de5

0800a094 <__sflush_r>:
 800a094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	0716      	lsls	r6, r2, #28
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	d454      	bmi.n	800a14c <__sflush_r+0xb8>
 800a0a2:	684b      	ldr	r3, [r1, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dc02      	bgt.n	800a0ae <__sflush_r+0x1a>
 800a0a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	dd48      	ble.n	800a140 <__sflush_r+0xac>
 800a0ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0b0:	2e00      	cmp	r6, #0
 800a0b2:	d045      	beq.n	800a140 <__sflush_r+0xac>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0ba:	682f      	ldr	r7, [r5, #0]
 800a0bc:	6a21      	ldr	r1, [r4, #32]
 800a0be:	602b      	str	r3, [r5, #0]
 800a0c0:	d030      	beq.n	800a124 <__sflush_r+0x90>
 800a0c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	0759      	lsls	r1, r3, #29
 800a0c8:	d505      	bpl.n	800a0d6 <__sflush_r+0x42>
 800a0ca:	6863      	ldr	r3, [r4, #4]
 800a0cc:	1ad2      	subs	r2, r2, r3
 800a0ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0d0:	b10b      	cbz	r3, 800a0d6 <__sflush_r+0x42>
 800a0d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4628      	mov	r0, r5
 800a0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0dc:	6a21      	ldr	r1, [r4, #32]
 800a0de:	47b0      	blx	r6
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	d106      	bne.n	800a0f4 <__sflush_r+0x60>
 800a0e6:	6829      	ldr	r1, [r5, #0]
 800a0e8:	291d      	cmp	r1, #29
 800a0ea:	d82b      	bhi.n	800a144 <__sflush_r+0xb0>
 800a0ec:	4a28      	ldr	r2, [pc, #160]	@ (800a190 <__sflush_r+0xfc>)
 800a0ee:	410a      	asrs	r2, r1
 800a0f0:	07d6      	lsls	r6, r2, #31
 800a0f2:	d427      	bmi.n	800a144 <__sflush_r+0xb0>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	6062      	str	r2, [r4, #4]
 800a0f8:	6922      	ldr	r2, [r4, #16]
 800a0fa:	04d9      	lsls	r1, r3, #19
 800a0fc:	6022      	str	r2, [r4, #0]
 800a0fe:	d504      	bpl.n	800a10a <__sflush_r+0x76>
 800a100:	1c42      	adds	r2, r0, #1
 800a102:	d101      	bne.n	800a108 <__sflush_r+0x74>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b903      	cbnz	r3, 800a10a <__sflush_r+0x76>
 800a108:	6560      	str	r0, [r4, #84]	@ 0x54
 800a10a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a10c:	602f      	str	r7, [r5, #0]
 800a10e:	b1b9      	cbz	r1, 800a140 <__sflush_r+0xac>
 800a110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a114:	4299      	cmp	r1, r3
 800a116:	d002      	beq.n	800a11e <__sflush_r+0x8a>
 800a118:	4628      	mov	r0, r5
 800a11a:	f7fe fa41 	bl	80085a0 <_free_r>
 800a11e:	2300      	movs	r3, #0
 800a120:	6363      	str	r3, [r4, #52]	@ 0x34
 800a122:	e00d      	b.n	800a140 <__sflush_r+0xac>
 800a124:	2301      	movs	r3, #1
 800a126:	4628      	mov	r0, r5
 800a128:	47b0      	blx	r6
 800a12a:	4602      	mov	r2, r0
 800a12c:	1c50      	adds	r0, r2, #1
 800a12e:	d1c9      	bne.n	800a0c4 <__sflush_r+0x30>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0c6      	beq.n	800a0c4 <__sflush_r+0x30>
 800a136:	2b1d      	cmp	r3, #29
 800a138:	d001      	beq.n	800a13e <__sflush_r+0xaa>
 800a13a:	2b16      	cmp	r3, #22
 800a13c:	d11d      	bne.n	800a17a <__sflush_r+0xe6>
 800a13e:	602f      	str	r7, [r5, #0]
 800a140:	2000      	movs	r0, #0
 800a142:	e021      	b.n	800a188 <__sflush_r+0xf4>
 800a144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a148:	b21b      	sxth	r3, r3
 800a14a:	e01a      	b.n	800a182 <__sflush_r+0xee>
 800a14c:	690f      	ldr	r7, [r1, #16]
 800a14e:	2f00      	cmp	r7, #0
 800a150:	d0f6      	beq.n	800a140 <__sflush_r+0xac>
 800a152:	0793      	lsls	r3, r2, #30
 800a154:	bf18      	it	ne
 800a156:	2300      	movne	r3, #0
 800a158:	680e      	ldr	r6, [r1, #0]
 800a15a:	bf08      	it	eq
 800a15c:	694b      	ldreq	r3, [r1, #20]
 800a15e:	1bf6      	subs	r6, r6, r7
 800a160:	600f      	str	r7, [r1, #0]
 800a162:	608b      	str	r3, [r1, #8]
 800a164:	2e00      	cmp	r6, #0
 800a166:	ddeb      	ble.n	800a140 <__sflush_r+0xac>
 800a168:	4633      	mov	r3, r6
 800a16a:	463a      	mov	r2, r7
 800a16c:	4628      	mov	r0, r5
 800a16e:	6a21      	ldr	r1, [r4, #32]
 800a170:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a174:	47e0      	blx	ip
 800a176:	2800      	cmp	r0, #0
 800a178:	dc07      	bgt.n	800a18a <__sflush_r+0xf6>
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18a:	4407      	add	r7, r0
 800a18c:	1a36      	subs	r6, r6, r0
 800a18e:	e7e9      	b.n	800a164 <__sflush_r+0xd0>
 800a190:	dfbffffe 	.word	0xdfbffffe

0800a194 <_fflush_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	690b      	ldr	r3, [r1, #16]
 800a198:	4605      	mov	r5, r0
 800a19a:	460c      	mov	r4, r1
 800a19c:	b913      	cbnz	r3, 800a1a4 <_fflush_r+0x10>
 800a19e:	2500      	movs	r5, #0
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	b118      	cbz	r0, 800a1ae <_fflush_r+0x1a>
 800a1a6:	6a03      	ldr	r3, [r0, #32]
 800a1a8:	b90b      	cbnz	r3, 800a1ae <_fflush_r+0x1a>
 800a1aa:	f7fd fa6f 	bl	800768c <__sinit>
 800a1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0f3      	beq.n	800a19e <_fflush_r+0xa>
 800a1b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1b8:	07d0      	lsls	r0, r2, #31
 800a1ba:	d404      	bmi.n	800a1c6 <_fflush_r+0x32>
 800a1bc:	0599      	lsls	r1, r3, #22
 800a1be:	d402      	bmi.n	800a1c6 <_fflush_r+0x32>
 800a1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1c2:	f7fd fb7a 	bl	80078ba <__retarget_lock_acquire_recursive>
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	f7ff ff63 	bl	800a094 <__sflush_r>
 800a1ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	07da      	lsls	r2, r3, #31
 800a1d4:	d4e4      	bmi.n	800a1a0 <_fflush_r+0xc>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	059b      	lsls	r3, r3, #22
 800a1da:	d4e1      	bmi.n	800a1a0 <_fflush_r+0xc>
 800a1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1de:	f7fd fb6d 	bl	80078bc <__retarget_lock_release_recursive>
 800a1e2:	e7dd      	b.n	800a1a0 <_fflush_r+0xc>

0800a1e4 <memmove>:
 800a1e4:	4288      	cmp	r0, r1
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	eb01 0402 	add.w	r4, r1, r2
 800a1ec:	d902      	bls.n	800a1f4 <memmove+0x10>
 800a1ee:	4284      	cmp	r4, r0
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	d807      	bhi.n	800a204 <memmove+0x20>
 800a1f4:	1e43      	subs	r3, r0, #1
 800a1f6:	42a1      	cmp	r1, r4
 800a1f8:	d008      	beq.n	800a20c <memmove+0x28>
 800a1fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a202:	e7f8      	b.n	800a1f6 <memmove+0x12>
 800a204:	4601      	mov	r1, r0
 800a206:	4402      	add	r2, r0
 800a208:	428a      	cmp	r2, r1
 800a20a:	d100      	bne.n	800a20e <memmove+0x2a>
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a216:	e7f7      	b.n	800a208 <memmove+0x24>

0800a218 <strncmp>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	b16a      	cbz	r2, 800a238 <strncmp+0x20>
 800a21c:	3901      	subs	r1, #1
 800a21e:	1884      	adds	r4, r0, r2
 800a220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a224:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a228:	429a      	cmp	r2, r3
 800a22a:	d103      	bne.n	800a234 <strncmp+0x1c>
 800a22c:	42a0      	cmp	r0, r4
 800a22e:	d001      	beq.n	800a234 <strncmp+0x1c>
 800a230:	2a00      	cmp	r2, #0
 800a232:	d1f5      	bne.n	800a220 <strncmp+0x8>
 800a234:	1ad0      	subs	r0, r2, r3
 800a236:	bd10      	pop	{r4, pc}
 800a238:	4610      	mov	r0, r2
 800a23a:	e7fc      	b.n	800a236 <strncmp+0x1e>

0800a23c <_sbrk_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	2300      	movs	r3, #0
 800a240:	4d05      	ldr	r5, [pc, #20]	@ (800a258 <_sbrk_r+0x1c>)
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	f7f7 fa70 	bl	800172c <_sbrk>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_sbrk_r+0x1a>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_sbrk_r+0x1a>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20001d98 	.word	0x20001d98

0800a25c <nan>:
 800a25c:	2000      	movs	r0, #0
 800a25e:	4901      	ldr	r1, [pc, #4]	@ (800a264 <nan+0x8>)
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	7ff80000 	.word	0x7ff80000

0800a268 <__assert_func>:
 800a268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a26a:	4614      	mov	r4, r2
 800a26c:	461a      	mov	r2, r3
 800a26e:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <__assert_func+0x2c>)
 800a270:	4605      	mov	r5, r0
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68d8      	ldr	r0, [r3, #12]
 800a276:	b954      	cbnz	r4, 800a28e <__assert_func+0x26>
 800a278:	4b07      	ldr	r3, [pc, #28]	@ (800a298 <__assert_func+0x30>)
 800a27a:	461c      	mov	r4, r3
 800a27c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a280:	9100      	str	r1, [sp, #0]
 800a282:	462b      	mov	r3, r5
 800a284:	4905      	ldr	r1, [pc, #20]	@ (800a29c <__assert_func+0x34>)
 800a286:	f000 fba7 	bl	800a9d8 <fiprintf>
 800a28a:	f000 fbb7 	bl	800a9fc <abort>
 800a28e:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <__assert_func+0x38>)
 800a290:	e7f4      	b.n	800a27c <__assert_func+0x14>
 800a292:	bf00      	nop
 800a294:	2000001c 	.word	0x2000001c
 800a298:	0800b475 	.word	0x0800b475
 800a29c:	0800b447 	.word	0x0800b447
 800a2a0:	0800b43a 	.word	0x0800b43a

0800a2a4 <_calloc_r>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2aa:	b93c      	cbnz	r4, 800a2bc <_calloc_r+0x18>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	f7fe f9e9 	bl	8008684 <_malloc_r>
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	b928      	cbnz	r0, 800a2c2 <_calloc_r+0x1e>
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	220c      	movs	r2, #12
 800a2be:	6002      	str	r2, [r0, #0]
 800a2c0:	e7f9      	b.n	800a2b6 <_calloc_r+0x12>
 800a2c2:	462a      	mov	r2, r5
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	f7fd fa7a 	bl	80077be <memset>
 800a2ca:	e7f5      	b.n	800a2b8 <_calloc_r+0x14>

0800a2cc <rshift>:
 800a2cc:	6903      	ldr	r3, [r0, #16]
 800a2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2d6:	f100 0414 	add.w	r4, r0, #20
 800a2da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2de:	dd46      	ble.n	800a36e <rshift+0xa2>
 800a2e0:	f011 011f 	ands.w	r1, r1, #31
 800a2e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2ec:	d10c      	bne.n	800a308 <rshift+0x3c>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f100 0710 	add.w	r7, r0, #16
 800a2f4:	42b1      	cmp	r1, r6
 800a2f6:	d335      	bcc.n	800a364 <rshift+0x98>
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	1eea      	subs	r2, r5, #3
 800a2fe:	4296      	cmp	r6, r2
 800a300:	bf38      	it	cc
 800a302:	2300      	movcc	r3, #0
 800a304:	4423      	add	r3, r4
 800a306:	e015      	b.n	800a334 <rshift+0x68>
 800a308:	46a1      	mov	r9, r4
 800a30a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a30e:	f1c1 0820 	rsb	r8, r1, #32
 800a312:	40cf      	lsrs	r7, r1
 800a314:	f105 0e04 	add.w	lr, r5, #4
 800a318:	4576      	cmp	r6, lr
 800a31a:	46f4      	mov	ip, lr
 800a31c:	d816      	bhi.n	800a34c <rshift+0x80>
 800a31e:	1a9a      	subs	r2, r3, r2
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	3a04      	subs	r2, #4
 800a324:	3501      	adds	r5, #1
 800a326:	42ae      	cmp	r6, r5
 800a328:	bf38      	it	cc
 800a32a:	2200      	movcc	r2, #0
 800a32c:	18a3      	adds	r3, r4, r2
 800a32e:	50a7      	str	r7, [r4, r2]
 800a330:	b107      	cbz	r7, 800a334 <rshift+0x68>
 800a332:	3304      	adds	r3, #4
 800a334:	42a3      	cmp	r3, r4
 800a336:	eba3 0204 	sub.w	r2, r3, r4
 800a33a:	bf08      	it	eq
 800a33c:	2300      	moveq	r3, #0
 800a33e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a342:	6102      	str	r2, [r0, #16]
 800a344:	bf08      	it	eq
 800a346:	6143      	streq	r3, [r0, #20]
 800a348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a34c:	f8dc c000 	ldr.w	ip, [ip]
 800a350:	fa0c fc08 	lsl.w	ip, ip, r8
 800a354:	ea4c 0707 	orr.w	r7, ip, r7
 800a358:	f849 7b04 	str.w	r7, [r9], #4
 800a35c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a360:	40cf      	lsrs	r7, r1
 800a362:	e7d9      	b.n	800a318 <rshift+0x4c>
 800a364:	f851 cb04 	ldr.w	ip, [r1], #4
 800a368:	f847 cf04 	str.w	ip, [r7, #4]!
 800a36c:	e7c2      	b.n	800a2f4 <rshift+0x28>
 800a36e:	4623      	mov	r3, r4
 800a370:	e7e0      	b.n	800a334 <rshift+0x68>

0800a372 <__hexdig_fun>:
 800a372:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a376:	2b09      	cmp	r3, #9
 800a378:	d802      	bhi.n	800a380 <__hexdig_fun+0xe>
 800a37a:	3820      	subs	r0, #32
 800a37c:	b2c0      	uxtb	r0, r0
 800a37e:	4770      	bx	lr
 800a380:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a384:	2b05      	cmp	r3, #5
 800a386:	d801      	bhi.n	800a38c <__hexdig_fun+0x1a>
 800a388:	3847      	subs	r0, #71	@ 0x47
 800a38a:	e7f7      	b.n	800a37c <__hexdig_fun+0xa>
 800a38c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a390:	2b05      	cmp	r3, #5
 800a392:	d801      	bhi.n	800a398 <__hexdig_fun+0x26>
 800a394:	3827      	subs	r0, #39	@ 0x27
 800a396:	e7f1      	b.n	800a37c <__hexdig_fun+0xa>
 800a398:	2000      	movs	r0, #0
 800a39a:	4770      	bx	lr

0800a39c <__gethex>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	468a      	mov	sl, r1
 800a3a2:	4690      	mov	r8, r2
 800a3a4:	b085      	sub	sp, #20
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	680b      	ldr	r3, [r1, #0]
 800a3aa:	9001      	str	r0, [sp, #4]
 800a3ac:	1c9c      	adds	r4, r3, #2
 800a3ae:	46a1      	mov	r9, r4
 800a3b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3b4:	2830      	cmp	r0, #48	@ 0x30
 800a3b6:	d0fa      	beq.n	800a3ae <__gethex+0x12>
 800a3b8:	eba9 0303 	sub.w	r3, r9, r3
 800a3bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3c0:	f7ff ffd7 	bl	800a372 <__hexdig_fun>
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d168      	bne.n	800a49c <__gethex+0x100>
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4648      	mov	r0, r9
 800a3ce:	499f      	ldr	r1, [pc, #636]	@ (800a64c <__gethex+0x2b0>)
 800a3d0:	f7ff ff22 	bl	800a218 <strncmp>
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d167      	bne.n	800a4aa <__gethex+0x10e>
 800a3da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3de:	4626      	mov	r6, r4
 800a3e0:	f7ff ffc7 	bl	800a372 <__hexdig_fun>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d062      	beq.n	800a4ae <__gethex+0x112>
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	7818      	ldrb	r0, [r3, #0]
 800a3ec:	4699      	mov	r9, r3
 800a3ee:	2830      	cmp	r0, #48	@ 0x30
 800a3f0:	f103 0301 	add.w	r3, r3, #1
 800a3f4:	d0f9      	beq.n	800a3ea <__gethex+0x4e>
 800a3f6:	f7ff ffbc 	bl	800a372 <__hexdig_fun>
 800a3fa:	fab0 f580 	clz	r5, r0
 800a3fe:	f04f 0b01 	mov.w	fp, #1
 800a402:	096d      	lsrs	r5, r5, #5
 800a404:	464a      	mov	r2, r9
 800a406:	4616      	mov	r6, r2
 800a408:	7830      	ldrb	r0, [r6, #0]
 800a40a:	3201      	adds	r2, #1
 800a40c:	f7ff ffb1 	bl	800a372 <__hexdig_fun>
 800a410:	2800      	cmp	r0, #0
 800a412:	d1f8      	bne.n	800a406 <__gethex+0x6a>
 800a414:	2201      	movs	r2, #1
 800a416:	4630      	mov	r0, r6
 800a418:	498c      	ldr	r1, [pc, #560]	@ (800a64c <__gethex+0x2b0>)
 800a41a:	f7ff fefd 	bl	800a218 <strncmp>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d13f      	bne.n	800a4a2 <__gethex+0x106>
 800a422:	b944      	cbnz	r4, 800a436 <__gethex+0x9a>
 800a424:	1c74      	adds	r4, r6, #1
 800a426:	4622      	mov	r2, r4
 800a428:	4616      	mov	r6, r2
 800a42a:	7830      	ldrb	r0, [r6, #0]
 800a42c:	3201      	adds	r2, #1
 800a42e:	f7ff ffa0 	bl	800a372 <__hexdig_fun>
 800a432:	2800      	cmp	r0, #0
 800a434:	d1f8      	bne.n	800a428 <__gethex+0x8c>
 800a436:	1ba4      	subs	r4, r4, r6
 800a438:	00a7      	lsls	r7, r4, #2
 800a43a:	7833      	ldrb	r3, [r6, #0]
 800a43c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a440:	2b50      	cmp	r3, #80	@ 0x50
 800a442:	d13e      	bne.n	800a4c2 <__gethex+0x126>
 800a444:	7873      	ldrb	r3, [r6, #1]
 800a446:	2b2b      	cmp	r3, #43	@ 0x2b
 800a448:	d033      	beq.n	800a4b2 <__gethex+0x116>
 800a44a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a44c:	d034      	beq.n	800a4b8 <__gethex+0x11c>
 800a44e:	2400      	movs	r4, #0
 800a450:	1c71      	adds	r1, r6, #1
 800a452:	7808      	ldrb	r0, [r1, #0]
 800a454:	f7ff ff8d 	bl	800a372 <__hexdig_fun>
 800a458:	1e43      	subs	r3, r0, #1
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b18      	cmp	r3, #24
 800a45e:	d830      	bhi.n	800a4c2 <__gethex+0x126>
 800a460:	f1a0 0210 	sub.w	r2, r0, #16
 800a464:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a468:	f7ff ff83 	bl	800a372 <__hexdig_fun>
 800a46c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a470:	fa5f fc8c 	uxtb.w	ip, ip
 800a474:	f1bc 0f18 	cmp.w	ip, #24
 800a478:	f04f 030a 	mov.w	r3, #10
 800a47c:	d91e      	bls.n	800a4bc <__gethex+0x120>
 800a47e:	b104      	cbz	r4, 800a482 <__gethex+0xe6>
 800a480:	4252      	negs	r2, r2
 800a482:	4417      	add	r7, r2
 800a484:	f8ca 1000 	str.w	r1, [sl]
 800a488:	b1ed      	cbz	r5, 800a4c6 <__gethex+0x12a>
 800a48a:	f1bb 0f00 	cmp.w	fp, #0
 800a48e:	bf0c      	ite	eq
 800a490:	2506      	moveq	r5, #6
 800a492:	2500      	movne	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	b005      	add	sp, #20
 800a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49c:	2500      	movs	r5, #0
 800a49e:	462c      	mov	r4, r5
 800a4a0:	e7b0      	b.n	800a404 <__gethex+0x68>
 800a4a2:	2c00      	cmp	r4, #0
 800a4a4:	d1c7      	bne.n	800a436 <__gethex+0x9a>
 800a4a6:	4627      	mov	r7, r4
 800a4a8:	e7c7      	b.n	800a43a <__gethex+0x9e>
 800a4aa:	464e      	mov	r6, r9
 800a4ac:	462f      	mov	r7, r5
 800a4ae:	2501      	movs	r5, #1
 800a4b0:	e7c3      	b.n	800a43a <__gethex+0x9e>
 800a4b2:	2400      	movs	r4, #0
 800a4b4:	1cb1      	adds	r1, r6, #2
 800a4b6:	e7cc      	b.n	800a452 <__gethex+0xb6>
 800a4b8:	2401      	movs	r4, #1
 800a4ba:	e7fb      	b.n	800a4b4 <__gethex+0x118>
 800a4bc:	fb03 0002 	mla	r0, r3, r2, r0
 800a4c0:	e7ce      	b.n	800a460 <__gethex+0xc4>
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	e7de      	b.n	800a484 <__gethex+0xe8>
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	eba6 0309 	sub.w	r3, r6, r9
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	2b07      	cmp	r3, #7
 800a4d0:	dc0a      	bgt.n	800a4e8 <__gethex+0x14c>
 800a4d2:	9801      	ldr	r0, [sp, #4]
 800a4d4:	f7fe f962 	bl	800879c <_Balloc>
 800a4d8:	4604      	mov	r4, r0
 800a4da:	b940      	cbnz	r0, 800a4ee <__gethex+0x152>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	21e4      	movs	r1, #228	@ 0xe4
 800a4e0:	4b5b      	ldr	r3, [pc, #364]	@ (800a650 <__gethex+0x2b4>)
 800a4e2:	485c      	ldr	r0, [pc, #368]	@ (800a654 <__gethex+0x2b8>)
 800a4e4:	f7ff fec0 	bl	800a268 <__assert_func>
 800a4e8:	3101      	adds	r1, #1
 800a4ea:	105b      	asrs	r3, r3, #1
 800a4ec:	e7ef      	b.n	800a4ce <__gethex+0x132>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f100 0a14 	add.w	sl, r0, #20
 800a4f4:	4655      	mov	r5, sl
 800a4f6:	469b      	mov	fp, r3
 800a4f8:	45b1      	cmp	r9, r6
 800a4fa:	d337      	bcc.n	800a56c <__gethex+0x1d0>
 800a4fc:	f845 bb04 	str.w	fp, [r5], #4
 800a500:	eba5 050a 	sub.w	r5, r5, sl
 800a504:	10ad      	asrs	r5, r5, #2
 800a506:	6125      	str	r5, [r4, #16]
 800a508:	4658      	mov	r0, fp
 800a50a:	f7fe fa39 	bl	8008980 <__hi0bits>
 800a50e:	016d      	lsls	r5, r5, #5
 800a510:	f8d8 6000 	ldr.w	r6, [r8]
 800a514:	1a2d      	subs	r5, r5, r0
 800a516:	42b5      	cmp	r5, r6
 800a518:	dd54      	ble.n	800a5c4 <__gethex+0x228>
 800a51a:	1bad      	subs	r5, r5, r6
 800a51c:	4629      	mov	r1, r5
 800a51e:	4620      	mov	r0, r4
 800a520:	f7fe fdc1 	bl	80090a6 <__any_on>
 800a524:	4681      	mov	r9, r0
 800a526:	b178      	cbz	r0, 800a548 <__gethex+0x1ac>
 800a528:	f04f 0901 	mov.w	r9, #1
 800a52c:	1e6b      	subs	r3, r5, #1
 800a52e:	1159      	asrs	r1, r3, #5
 800a530:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a534:	f003 021f 	and.w	r2, r3, #31
 800a538:	fa09 f202 	lsl.w	r2, r9, r2
 800a53c:	420a      	tst	r2, r1
 800a53e:	d003      	beq.n	800a548 <__gethex+0x1ac>
 800a540:	454b      	cmp	r3, r9
 800a542:	dc36      	bgt.n	800a5b2 <__gethex+0x216>
 800a544:	f04f 0902 	mov.w	r9, #2
 800a548:	4629      	mov	r1, r5
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff febe 	bl	800a2cc <rshift>
 800a550:	442f      	add	r7, r5
 800a552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a556:	42bb      	cmp	r3, r7
 800a558:	da42      	bge.n	800a5e0 <__gethex+0x244>
 800a55a:	4621      	mov	r1, r4
 800a55c:	9801      	ldr	r0, [sp, #4]
 800a55e:	f7fe f95d 	bl	800881c <_Bfree>
 800a562:	2300      	movs	r3, #0
 800a564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a566:	25a3      	movs	r5, #163	@ 0xa3
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	e793      	b.n	800a494 <__gethex+0xf8>
 800a56c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a570:	2a2e      	cmp	r2, #46	@ 0x2e
 800a572:	d012      	beq.n	800a59a <__gethex+0x1fe>
 800a574:	2b20      	cmp	r3, #32
 800a576:	d104      	bne.n	800a582 <__gethex+0x1e6>
 800a578:	f845 bb04 	str.w	fp, [r5], #4
 800a57c:	f04f 0b00 	mov.w	fp, #0
 800a580:	465b      	mov	r3, fp
 800a582:	7830      	ldrb	r0, [r6, #0]
 800a584:	9303      	str	r3, [sp, #12]
 800a586:	f7ff fef4 	bl	800a372 <__hexdig_fun>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	f000 000f 	and.w	r0, r0, #15
 800a590:	4098      	lsls	r0, r3
 800a592:	ea4b 0b00 	orr.w	fp, fp, r0
 800a596:	3304      	adds	r3, #4
 800a598:	e7ae      	b.n	800a4f8 <__gethex+0x15c>
 800a59a:	45b1      	cmp	r9, r6
 800a59c:	d8ea      	bhi.n	800a574 <__gethex+0x1d8>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	492a      	ldr	r1, [pc, #168]	@ (800a64c <__gethex+0x2b0>)
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	f7ff fe37 	bl	800a218 <strncmp>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d1e1      	bne.n	800a574 <__gethex+0x1d8>
 800a5b0:	e7a2      	b.n	800a4f8 <__gethex+0x15c>
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	1ea9      	subs	r1, r5, #2
 800a5b6:	f7fe fd76 	bl	80090a6 <__any_on>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d0c2      	beq.n	800a544 <__gethex+0x1a8>
 800a5be:	f04f 0903 	mov.w	r9, #3
 800a5c2:	e7c1      	b.n	800a548 <__gethex+0x1ac>
 800a5c4:	da09      	bge.n	800a5da <__gethex+0x23e>
 800a5c6:	1b75      	subs	r5, r6, r5
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	9801      	ldr	r0, [sp, #4]
 800a5ce:	f7fe fb3b 	bl	8008c48 <__lshift>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	1b7f      	subs	r7, r7, r5
 800a5d6:	f100 0a14 	add.w	sl, r0, #20
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	e7b8      	b.n	800a552 <__gethex+0x1b6>
 800a5e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5e4:	42bd      	cmp	r5, r7
 800a5e6:	dd6f      	ble.n	800a6c8 <__gethex+0x32c>
 800a5e8:	1bed      	subs	r5, r5, r7
 800a5ea:	42ae      	cmp	r6, r5
 800a5ec:	dc34      	bgt.n	800a658 <__gethex+0x2bc>
 800a5ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d022      	beq.n	800a63c <__gethex+0x2a0>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d024      	beq.n	800a644 <__gethex+0x2a8>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d115      	bne.n	800a62a <__gethex+0x28e>
 800a5fe:	42ae      	cmp	r6, r5
 800a600:	d113      	bne.n	800a62a <__gethex+0x28e>
 800a602:	2e01      	cmp	r6, #1
 800a604:	d10b      	bne.n	800a61e <__gethex+0x282>
 800a606:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a60a:	9a02      	ldr	r2, [sp, #8]
 800a60c:	2562      	movs	r5, #98	@ 0x62
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	2301      	movs	r3, #1
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	f8ca 3000 	str.w	r3, [sl]
 800a618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a61a:	601c      	str	r4, [r3, #0]
 800a61c:	e73a      	b.n	800a494 <__gethex+0xf8>
 800a61e:	4620      	mov	r0, r4
 800a620:	1e71      	subs	r1, r6, #1
 800a622:	f7fe fd40 	bl	80090a6 <__any_on>
 800a626:	2800      	cmp	r0, #0
 800a628:	d1ed      	bne.n	800a606 <__gethex+0x26a>
 800a62a:	4621      	mov	r1, r4
 800a62c:	9801      	ldr	r0, [sp, #4]
 800a62e:	f7fe f8f5 	bl	800881c <_Bfree>
 800a632:	2300      	movs	r3, #0
 800a634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a636:	2550      	movs	r5, #80	@ 0x50
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	e72b      	b.n	800a494 <__gethex+0xf8>
 800a63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1f3      	bne.n	800a62a <__gethex+0x28e>
 800a642:	e7e0      	b.n	800a606 <__gethex+0x26a>
 800a644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1dd      	bne.n	800a606 <__gethex+0x26a>
 800a64a:	e7ee      	b.n	800a62a <__gethex+0x28e>
 800a64c:	0800b2c8 	.word	0x0800b2c8
 800a650:	0800b15f 	.word	0x0800b15f
 800a654:	0800b476 	.word	0x0800b476
 800a658:	1e6f      	subs	r7, r5, #1
 800a65a:	f1b9 0f00 	cmp.w	r9, #0
 800a65e:	d130      	bne.n	800a6c2 <__gethex+0x326>
 800a660:	b127      	cbz	r7, 800a66c <__gethex+0x2d0>
 800a662:	4639      	mov	r1, r7
 800a664:	4620      	mov	r0, r4
 800a666:	f7fe fd1e 	bl	80090a6 <__any_on>
 800a66a:	4681      	mov	r9, r0
 800a66c:	2301      	movs	r3, #1
 800a66e:	4629      	mov	r1, r5
 800a670:	1b76      	subs	r6, r6, r5
 800a672:	2502      	movs	r5, #2
 800a674:	117a      	asrs	r2, r7, #5
 800a676:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a67a:	f007 071f 	and.w	r7, r7, #31
 800a67e:	40bb      	lsls	r3, r7
 800a680:	4213      	tst	r3, r2
 800a682:	4620      	mov	r0, r4
 800a684:	bf18      	it	ne
 800a686:	f049 0902 	orrne.w	r9, r9, #2
 800a68a:	f7ff fe1f 	bl	800a2cc <rshift>
 800a68e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a692:	f1b9 0f00 	cmp.w	r9, #0
 800a696:	d047      	beq.n	800a728 <__gethex+0x38c>
 800a698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d015      	beq.n	800a6cc <__gethex+0x330>
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d017      	beq.n	800a6d4 <__gethex+0x338>
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d109      	bne.n	800a6bc <__gethex+0x320>
 800a6a8:	f019 0f02 	tst.w	r9, #2
 800a6ac:	d006      	beq.n	800a6bc <__gethex+0x320>
 800a6ae:	f8da 3000 	ldr.w	r3, [sl]
 800a6b2:	ea49 0903 	orr.w	r9, r9, r3
 800a6b6:	f019 0f01 	tst.w	r9, #1
 800a6ba:	d10e      	bne.n	800a6da <__gethex+0x33e>
 800a6bc:	f045 0510 	orr.w	r5, r5, #16
 800a6c0:	e032      	b.n	800a728 <__gethex+0x38c>
 800a6c2:	f04f 0901 	mov.w	r9, #1
 800a6c6:	e7d1      	b.n	800a66c <__gethex+0x2d0>
 800a6c8:	2501      	movs	r5, #1
 800a6ca:	e7e2      	b.n	800a692 <__gethex+0x2f6>
 800a6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ce:	f1c3 0301 	rsb	r3, r3, #1
 800a6d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0f0      	beq.n	800a6bc <__gethex+0x320>
 800a6da:	f04f 0c00 	mov.w	ip, #0
 800a6de:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6e2:	f104 0314 	add.w	r3, r4, #20
 800a6e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a6f8:	d01b      	beq.n	800a732 <__gethex+0x396>
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	6002      	str	r2, [r0, #0]
 800a6fe:	2d02      	cmp	r5, #2
 800a700:	f104 0314 	add.w	r3, r4, #20
 800a704:	d13c      	bne.n	800a780 <__gethex+0x3e4>
 800a706:	f8d8 2000 	ldr.w	r2, [r8]
 800a70a:	3a01      	subs	r2, #1
 800a70c:	42b2      	cmp	r2, r6
 800a70e:	d109      	bne.n	800a724 <__gethex+0x388>
 800a710:	2201      	movs	r2, #1
 800a712:	1171      	asrs	r1, r6, #5
 800a714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a718:	f006 061f 	and.w	r6, r6, #31
 800a71c:	fa02 f606 	lsl.w	r6, r2, r6
 800a720:	421e      	tst	r6, r3
 800a722:	d13a      	bne.n	800a79a <__gethex+0x3fe>
 800a724:	f045 0520 	orr.w	r5, r5, #32
 800a728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a72a:	601c      	str	r4, [r3, #0]
 800a72c:	9b02      	ldr	r3, [sp, #8]
 800a72e:	601f      	str	r7, [r3, #0]
 800a730:	e6b0      	b.n	800a494 <__gethex+0xf8>
 800a732:	4299      	cmp	r1, r3
 800a734:	f843 cc04 	str.w	ip, [r3, #-4]
 800a738:	d8d9      	bhi.n	800a6ee <__gethex+0x352>
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	459b      	cmp	fp, r3
 800a73e:	db17      	blt.n	800a770 <__gethex+0x3d4>
 800a740:	6861      	ldr	r1, [r4, #4]
 800a742:	9801      	ldr	r0, [sp, #4]
 800a744:	3101      	adds	r1, #1
 800a746:	f7fe f829 	bl	800879c <_Balloc>
 800a74a:	4681      	mov	r9, r0
 800a74c:	b918      	cbnz	r0, 800a756 <__gethex+0x3ba>
 800a74e:	4602      	mov	r2, r0
 800a750:	2184      	movs	r1, #132	@ 0x84
 800a752:	4b19      	ldr	r3, [pc, #100]	@ (800a7b8 <__gethex+0x41c>)
 800a754:	e6c5      	b.n	800a4e2 <__gethex+0x146>
 800a756:	6922      	ldr	r2, [r4, #16]
 800a758:	f104 010c 	add.w	r1, r4, #12
 800a75c:	3202      	adds	r2, #2
 800a75e:	0092      	lsls	r2, r2, #2
 800a760:	300c      	adds	r0, #12
 800a762:	f7fd f8ba 	bl	80078da <memcpy>
 800a766:	4621      	mov	r1, r4
 800a768:	9801      	ldr	r0, [sp, #4]
 800a76a:	f7fe f857 	bl	800881c <_Bfree>
 800a76e:	464c      	mov	r4, r9
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	6122      	str	r2, [r4, #16]
 800a776:	2201      	movs	r2, #1
 800a778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a77c:	615a      	str	r2, [r3, #20]
 800a77e:	e7be      	b.n	800a6fe <__gethex+0x362>
 800a780:	6922      	ldr	r2, [r4, #16]
 800a782:	455a      	cmp	r2, fp
 800a784:	dd0b      	ble.n	800a79e <__gethex+0x402>
 800a786:	2101      	movs	r1, #1
 800a788:	4620      	mov	r0, r4
 800a78a:	f7ff fd9f 	bl	800a2cc <rshift>
 800a78e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a792:	3701      	adds	r7, #1
 800a794:	42bb      	cmp	r3, r7
 800a796:	f6ff aee0 	blt.w	800a55a <__gethex+0x1be>
 800a79a:	2501      	movs	r5, #1
 800a79c:	e7c2      	b.n	800a724 <__gethex+0x388>
 800a79e:	f016 061f 	ands.w	r6, r6, #31
 800a7a2:	d0fa      	beq.n	800a79a <__gethex+0x3fe>
 800a7a4:	4453      	add	r3, sl
 800a7a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7aa:	f7fe f8e9 	bl	8008980 <__hi0bits>
 800a7ae:	f1c6 0620 	rsb	r6, r6, #32
 800a7b2:	42b0      	cmp	r0, r6
 800a7b4:	dbe7      	blt.n	800a786 <__gethex+0x3ea>
 800a7b6:	e7f0      	b.n	800a79a <__gethex+0x3fe>
 800a7b8:	0800b15f 	.word	0x0800b15f

0800a7bc <L_shift>:
 800a7bc:	f1c2 0208 	rsb	r2, r2, #8
 800a7c0:	0092      	lsls	r2, r2, #2
 800a7c2:	b570      	push	{r4, r5, r6, lr}
 800a7c4:	f1c2 0620 	rsb	r6, r2, #32
 800a7c8:	6843      	ldr	r3, [r0, #4]
 800a7ca:	6804      	ldr	r4, [r0, #0]
 800a7cc:	fa03 f506 	lsl.w	r5, r3, r6
 800a7d0:	432c      	orrs	r4, r5
 800a7d2:	40d3      	lsrs	r3, r2
 800a7d4:	6004      	str	r4, [r0, #0]
 800a7d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7da:	4288      	cmp	r0, r1
 800a7dc:	d3f4      	bcc.n	800a7c8 <L_shift+0xc>
 800a7de:	bd70      	pop	{r4, r5, r6, pc}

0800a7e0 <__match>:
 800a7e0:	b530      	push	{r4, r5, lr}
 800a7e2:	6803      	ldr	r3, [r0, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ea:	b914      	cbnz	r4, 800a7f2 <__match+0x12>
 800a7ec:	6003      	str	r3, [r0, #0]
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	bd30      	pop	{r4, r5, pc}
 800a7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7fa:	2d19      	cmp	r5, #25
 800a7fc:	bf98      	it	ls
 800a7fe:	3220      	addls	r2, #32
 800a800:	42a2      	cmp	r2, r4
 800a802:	d0f0      	beq.n	800a7e6 <__match+0x6>
 800a804:	2000      	movs	r0, #0
 800a806:	e7f3      	b.n	800a7f0 <__match+0x10>

0800a808 <__hexnan>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	2500      	movs	r5, #0
 800a80e:	680b      	ldr	r3, [r1, #0]
 800a810:	4682      	mov	sl, r0
 800a812:	115e      	asrs	r6, r3, #5
 800a814:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a818:	f013 031f 	ands.w	r3, r3, #31
 800a81c:	bf18      	it	ne
 800a81e:	3604      	addne	r6, #4
 800a820:	1f37      	subs	r7, r6, #4
 800a822:	4690      	mov	r8, r2
 800a824:	46b9      	mov	r9, r7
 800a826:	463c      	mov	r4, r7
 800a828:	46ab      	mov	fp, r5
 800a82a:	b087      	sub	sp, #28
 800a82c:	6801      	ldr	r1, [r0, #0]
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	f846 5c04 	str.w	r5, [r6, #-4]
 800a834:	9502      	str	r5, [sp, #8]
 800a836:	784a      	ldrb	r2, [r1, #1]
 800a838:	1c4b      	adds	r3, r1, #1
 800a83a:	9303      	str	r3, [sp, #12]
 800a83c:	b342      	cbz	r2, 800a890 <__hexnan+0x88>
 800a83e:	4610      	mov	r0, r2
 800a840:	9105      	str	r1, [sp, #20]
 800a842:	9204      	str	r2, [sp, #16]
 800a844:	f7ff fd95 	bl	800a372 <__hexdig_fun>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d151      	bne.n	800a8f0 <__hexnan+0xe8>
 800a84c:	9a04      	ldr	r2, [sp, #16]
 800a84e:	9905      	ldr	r1, [sp, #20]
 800a850:	2a20      	cmp	r2, #32
 800a852:	d818      	bhi.n	800a886 <__hexnan+0x7e>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	459b      	cmp	fp, r3
 800a858:	dd13      	ble.n	800a882 <__hexnan+0x7a>
 800a85a:	454c      	cmp	r4, r9
 800a85c:	d206      	bcs.n	800a86c <__hexnan+0x64>
 800a85e:	2d07      	cmp	r5, #7
 800a860:	dc04      	bgt.n	800a86c <__hexnan+0x64>
 800a862:	462a      	mov	r2, r5
 800a864:	4649      	mov	r1, r9
 800a866:	4620      	mov	r0, r4
 800a868:	f7ff ffa8 	bl	800a7bc <L_shift>
 800a86c:	4544      	cmp	r4, r8
 800a86e:	d952      	bls.n	800a916 <__hexnan+0x10e>
 800a870:	2300      	movs	r3, #0
 800a872:	f1a4 0904 	sub.w	r9, r4, #4
 800a876:	f844 3c04 	str.w	r3, [r4, #-4]
 800a87a:	461d      	mov	r5, r3
 800a87c:	464c      	mov	r4, r9
 800a87e:	f8cd b008 	str.w	fp, [sp, #8]
 800a882:	9903      	ldr	r1, [sp, #12]
 800a884:	e7d7      	b.n	800a836 <__hexnan+0x2e>
 800a886:	2a29      	cmp	r2, #41	@ 0x29
 800a888:	d157      	bne.n	800a93a <__hexnan+0x132>
 800a88a:	3102      	adds	r1, #2
 800a88c:	f8ca 1000 	str.w	r1, [sl]
 800a890:	f1bb 0f00 	cmp.w	fp, #0
 800a894:	d051      	beq.n	800a93a <__hexnan+0x132>
 800a896:	454c      	cmp	r4, r9
 800a898:	d206      	bcs.n	800a8a8 <__hexnan+0xa0>
 800a89a:	2d07      	cmp	r5, #7
 800a89c:	dc04      	bgt.n	800a8a8 <__hexnan+0xa0>
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7ff ff8a 	bl	800a7bc <L_shift>
 800a8a8:	4544      	cmp	r4, r8
 800a8aa:	d936      	bls.n	800a91a <__hexnan+0x112>
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	f1a8 0204 	sub.w	r2, r8, #4
 800a8b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8b6:	429f      	cmp	r7, r3
 800a8b8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8bc:	d2f9      	bcs.n	800a8b2 <__hexnan+0xaa>
 800a8be:	1b3b      	subs	r3, r7, r4
 800a8c0:	f023 0303 	bic.w	r3, r3, #3
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	3401      	adds	r4, #1
 800a8c8:	3e03      	subs	r6, #3
 800a8ca:	42b4      	cmp	r4, r6
 800a8cc:	bf88      	it	hi
 800a8ce:	2304      	movhi	r3, #4
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4443      	add	r3, r8
 800a8d4:	f843 2b04 	str.w	r2, [r3], #4
 800a8d8:	429f      	cmp	r7, r3
 800a8da:	d2fb      	bcs.n	800a8d4 <__hexnan+0xcc>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	b91b      	cbnz	r3, 800a8e8 <__hexnan+0xe0>
 800a8e0:	4547      	cmp	r7, r8
 800a8e2:	d128      	bne.n	800a936 <__hexnan+0x12e>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	2005      	movs	r0, #5
 800a8ea:	b007      	add	sp, #28
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	3501      	adds	r5, #1
 800a8f2:	2d08      	cmp	r5, #8
 800a8f4:	f10b 0b01 	add.w	fp, fp, #1
 800a8f8:	dd06      	ble.n	800a908 <__hexnan+0x100>
 800a8fa:	4544      	cmp	r4, r8
 800a8fc:	d9c1      	bls.n	800a882 <__hexnan+0x7a>
 800a8fe:	2300      	movs	r3, #0
 800a900:	2501      	movs	r5, #1
 800a902:	f844 3c04 	str.w	r3, [r4, #-4]
 800a906:	3c04      	subs	r4, #4
 800a908:	6822      	ldr	r2, [r4, #0]
 800a90a:	f000 000f 	and.w	r0, r0, #15
 800a90e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a912:	6020      	str	r0, [r4, #0]
 800a914:	e7b5      	b.n	800a882 <__hexnan+0x7a>
 800a916:	2508      	movs	r5, #8
 800a918:	e7b3      	b.n	800a882 <__hexnan+0x7a>
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0dd      	beq.n	800a8dc <__hexnan+0xd4>
 800a920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a924:	f1c3 0320 	rsb	r3, r3, #32
 800a928:	40da      	lsrs	r2, r3
 800a92a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a92e:	4013      	ands	r3, r2
 800a930:	f846 3c04 	str.w	r3, [r6, #-4]
 800a934:	e7d2      	b.n	800a8dc <__hexnan+0xd4>
 800a936:	3f04      	subs	r7, #4
 800a938:	e7d0      	b.n	800a8dc <__hexnan+0xd4>
 800a93a:	2004      	movs	r0, #4
 800a93c:	e7d5      	b.n	800a8ea <__hexnan+0xe2>

0800a93e <__ascii_mbtowc>:
 800a93e:	b082      	sub	sp, #8
 800a940:	b901      	cbnz	r1, 800a944 <__ascii_mbtowc+0x6>
 800a942:	a901      	add	r1, sp, #4
 800a944:	b142      	cbz	r2, 800a958 <__ascii_mbtowc+0x1a>
 800a946:	b14b      	cbz	r3, 800a95c <__ascii_mbtowc+0x1e>
 800a948:	7813      	ldrb	r3, [r2, #0]
 800a94a:	600b      	str	r3, [r1, #0]
 800a94c:	7812      	ldrb	r2, [r2, #0]
 800a94e:	1e10      	subs	r0, r2, #0
 800a950:	bf18      	it	ne
 800a952:	2001      	movne	r0, #1
 800a954:	b002      	add	sp, #8
 800a956:	4770      	bx	lr
 800a958:	4610      	mov	r0, r2
 800a95a:	e7fb      	b.n	800a954 <__ascii_mbtowc+0x16>
 800a95c:	f06f 0001 	mvn.w	r0, #1
 800a960:	e7f8      	b.n	800a954 <__ascii_mbtowc+0x16>

0800a962 <_realloc_r>:
 800a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	4680      	mov	r8, r0
 800a968:	4615      	mov	r5, r2
 800a96a:	460c      	mov	r4, r1
 800a96c:	b921      	cbnz	r1, 800a978 <_realloc_r+0x16>
 800a96e:	4611      	mov	r1, r2
 800a970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	f7fd be86 	b.w	8008684 <_malloc_r>
 800a978:	b92a      	cbnz	r2, 800a986 <_realloc_r+0x24>
 800a97a:	f7fd fe11 	bl	80085a0 <_free_r>
 800a97e:	2400      	movs	r4, #0
 800a980:	4620      	mov	r0, r4
 800a982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a986:	f000 f840 	bl	800aa0a <_malloc_usable_size_r>
 800a98a:	4285      	cmp	r5, r0
 800a98c:	4606      	mov	r6, r0
 800a98e:	d802      	bhi.n	800a996 <_realloc_r+0x34>
 800a990:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a994:	d8f4      	bhi.n	800a980 <_realloc_r+0x1e>
 800a996:	4629      	mov	r1, r5
 800a998:	4640      	mov	r0, r8
 800a99a:	f7fd fe73 	bl	8008684 <_malloc_r>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d0ec      	beq.n	800a97e <_realloc_r+0x1c>
 800a9a4:	42b5      	cmp	r5, r6
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	bf28      	it	cs
 800a9ac:	4632      	movcs	r2, r6
 800a9ae:	f7fc ff94 	bl	80078da <memcpy>
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	f7fd fdf3 	bl	80085a0 <_free_r>
 800a9ba:	463c      	mov	r4, r7
 800a9bc:	e7e0      	b.n	800a980 <_realloc_r+0x1e>

0800a9be <__ascii_wctomb>:
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	b141      	cbz	r1, 800a9d6 <__ascii_wctomb+0x18>
 800a9c4:	2aff      	cmp	r2, #255	@ 0xff
 800a9c6:	d904      	bls.n	800a9d2 <__ascii_wctomb+0x14>
 800a9c8:	228a      	movs	r2, #138	@ 0x8a
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	4770      	bx	lr
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	700a      	strb	r2, [r1, #0]
 800a9d6:	4770      	bx	lr

0800a9d8 <fiprintf>:
 800a9d8:	b40e      	push	{r1, r2, r3}
 800a9da:	b503      	push	{r0, r1, lr}
 800a9dc:	4601      	mov	r1, r0
 800a9de:	ab03      	add	r3, sp, #12
 800a9e0:	4805      	ldr	r0, [pc, #20]	@ (800a9f8 <fiprintf+0x20>)
 800a9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e6:	6800      	ldr	r0, [r0, #0]
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	f000 f83d 	bl	800aa68 <_vfiprintf_r>
 800a9ee:	b002      	add	sp, #8
 800a9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9f4:	b003      	add	sp, #12
 800a9f6:	4770      	bx	lr
 800a9f8:	2000001c 	.word	0x2000001c

0800a9fc <abort>:
 800a9fc:	2006      	movs	r0, #6
 800a9fe:	b508      	push	{r3, lr}
 800aa00:	f000 fa06 	bl	800ae10 <raise>
 800aa04:	2001      	movs	r0, #1
 800aa06:	f7f6 fe1c 	bl	8001642 <_exit>

0800aa0a <_malloc_usable_size_r>:
 800aa0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa0e:	1f18      	subs	r0, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bfbc      	itt	lt
 800aa14:	580b      	ldrlt	r3, [r1, r0]
 800aa16:	18c0      	addlt	r0, r0, r3
 800aa18:	4770      	bx	lr

0800aa1a <__sfputc_r>:
 800aa1a:	6893      	ldr	r3, [r2, #8]
 800aa1c:	b410      	push	{r4}
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	6093      	str	r3, [r2, #8]
 800aa24:	da07      	bge.n	800aa36 <__sfputc_r+0x1c>
 800aa26:	6994      	ldr	r4, [r2, #24]
 800aa28:	42a3      	cmp	r3, r4
 800aa2a:	db01      	blt.n	800aa30 <__sfputc_r+0x16>
 800aa2c:	290a      	cmp	r1, #10
 800aa2e:	d102      	bne.n	800aa36 <__sfputc_r+0x1c>
 800aa30:	bc10      	pop	{r4}
 800aa32:	f000 b931 	b.w	800ac98 <__swbuf_r>
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	1c58      	adds	r0, r3, #1
 800aa3a:	6010      	str	r0, [r2, #0]
 800aa3c:	7019      	strb	r1, [r3, #0]
 800aa3e:	4608      	mov	r0, r1
 800aa40:	bc10      	pop	{r4}
 800aa42:	4770      	bx	lr

0800aa44 <__sfputs_r>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	4606      	mov	r6, r0
 800aa48:	460f      	mov	r7, r1
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	18d5      	adds	r5, r2, r3
 800aa4e:	42ac      	cmp	r4, r5
 800aa50:	d101      	bne.n	800aa56 <__sfputs_r+0x12>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e007      	b.n	800aa66 <__sfputs_r+0x22>
 800aa56:	463a      	mov	r2, r7
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	f7ff ffdc 	bl	800aa1a <__sfputc_r>
 800aa62:	1c43      	adds	r3, r0, #1
 800aa64:	d1f3      	bne.n	800aa4e <__sfputs_r+0xa>
 800aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa68 <_vfiprintf_r>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	460d      	mov	r5, r1
 800aa6e:	4614      	mov	r4, r2
 800aa70:	4698      	mov	r8, r3
 800aa72:	4606      	mov	r6, r0
 800aa74:	b09d      	sub	sp, #116	@ 0x74
 800aa76:	b118      	cbz	r0, 800aa80 <_vfiprintf_r+0x18>
 800aa78:	6a03      	ldr	r3, [r0, #32]
 800aa7a:	b90b      	cbnz	r3, 800aa80 <_vfiprintf_r+0x18>
 800aa7c:	f7fc fe06 	bl	800768c <__sinit>
 800aa80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa82:	07d9      	lsls	r1, r3, #31
 800aa84:	d405      	bmi.n	800aa92 <_vfiprintf_r+0x2a>
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	059a      	lsls	r2, r3, #22
 800aa8a:	d402      	bmi.n	800aa92 <_vfiprintf_r+0x2a>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa8e:	f7fc ff14 	bl	80078ba <__retarget_lock_acquire_recursive>
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	071b      	lsls	r3, r3, #28
 800aa96:	d501      	bpl.n	800aa9c <_vfiprintf_r+0x34>
 800aa98:	692b      	ldr	r3, [r5, #16]
 800aa9a:	b99b      	cbnz	r3, 800aac4 <_vfiprintf_r+0x5c>
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f000 f938 	bl	800ad14 <__swsetup_r>
 800aaa4:	b170      	cbz	r0, 800aac4 <_vfiprintf_r+0x5c>
 800aaa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaa8:	07dc      	lsls	r4, r3, #31
 800aaaa:	d504      	bpl.n	800aab6 <_vfiprintf_r+0x4e>
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aab0:	b01d      	add	sp, #116	@ 0x74
 800aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab6:	89ab      	ldrh	r3, [r5, #12]
 800aab8:	0598      	lsls	r0, r3, #22
 800aaba:	d4f7      	bmi.n	800aaac <_vfiprintf_r+0x44>
 800aabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aabe:	f7fc fefd 	bl	80078bc <__retarget_lock_release_recursive>
 800aac2:	e7f3      	b.n	800aaac <_vfiprintf_r+0x44>
 800aac4:	2300      	movs	r3, #0
 800aac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac8:	2320      	movs	r3, #32
 800aaca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aace:	2330      	movs	r3, #48	@ 0x30
 800aad0:	f04f 0901 	mov.w	r9, #1
 800aad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ac84 <_vfiprintf_r+0x21c>
 800aadc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aae0:	4623      	mov	r3, r4
 800aae2:	469a      	mov	sl, r3
 800aae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae8:	b10a      	cbz	r2, 800aaee <_vfiprintf_r+0x86>
 800aaea:	2a25      	cmp	r2, #37	@ 0x25
 800aaec:	d1f9      	bne.n	800aae2 <_vfiprintf_r+0x7a>
 800aaee:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf2:	d00b      	beq.n	800ab0c <_vfiprintf_r+0xa4>
 800aaf4:	465b      	mov	r3, fp
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff ffa2 	bl	800aa44 <__sfputs_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	f000 80a7 	beq.w	800ac54 <_vfiprintf_r+0x1ec>
 800ab06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab08:	445a      	add	r2, fp
 800ab0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 809f 	beq.w	800ac54 <_vfiprintf_r+0x1ec>
 800ab16:	2300      	movs	r3, #0
 800ab18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab20:	f10a 0a01 	add.w	sl, sl, #1
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	9307      	str	r3, [sp, #28]
 800ab28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab2e:	4654      	mov	r4, sl
 800ab30:	2205      	movs	r2, #5
 800ab32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab36:	4853      	ldr	r0, [pc, #332]	@ (800ac84 <_vfiprintf_r+0x21c>)
 800ab38:	f7fc fec1 	bl	80078be <memchr>
 800ab3c:	9a04      	ldr	r2, [sp, #16]
 800ab3e:	b9d8      	cbnz	r0, 800ab78 <_vfiprintf_r+0x110>
 800ab40:	06d1      	lsls	r1, r2, #27
 800ab42:	bf44      	itt	mi
 800ab44:	2320      	movmi	r3, #32
 800ab46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab4a:	0713      	lsls	r3, r2, #28
 800ab4c:	bf44      	itt	mi
 800ab4e:	232b      	movmi	r3, #43	@ 0x2b
 800ab50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab54:	f89a 3000 	ldrb.w	r3, [sl]
 800ab58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab5a:	d015      	beq.n	800ab88 <_vfiprintf_r+0x120>
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	2000      	movs	r0, #0
 800ab60:	f04f 0c0a 	mov.w	ip, #10
 800ab64:	9a07      	ldr	r2, [sp, #28]
 800ab66:	4621      	mov	r1, r4
 800ab68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab6c:	3b30      	subs	r3, #48	@ 0x30
 800ab6e:	2b09      	cmp	r3, #9
 800ab70:	d94b      	bls.n	800ac0a <_vfiprintf_r+0x1a2>
 800ab72:	b1b0      	cbz	r0, 800aba2 <_vfiprintf_r+0x13a>
 800ab74:	9207      	str	r2, [sp, #28]
 800ab76:	e014      	b.n	800aba2 <_vfiprintf_r+0x13a>
 800ab78:	eba0 0308 	sub.w	r3, r0, r8
 800ab7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab80:	4313      	orrs	r3, r2
 800ab82:	46a2      	mov	sl, r4
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	e7d2      	b.n	800ab2e <_vfiprintf_r+0xc6>
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	1d19      	adds	r1, r3, #4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	9103      	str	r1, [sp, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfbb      	ittet	lt
 800ab94:	425b      	neglt	r3, r3
 800ab96:	f042 0202 	orrlt.w	r2, r2, #2
 800ab9a:	9307      	strge	r3, [sp, #28]
 800ab9c:	9307      	strlt	r3, [sp, #28]
 800ab9e:	bfb8      	it	lt
 800aba0:	9204      	strlt	r2, [sp, #16]
 800aba2:	7823      	ldrb	r3, [r4, #0]
 800aba4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aba6:	d10a      	bne.n	800abbe <_vfiprintf_r+0x156>
 800aba8:	7863      	ldrb	r3, [r4, #1]
 800abaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800abac:	d132      	bne.n	800ac14 <_vfiprintf_r+0x1ac>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	3402      	adds	r4, #2
 800abb2:	1d1a      	adds	r2, r3, #4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	9203      	str	r2, [sp, #12]
 800abb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abbc:	9305      	str	r3, [sp, #20]
 800abbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ac88 <_vfiprintf_r+0x220>
 800abc2:	2203      	movs	r2, #3
 800abc4:	4650      	mov	r0, sl
 800abc6:	7821      	ldrb	r1, [r4, #0]
 800abc8:	f7fc fe79 	bl	80078be <memchr>
 800abcc:	b138      	cbz	r0, 800abde <_vfiprintf_r+0x176>
 800abce:	2240      	movs	r2, #64	@ 0x40
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	eba0 000a 	sub.w	r0, r0, sl
 800abd6:	4082      	lsls	r2, r0
 800abd8:	4313      	orrs	r3, r2
 800abda:	3401      	adds	r4, #1
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe2:	2206      	movs	r2, #6
 800abe4:	4829      	ldr	r0, [pc, #164]	@ (800ac8c <_vfiprintf_r+0x224>)
 800abe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abea:	f7fc fe68 	bl	80078be <memchr>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d03f      	beq.n	800ac72 <_vfiprintf_r+0x20a>
 800abf2:	4b27      	ldr	r3, [pc, #156]	@ (800ac90 <_vfiprintf_r+0x228>)
 800abf4:	bb1b      	cbnz	r3, 800ac3e <_vfiprintf_r+0x1d6>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	3307      	adds	r3, #7
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	3308      	adds	r3, #8
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac04:	443b      	add	r3, r7
 800ac06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac08:	e76a      	b.n	800aae0 <_vfiprintf_r+0x78>
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac12:	e7a8      	b.n	800ab66 <_vfiprintf_r+0xfe>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f04f 0c0a 	mov.w	ip, #10
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	3401      	adds	r4, #1
 800ac1e:	9305      	str	r3, [sp, #20]
 800ac20:	4620      	mov	r0, r4
 800ac22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac26:	3a30      	subs	r2, #48	@ 0x30
 800ac28:	2a09      	cmp	r2, #9
 800ac2a:	d903      	bls.n	800ac34 <_vfiprintf_r+0x1cc>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0c6      	beq.n	800abbe <_vfiprintf_r+0x156>
 800ac30:	9105      	str	r1, [sp, #20]
 800ac32:	e7c4      	b.n	800abbe <_vfiprintf_r+0x156>
 800ac34:	4604      	mov	r4, r0
 800ac36:	2301      	movs	r3, #1
 800ac38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac3c:	e7f0      	b.n	800ac20 <_vfiprintf_r+0x1b8>
 800ac3e:	ab03      	add	r3, sp, #12
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	462a      	mov	r2, r5
 800ac44:	4630      	mov	r0, r6
 800ac46:	4b13      	ldr	r3, [pc, #76]	@ (800ac94 <_vfiprintf_r+0x22c>)
 800ac48:	a904      	add	r1, sp, #16
 800ac4a:	f7fb fec5 	bl	80069d8 <_printf_float>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	1c78      	adds	r0, r7, #1
 800ac52:	d1d6      	bne.n	800ac02 <_vfiprintf_r+0x19a>
 800ac54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac56:	07d9      	lsls	r1, r3, #31
 800ac58:	d405      	bmi.n	800ac66 <_vfiprintf_r+0x1fe>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	059a      	lsls	r2, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_vfiprintf_r+0x1fe>
 800ac60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac62:	f7fc fe2b 	bl	80078bc <__retarget_lock_release_recursive>
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	065b      	lsls	r3, r3, #25
 800ac6a:	f53f af1f 	bmi.w	800aaac <_vfiprintf_r+0x44>
 800ac6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac70:	e71e      	b.n	800aab0 <_vfiprintf_r+0x48>
 800ac72:	ab03      	add	r3, sp, #12
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	462a      	mov	r2, r5
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <_vfiprintf_r+0x22c>)
 800ac7c:	a904      	add	r1, sp, #16
 800ac7e:	f7fc f949 	bl	8006f14 <_printf_i>
 800ac82:	e7e4      	b.n	800ac4e <_vfiprintf_r+0x1e6>
 800ac84:	0800b421 	.word	0x0800b421
 800ac88:	0800b427 	.word	0x0800b427
 800ac8c:	0800b42b 	.word	0x0800b42b
 800ac90:	080069d9 	.word	0x080069d9
 800ac94:	0800aa45 	.word	0x0800aa45

0800ac98 <__swbuf_r>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	460e      	mov	r6, r1
 800ac9c:	4614      	mov	r4, r2
 800ac9e:	4605      	mov	r5, r0
 800aca0:	b118      	cbz	r0, 800acaa <__swbuf_r+0x12>
 800aca2:	6a03      	ldr	r3, [r0, #32]
 800aca4:	b90b      	cbnz	r3, 800acaa <__swbuf_r+0x12>
 800aca6:	f7fc fcf1 	bl	800768c <__sinit>
 800acaa:	69a3      	ldr	r3, [r4, #24]
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	071a      	lsls	r2, r3, #28
 800acb2:	d501      	bpl.n	800acb8 <__swbuf_r+0x20>
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	b943      	cbnz	r3, 800acca <__swbuf_r+0x32>
 800acb8:	4621      	mov	r1, r4
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 f82a 	bl	800ad14 <__swsetup_r>
 800acc0:	b118      	cbz	r0, 800acca <__swbuf_r+0x32>
 800acc2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800acc6:	4638      	mov	r0, r7
 800acc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	6922      	ldr	r2, [r4, #16]
 800acce:	b2f6      	uxtb	r6, r6
 800acd0:	1a98      	subs	r0, r3, r2
 800acd2:	6963      	ldr	r3, [r4, #20]
 800acd4:	4637      	mov	r7, r6
 800acd6:	4283      	cmp	r3, r0
 800acd8:	dc05      	bgt.n	800ace6 <__swbuf_r+0x4e>
 800acda:	4621      	mov	r1, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f7ff fa59 	bl	800a194 <_fflush_r>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1ed      	bne.n	800acc2 <__swbuf_r+0x2a>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	3b01      	subs	r3, #1
 800acea:	60a3      	str	r3, [r4, #8]
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	701e      	strb	r6, [r3, #0]
 800acf4:	6962      	ldr	r2, [r4, #20]
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d004      	beq.n	800ad06 <__swbuf_r+0x6e>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	07db      	lsls	r3, r3, #31
 800ad00:	d5e1      	bpl.n	800acc6 <__swbuf_r+0x2e>
 800ad02:	2e0a      	cmp	r6, #10
 800ad04:	d1df      	bne.n	800acc6 <__swbuf_r+0x2e>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7ff fa43 	bl	800a194 <_fflush_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d0d9      	beq.n	800acc6 <__swbuf_r+0x2e>
 800ad12:	e7d6      	b.n	800acc2 <__swbuf_r+0x2a>

0800ad14 <__swsetup_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4b29      	ldr	r3, [pc, #164]	@ (800adbc <__swsetup_r+0xa8>)
 800ad18:	4605      	mov	r5, r0
 800ad1a:	6818      	ldr	r0, [r3, #0]
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	b118      	cbz	r0, 800ad28 <__swsetup_r+0x14>
 800ad20:	6a03      	ldr	r3, [r0, #32]
 800ad22:	b90b      	cbnz	r3, 800ad28 <__swsetup_r+0x14>
 800ad24:	f7fc fcb2 	bl	800768c <__sinit>
 800ad28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2c:	0719      	lsls	r1, r3, #28
 800ad2e:	d422      	bmi.n	800ad76 <__swsetup_r+0x62>
 800ad30:	06da      	lsls	r2, r3, #27
 800ad32:	d407      	bmi.n	800ad44 <__swsetup_r+0x30>
 800ad34:	2209      	movs	r2, #9
 800ad36:	602a      	str	r2, [r5, #0]
 800ad38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	e033      	b.n	800adac <__swsetup_r+0x98>
 800ad44:	0758      	lsls	r0, r3, #29
 800ad46:	d512      	bpl.n	800ad6e <__swsetup_r+0x5a>
 800ad48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad4a:	b141      	cbz	r1, 800ad5e <__swsetup_r+0x4a>
 800ad4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad50:	4299      	cmp	r1, r3
 800ad52:	d002      	beq.n	800ad5a <__swsetup_r+0x46>
 800ad54:	4628      	mov	r0, r5
 800ad56:	f7fd fc23 	bl	80085a0 <_free_r>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	2300      	movs	r3, #0
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	b94b      	cbnz	r3, 800ad8e <__swsetup_r+0x7a>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad84:	d003      	beq.n	800ad8e <__swsetup_r+0x7a>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 f882 	bl	800ae92 <__smakebuf_r>
 800ad8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad92:	f013 0201 	ands.w	r2, r3, #1
 800ad96:	d00a      	beq.n	800adae <__swsetup_r+0x9a>
 800ad98:	2200      	movs	r2, #0
 800ad9a:	60a2      	str	r2, [r4, #8]
 800ad9c:	6962      	ldr	r2, [r4, #20]
 800ad9e:	4252      	negs	r2, r2
 800ada0:	61a2      	str	r2, [r4, #24]
 800ada2:	6922      	ldr	r2, [r4, #16]
 800ada4:	b942      	cbnz	r2, 800adb8 <__swsetup_r+0xa4>
 800ada6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adaa:	d1c5      	bne.n	800ad38 <__swsetup_r+0x24>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	0799      	lsls	r1, r3, #30
 800adb0:	bf58      	it	pl
 800adb2:	6962      	ldrpl	r2, [r4, #20]
 800adb4:	60a2      	str	r2, [r4, #8]
 800adb6:	e7f4      	b.n	800ada2 <__swsetup_r+0x8e>
 800adb8:	2000      	movs	r0, #0
 800adba:	e7f7      	b.n	800adac <__swsetup_r+0x98>
 800adbc:	2000001c 	.word	0x2000001c

0800adc0 <_raise_r>:
 800adc0:	291f      	cmp	r1, #31
 800adc2:	b538      	push	{r3, r4, r5, lr}
 800adc4:	4605      	mov	r5, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	d904      	bls.n	800add4 <_raise_r+0x14>
 800adca:	2316      	movs	r3, #22
 800adcc:	6003      	str	r3, [r0, #0]
 800adce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800add6:	b112      	cbz	r2, 800adde <_raise_r+0x1e>
 800add8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800addc:	b94b      	cbnz	r3, 800adf2 <_raise_r+0x32>
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 f830 	bl	800ae44 <_getpid_r>
 800ade4:	4622      	mov	r2, r4
 800ade6:	4601      	mov	r1, r0
 800ade8:	4628      	mov	r0, r5
 800adea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adee:	f000 b817 	b.w	800ae20 <_kill_r>
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d00a      	beq.n	800ae0c <_raise_r+0x4c>
 800adf6:	1c59      	adds	r1, r3, #1
 800adf8:	d103      	bne.n	800ae02 <_raise_r+0x42>
 800adfa:	2316      	movs	r3, #22
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	2001      	movs	r0, #1
 800ae00:	e7e7      	b.n	800add2 <_raise_r+0x12>
 800ae02:	2100      	movs	r1, #0
 800ae04:	4620      	mov	r0, r4
 800ae06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae0a:	4798      	blx	r3
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e7e0      	b.n	800add2 <_raise_r+0x12>

0800ae10 <raise>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	@ (800ae1c <raise+0xc>)
 800ae12:	4601      	mov	r1, r0
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f7ff bfd3 	b.w	800adc0 <_raise_r>
 800ae1a:	bf00      	nop
 800ae1c:	2000001c 	.word	0x2000001c

0800ae20 <_kill_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	2300      	movs	r3, #0
 800ae24:	4d06      	ldr	r5, [pc, #24]	@ (800ae40 <_kill_r+0x20>)
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	f7f6 fbf8 	bl	8001622 <_kill>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	d102      	bne.n	800ae3c <_kill_r+0x1c>
 800ae36:	682b      	ldr	r3, [r5, #0]
 800ae38:	b103      	cbz	r3, 800ae3c <_kill_r+0x1c>
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}
 800ae3e:	bf00      	nop
 800ae40:	20001d98 	.word	0x20001d98

0800ae44 <_getpid_r>:
 800ae44:	f7f6 bbe6 	b.w	8001614 <_getpid>

0800ae48 <__swhatbuf_r>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae50:	4615      	mov	r5, r2
 800ae52:	2900      	cmp	r1, #0
 800ae54:	461e      	mov	r6, r3
 800ae56:	b096      	sub	sp, #88	@ 0x58
 800ae58:	da0c      	bge.n	800ae74 <__swhatbuf_r+0x2c>
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae62:	bf14      	ite	ne
 800ae64:	2340      	movne	r3, #64	@ 0x40
 800ae66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	6031      	str	r1, [r6, #0]
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	b016      	add	sp, #88	@ 0x58
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	466a      	mov	r2, sp
 800ae76:	f000 f849 	bl	800af0c <_fstat_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	dbed      	blt.n	800ae5a <__swhatbuf_r+0x12>
 800ae7e:	9901      	ldr	r1, [sp, #4]
 800ae80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae88:	4259      	negs	r1, r3
 800ae8a:	4159      	adcs	r1, r3
 800ae8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae90:	e7eb      	b.n	800ae6a <__swhatbuf_r+0x22>

0800ae92 <__smakebuf_r>:
 800ae92:	898b      	ldrh	r3, [r1, #12]
 800ae94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae96:	079d      	lsls	r5, r3, #30
 800ae98:	4606      	mov	r6, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	d507      	bpl.n	800aeae <__smakebuf_r+0x1c>
 800ae9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	2301      	movs	r3, #1
 800aea8:	6163      	str	r3, [r4, #20]
 800aeaa:	b003      	add	sp, #12
 800aeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeae:	466a      	mov	r2, sp
 800aeb0:	ab01      	add	r3, sp, #4
 800aeb2:	f7ff ffc9 	bl	800ae48 <__swhatbuf_r>
 800aeb6:	9f00      	ldr	r7, [sp, #0]
 800aeb8:	4605      	mov	r5, r0
 800aeba:	4639      	mov	r1, r7
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7fd fbe1 	bl	8008684 <_malloc_r>
 800aec2:	b948      	cbnz	r0, 800aed8 <__smakebuf_r+0x46>
 800aec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec8:	059a      	lsls	r2, r3, #22
 800aeca:	d4ee      	bmi.n	800aeaa <__smakebuf_r+0x18>
 800aecc:	f023 0303 	bic.w	r3, r3, #3
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	e7e2      	b.n	800ae9e <__smakebuf_r+0xc>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	9b01      	ldr	r3, [sp, #4]
 800aee6:	6020      	str	r0, [r4, #0]
 800aee8:	b15b      	cbz	r3, 800af02 <__smakebuf_r+0x70>
 800aeea:	4630      	mov	r0, r6
 800aeec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef0:	f000 f81e 	bl	800af30 <_isatty_r>
 800aef4:	b128      	cbz	r0, 800af02 <__smakebuf_r+0x70>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f023 0303 	bic.w	r3, r3, #3
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	431d      	orrs	r5, r3
 800af06:	81a5      	strh	r5, [r4, #12]
 800af08:	e7cf      	b.n	800aeaa <__smakebuf_r+0x18>
	...

0800af0c <_fstat_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	2300      	movs	r3, #0
 800af10:	4d06      	ldr	r5, [pc, #24]	@ (800af2c <_fstat_r+0x20>)
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	4611      	mov	r1, r2
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	f7f6 fbe1 	bl	80016e0 <_fstat>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d102      	bne.n	800af28 <_fstat_r+0x1c>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	b103      	cbz	r3, 800af28 <_fstat_r+0x1c>
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	bf00      	nop
 800af2c:	20001d98 	.word	0x20001d98

0800af30 <_isatty_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	2300      	movs	r3, #0
 800af34:	4d05      	ldr	r5, [pc, #20]	@ (800af4c <_isatty_r+0x1c>)
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7f6 fbdf 	bl	80016fe <_isatty>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_isatty_r+0x1a>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_isatty_r+0x1a>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20001d98 	.word	0x20001d98

0800af50 <_init>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr

0800af5c <_fini>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	bf00      	nop
 800af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af62:	bc08      	pop	{r3}
 800af64:	469e      	mov	lr, r3
 800af66:	4770      	bx	lr
