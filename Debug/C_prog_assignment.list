
C_prog_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b148  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800b258  0800b258  0000c258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b738  0800b738  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b738  0800b738  0000c738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b73c  0800b73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b740  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  200001d8  0800b918  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  0800b918  0000ddc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165f1  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e6  00000000  00000000  000237f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00026bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fca  00000000  00000000  00028020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043d4  00000000  00000000  00028fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bac  00000000  00000000  0002d3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dee  00000000  00000000  00042f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac4  00000000  00000000  000d8d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000df860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b240 	.word	0x0800b240

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b240 	.word	0x0800b240

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	2200      	movs	r2, #0
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	460d      	mov	r5, r1
 8000e7a:	f7ff fd9f 	bl	80009bc <__aeabi_dcmplt>
 8000e7e:	b928      	cbnz	r0, 8000e8c <__aeabi_d2lz+0x1c>
 8000e80:	4620      	mov	r0, r4
 8000e82:	4629      	mov	r1, r5
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f000 b80a 	b.w	8000ea0 <__aeabi_d2ulz>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000e92:	f000 f805 	bl	8000ea0 <__aeabi_d2ulz>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_d2ulz>:
 8000ea0:	b5d0      	push	{r4, r6, r7, lr}
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <__aeabi_d2ulz+0x34>)
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	460f      	mov	r7, r1
 8000eaa:	f7ff fb15 	bl	80004d8 <__aeabi_dmul>
 8000eae:	f7ff fdeb 	bl	8000a88 <__aeabi_d2uiz>
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	f7ff fa96 	bl	80003e4 <__aeabi_ui2d>
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <__aeabi_d2ulz+0x38>)
 8000ebc:	f7ff fb0c 	bl	80004d8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	f7ff f94e 	bl	8000168 <__aeabi_dsub>
 8000ecc:	f7ff fddc 	bl	8000a88 <__aeabi_d2uiz>
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed4:	3df00000 	.word	0x3df00000
 8000ed8:	41f00000 	.word	0x41f00000

08000edc <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <delay+0x2c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eee:	bf00      	nop
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <delay+0x2c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3f9      	bcc.n	8000ef0 <delay+0x14>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200001f4 	.word	0x200001f4
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA

// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f040 8082 	bne.w	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11a      	bne.n	8000f60 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 f94d 	bl	80031cc <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f36:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f38:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020a 	bic.w	r2, r2, #10
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0202 	orr.w	r2, r2, #2
 8000f5c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f5e:	e062      	b.n	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d15e      	bne.n	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 f92e 	bl	80031cc <HAL_TIM_ReadCapturedValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d907      	bls.n	8000f9a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4a2b      	ldr	r2, [pc, #172]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e00f      	b.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d909      	bls.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000fb4:	33ff      	adds	r3, #255	@ 0xff
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa10 	bl	80003e4 <__aeabi_ui2d>
 8000fc4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001030 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fa85 	bl	80004d8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fde:	f7ff fba5 	bl	800072c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd6d 	bl	8000ac8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ff2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 020a 	bic.w	r2, r2, #10
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a12      	ldr	r2, [r2, #32]
 8001014:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0202 	bic.w	r2, r2, #2
 8001024:	60da      	str	r2, [r3, #12]
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	b020c49c 	.word	0xb020c49c
 8001034:	3fa16872 	.word	0x3fa16872
 8001038:	20000298 	.word	0x20000298
 800103c:	2000028c 	.word	0x2000028c
 8001040:	20000290 	.word	0x20000290
 8001044:	20000294 	.word	0x20000294
 8001048:	2000029c 	.word	0x2000029c
 800104c:	200001f4 	.word	0x200001f4

08001050 <HCSR04_Read>:

void HCSR04_Read(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HCSR04_Read+0x38>)
 800105c:	f001 f89b 	bl	8002196 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001060:	200a      	movs	r0, #10
 8001062:	f7ff ff3b 	bl	8000edc <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <HCSR04_Read+0x38>)
 800106e:	f001 f892 	bl	8002196 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HCSR04_Read+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HCSR04_Read+0x3c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0202 	orr.w	r2, r2, #2
 8001080:	60da      	str	r2, [r3, #12]
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010800 	.word	0x40010800
 800108c:	200001f4 	.word	0x200001f4

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 fd20 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f82e 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f8f2 	bl	8001284 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010a0:	f000 f870 	bl	8001184 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80010a4:	f000 f8c4 	bl	8001230 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010a8:	2100      	movs	r1, #0
 80010aa:	480c      	ldr	r0, [pc, #48]	@ (80010dc <main+0x4c>)
 80010ac:	f001 fdde 	bl	8002c6c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b0:	f003 f858 	bl	8004164 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <main+0x50>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	480a      	ldr	r0, [pc, #40]	@ (80010e4 <main+0x54>)
 80010ba:	f003 f8b9 	bl	8004230 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <main+0x58>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80010c4:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <main+0x5c>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <main+0x60>)
 80010ca:	f003 f8b1 	bl	8004230 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <main+0x64>)
 80010d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d4:	f003 f878 	bl	80041c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <main+0x48>
 80010dc:	200001f4 	.word	0x200001f4
 80010e0:	0800b290 	.word	0x0800b290
 80010e4:	08001361 	.word	0x08001361
 80010e8:	20000284 	.word	0x20000284
 80010ec:	0800b2b4 	.word	0x0800b2b4
 80010f0:	08001591 	.word	0x08001591
 80010f4:	20000288 	.word	0x20000288

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b090      	sub	sp, #64	@ 0x40
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	2228      	movs	r2, #40	@ 0x28
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f006 fcd1 	bl	8007aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111a:	2301      	movs	r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001136:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f859 	bl	80021f8 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800114c:	f000 fa49 	bl	80015e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2302      	movs	r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fac6 	bl	80026fc <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001176:	f000 fa34 	bl	80015e2 <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3740      	adds	r7, #64	@ 0x40
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <MX_TIM1_Init+0xa8>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011a8:	2247      	movs	r2, #71	@ 0x47
 80011aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011cc:	4816      	ldr	r0, [pc, #88]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011ce:	f001 fcfd 	bl	8002bcc <HAL_TIM_IC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 fa03 	bl	80015e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	480f      	ldr	r0, [pc, #60]	@ (8001228 <MX_TIM1_Init+0xa4>)
 80011ec:	f002 f9e2 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011f6:	f000 f9f4 	bl	80015e2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011fe:	2301      	movs	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM1_Init+0xa4>)
 8001212:	f001 ff3f 	bl	8003094 <HAL_TIM_IC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800121c:	f000 f9e1 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001f4 	.word	0x200001f4
 800122c:	40012c00 	.word	0x40012c00

08001230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_USART2_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USART2_UART_Init+0x4c>)
 8001268:	f002 fa14 	bl	8003694 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f000 f9b6 	bl	80015e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000023c 	.word	0x2000023c
 8001280:	40004400 	.word	0x40004400

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <MX_GPIO_Init+0xd0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a2d      	ldr	r2, [pc, #180]	@ (8001354 <MX_GPIO_Init+0xd0>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_GPIO_Init+0xd0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e6:	481c      	ldr	r0, [pc, #112]	@ (8001358 <MX_GPIO_Init+0xd4>)
 80012e8:	f000 ff55 	bl	8002196 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80012f2:	481a      	ldr	r0, [pc, #104]	@ (800135c <MX_GPIO_Init+0xd8>)
 80012f4:	f000 ff4f 	bl	8002196 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4619      	mov	r1, r3
 8001310:	4811      	ldr	r0, [pc, #68]	@ (8001358 <MX_GPIO_Init+0xd4>)
 8001312:	f000 fda5 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001316:	2370      	movs	r3, #112	@ 0x70
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <MX_GPIO_Init+0xd8>)
 800132a:	f000 fd99 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800132e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_GPIO_Init+0xd8>)
 8001348:	f000 fd8a 	bl	8001e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	40011000 	.word	0x40011000
 800135c:	40010800 	.word	0x40010800

08001360 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	PB1state = 0;
 8001368:	4b79      	ldr	r3, [pc, #484]	@ (8001550 <StartDefaultTask+0x1f0>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	PB2state = 0;
 800136e:	4b79      	ldr	r3, [pc, #484]	@ (8001554 <StartDefaultTask+0x1f4>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	PB3state = 0;
 8001374:	4b78      	ldr	r3, [pc, #480]	@ (8001558 <StartDefaultTask+0x1f8>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
	PB1buffer = 0;
 800137a:	4b78      	ldr	r3, [pc, #480]	@ (800155c <StartDefaultTask+0x1fc>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	PB2buffer = 0;
 8001380:	4b77      	ldr	r3, [pc, #476]	@ (8001560 <StartDefaultTask+0x200>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	PB3buffer = 0;
 8001386:	4b77      	ldr	r3, [pc, #476]	@ (8001564 <StartDefaultTask+0x204>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
	resettimer = HAL_GetTick();
 800138c:	f000 fbcc 	bl	8001b28 <HAL_GetTick>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc9e 	bl	8000cd4 <__aeabi_ui2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4a73      	ldr	r2, [pc, #460]	@ (8001568 <StartDefaultTask+0x208>)
 800139c:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	for (;;) {
		sprintf(uartbuffer, "%.2f\n", distancebuffer);
 800139e:	4b73      	ldr	r3, [pc, #460]	@ (800156c <StartDefaultTask+0x20c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f840 	bl	8000428 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4970      	ldr	r1, [pc, #448]	@ (8001570 <StartDefaultTask+0x210>)
 80013ae:	4871      	ldr	r0, [pc, #452]	@ (8001574 <StartDefaultTask+0x214>)
 80013b0:	f006 fb1a 	bl	80079e8 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*) uartbuffer, strlen(uartbuffer));
 80013b4:	486f      	ldr	r0, [pc, #444]	@ (8001574 <StartDefaultTask+0x214>)
 80013b6:	f7fe fecb 	bl	8000150 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	496c      	ldr	r1, [pc, #432]	@ (8001574 <StartDefaultTask+0x214>)
 80013c2:	486d      	ldr	r0, [pc, #436]	@ (8001578 <StartDefaultTask+0x218>)
 80013c4:	f002 f9b6 	bl	8003734 <HAL_UART_Transmit_IT>

		PB1state = !HAL_GPIO_ReadPin(PB1);
 80013c8:	2110      	movs	r1, #16
 80013ca:	486c      	ldr	r0, [pc, #432]	@ (800157c <StartDefaultTask+0x21c>)
 80013cc:	f000 fecc 	bl	8002168 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf0c      	ite	eq
 80013d6:	2301      	moveq	r3, #1
 80013d8:	2300      	movne	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <StartDefaultTask+0x1f0>)
 80013e0:	601a      	str	r2, [r3, #0]
		PB2state = !HAL_GPIO_ReadPin(PB2);
 80013e2:	2120      	movs	r1, #32
 80013e4:	4865      	ldr	r0, [pc, #404]	@ (800157c <StartDefaultTask+0x21c>)
 80013e6:	f000 febf 	bl	8002168 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b56      	ldr	r3, [pc, #344]	@ (8001554 <StartDefaultTask+0x1f4>)
 80013fa:	601a      	str	r2, [r3, #0]
		PB3state = !HAL_GPIO_ReadPin(PB3);
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	485f      	ldr	r0, [pc, #380]	@ (800157c <StartDefaultTask+0x21c>)
 8001400:	f000 feb2 	bl	8002168 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf0c      	ite	eq
 800140a:	2301      	moveq	r3, #1
 800140c:	2300      	movne	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <StartDefaultTask+0x1f8>)
 8001414:	601a      	str	r2, [r3, #0]
		if (PB1state && !PB1buffer) {
 8001416:	4b4e      	ldr	r3, [pc, #312]	@ (8001550 <StartDefaultTask+0x1f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00d      	beq.n	800143a <StartDefaultTask+0xda>
 800141e:	4b4f      	ldr	r3, [pc, #316]	@ (800155c <StartDefaultTask+0x1fc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <StartDefaultTask+0xda>
			flag1 = !flag1;
 8001426:	4b56      	ldr	r3, [pc, #344]	@ (8001580 <StartDefaultTask+0x220>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4b52      	ldr	r3, [pc, #328]	@ (8001580 <StartDefaultTask+0x220>)
 8001438:	601a      	str	r2, [r3, #0]
		}
		if (PB2state && !PB2buffer) {
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <StartDefaultTask+0x1f4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00d      	beq.n	800145e <StartDefaultTask+0xfe>
 8001442:	4b47      	ldr	r3, [pc, #284]	@ (8001560 <StartDefaultTask+0x200>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <StartDefaultTask+0xfe>
			flag2 = !flag2;
 800144a:	4b4e      	ldr	r3, [pc, #312]	@ (8001584 <StartDefaultTask+0x224>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <StartDefaultTask+0x224>)
 800145c:	601a      	str	r2, [r3, #0]
		}
		if (PB3state && !PB3buffer) {
 800145e:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <StartDefaultTask+0x1f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <StartDefaultTask+0x122>
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <StartDefaultTask+0x204>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <StartDefaultTask+0x122>
			flag3 = !flag3;
 800146e:	4b46      	ldr	r3, [pc, #280]	@ (8001588 <StartDefaultTask+0x228>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4b42      	ldr	r3, [pc, #264]	@ (8001588 <StartDefaultTask+0x228>)
 8001480:	601a      	str	r2, [r3, #0]
		}
		PB1buffer = PB1state;
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <StartDefaultTask+0x1f0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a35      	ldr	r2, [pc, #212]	@ (800155c <StartDefaultTask+0x1fc>)
 8001488:	6013      	str	r3, [r2, #0]
		PB2buffer = PB2state;
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <StartDefaultTask+0x1f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <StartDefaultTask+0x200>)
 8001490:	6013      	str	r3, [r2, #0]
		PB3buffer = PB3state;
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <StartDefaultTask+0x1f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a33      	ldr	r2, [pc, #204]	@ (8001564 <StartDefaultTask+0x204>)
 8001498:	6013      	str	r3, [r2, #0]

		flag1 ? HAL_GPIO_WritePin(LED1, 1) : HAL_GPIO_WritePin(LED1, 0);
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <StartDefaultTask+0x220>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <StartDefaultTask+0x150>
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a8:	4834      	ldr	r0, [pc, #208]	@ (800157c <StartDefaultTask+0x21c>)
 80014aa:	f000 fe74 	bl	8002196 <HAL_GPIO_WritePin>
 80014ae:	e005      	b.n	80014bc <StartDefaultTask+0x15c>
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b6:	4831      	ldr	r0, [pc, #196]	@ (800157c <StartDefaultTask+0x21c>)
 80014b8:	f000 fe6d 	bl	8002196 <HAL_GPIO_WritePin>
		flag2 ? HAL_GPIO_WritePin(LED2, 1) : HAL_GPIO_WritePin(LED2, 0);
 80014bc:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <StartDefaultTask+0x224>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <StartDefaultTask+0x172>
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ca:	482c      	ldr	r0, [pc, #176]	@ (800157c <StartDefaultTask+0x21c>)
 80014cc:	f000 fe63 	bl	8002196 <HAL_GPIO_WritePin>
 80014d0:	e005      	b.n	80014de <StartDefaultTask+0x17e>
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <StartDefaultTask+0x21c>)
 80014da:	f000 fe5c 	bl	8002196 <HAL_GPIO_WritePin>
		flag3 ? HAL_GPIO_WritePin(LED3, 1) : HAL_GPIO_WritePin(LED3, 0);
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <StartDefaultTask+0x228>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <StartDefaultTask+0x194>
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ec:	4823      	ldr	r0, [pc, #140]	@ (800157c <StartDefaultTask+0x21c>)
 80014ee:	f000 fe52 	bl	8002196 <HAL_GPIO_WritePin>
 80014f2:	e005      	b.n	8001500 <StartDefaultTask+0x1a0>
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fa:	4820      	ldr	r0, [pc, #128]	@ (800157c <StartDefaultTask+0x21c>)
 80014fc:	f000 fe4b 	bl	8002196 <HAL_GPIO_WritePin>

		if (HAL_GetTick() - resettimer >= 500) {
 8001500:	f000 fb12 	bl	8001b28 <HAL_GetTick>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fbe4 	bl	8000cd4 <__aeabi_ui2f>
 800150c:	4602      	mov	r2, r0
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <StartDefaultTask+0x208>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff fb2b 	bl	8000b70 <__aeabi_fsub>
 800151a:	4603      	mov	r3, r0
 800151c:	491b      	ldr	r1, [pc, #108]	@ (800158c <StartDefaultTask+0x22c>)
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc92 	bl	8000e48 <__aeabi_fcmpge>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d011      	beq.n	800154e <StartDefaultTask+0x1ee>
			flag1 = 0;
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <StartDefaultTask+0x220>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
			flag2 = 0;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <StartDefaultTask+0x224>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
			flag3 = 0;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <StartDefaultTask+0x228>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
			resettimer = HAL_GetTick();
 800153c:	f000 faf4 	bl	8001b28 <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbc6 	bl	8000cd4 <__aeabi_ui2f>
 8001548:	4603      	mov	r3, r0
 800154a:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <StartDefaultTask+0x208>)
 800154c:	6013      	str	r3, [r2, #0]
		sprintf(uartbuffer, "%.2f\n", distancebuffer);
 800154e:	e726      	b.n	800139e <StartDefaultTask+0x3e>
 8001550:	200002c4 	.word	0x200002c4
 8001554:	200002c8 	.word	0x200002c8
 8001558:	200002cc 	.word	0x200002cc
 800155c:	200002d0 	.word	0x200002d0
 8001560:	200002d4 	.word	0x200002d4
 8001564:	200002d8 	.word	0x200002d8
 8001568:	200002dc 	.word	0x200002dc
 800156c:	200002b4 	.word	0x200002b4
 8001570:	0800b270 	.word	0x0800b270
 8001574:	200002a0 	.word	0x200002a0
 8001578:	2000023c 	.word	0x2000023c
 800157c:	40010800 	.word	0x40010800
 8001580:	200002b8 	.word	0x200002b8
 8001584:	200002bc 	.word	0x200002bc
 8001588:	200002c0 	.word	0x200002c0
 800158c:	43fa0000 	.word	0x43fa0000

08001590 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8001598:	f7ff fd5a 	bl	8001050 <HCSR04_Read>
		distancebuffer = Distance;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <StartTask02+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <StartTask02+0x2c>)
 80015a2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <StartTask02+0x30>)
 80015aa:	f000 fe0c 	bl	80021c6 <HAL_GPIO_TogglePin>
		osDelay(20);
 80015ae:	2014      	movs	r0, #20
 80015b0:	f002 fee8 	bl	8004384 <osDelay>
		HCSR04_Read();
 80015b4:	bf00      	nop
 80015b6:	e7ef      	b.n	8001598 <StartTask02+0x8>
 80015b8:	2000029c 	.word	0x2000029c
 80015bc:	200002b4 	.word	0x200002b4
 80015c0:	40011000 	.word	0x40011000

080015c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d4:	d101      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d6:	f000 fa95 	bl	8001b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e6:	b672      	cpsid	i
}
 80015e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ea:	bf00      	nop
 80015ec:	e7fd      	b.n	80015ea <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_MspInit+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_MspInit+0x68>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_MspInit+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_MspInit+0x68>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <HAL_MspInit+0x68>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_MspInit+0x68>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f000 fb3a 	bl	8001ca6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_MspInit+0x6c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_MspInit+0x6c>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <HAL_TIM_IC_MspInit+0x84>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d12c      	bne.n	80016da <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 8001686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_TIM_IC_MspInit+0x88>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4619      	mov	r1, r3
 80016c4:	4809      	ldr	r0, [pc, #36]	@ (80016ec <HAL_TIM_IC_MspInit+0x8c>)
 80016c6:	f000 fbcb 	bl	8001e60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	201b      	movs	r0, #27
 80016d0:	f000 fae9 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016d4:	201b      	movs	r0, #27
 80016d6:	f000 fb02 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010800 	.word	0x40010800

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_UART_MspInit+0x98>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d137      	bne.n	8001780 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_UART_MspInit+0x9c>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_UART_MspInit+0x9c>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171a:	61d3      	str	r3, [r2, #28]
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_UART_MspInit+0x9c>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x9c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_UART_MspInit+0x9c>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x9c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001740:	2304      	movs	r3, #4
 8001742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	480f      	ldr	r0, [pc, #60]	@ (8001790 <HAL_UART_MspInit+0xa0>)
 8001754:	f000 fb84 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001758:	2308      	movs	r3, #8
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4809      	ldr	r0, [pc, #36]	@ (8001790 <HAL_UART_MspInit+0xa0>)
 800176c:	f000 fb78 	bl	8001e60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2105      	movs	r1, #5
 8001774:	2026      	movs	r0, #38	@ 0x26
 8001776:	f000 fa96 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800177a:	2026      	movs	r0, #38	@ 0x26
 800177c:	f000 faaf 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004400 	.word	0x40004400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_InitTick+0xe8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a33      	ldr	r2, [pc, #204]	@ (800187c <HAL_InitTick+0xe8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_InitTick+0xe8>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c2:	f107 0210 	add.w	r2, r7, #16
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 f905 	bl	80029dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017dc:	f001 f8d6 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80017e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80017e2:	e004      	b.n	80017ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017e4:	f001 f8d2 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80017e8:	4603      	mov	r3, r0
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f0:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <HAL_InitTick+0xec>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9b      	lsrs	r3, r3, #18
 80017f8:	3b01      	subs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80017fc:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <HAL_InitTick+0xf0>)
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001802:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_InitTick+0xf0>)
 8001806:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800180a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800180c:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_InitTick+0xf0>)
 800180e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001810:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_InitTick+0xf0>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_InitTick+0xf0>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_InitTick+0xf0>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001824:	4817      	ldr	r0, [pc, #92]	@ (8001884 <HAL_InitTick+0xf0>)
 8001826:	f001 f927 	bl	8002a78 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001830:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <HAL_InitTick+0xf0>)
 800183a:	f001 f975 	bl	8002b28 <HAL_TIM_Base_Start_IT>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f000 fa46 	bl	8001cde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d808      	bhi.n	800186a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	201c      	movs	r0, #28
 800185e:	f000 fa22 	bl	8001ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001862:	4a09      	ldr	r2, [pc, #36]	@ (8001888 <HAL_InitTick+0xf4>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e002      	b.n	8001870 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001870:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001874:	4618      	mov	r0, r3
 8001876:	3738      	adds	r7, #56	@ 0x38
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	431bde83 	.word	0x431bde83
 8001884:	200002e0 	.word	0x200002e0
 8001888:	20000004 	.word	0x20000004

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <TIM1_CC_IRQHandler+0x10>)
 80018c6:	f001 fadd 	bl	8002e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001f4 	.word	0x200001f4

080018d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <TIM2_IRQHandler+0x10>)
 80018da:	f001 fad3 	bl	8002e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002e0 	.word	0x200002e0

080018e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <USART2_IRQHandler+0x10>)
 80018ee:	f001 ff57 	bl	80037a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000023c 	.word	0x2000023c

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <_kill>:

int _kill(int pid, int sig)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001914:	f006 f91e 	bl	8007b54 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	2216      	movs	r2, #22
 800191c:	601a      	str	r2, [r3, #0]
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_exit>:

void _exit (int status)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001932:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffe7 	bl	800190a <_kill>
  while (1) {}    /* Make sure we hang here */
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <_exit+0x12>

08001940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d8:	605a      	str	r2, [r3, #4]
  return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_isatty>:

int _isatty(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f006 f886 	bl	8007b54 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20005000 	.word	0x20005000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000328 	.word	0x20000328
 8001a7c:	20001dc8 	.word	0x20001dc8

08001a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff fff8 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a92:	490c      	ldr	r1, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa8:	4c09      	ldr	r4, [pc, #36]	@ (8001ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f006 f853 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aba:	f7ff fae9 	bl	8001090 <main>
  bx lr
 8001abe:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ac8:	0800b740 	.word	0x0800b740
  ldr r2, =_sbss
 8001acc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ad0:	20001dc4 	.word	0x20001dc4

08001ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_2_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_Init+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_Init+0x28>)
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f8d1 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	200f      	movs	r0, #15
 8001af0:	f7ff fe50 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fd7c 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x1c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_IncTick+0x20>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000008 	.word	0x20000008
 8001b24:	2000032c 	.word	0x2000032c

08001b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b02      	ldr	r3, [pc, #8]	@ (8001b38 <HAL_GetTick+0x10>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	2000032c 	.word	0x2000032c

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4906      	ldr	r1, [pc, #24]	@ (8001bd4 <__NVIC_EnableIRQ+0x34>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	@ (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	@ (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	@ 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff4f 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff64 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ffb2 	bl	8001c2c <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff81 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff57 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d008      	beq.n	8001d24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e020      	b.n	8001d66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 020e 	bic.w	r2, r2, #14
 8001d32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d005      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e051      	b.n	8001e38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020e 	bic.w	r2, r2, #14
 8001da2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_DMA_Abort_IT+0xd4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d029      	beq.n	8001e12 <HAL_DMA_Abort_IT+0xa2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <HAL_DMA_Abort_IT+0xd8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d022      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x9e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <HAL_DMA_Abort_IT+0xdc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01a      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x98>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_DMA_Abort_IT+0xe0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d012      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x92>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <HAL_DMA_Abort_IT+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00a      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x8c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <HAL_DMA_Abort_IT+0xe8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <HAL_DMA_Abort_IT+0x86>
 8001df0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001df4:	e00e      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001df6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dfa:	e00b      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e00:	e008      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	e005      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0c:	e002      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001e0e:	2310      	movs	r3, #16
 8001e10:	e000      	b.n	8001e14 <HAL_DMA_Abort_IT+0xa4>
 8001e12:	2301      	movs	r3, #1
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_DMA_Abort_IT+0xec>)
 8001e16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
    } 
  }
  return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40020008 	.word	0x40020008
 8001e48:	4002001c 	.word	0x4002001c
 8001e4c:	40020030 	.word	0x40020030
 8001e50:	40020044 	.word	0x40020044
 8001e54:	40020058 	.word	0x40020058
 8001e58:	4002006c 	.word	0x4002006c
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b08b      	sub	sp, #44	@ 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e169      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e74:	2201      	movs	r2, #1
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8158 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a9a      	ldr	r2, [pc, #616]	@ (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d05e      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a98      	ldr	r2, [pc, #608]	@ (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d875      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ea2:	4a98      	ldr	r2, [pc, #608]	@ (8002104 <HAL_GPIO_Init+0x2a4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d058      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ea8:	4a96      	ldr	r2, [pc, #600]	@ (8002104 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d86f      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eae:	4a96      	ldr	r2, [pc, #600]	@ (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d052      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001eb4:	4a94      	ldr	r2, [pc, #592]	@ (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d869      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eba:	4a94      	ldr	r2, [pc, #592]	@ (800210c <HAL_GPIO_Init+0x2ac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04c      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ec0:	4a92      	ldr	r2, [pc, #584]	@ (800210c <HAL_GPIO_Init+0x2ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d863      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ec6:	4a92      	ldr	r2, [pc, #584]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d046      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ecc:	4a90      	ldr	r2, [pc, #576]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d85d      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d82a      	bhi.n	8001f2c <HAL_GPIO_Init+0xcc>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d859      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <HAL_GPIO_Init+0x80>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f5b 	.word	0x08001f5b
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001f47 	.word	0x08001f47
 8001eec:	08001f89 	.word	0x08001f89
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08001f8f 	.word	0x08001f8f
 8001f00:	08001f8f 	.word	0x08001f8f
 8001f04:	08001f8f 	.word	0x08001f8f
 8001f08:	08001f8f 	.word	0x08001f8f
 8001f0c:	08001f8f 	.word	0x08001f8f
 8001f10:	08001f8f 	.word	0x08001f8f
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f8f 	.word	0x08001f8f
 8001f1c:	08001f8f 	.word	0x08001f8f
 8001f20:	08001f8f 	.word	0x08001f8f
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	4a79      	ldr	r2, [pc, #484]	@ (8002114 <HAL_GPIO_Init+0x2b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f32:	e02c      	b.n	8001f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e029      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	3304      	adds	r3, #4
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e024      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e01f      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	330c      	adds	r3, #12
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e01a      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f62:	2304      	movs	r3, #4
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e013      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	611a      	str	r2, [r3, #16]
          break;
 8001f7a:	e009      	b.n	8001f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	615a      	str	r2, [r3, #20]
          break;
 8001f86:	e003      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          break;
 8001f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2bff      	cmp	r3, #255	@ 0xff
 8001f94:	d801      	bhi.n	8001f9a <HAL_GPIO_Init+0x13a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_Init+0x13e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d802      	bhi.n	8001fac <HAL_GPIO_Init+0x14c>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x152>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	3b08      	subs	r3, #8
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	210f      	movs	r1, #15
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b1 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b4a      	ldr	r3, [pc, #296]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff8:	4a48      	ldr	r2, [pc, #288]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <HAL_GPIO_Init+0x2c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	@ (8002124 <HAL_GPIO_Init+0x2c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	@ (8002128 <HAL_GPIO_Init+0x2c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	@ (800212c <HAL_GPIO_Init+0x2cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e0>
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002040:	2304      	movs	r3, #4
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 800204c:	2300      	movs	r3, #0
 800204e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205e:	492f      	ldr	r1, [pc, #188]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	492c      	ldr	r1, [pc, #176]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4928      	ldr	r1, [pc, #160]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4922      	ldr	r1, [pc, #136]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	491e      	ldr	r1, [pc, #120]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4918      	ldr	r1, [pc, #96]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d6:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	4914      	ldr	r1, [pc, #80]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	490e      	ldr	r1, [pc, #56]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e021      	b.n	8002142 <HAL_GPIO_Init+0x2e2>
 80020fe:	bf00      	nop
 8002100:	10320000 	.word	0x10320000
 8002104:	10310000 	.word	0x10310000
 8002108:	10220000 	.word	0x10220000
 800210c:	10210000 	.word	0x10210000
 8002110:	10120000 	.word	0x10120000
 8002114:	10110000 	.word	0x10110000
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40011000 	.word	0x40011000
 800212c:	40011400 	.word	0x40011400
 8002130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_GPIO_Init+0x304>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	4909      	ldr	r1, [pc, #36]	@ (8002164 <HAL_GPIO_Init+0x304>)
 800213e:	4013      	ands	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	3301      	adds	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f ae8e 	bne.w	8001e74 <HAL_GPIO_Init+0x14>
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	372c      	adds	r7, #44	@ 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a6:	787b      	ldrb	r3, [r7, #1]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021b2:	e003      	b.n	80021bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	041a      	lsls	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	400b      	ands	r3, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e272      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e24c      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc28 	bl	8001b28 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fc24 	bl	8001b28 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e200      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc14 	bl	8001b28 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc10 	bl	8001b28 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1ec      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c0      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fbc9 	bl	8001b28 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fbc5 	bl	8001b28 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fba8 	bl	8001b28 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fba4 	bl	8001b28 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e180      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff fb88 	bl	8001b28 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fb84 	bl	8001b28 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e160      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fafe 	bl	8002a3c <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff fb6e 	bl	8001b28 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fb6a 	bl	8001b28 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e146      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b92      	ldr	r3, [pc, #584]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b8b      	ldr	r3, [pc, #556]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a87      	ldr	r2, [pc, #540]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b85      	ldr	r3, [pc, #532]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb2b 	bl	8001b28 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff fb27 	bl	8001b28 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	@ 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e103      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b75      	ldr	r3, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a6e      	ldr	r2, [pc, #440]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b6a      	ldr	r3, [pc, #424]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a69      	ldr	r2, [pc, #420]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b67      	ldr	r3, [pc, #412]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a66      	ldr	r2, [pc, #408]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a60      	ldr	r2, [pc, #384]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b5e      	ldr	r3, [pc, #376]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a5d      	ldr	r2, [pc, #372]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b5b      	ldr	r3, [pc, #364]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a57      	ldr	r2, [pc, #348]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fadb 	bl	8001b28 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fad7 	bl	8001b28 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fac5 	bl	8001b28 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fac1 	bl	8001b28 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09b      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b3c      	ldr	r3, [pc, #240]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fa95 	bl	8001b28 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fa91 	bl	8001b28 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e06d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4921      	ldr	r1, [pc, #132]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	491b      	ldr	r1, [pc, #108]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff fa65 	bl	8001b28 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff fa61 	bl	8001b28 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e035      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fa4e 	bl	8001b28 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff fa4a 	bl	8001b28 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e026      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e01e      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e019      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_RCC_OscConfig+0x500>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7ff f99c 	bl	8001b28 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7ff f998 	bl	8001b28 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe ff72 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	0800b2d8 	.word	0x0800b2d8
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x30>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x36>
 80028fe:	e027      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002902:	613b      	str	r3, [r7, #16]
      break;
 8002904:	e027      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0c9b      	lsrs	r3, r3, #18
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a17      	ldr	r2, [pc, #92]	@ (800296c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0c5b      	lsrs	r3, r3, #17
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e004      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	693b      	ldr	r3, [r7, #16]
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	0800b2f0 	.word	0x0800b2f0
 8002970:	0800b300 	.word	0x0800b300
 8002974:	003d0900 	.word	0x003d0900

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b02      	ldr	r3, [pc, #8]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff2 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	0800b2e8 	.word	0x0800b2e8

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffde 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0800b2e8 	.word	0x0800b2e8

080029dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	220f      	movs	r2, #15
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_RCC_GetClockConfig+0x58>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_RCC_GetClockConfig+0x5c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40022000 	.word	0x40022000

08002a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <RCC_Delay+0x34>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <RCC_Delay+0x38>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a5b      	lsrs	r3, r3, #9
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a58:	bf00      	nop
  }
  while (Delay --);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <RCC_Delay+0x1c>
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000000 	.word	0x20000000
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f839 	bl	8002b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fbe8 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e03a      	b.n	8002bb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	@ (8002bc0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x58>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x58>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x58>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d010      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	e007      	b.n	8002bb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40000800 	.word	0x40000800

08002bcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fd34 	bl	8001660 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fb3e 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_IC_Start_IT+0x1e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e013      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x46>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_IC_Start_IT+0x2e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e00b      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x46>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_IC_Start_IT+0x3e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e003      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x46>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_TIM_IC_Start_IT+0x58>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e013      	b.n	8002cec <HAL_TIM_IC_Start_IT+0x80>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_IC_Start_IT+0x68>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e00b      	b.n	8002cec <HAL_TIM_IC_Start_IT+0x80>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d104      	bne.n	8002ce4 <HAL_TIM_IC_Start_IT+0x78>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e003      	b.n	8002cec <HAL_TIM_IC_Start_IT+0x80>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0b8      	b.n	8002e70 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_IC_Start_IT+0xa2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xca>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0xb2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xca>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0xc2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_IC_Start_IT+0xca>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0xda>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x102>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0xea>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x102>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0xfa>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x102>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d841      	bhi.n	8002df8 <HAL_TIM_IC_Start_IT+0x18c>
 8002d74:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <HAL_TIM_IC_Start_IT+0x110>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002db1 	.word	0x08002db1
 8002d80:	08002df9 	.word	0x08002df9
 8002d84:	08002df9 	.word	0x08002df9
 8002d88:	08002df9 	.word	0x08002df9
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df9 	.word	0x08002df9
 8002d9c:	08002dd5 	.word	0x08002dd5
 8002da0:	08002df9 	.word	0x08002df9
 8002da4:	08002df9 	.word	0x08002df9
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002de7 	.word	0x08002de7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0202 	orr.w	r2, r2, #2
 8002dbe:	60da      	str	r2, [r3, #12]
      break;
 8002dc0:	e01d      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0204 	orr.w	r2, r2, #4
 8002dd0:	60da      	str	r2, [r3, #12]
      break;
 8002dd2:	e014      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0208 	orr.w	r2, r2, #8
 8002de2:	60da      	str	r2, [r3, #12]
      break;
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0210 	orr.w	r2, r2, #16
 8002df4:	60da      	str	r2, [r3, #12]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d134      	bne.n	8002e6e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fbac 	bl	800356a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	@ (8002e78 <HAL_TIM_IC_Start_IT+0x20c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d009      	beq.n	8002e3a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_TIM_IC_Start_IT+0x210>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_TIM_IC_Start_IT+0x214>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d010      	beq.n	8002e6e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	e007      	b.n	8002e6e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800

08002e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0202 	mvn.w	r2, #2
 8002eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe f822 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9c0 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f9c6 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d122      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d11b      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0204 	mvn.w	r2, #4
 8002f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fff8 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f996 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f99c 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0208 	mvn.w	r2, #8
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd ffce 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f96c 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f972 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0210 	mvn.w	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd ffa4 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f942 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f948 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0201 	mvn.w	r2, #1
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fade 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b80      	cmp	r3, #128	@ 0x80
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b80      	cmp	r3, #128	@ 0x80
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb27 	bl	8003682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303e:	2b40      	cmp	r3, #64	@ 0x40
 8003040:	d10e      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d107      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f90c 	bl	8003278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0220 	mvn.w	r2, #32
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 faf2 	bl	8003670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e088      	b.n	80031c4 <HAL_TIM_IC_ConfigChannel+0x130>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80030d0:	f000 f93e 	bl	8003350 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020c 	bic.w	r2, r2, #12
 80030e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6999      	ldr	r1, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	619a      	str	r2, [r3, #24]
 80030f6:	e060      	b.n	80031ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d11c      	bne.n	8003138 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800310e:	f000 f979 	bl	8003404 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699a      	ldr	r2, [r3, #24]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003120:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6999      	ldr	r1, [r3, #24]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	619a      	str	r2, [r3, #24]
 8003136:	e040      	b.n	80031ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11b      	bne.n	8003176 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800314e:	f000 f995 	bl	800347c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 020c 	bic.w	r2, r2, #12
 8003160:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	61da      	str	r2, [r3, #28]
 8003174:	e021      	b.n	80031ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d11c      	bne.n	80031b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800318c:	f000 f9b1 	bl	80034f2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800319e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69d9      	ldr	r1, [r3, #28]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	021a      	lsls	r2, r3, #8
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]
 80031b4:	e001      	b.n	80031ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d831      	bhi.n	8003244 <HAL_TIM_ReadCapturedValue+0x78>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003245 	.word	0x08003245
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003227 	.word	0x08003227
 80031fc:	08003245 	.word	0x08003245
 8003200:	08003245 	.word	0x08003245
 8003204:	08003245 	.word	0x08003245
 8003208:	08003231 	.word	0x08003231
 800320c:	08003245 	.word	0x08003245
 8003210:	08003245 	.word	0x08003245
 8003214:	08003245 	.word	0x08003245
 8003218:	0800323b 	.word	0x0800323b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	60fb      	str	r3, [r7, #12]

      break;
 8003224:	e00f      	b.n	8003246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	60fb      	str	r3, [r7, #12]

      break;
 800322e:	e00a      	b.n	8003246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	60fb      	str	r3, [r7, #12]

      break;
 8003238:	e005      	b.n	8003246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	60fb      	str	r3, [r7, #12]

      break;
 8003242:	e000      	b.n	8003246 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003244:	bf00      	nop
  }

  return tmpreg;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop

08003254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
	...

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a26      	ldr	r2, [pc, #152]	@ (8003348 <TIM_Base_SetConfig+0xbc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a25      	ldr	r2, [pc, #148]	@ (800334c <TIM_Base_SetConfig+0xc0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <TIM_Base_SetConfig+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <TIM_Base_SetConfig+0xbc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <TIM_Base_SetConfig+0xc0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a07      	ldr	r2, [pc, #28]	@ (8003344 <TIM_Base_SetConfig+0xb8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 0201 	bic.w	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a1f      	ldr	r2, [pc, #124]	@ (80033f8 <TIM_TI1_SetConfig+0xa8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00b      	beq.n	8003396 <TIM_TI1_SetConfig+0x46>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d007      	beq.n	8003396 <TIM_TI1_SetConfig+0x46>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a1c      	ldr	r2, [pc, #112]	@ (80033fc <TIM_TI1_SetConfig+0xac>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_TI1_SetConfig+0x46>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a1b      	ldr	r2, [pc, #108]	@ (8003400 <TIM_TI1_SetConfig+0xb0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <TIM_TI1_SetConfig+0x4a>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <TIM_TI1_SetConfig+0x4c>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e003      	b.n	80033ba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 030a 	and.w	r3, r3, #10
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	031b      	lsls	r3, r3, #12
 8003448:	b29b      	uxth	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003456:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003530:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	b29b      	uxth	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800356a:	b480      	push	{r7}
 800356c:	b087      	sub	sp, #28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	43db      	mvns	r3, r3
 800358c:	401a      	ands	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e046      	b.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003618:	d009      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a12      	ldr	r2, [pc, #72]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a10      	ldr	r2, [pc, #64]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10c      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4313      	orrs	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e042      	b.n	800372c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe f818 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fcb5 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800370c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d121      	bne.n	8003792 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_Transmit_IT+0x26>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e01a      	b.n	8003794 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2221      	movs	r2, #33	@ 0x21
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800378c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0ba      	sub	sp, #232	@ 0xe8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_UART_IRQHandler+0x66>
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb63 	bl	8003eca <UART_Receive_IT>
      return;
 8003804:	e25b      	b.n	8003cbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80de 	beq.w	80039cc <HAL_UART_IRQHandler+0x22c>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80d1 	beq.w	80039cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0xae>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xd2>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_UART_IRQHandler+0xf6>
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f043 0204 	orr.w	r2, r3, #4
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_UART_IRQHandler+0x126>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f043 0208 	orr.w	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 81f2 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_UART_IRQHandler+0x14e>
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 faee 	bl	8003eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_UART_IRQHandler+0x17a>
 8003912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04f      	beq.n	80039ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9f8 	bl	8003d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d041      	beq.n	80039b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3314      	adds	r3, #20
 8003934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3314      	adds	r3, #20
 8003956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800395a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800395e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1d9      	bne.n	800392e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d013      	beq.n	80039aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	4a7e      	ldr	r2, [pc, #504]	@ (8003b80 <HAL_UART_IRQHandler+0x3e0>)
 8003988:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f9ee 	bl	8001d70 <HAL_DMA_Abort_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039a4:	4610      	mov	r0, r2
 80039a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00e      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f99c 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e00a      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f998 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e006      	b.n	80039c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f994 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039c6:	e175      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	bf00      	nop
    return;
 80039ca:	e173      	b.n	8003cb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 814f 	bne.w	8003c74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8148 	beq.w	8003c74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8141 	beq.w	8003c74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80b6 	beq.w	8003b84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8145 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f080 813e 	bcs.w	8003cb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	f000 8088 	beq.w	8003b60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1d9      	bne.n	8003a50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ac0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e1      	bne.n	8003a9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003afc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003afe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e3      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	f023 0310 	bic.w	r3, r3, #16
 8003b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe f8cd 	bl	8001cfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8bf 	bl	8003cfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b7c:	e09c      	b.n	8003cb8 <HAL_UART_IRQHandler+0x518>
 8003b7e:	bf00      	nop
 8003b80:	08003dd5 	.word	0x08003dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 808e 	beq.w	8003cbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8089 	beq.w	8003cbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e3      	bne.n	8003baa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e3      	bne.n	8003be2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c4c:	61fa      	str	r2, [r7, #28]
 8003c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	617b      	str	r3, [r7, #20]
   return(result);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e3      	bne.n	8003c28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f844 	bl	8003cfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c72:	e023      	b.n	8003cbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_UART_IRQHandler+0x4f4>
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8b5 	bl	8003dfc <UART_Transmit_IT>
    return;
 8003c92:	e014      	b.n	8003cbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <HAL_UART_IRQHandler+0x51e>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8f4 	bl	8003e9a <UART_EndTransmit_IT>
    return;
 8003cb2:	e004      	b.n	8003cbe <HAL_UART_IRQHandler+0x51e>
    return;
 8003cb4:	bf00      	nop
 8003cb6:	e002      	b.n	8003cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003cbc:	bf00      	nop
  }
}
 8003cbe:	37e8      	adds	r7, #232	@ 0xe8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b095      	sub	sp, #84	@ 0x54
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d38:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d119      	bne.n	8003dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 0310 	bic.w	r3, r3, #16
 8003d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da8:	61ba      	str	r2, [r7, #24]
 8003daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6979      	ldr	r1, [r7, #20]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	613b      	str	r3, [r7, #16]
   return(result);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dca:	bf00      	nop
 8003dcc:	3754      	adds	r7, #84	@ 0x54
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff ff7a 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b21      	cmp	r3, #33	@ 0x21
 8003e0e:	d13e      	bne.n	8003e8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e18:	d114      	bne.n	8003e44 <UART_Transmit_IT+0x48>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d110      	bne.n	8003e44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]
 8003e42:	e008      	b.n	8003e56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6211      	str	r1, [r2, #32]
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4619      	mov	r1, r3
 8003e64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ff02 	bl	8003cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08c      	sub	sp, #48	@ 0x30
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b22      	cmp	r3, #34	@ 0x22
 8003edc:	f040 80ae 	bne.w	800403c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d117      	bne.n	8003f1a <UART_Receive_IT+0x50>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d113      	bne.n	8003f1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	1c9a      	adds	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f18:	e026      	b.n	8003f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2c:	d007      	beq.n	8003f3e <UART_Receive_IT+0x74>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <UART_Receive_IT+0x82>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e008      	b.n	8003f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d15d      	bne.n	8004038 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0220 	bic.w	r2, r2, #32
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0201 	bic.w	r2, r2, #1
 8003faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d135      	bne.n	800402e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe8:	623a      	str	r2, [r7, #32]
 8003fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	69f9      	ldr	r1, [r7, #28]
 8003fee:	6a3a      	ldr	r2, [r7, #32]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d10a      	bne.n	8004020 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fe67 	bl	8003cfa <HAL_UARTEx_RxEventCallback>
 800402c:	e002      	b.n	8004034 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fe51 	bl	8003cd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e002      	b.n	800403e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3730      	adds	r7, #48	@ 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004082:	f023 030c 	bic.w	r3, r3, #12
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	430b      	orrs	r3, r1
 800408e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2c      	ldr	r2, [pc, #176]	@ (800415c <UART_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040b0:	f7fe fc80 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	e002      	b.n	80040be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040b8:	f7fe fc68 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80040bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <UART_SetConfig+0x118>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	0119      	lsls	r1, r3, #4
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <UART_SetConfig+0x118>)
 80040f6:	fba3 0302 	umull	r0, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2064      	movs	r0, #100	@ 0x64
 80040fe:	fb00 f303 	mul.w	r3, r0, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	3332      	adds	r3, #50	@ 0x32
 8004108:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <UART_SetConfig+0x118>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004114:	4419      	add	r1, r3
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fbb2 f2f3 	udiv	r2, r2, r3
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <UART_SetConfig+0x118>)
 800412e:	fba3 0302 	umull	r0, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2064      	movs	r0, #100	@ 0x64
 8004136:	fb00 f303 	mul.w	r3, r0, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	3332      	adds	r3, #50	@ 0x32
 8004140:	4a07      	ldr	r2, [pc, #28]	@ (8004160 <UART_SetConfig+0x118>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	440a      	add	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40013800 	.word	0x40013800
 8004160:	51eb851f 	.word	0x51eb851f

08004164 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416a:	f3ef 8305 	mrs	r3, IPSR
 800416e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	607b      	str	r3, [r7, #4]
  return(result);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <osKernelInitialize+0x32>
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <osKernelInitialize+0x60>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d109      	bne.n	800419e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800418a:	f3ef 8311 	mrs	r3, BASEPRI
 800418e:	603b      	str	r3, [r7, #0]
  return(result);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004196:	f06f 0305 	mvn.w	r3, #5
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e00c      	b.n	80041b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <osKernelInitialize+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <osKernelInitialize+0x60>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041b8:	68fb      	ldr	r3, [r7, #12]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	20000330 	.word	0x20000330

080041c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ce:	f3ef 8305 	mrs	r3, IPSR
 80041d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041da:	f3ef 8310 	mrs	r3, PRIMASK
 80041de:	607b      	str	r3, [r7, #4]
  return(result);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <osKernelStart+0x32>
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <osKernelStart+0x64>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d109      	bne.n	8004202 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ee:	f3ef 8311 	mrs	r3, BASEPRI
 80041f2:	603b      	str	r3, [r7, #0]
  return(result);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <osKernelStart+0x3a>
    stat = osErrorISR;
 80041fa:	f06f 0305 	mvn.w	r3, #5
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e00e      	b.n	8004220 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <osKernelStart+0x64>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <osKernelStart+0x64>)
 800420c:	2202      	movs	r2, #2
 800420e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004210:	f001 f890 	bl	8005334 <vTaskStartScheduler>
      stat = osOK;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <osKernelStart+0x58>
    } else {
      stat = osError;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800421e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000330 	.word	0x20000330

08004230 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b092      	sub	sp, #72	@ 0x48
 8004234:	af04      	add	r7, sp, #16
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004240:	f3ef 8305 	mrs	r3, IPSR
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8094 	bne.w	8004376 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424e:	f3ef 8310 	mrs	r3, PRIMASK
 8004252:	623b      	str	r3, [r7, #32]
  return(result);
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 808d 	bne.w	8004376 <osThreadNew+0x146>
 800425c:	4b48      	ldr	r3, [pc, #288]	@ (8004380 <osThreadNew+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d106      	bne.n	8004272 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004264:	f3ef 8311 	mrs	r3, BASEPRI
 8004268:	61fb      	str	r3, [r7, #28]
  return(result);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8082 	bne.w	8004376 <osThreadNew+0x146>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d07e      	beq.n	8004376 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800427c:	2318      	movs	r3, #24
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004280:	2300      	movs	r3, #0
 8004282:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004284:	f107 031b 	add.w	r3, r7, #27
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800428e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d045      	beq.n	8004322 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <osThreadNew+0x74>
        name = attr->name;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <osThreadNew+0x9a>
 80042b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ba:	2b38      	cmp	r3, #56	@ 0x38
 80042bc:	d805      	bhi.n	80042ca <osThreadNew+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <osThreadNew+0x9e>
        return (NULL);
 80042ca:	2300      	movs	r3, #0
 80042cc:	e054      	b.n	8004378 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <osThreadNew+0xd4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80042ec:	d90a      	bls.n	8004304 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <osThreadNew+0xd4>
        mem = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004302:	e010      	b.n	8004326 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10c      	bne.n	8004326 <osThreadNew+0xf6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <osThreadNew+0xf6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <osThreadNew+0xf6>
          mem = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004320:	e001      	b.n	8004326 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	2b01      	cmp	r3, #1
 800432a:	d110      	bne.n	800434e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004334:	9202      	str	r2, [sp, #8]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004340:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fe24 	bl	8004f90 <xTaskCreateStatic>
 8004348:	4603      	mov	r3, r0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e013      	b.n	8004376 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	b29a      	uxth	r2, r3
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fe71 	bl	800504e <xTaskCreate>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <osThreadNew+0x146>
          hTask = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004376:	697b      	ldr	r3, [r7, #20]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3738      	adds	r7, #56	@ 0x38
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000330 	.word	0x20000330

08004384 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800438c:	f3ef 8305 	mrs	r3, IPSR
 8004390:	613b      	str	r3, [r7, #16]
  return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10f      	bne.n	80043b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004398:	f3ef 8310 	mrs	r3, PRIMASK
 800439c:	60fb      	str	r3, [r7, #12]
  return(result);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <osDelay+0x34>
 80043a4:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <osDelay+0x58>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d109      	bne.n	80043c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043ac:	f3ef 8311 	mrs	r3, BASEPRI
 80043b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <osDelay+0x3c>
    stat = osErrorISR;
 80043b8:	f06f 0305 	mvn.w	r3, #5
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e007      	b.n	80043d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 ff7c 	bl	80052c8 <vTaskDelay>
    }
  }

  return (stat);
 80043d0:	697b      	ldr	r3, [r7, #20]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000330 	.word	0x20000330

080043e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a06      	ldr	r2, [pc, #24]	@ (8004408 <vApplicationGetIdleTaskMemory+0x28>)
 80043f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a05      	ldr	r2, [pc, #20]	@ (800440c <vApplicationGetIdleTaskMemory+0x2c>)
 80043f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2280      	movs	r2, #128	@ 0x80
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20000334 	.word	0x20000334
 800440c:	20000390 	.word	0x20000390

08004410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a07      	ldr	r2, [pc, #28]	@ (800443c <vApplicationGetTimerTaskMemory+0x2c>)
 8004420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a06      	ldr	r2, [pc, #24]	@ (8004440 <vApplicationGetTimerTaskMemory+0x30>)
 8004426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000590 	.word	0x20000590
 8004440:	200005ec 	.word	0x200005ec

08004444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f103 0208 	add.w	r2, r3, #8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800445c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f103 0208 	add.w	r2, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f103 0208 	add.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f6:	d103      	bne.n	8004500 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e00c      	b.n	800451a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3308      	adds	r3, #8
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e002      	b.n	800450e <vListInsert+0x2e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d2f6      	bcs.n	8004508 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6892      	ldr	r2, [r2, #8]
 8004566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6852      	ldr	r2, [r2, #4]
 8004570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d103      	bne.n	8004584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1e5a      	subs	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
	...

080045a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045d0:	f001 fffc 	bl	80065cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	3b01      	subs	r3, #1
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	441a      	add	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	22ff      	movs	r2, #255	@ 0xff
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	22ff      	movs	r2, #255	@ 0xff
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d114      	bne.n	8004650 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01a      	beq.n	8004664 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3310      	adds	r3, #16
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f910 	bl	8005858 <xTaskRemoveFromEventList>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d012      	beq.n	8004664 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <xQueueGenericReset+0xd0>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	e009      	b.n	8004664 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3310      	adds	r3, #16
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fef5 	bl	8004444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3324      	adds	r3, #36	@ 0x24
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fef0 	bl	8004444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004664:	f001 ffe2 	bl	800662c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	@ 0x38
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	e7fd      	b.n	80046be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <xQueueGenericCreateStatic+0x56>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <xQueueGenericCreateStatic+0x5a>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueGenericCreateStatic+0x5c>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <xQueueGenericCreateStatic+0x84>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <xQueueGenericCreateStatic+0x88>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <xQueueGenericCreateStatic+0x8a>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800471e:	2350      	movs	r3, #80	@ 0x50
 8004720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b50      	cmp	r3, #80	@ 0x50
 8004726:	d00b      	beq.n	8004740 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61bb      	str	r3, [r7, #24]
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004752:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	4613      	mov	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f805 	bl	8004770 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004768:	4618      	mov	r0, r3
 800476a:	3730      	adds	r7, #48	@ 0x30
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d103      	bne.n	800478c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e002      	b.n	8004792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800479e:	2101      	movs	r1, #1
 80047a0:	69b8      	ldr	r0, [r7, #24]
 80047a2:	f7ff feff 	bl	80045a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08e      	sub	sp, #56	@ 0x38
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047c6:	2300      	movs	r3, #0
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericSend+0x34>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSend+0x42>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSend+0x46>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSend+0x48>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericSend+0x64>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d103      	bne.n	800482a <xQueueGenericSend+0x72>
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <xQueueGenericSend+0x76>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericSend+0x78>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <xQueueGenericSend+0x94>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	623b      	str	r3, [r7, #32]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484c:	f001 f9c8 	bl	8005be0 <xTaskGetSchedulerState>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <xQueueGenericSend+0xa4>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <xQueueGenericSend+0xa8>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <xQueueGenericSend+0xaa>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <xQueueGenericSend+0xc6>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	61fb      	str	r3, [r7, #28]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800487e:	f001 fea5 	bl	80065cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <xQueueGenericSend+0xdc>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d129      	bne.n	80048e8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800489a:	f000 fa0d 	bl	8004cb8 <prvCopyDataToQueue>
 800489e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	3324      	adds	r3, #36	@ 0x24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 ffd3 	bl	8005858 <xTaskRemoveFromEventList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048b8:	4b3f      	ldr	r3, [pc, #252]	@ (80049b8 <xQueueGenericSend+0x200>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	e00a      	b.n	80048e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <xQueueGenericSend+0x200>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048e0:	f001 fea4 	bl	800662c <vPortExitCritical>
				return pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e063      	b.n	80049b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ee:	f001 fe9d 	bl	800662c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e05c      	b.n	80049b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f80d 	bl	8005920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800490a:	f001 fe8f 	bl	800662c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490e:	f000 fd79 	bl	8005404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004912:	f001 fe5b 	bl	80065cc <vPortEnterCritical>
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800491c:	b25b      	sxtb	r3, r3
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004922:	d103      	bne.n	800492c <xQueueGenericSend+0x174>
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004932:	b25b      	sxtb	r3, r3
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004938:	d103      	bne.n	8004942 <xQueueGenericSend+0x18a>
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004942:	f001 fe73 	bl	800662c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004946:	1d3a      	adds	r2, r7, #4
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fffc 	bl	800594c <xTaskCheckForTimeOut>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d124      	bne.n	80049a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800495a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800495c:	f000 faa4 	bl	8004ea8 <prvIsQueueFull>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	3310      	adds	r3, #16
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 ff20 	bl	80057b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004976:	f000 fa2f 	bl	8004dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800497a:	f000 fd51 	bl	8005420 <xTaskResumeAll>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f47f af7c 	bne.w	800487e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <xQueueGenericSend+0x200>)
 8004988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	e772      	b.n	800487e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800499a:	f000 fa1d 	bl	8004dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499e:	f000 fd3f 	bl	8005420 <xTaskResumeAll>
 80049a2:	e76c      	b.n	800487e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a6:	f000 fa17 	bl	8004dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049aa:	f000 fd39 	bl	8005420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ae:	2300      	movs	r3, #0
		}
	}
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3738      	adds	r7, #56	@ 0x38
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08e      	sub	sp, #56	@ 0x38
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <xQueueGenericSendFromISR+0x3e>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <xQueueGenericSendFromISR+0x42>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <xQueueGenericSendFromISR+0x44>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	623b      	str	r3, [r7, #32]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d103      	bne.n	8004a2a <xQueueGenericSendFromISR+0x6e>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <xQueueGenericSendFromISR+0x72>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <xQueueGenericSendFromISR+0x74>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	61fb      	str	r3, [r7, #28]
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a4c:	f001 fe80 	bl	8006750 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a50:	f3ef 8211 	mrs	r2, BASEPRI
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61ba      	str	r2, [r7, #24]
 8004a66:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <xQueueGenericSendFromISR+0xc2>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d12c      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a8e:	f000 f913 	bl	8004cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a92:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a9a:	d112      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	3324      	adds	r3, #36	@ 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fed5 	bl	8005858 <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25a      	sxtb	r2, r3
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004ad6:	e001      	b.n	8004adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8004adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ade:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3738      	adds	r7, #56	@ 0x38
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	@ 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <xQueueReceive+0x32>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	623b      	str	r3, [r7, #32]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <xQueueReceive+0x40>
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueReceive+0x44>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueReceive+0x46>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xQueueReceive+0x62>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b56:	f001 f843 	bl	8005be0 <xTaskGetSchedulerState>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <xQueueReceive+0x72>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <xQueueReceive+0x76>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueReceive+0x78>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <xQueueReceive+0x94>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	61bb      	str	r3, [r7, #24]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b88:	f001 fd20 	bl	80065cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01f      	beq.n	8004bd8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b9c:	f000 f8f6 	bl	8004d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00f      	beq.n	8004bd0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fe4f 	bl	8005858 <xTaskRemoveFromEventList>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb4 <xQueueReceive+0x1c0>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bd0:	f001 fd2c 	bl	800662c <vPortExitCritical>
				return pdPASS;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e069      	b.n	8004cac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bde:	f001 fd25 	bl	800662c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e062      	b.n	8004cac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bec:	f107 0310 	add.w	r3, r7, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe95 	bl	8005920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bfa:	f001 fd17 	bl	800662c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bfe:	f000 fc01 	bl	8005404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c02:	f001 fce3 	bl	80065cc <vPortEnterCritical>
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c12:	d103      	bne.n	8004c1c <xQueueReceive+0x128>
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c28:	d103      	bne.n	8004c32 <xQueueReceive+0x13e>
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c32:	f001 fcfb 	bl	800662c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c36:	1d3a      	adds	r2, r7, #4
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fe84 	bl	800594c <xTaskCheckForTimeOut>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d123      	bne.n	8004c92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c4c:	f000 f916 	bl	8004e7c <prvIsQueueEmpty>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	3324      	adds	r3, #36	@ 0x24
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fda8 	bl	80057b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c66:	f000 f8b7 	bl	8004dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c6a:	f000 fbd9 	bl	8005420 <xTaskResumeAll>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d189      	bne.n	8004b88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c74:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <xQueueReceive+0x1c0>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	e780      	b.n	8004b88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c88:	f000 f8a6 	bl	8004dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c8c:	f000 fbc8 	bl	8005420 <xTaskResumeAll>
 8004c90:	e77a      	b.n	8004b88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c94:	f000 f8a0 	bl	8004dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c98:	f000 fbc2 	bl	8005420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c9e:	f000 f8ed 	bl	8004e7c <prvIsQueueEmpty>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f43f af6f 	beq.w	8004b88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004caa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3730      	adds	r7, #48	@ 0x30
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10d      	bne.n	8004cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d14d      	bne.n	8004d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff9a 	bl	8005c1c <xTaskPriorityDisinherit>
 8004ce8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	e043      	b.n	8004d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d119      	bne.n	8004d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6898      	ldr	r0, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	461a      	mov	r2, r3
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	f002 ff61 	bl	8007bca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	441a      	add	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d32b      	bcc.n	8004d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	e026      	b.n	8004d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68d8      	ldr	r0, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	461a      	mov	r2, r3
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	f002 ff47 	bl	8007bca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	425b      	negs	r3, r3
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d207      	bcs.n	8004d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	425b      	negs	r3, r3
 8004d62:	441a      	add	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d105      	bne.n	8004d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d82:	697b      	ldr	r3, [r7, #20]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d303      	bcc.n	8004dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68d9      	ldr	r1, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6838      	ldr	r0, [r7, #0]
 8004dcc:	f002 fefd 	bl	8007bca <memcpy>
	}
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004de0:	f001 fbf4 	bl	80065cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dec:	e011      	b.n	8004e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3324      	adds	r3, #36	@ 0x24
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fd2c 	bl	8005858 <xTaskRemoveFromEventList>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e06:	f000 fe05 	bl	8005a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dce9      	bgt.n	8004dee <prvUnlockQueue+0x16>
 8004e1a:	e000      	b.n	8004e1e <prvUnlockQueue+0x46>
					break;
 8004e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	22ff      	movs	r2, #255	@ 0xff
 8004e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e26:	f001 fc01 	bl	800662c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e2a:	f001 fbcf 	bl	80065cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e36:	e011      	b.n	8004e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3310      	adds	r3, #16
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fd07 	bl	8005858 <xTaskRemoveFromEventList>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e50:	f000 fde0 	bl	8005a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	dce9      	bgt.n	8004e38 <prvUnlockQueue+0x60>
 8004e64:	e000      	b.n	8004e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	22ff      	movs	r2, #255	@ 0xff
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e70:	f001 fbdc 	bl	800662c <vPortExitCritical>
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e84:	f001 fba2 	bl	80065cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e001      	b.n	8004e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e9a:	f001 fbc7 	bl	800662c <vPortExitCritical>

	return xReturn;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eb0:	f001 fb8c 	bl	80065cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d102      	bne.n	8004ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e001      	b.n	8004eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eca:	f001 fbaf 	bl	800662c <vPortExitCritical>

	return xReturn;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e014      	b.n	8004f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <vQueueAddToRegistry+0x4c>)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ef4:	490b      	ldr	r1, [pc, #44]	@ (8004f24 <vQueueAddToRegistry+0x4c>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004efe:	4a09      	ldr	r2, [pc, #36]	@ (8004f24 <vQueueAddToRegistry+0x4c>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f0a:	e006      	b.n	8004f1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b07      	cmp	r3, #7
 8004f16:	d9e7      	bls.n	8004ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	200009ec 	.word	0x200009ec

08004f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f38:	f001 fb48 	bl	80065cc <vPortEnterCritical>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f48:	d103      	bne.n	8004f52 <vQueueWaitForMessageRestricted+0x2a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f5e:	d103      	bne.n	8004f68 <vQueueWaitForMessageRestricted+0x40>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f68:	f001 fb60 	bl	800662c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3324      	adds	r3, #36	@ 0x24
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fc3f 	bl	8005800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ff28 	bl	8004dd8 <prvUnlockQueue>
	}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	@ 0x38
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	623b      	str	r3, [r7, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <xTaskCreateStatic+0x4a>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	61fb      	str	r3, [r7, #28]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fda:	235c      	movs	r3, #92	@ 0x5c
 8004fdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fe2:	d00b      	beq.n	8004ffc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01e      	beq.n	8005040 <xTaskCreateStatic+0xb0>
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01b      	beq.n	8005040 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800501a:	2300      	movs	r3, #0
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f850 	bl	80050d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800503a:	f000 f8d5 	bl	80051e8 <prvAddNewTaskToReadyList>
 800503e:	e001      	b.n	8005044 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005044:	697b      	ldr	r3, [r7, #20]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3728      	adds	r7, #40	@ 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08c      	sub	sp, #48	@ 0x30
 8005052:	af04      	add	r7, sp, #16
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fbb4 	bl	80067d0 <pvPortMalloc>
 8005068:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005070:	205c      	movs	r0, #92	@ 0x5c
 8005072:	f001 fbad 	bl	80067d0 <pvPortMalloc>
 8005076:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	631a      	str	r2, [r3, #48]	@ 0x30
 8005084:	e005      	b.n	8005092 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f001 fc6a 	bl	8006960 <vPortFree>
 800508c:	e001      	b.n	8005092 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f80e 	bl	80050d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050bc:	69f8      	ldr	r0, [r7, #28]
 80050be:	f000 f893 	bl	80051e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050c2:	2301      	movs	r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e002      	b.n	80050ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ce:	69bb      	ldr	r3, [r7, #24]
	}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	21a5      	movs	r1, #165	@ 0xa5
 80050f2:	f002 fcdc 	bl	8007aae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005100:	3b01      	subs	r3, #1
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	617b      	str	r3, [r7, #20]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e012      	b.n	800515e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	7819      	ldrb	r1, [r3, #0]
 8005140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	3334      	adds	r3, #52	@ 0x34
 8005148:	460a      	mov	r2, r1
 800514a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b0f      	cmp	r3, #15
 8005162:	d9e9      	bls.n	8005138 <prvInitialiseNewTask+0x60>
 8005164:	e000      	b.n	8005168 <prvInitialiseNewTask+0x90>
		{
			break;
 8005166:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	2b37      	cmp	r3, #55	@ 0x37
 8005174:	d901      	bls.n	800517a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005176:	2337      	movs	r3, #55	@ 0x37
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800517e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005184:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	3304      	adds	r3, #4
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff f976 	bl	8004482 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	3318      	adds	r3, #24
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f971 	bl	8004482 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	2200      	movs	r2, #0
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	69b8      	ldr	r0, [r7, #24]
 80051ca:	f001 f90b 	bl	80063e4 <pxPortInitialiseStack>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e0:	bf00      	nop
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051f0:	f001 f9ec 	bl	80065cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051f4:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <prvAddNewTaskToReadyList+0xc4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	4a2c      	ldr	r2, [pc, #176]	@ (80052ac <prvAddNewTaskToReadyList+0xc4>)
 80051fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051fe:	4b2c      	ldr	r3, [pc, #176]	@ (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005206:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800520c:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <prvAddNewTaskToReadyList+0xc4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005214:	f000 fc22 	bl	8005a5c <prvInitialiseTaskLists>
 8005218:	e00d      	b.n	8005236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800521a:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <prvAddNewTaskToReadyList+0xcc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005222:	4b23      	ldr	r3, [pc, #140]	@ (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	429a      	cmp	r2, r3
 800522e:	d802      	bhi.n	8005236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005230:	4a1f      	ldr	r2, [pc, #124]	@ (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005236:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <prvAddNewTaskToReadyList+0xd0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a1e      	ldr	r2, [pc, #120]	@ (80052b8 <prvAddNewTaskToReadyList+0xd0>)
 800523e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <prvAddNewTaskToReadyList+0xd0>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <prvAddNewTaskToReadyList+0xd4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d903      	bls.n	800525c <prvAddNewTaskToReadyList+0x74>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <prvAddNewTaskToReadyList+0xd4>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <prvAddNewTaskToReadyList+0xd8>)
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7ff f911 	bl	800449a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005278:	f001 f9d8 	bl	800662c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800527c:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <prvAddNewTaskToReadyList+0xcc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <prvAddNewTaskToReadyList+0xc8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	429a      	cmp	r2, r3
 8005290:	d207      	bcs.n	80052a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005292:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <prvAddNewTaskToReadyList+0xdc>)
 8005294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000f00 	.word	0x20000f00
 80052b0:	20000a2c 	.word	0x20000a2c
 80052b4:	20000f0c 	.word	0x20000f0c
 80052b8:	20000f1c 	.word	0x20000f1c
 80052bc:	20000f08 	.word	0x20000f08
 80052c0:	20000a30 	.word	0x20000a30
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052da:	4b14      	ldr	r3, [pc, #80]	@ (800532c <vTaskDelay+0x64>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <vTaskDelay+0x32>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052fa:	f000 f883 	bl	8005404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fcfb 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005306:	f000 f88b 	bl	8005420 <xTaskResumeAll>
 800530a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005312:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <vTaskDelay+0x68>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000f28 	.word	0x20000f28
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	@ 0x28
 8005338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005342:	463a      	mov	r2, r7
 8005344:	1d39      	adds	r1, r7, #4
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff f848 	bl	80043e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	9202      	str	r2, [sp, #8]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	460a      	mov	r2, r1
 8005362:	4922      	ldr	r1, [pc, #136]	@ (80053ec <vTaskStartScheduler+0xb8>)
 8005364:	4822      	ldr	r0, [pc, #136]	@ (80053f0 <vTaskStartScheduler+0xbc>)
 8005366:	f7ff fe13 	bl	8004f90 <xTaskCreateStatic>
 800536a:	4603      	mov	r3, r0
 800536c:	4a21      	ldr	r2, [pc, #132]	@ (80053f4 <vTaskStartScheduler+0xc0>)
 800536e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005370:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <vTaskStartScheduler+0xc0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e001      	b.n	8005382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005388:	f000 fd0c 	bl	8005da4 <xTimerCreateTimerTask>
 800538c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d116      	bne.n	80053c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053a8:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <vTaskStartScheduler+0xc4>)
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053b0:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <vTaskStartScheduler+0xc8>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053b6:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <vTaskStartScheduler+0xcc>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053bc:	f001 f894 	bl	80064e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053c0:	e00f      	b.n	80053e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c8:	d10b      	bne.n	80053e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60fb      	str	r3, [r7, #12]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <vTaskStartScheduler+0xaa>
}
 80053e2:	bf00      	nop
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	0800b278 	.word	0x0800b278
 80053f0:	08005a2d 	.word	0x08005a2d
 80053f4:	20000f24 	.word	0x20000f24
 80053f8:	20000f20 	.word	0x20000f20
 80053fc:	20000f0c 	.word	0x20000f0c
 8005400:	20000f04 	.word	0x20000f04

08005404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005408:	4b04      	ldr	r3, [pc, #16]	@ (800541c <vTaskSuspendAll+0x18>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	4a03      	ldr	r2, [pc, #12]	@ (800541c <vTaskSuspendAll+0x18>)
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000f28 	.word	0x20000f28

08005420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800542e:	4b42      	ldr	r3, [pc, #264]	@ (8005538 <xTaskResumeAll+0x118>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <xTaskResumeAll+0x2e>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	603b      	str	r3, [r7, #0]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800544e:	f001 f8bd 	bl	80065cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005452:	4b39      	ldr	r3, [pc, #228]	@ (8005538 <xTaskResumeAll+0x118>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a37      	ldr	r2, [pc, #220]	@ (8005538 <xTaskResumeAll+0x118>)
 800545a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800545c:	4b36      	ldr	r3, [pc, #216]	@ (8005538 <xTaskResumeAll+0x118>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d162      	bne.n	800552a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005464:	4b35      	ldr	r3, [pc, #212]	@ (800553c <xTaskResumeAll+0x11c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05e      	beq.n	800552a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800546c:	e02f      	b.n	80054ce <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <xTaskResumeAll+0x120>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3318      	adds	r3, #24
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff f868 	bl	8004550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff f863 	bl	8004550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548e:	4b2d      	ldr	r3, [pc, #180]	@ (8005544 <xTaskResumeAll+0x124>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d903      	bls.n	800549e <xTaskResumeAll+0x7e>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <xTaskResumeAll+0x124>)
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <xTaskResumeAll+0x128>)
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fe fff0 	bl	800449a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <xTaskResumeAll+0x12c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80054c8:	4b21      	ldr	r3, [pc, #132]	@ (8005550 <xTaskResumeAll+0x130>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <xTaskResumeAll+0x120>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cb      	bne.n	800546e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054dc:	f000 fb5c 	bl	8005b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005554 <xTaskResumeAll+0x134>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054ec:	f000 f844 	bl	8005578 <xTaskIncrementTick>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80054f6:	4b16      	ldr	r3, [pc, #88]	@ (8005550 <xTaskResumeAll+0x130>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f1      	bne.n	80054ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005508:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <xTaskResumeAll+0x134>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <xTaskResumeAll+0x130>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005516:	2301      	movs	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800551a:	4b0f      	ldr	r3, [pc, #60]	@ (8005558 <xTaskResumeAll+0x138>)
 800551c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800552a:	f001 f87f 	bl	800662c <vPortExitCritical>

	return xAlreadyYielded;
 800552e:	68bb      	ldr	r3, [r7, #8]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000f28 	.word	0x20000f28
 800553c:	20000f00 	.word	0x20000f00
 8005540:	20000ec0 	.word	0x20000ec0
 8005544:	20000f08 	.word	0x20000f08
 8005548:	20000a30 	.word	0x20000a30
 800554c:	20000a2c 	.word	0x20000a2c
 8005550:	20000f14 	.word	0x20000f14
 8005554:	20000f10 	.word	0x20000f10
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005562:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <xTaskGetTickCount+0x18>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005568:	687b      	ldr	r3, [r7, #4]
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	20000f04 	.word	0x20000f04

08005578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005582:	4b52      	ldr	r3, [pc, #328]	@ (80056cc <xTaskIncrementTick+0x154>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 808f 	bne.w	80056aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800558c:	4b50      	ldr	r3, [pc, #320]	@ (80056d0 <xTaskIncrementTick+0x158>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005594:	4a4e      	ldr	r2, [pc, #312]	@ (80056d0 <xTaskIncrementTick+0x158>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d121      	bne.n	80055e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055a0:	4b4c      	ldr	r3, [pc, #304]	@ (80056d4 <xTaskIncrementTick+0x15c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <xTaskIncrementTick+0x46>
 80055c2:	4b44      	ldr	r3, [pc, #272]	@ (80056d4 <xTaskIncrementTick+0x15c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <xTaskIncrementTick+0x160>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a41      	ldr	r2, [pc, #260]	@ (80056d4 <xTaskIncrementTick+0x15c>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4a41      	ldr	r2, [pc, #260]	@ (80056d8 <xTaskIncrementTick+0x160>)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <xTaskIncrementTick+0x164>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	4a3f      	ldr	r2, [pc, #252]	@ (80056dc <xTaskIncrementTick+0x164>)
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	f000 fada 	bl	8005b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055e4:	4b3e      	ldr	r3, [pc, #248]	@ (80056e0 <xTaskIncrementTick+0x168>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d34e      	bcc.n	800568c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ee:	4b39      	ldr	r3, [pc, #228]	@ (80056d4 <xTaskIncrementTick+0x15c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <xTaskIncrementTick+0x84>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <xTaskIncrementTick+0x86>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <xTaskIncrementTick+0x168>)
 8005604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005608:	601a      	str	r2, [r3, #0]
					break;
 800560a:	e03f      	b.n	800568c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800560c:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <xTaskIncrementTick+0x15c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d203      	bcs.n	800562c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005624:	4a2e      	ldr	r2, [pc, #184]	@ (80056e0 <xTaskIncrementTick+0x168>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6013      	str	r3, [r2, #0]
						break;
 800562a:	e02f      	b.n	800568c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3304      	adds	r3, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe ff8d 	bl	8004550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3318      	adds	r3, #24
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe ff84 	bl	8004550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564c:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <xTaskIncrementTick+0x16c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <xTaskIncrementTick+0xe4>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a22      	ldr	r2, [pc, #136]	@ (80056e4 <xTaskIncrementTick+0x16c>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a1f      	ldr	r2, [pc, #124]	@ (80056e8 <xTaskIncrementTick+0x170>)
 800566a:	441a      	add	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fe ff11 	bl	800449a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567c:	4b1b      	ldr	r3, [pc, #108]	@ (80056ec <xTaskIncrementTick+0x174>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	429a      	cmp	r2, r3
 8005684:	d3b3      	bcc.n	80055ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800568a:	e7b0      	b.n	80055ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800568c:	4b17      	ldr	r3, [pc, #92]	@ (80056ec <xTaskIncrementTick+0x174>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005692:	4915      	ldr	r1, [pc, #84]	@ (80056e8 <xTaskIncrementTick+0x170>)
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d907      	bls.n	80056b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e004      	b.n	80056b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056aa:	4b11      	ldr	r3, [pc, #68]	@ (80056f0 <xTaskIncrementTick+0x178>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4a0f      	ldr	r2, [pc, #60]	@ (80056f0 <xTaskIncrementTick+0x178>)
 80056b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056b4:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <xTaskIncrementTick+0x17c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056c0:	697b      	ldr	r3, [r7, #20]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000f28 	.word	0x20000f28
 80056d0:	20000f04 	.word	0x20000f04
 80056d4:	20000eb8 	.word	0x20000eb8
 80056d8:	20000ebc 	.word	0x20000ebc
 80056dc:	20000f18 	.word	0x20000f18
 80056e0:	20000f20 	.word	0x20000f20
 80056e4:	20000f08 	.word	0x20000f08
 80056e8:	20000a30 	.word	0x20000a30
 80056ec:	20000a2c 	.word	0x20000a2c
 80056f0:	20000f10 	.word	0x20000f10
 80056f4:	20000f14 	.word	0x20000f14

080056f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056fe:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <vTaskSwitchContext+0xa8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005706:	4b27      	ldr	r3, [pc, #156]	@ (80057a4 <vTaskSwitchContext+0xac>)
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800570c:	e042      	b.n	8005794 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800570e:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <vTaskSwitchContext+0xac>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005714:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <vTaskSwitchContext+0xb0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e011      	b.n	8005740 <vTaskSwitchContext+0x48>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <vTaskSwitchContext+0x42>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	607b      	str	r3, [r7, #4]
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	e7fd      	b.n	8005736 <vTaskSwitchContext+0x3e>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b01      	subs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	491a      	ldr	r1, [pc, #104]	@ (80057ac <vTaskSwitchContext+0xb4>)
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0e3      	beq.n	800571c <vTaskSwitchContext+0x24>
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <vTaskSwitchContext+0xb4>)
 8005760:	4413      	add	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3308      	adds	r3, #8
 8005776:	429a      	cmp	r2, r3
 8005778:	d104      	bne.n	8005784 <vTaskSwitchContext+0x8c>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	@ (80057b0 <vTaskSwitchContext+0xb8>)
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4a06      	ldr	r2, [pc, #24]	@ (80057a8 <vTaskSwitchContext+0xb0>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000f28 	.word	0x20000f28
 80057a4:	20000f14 	.word	0x20000f14
 80057a8:	20000f08 	.word	0x20000f08
 80057ac:	20000a30 	.word	0x20000a30
 80057b0:	20000a2c 	.word	0x20000a2c

080057b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60fb      	str	r3, [r7, #12]
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <vTaskPlaceOnEventList+0x48>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fe fe7b 	bl	80044e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057ea:	2101      	movs	r1, #1
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	f000 fa85 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000a2c 	.word	0x20000a2c

08005800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	617b      	str	r3, [r7, #20]
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	e7fd      	b.n	8005826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800582a:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <vTaskPlaceOnEventListRestricted+0x54>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3318      	adds	r3, #24
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7fe fe31 	bl	800449a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005842:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68b8      	ldr	r0, [r7, #8]
 8005848:	f000 fa58 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
	}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000a2c 	.word	0x20000a2c

08005858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	60fb      	str	r3, [r7, #12]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3318      	adds	r3, #24
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fe60 	bl	8004550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <xTaskRemoveFromEventList+0xb0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11d      	bne.n	80058d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	3304      	adds	r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe fe57 	bl	8004550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a6:	4b19      	ldr	r3, [pc, #100]	@ (800590c <xTaskRemoveFromEventList+0xb4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d903      	bls.n	80058b6 <xTaskRemoveFromEventList+0x5e>
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	4a16      	ldr	r2, [pc, #88]	@ (800590c <xTaskRemoveFromEventList+0xb4>)
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <xTaskRemoveFromEventList+0xb8>)
 80058c4:	441a      	add	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe fde4 	bl	800449a <vListInsertEnd>
 80058d2:	e005      	b.n	80058e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3318      	adds	r3, #24
 80058d8:	4619      	mov	r1, r3
 80058da:	480e      	ldr	r0, [pc, #56]	@ (8005914 <xTaskRemoveFromEventList+0xbc>)
 80058dc:	f7fe fddd 	bl	800449a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <xTaskRemoveFromEventList+0xc0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d905      	bls.n	80058fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <xTaskRemoveFromEventList+0xc4>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e001      	b.n	80058fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000f28 	.word	0x20000f28
 800590c:	20000f08 	.word	0x20000f08
 8005910:	20000a30 	.word	0x20000a30
 8005914:	20000ec0 	.word	0x20000ec0
 8005918:	20000a2c 	.word	0x20000a2c
 800591c:	20000f14 	.word	0x20000f14

08005920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005928:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <vTaskInternalSetTimeOutState+0x24>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005930:	4b05      	ldr	r3, [pc, #20]	@ (8005948 <vTaskInternalSetTimeOutState+0x28>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	605a      	str	r2, [r3, #4]
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000f18 	.word	0x20000f18
 8005948:	20000f04 	.word	0x20000f04

0800594c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	613b      	str	r3, [r7, #16]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60fb      	str	r3, [r7, #12]
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005992:	f000 fe1b 	bl	80065cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005996:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <xTaskCheckForTimeOut+0xc0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ae:	d102      	bne.n	80059b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e023      	b.n	80059fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <xTaskCheckForTimeOut+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d007      	beq.n	80059d2 <xTaskCheckForTimeOut+0x86>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e015      	b.n	80059fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d20b      	bcs.n	80059f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad2      	subs	r2, r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ff99 	bl	8005920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e004      	b.n	80059fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059fe:	f000 fe15 	bl	800662c <vPortExitCritical>

	return xReturn;
 8005a02:	69fb      	ldr	r3, [r7, #28]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000f04 	.word	0x20000f04
 8005a10:	20000f18 	.word	0x20000f18

08005a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a18:	4b03      	ldr	r3, [pc, #12]	@ (8005a28 <vTaskMissedYield+0x14>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000f14 	.word	0x20000f14

08005a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a34:	f000 f852 	bl	8005adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a38:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <prvIdleTask+0x28>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d9f9      	bls.n	8005a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <prvIdleTask+0x2c>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a50:	e7f0      	b.n	8005a34 <prvIdleTask+0x8>
 8005a52:	bf00      	nop
 8005a54:	20000a30 	.word	0x20000a30
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	e00c      	b.n	8005a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a12      	ldr	r2, [pc, #72]	@ (8005abc <prvInitialiseTaskLists+0x60>)
 8005a74:	4413      	add	r3, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fce4 	bl	8004444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b37      	cmp	r3, #55	@ 0x37
 8005a86:	d9ef      	bls.n	8005a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a88:	480d      	ldr	r0, [pc, #52]	@ (8005ac0 <prvInitialiseTaskLists+0x64>)
 8005a8a:	f7fe fcdb 	bl	8004444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a8e:	480d      	ldr	r0, [pc, #52]	@ (8005ac4 <prvInitialiseTaskLists+0x68>)
 8005a90:	f7fe fcd8 	bl	8004444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a94:	480c      	ldr	r0, [pc, #48]	@ (8005ac8 <prvInitialiseTaskLists+0x6c>)
 8005a96:	f7fe fcd5 	bl	8004444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a9a:	480c      	ldr	r0, [pc, #48]	@ (8005acc <prvInitialiseTaskLists+0x70>)
 8005a9c:	f7fe fcd2 	bl	8004444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005aa0:	480b      	ldr	r0, [pc, #44]	@ (8005ad0 <prvInitialiseTaskLists+0x74>)
 8005aa2:	f7fe fccf 	bl	8004444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <prvInitialiseTaskLists+0x78>)
 8005aa8:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <prvInitialiseTaskLists+0x64>)
 8005aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <prvInitialiseTaskLists+0x7c>)
 8005aae:	4a05      	ldr	r2, [pc, #20]	@ (8005ac4 <prvInitialiseTaskLists+0x68>)
 8005ab0:	601a      	str	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000a30 	.word	0x20000a30
 8005ac0:	20000e90 	.word	0x20000e90
 8005ac4:	20000ea4 	.word	0x20000ea4
 8005ac8:	20000ec0 	.word	0x20000ec0
 8005acc:	20000ed4 	.word	0x20000ed4
 8005ad0:	20000eec 	.word	0x20000eec
 8005ad4:	20000eb8 	.word	0x20000eb8
 8005ad8:	20000ebc 	.word	0x20000ebc

08005adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ae2:	e019      	b.n	8005b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ae4:	f000 fd72 	bl	80065cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ae8:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <prvCheckTasksWaitingTermination+0x50>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe fd2b 	bl	8004550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <prvCheckTasksWaitingTermination+0x54>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	4a0b      	ldr	r2, [pc, #44]	@ (8005b30 <prvCheckTasksWaitingTermination+0x54>)
 8005b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <prvCheckTasksWaitingTermination+0x58>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <prvCheckTasksWaitingTermination+0x58>)
 8005b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b0e:	f000 fd8d 	bl	800662c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f810 	bl	8005b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <prvCheckTasksWaitingTermination+0x58>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e1      	bne.n	8005ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000ed4 	.word	0x20000ed4
 8005b30:	20000f00 	.word	0x20000f00
 8005b34:	20000ee8 	.word	0x20000ee8

08005b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 ff06 	bl	8006960 <vPortFree>
				vPortFree( pxTCB );
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 ff03 	bl	8006960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b5a:	e019      	b.n	8005b90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d103      	bne.n	8005b6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fefa 	bl	8006960 <vPortFree>
	}
 8005b6c:	e010      	b.n	8005b90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d00b      	beq.n	8005b90 <prvDeleteTCB+0x58>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	60fb      	str	r3, [r7, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <prvDeleteTCB+0x54>
	}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd8 <prvResetNextTaskUnblockTime+0x40>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <prvResetNextTaskUnblockTime+0x14>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <prvResetNextTaskUnblockTime+0x16>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bdc <prvResetNextTaskUnblockTime+0x44>)
 8005bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bba:	e008      	b.n	8005bce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <prvResetNextTaskUnblockTime+0x40>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4a04      	ldr	r2, [pc, #16]	@ (8005bdc <prvResetNextTaskUnblockTime+0x44>)
 8005bcc:	6013      	str	r3, [r2, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	20000eb8 	.word	0x20000eb8
 8005bdc:	20000f20 	.word	0x20000f20

08005be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <xTaskGetSchedulerState+0x34>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	e008      	b.n	8005c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <xTaskGetSchedulerState+0x38>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	e001      	b.n	8005c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c06:	687b      	ldr	r3, [r7, #4]
	}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000f0c 	.word	0x20000f0c
 8005c18:	20000f28 	.word	0x20000f28

08005c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d058      	beq.n	8005ce4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c32:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf0 <xTaskPriorityDisinherit+0xd4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d00b      	beq.n	8005c54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60bb      	str	r3, [r7, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c78:	1e5a      	subs	r2, r3, #1
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d02c      	beq.n	8005ce4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d128      	bne.n	8005ce4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fc5a 	bl	8004550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <xTaskPriorityDisinherit+0xd8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <xTaskPriorityDisinherit+0xa8>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf4 <xTaskPriorityDisinherit+0xd8>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a09      	ldr	r2, [pc, #36]	@ (8005cf8 <xTaskPriorityDisinherit+0xdc>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe fbdd 	bl	800449a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ce4:	697b      	ldr	r3, [r7, #20]
	}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000a2c 	.word	0x20000a2c
 8005cf4:	20000f08 	.word	0x20000f08
 8005cf8:	20000a30 	.word	0x20000a30

08005cfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d06:	4b21      	ldr	r3, [pc, #132]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0c:	4b20      	ldr	r3, [pc, #128]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fc1c 	bl	8004550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d1e:	d10a      	bne.n	8005d36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d26:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4819      	ldr	r0, [pc, #100]	@ (8005d94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d30:	f7fe fbb3 	bl	800449a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d34:	e026      	b.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d209      	bcs.n	8005d62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4e:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe fbc0 	bl	80044e0 <vListInsert>
}
 8005d60:	e010      	b.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d62:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fe fbb6 	bl	80044e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d74:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d202      	bcs.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d7e:	4a08      	ldr	r2, [pc, #32]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6013      	str	r3, [r2, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000f04 	.word	0x20000f04
 8005d90:	20000a2c 	.word	0x20000a2c
 8005d94:	20000eec 	.word	0x20000eec
 8005d98:	20000ebc 	.word	0x20000ebc
 8005d9c:	20000eb8 	.word	0x20000eb8
 8005da0:	20000f20 	.word	0x20000f20

08005da4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	@ 0x28
 8005da8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dae:	f000 fad9 	bl	8006364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005db2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <xTimerCreateTimerTask+0x84>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d021      	beq.n	8005dfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dc2:	1d3a      	adds	r2, r7, #4
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fe fb1f 	bl	8004410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	9202      	str	r2, [sp, #8]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2300      	movs	r3, #0
 8005de2:	460a      	mov	r2, r1
 8005de4:	4911      	ldr	r1, [pc, #68]	@ (8005e2c <xTimerCreateTimerTask+0x88>)
 8005de6:	4812      	ldr	r0, [pc, #72]	@ (8005e30 <xTimerCreateTimerTask+0x8c>)
 8005de8:	f7ff f8d2 	bl	8004f90 <xTaskCreateStatic>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4a11      	ldr	r2, [pc, #68]	@ (8005e34 <xTimerCreateTimerTask+0x90>)
 8005df0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005df2:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <xTimerCreateTimerTask+0x90>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	613b      	str	r3, [r7, #16]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e1c:	697b      	ldr	r3, [r7, #20]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000f5c 	.word	0x20000f5c
 8005e2c:	0800b280 	.word	0x0800b280
 8005e30:	08005f59 	.word	0x08005f59
 8005e34:	20000f60 	.word	0x20000f60

08005e38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	@ 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	623b      	str	r3, [r7, #32]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e68:	4b19      	ldr	r3, [pc, #100]	@ (8005ed0 <xTimerGenericCommand+0x98>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02a      	beq.n	8005ec6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	dc18      	bgt.n	8005eb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e82:	f7ff fead 	bl	8005be0 <xTaskGetSchedulerState>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d109      	bne.n	8005ea0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e8c:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <xTimerGenericCommand+0x98>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	f107 0110 	add.w	r1, r7, #16
 8005e94:	2300      	movs	r3, #0
 8005e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e98:	f7fe fc8e 	bl	80047b8 <xQueueGenericSend>
 8005e9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e9e:	e012      	b.n	8005ec6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <xTimerGenericCommand+0x98>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	f107 0110 	add.w	r1, r7, #16
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f7fe fc84 	bl	80047b8 <xQueueGenericSend>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005eb2:	e008      	b.n	8005ec6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eb4:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <xTimerGenericCommand+0x98>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	f107 0110 	add.w	r1, r7, #16
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	f7fe fd7c 	bl	80049bc <xQueueGenericSendFromISR>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3728      	adds	r7, #40	@ 0x28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000f5c 	.word	0x20000f5c

08005ed4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ede:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <prvProcessExpiredTimer+0x80>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fb2f 	bl	8004550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d123      	bne.n	8005f42 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	18d1      	adds	r1, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f000 f8cc 	bl	80060a4 <prvInsertTimerInActiveList>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7ff ff8b 	bl	8005e38 <xTimerGenericCommand>
 8005f22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	60fb      	str	r3, [r7, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	6978      	ldr	r0, [r7, #20]
 8005f48:	4798      	blx	r3
}
 8005f4a:	bf00      	nop
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000f54 	.word	0x20000f54

08005f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f859 	bl	800601c <prvGetNextExpireTime>
 8005f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f805 	bl	8005f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f76:	f000 f8d7 	bl	8006128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f7a:	bf00      	nop
 8005f7c:	e7f0      	b.n	8005f60 <prvTimerTask+0x8>
	...

08005f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f8a:	f7ff fa3b 	bl	8005404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f866 	bl	8006064 <prvSampleTimeNow>
 8005f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d130      	bne.n	8006002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d806      	bhi.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fae:	f7ff fa37 	bl	8005420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff8d 	bl	8005ed4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fba:	e024      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fc2:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <prvProcessTimerOrBlockTask+0x90>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <prvProcessTimerOrBlockTask+0x94>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f7fe ffa1 	bl	8004f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fe6:	f7ff fa1b 	bl	8005420 <xTaskResumeAll>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <prvProcessTimerOrBlockTask+0x98>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
}
 8006000:	e001      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006002:	f7ff fa0d 	bl	8005420 <xTaskResumeAll>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000f58 	.word	0x20000f58
 8006014:	20000f5c 	.word	0x20000f5c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006024:	4b0e      	ldr	r3, [pc, #56]	@ (8006060 <prvGetNextExpireTime+0x44>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006042:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <prvGetNextExpireTime+0x44>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e001      	b.n	8006052 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000f54 	.word	0x20000f54

08006064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800606c:	f7ff fa76 	bl	800555c <xTaskGetTickCount>
 8006070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006072:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <prvSampleTimeNow+0x3c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d205      	bcs.n	8006088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800607c:	f000 f910 	bl	80062a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800608e:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <prvSampleTimeNow+0x3c>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000f64 	.word	0x20000f64

080060a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d812      	bhi.n	80060f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e01b      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060de:	4b10      	ldr	r3, [pc, #64]	@ (8006120 <prvInsertTimerInActiveList+0x7c>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fe f9f9 	bl	80044e0 <vListInsert>
 80060ee:	e012      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d206      	bcs.n	8006106 <prvInsertTimerInActiveList+0x62>
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e007      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <prvInsertTimerInActiveList+0x80>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe f9e5 	bl	80044e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000f58 	.word	0x20000f58
 8006124:	20000f54 	.word	0x20000f54

08006128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	@ 0x38
 800612c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800612e:	e0a5      	b.n	800627c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	da19      	bge.n	800616a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	3304      	adds	r3, #4
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800615a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006160:	6850      	ldr	r0, [r2, #4]
 8006162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006164:	6892      	ldr	r2, [r2, #8]
 8006166:	4611      	mov	r1, r2
 8006168:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f2c0 8085 	blt.w	800627c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe f9e4 	bl	8004550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006188:	463b      	mov	r3, r7
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff ff6a 	bl	8006064 <prvSampleTimeNow>
 8006190:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b09      	cmp	r3, #9
 8006196:	d86c      	bhi.n	8006272 <prvProcessReceivedCommands+0x14a>
 8006198:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <prvProcessReceivedCommands+0x78>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061c9 	.word	0x080061c9
 80061ac:	08006273 	.word	0x08006273
 80061b0:	08006227 	.word	0x08006227
 80061b4:	08006261 	.word	0x08006261
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061c9 	.word	0x080061c9
 80061c0:	08006273 	.word	0x08006273
 80061c4:	08006227 	.word	0x08006227
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	18d1      	adds	r1, r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d6:	f7ff ff65 	bl	80060a4 <prvInsertTimerInActiveList>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d04a      	beq.n	8006276 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d142      	bne.n	8006276 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	441a      	add	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006202:	f7ff fe19 	bl	8005e38 <xTimerGenericCommand>
 8006206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d133      	bne.n	8006276 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	61bb      	str	r3, [r7, #24]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	617b      	str	r3, [r7, #20]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	18d1      	adds	r1, r2, r3
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800625a:	f7ff ff23 	bl	80060a4 <prvInsertTimerInActiveList>
					break;
 800625e:	e00d      	b.n	800627c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d107      	bne.n	800627a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800626a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800626c:	f000 fb78 	bl	8006960 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006270:	e003      	b.n	800627a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <prvProcessReceivedCommands+0x154>
					break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <prvProcessReceivedCommands+0x154>
					break;
 800627a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800627c:	4b07      	ldr	r3, [pc, #28]	@ (800629c <prvProcessReceivedCommands+0x174>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	1d39      	adds	r1, r7, #4
 8006282:	2200      	movs	r2, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fc35 	bl	8004af4 <xQueueReceive>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af4f 	bne.w	8006130 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	3730      	adds	r7, #48	@ 0x30
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000f5c 	.word	0x20000f5c

080062a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062a6:	e046      	b.n	8006336 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062a8:	4b2c      	ldr	r3, [pc, #176]	@ (800635c <prvSwitchTimerLists+0xbc>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b2:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <prvSwitchTimerLists+0xbc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe f945 	bl	8004550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d12f      	bne.n	8006336 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d90e      	bls.n	8006306 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062f4:	4b19      	ldr	r3, [pc, #100]	@ (800635c <prvSwitchTimerLists+0xbc>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fe f8ee 	bl	80044e0 <vListInsert>
 8006304:	e017      	b.n	8006336 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fd91 	bl	8005e38 <xTimerGenericCommand>
 8006316:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <prvSwitchTimerLists+0x96>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006336:	4b09      	ldr	r3, [pc, #36]	@ (800635c <prvSwitchTimerLists+0xbc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1b3      	bne.n	80062a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <prvSwitchTimerLists+0xbc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006346:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <prvSwitchTimerLists+0xc0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a04      	ldr	r2, [pc, #16]	@ (800635c <prvSwitchTimerLists+0xbc>)
 800634c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800634e:	4a04      	ldr	r2, [pc, #16]	@ (8006360 <prvSwitchTimerLists+0xc0>)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000f54 	.word	0x20000f54
 8006360:	20000f58 	.word	0x20000f58

08006364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800636a:	f000 f92f 	bl	80065cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800636e:	4b15      	ldr	r3, [pc, #84]	@ (80063c4 <prvCheckForValidListAndQueue+0x60>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d120      	bne.n	80063b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006376:	4814      	ldr	r0, [pc, #80]	@ (80063c8 <prvCheckForValidListAndQueue+0x64>)
 8006378:	f7fe f864 	bl	8004444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800637c:	4813      	ldr	r0, [pc, #76]	@ (80063cc <prvCheckForValidListAndQueue+0x68>)
 800637e:	f7fe f861 	bl	8004444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006382:	4b13      	ldr	r3, [pc, #76]	@ (80063d0 <prvCheckForValidListAndQueue+0x6c>)
 8006384:	4a10      	ldr	r2, [pc, #64]	@ (80063c8 <prvCheckForValidListAndQueue+0x64>)
 8006386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006388:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <prvCheckForValidListAndQueue+0x70>)
 800638a:	4a10      	ldr	r2, [pc, #64]	@ (80063cc <prvCheckForValidListAndQueue+0x68>)
 800638c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800638e:	2300      	movs	r3, #0
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <prvCheckForValidListAndQueue+0x74>)
 8006394:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <prvCheckForValidListAndQueue+0x78>)
 8006396:	2110      	movs	r1, #16
 8006398:	200a      	movs	r0, #10
 800639a:	f7fe f96d 	bl	8004678 <xQueueGenericCreateStatic>
 800639e:	4603      	mov	r3, r0
 80063a0:	4a08      	ldr	r2, [pc, #32]	@ (80063c4 <prvCheckForValidListAndQueue+0x60>)
 80063a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063a4:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <prvCheckForValidListAndQueue+0x60>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063ac:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <prvCheckForValidListAndQueue+0x60>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	490b      	ldr	r1, [pc, #44]	@ (80063e0 <prvCheckForValidListAndQueue+0x7c>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fd90 	bl	8004ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063b8:	f000 f938 	bl	800662c <vPortExitCritical>
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000f5c 	.word	0x20000f5c
 80063c8:	20000f2c 	.word	0x20000f2c
 80063cc:	20000f40 	.word	0x20000f40
 80063d0:	20000f54 	.word	0x20000f54
 80063d4:	20000f58 	.word	0x20000f58
 80063d8:	20001008 	.word	0x20001008
 80063dc:	20000f68 	.word	0x20000f68
 80063e0:	0800b288 	.word	0x0800b288

080063e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b04      	subs	r3, #4
 80063f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b04      	subs	r3, #4
 8006402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0201 	bic.w	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b04      	subs	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006414:	4a08      	ldr	r2, [pc, #32]	@ (8006438 <pxPortInitialiseStack+0x54>)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b14      	subs	r3, #20
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3b20      	subs	r3, #32
 800642a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	0800643d 	.word	0x0800643d

0800643c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <prvTaskExitError+0x54>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800644e:	d00b      	beq.n	8006468 <prvTaskExitError+0x2c>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <prvTaskExitError+0x28>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60bb      	str	r3, [r7, #8]
}
 800647a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800647c:	bf00      	nop
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0fc      	beq.n	800647e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	2000000c 	.word	0x2000000c
	...

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80064be:	4770      	bx	lr

080064c0 <pxCurrentTCBConst2>:
 80064c0:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064c8:	4806      	ldr	r0, [pc, #24]	@ (80064e4 <prvPortStartFirstTask+0x1c>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	b662      	cpsie	i
 80064d4:	b661      	cpsie	f
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	df00      	svc	0
 80064e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064e2:	bf00      	nop
 80064e4:	e000ed08 	.word	0xe000ed08

080064e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ee:	4b32      	ldr	r3, [pc, #200]	@ (80065b8 <xPortStartScheduler+0xd0>)
 80064f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	@ 0xff
 80064fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006510:	b2da      	uxtb	r2, r3
 8006512:	4b2a      	ldr	r3, [pc, #168]	@ (80065bc <xPortStartScheduler+0xd4>)
 8006514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006516:	4b2a      	ldr	r3, [pc, #168]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006518:	2207      	movs	r2, #7
 800651a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800651c:	e009      	b.n	8006532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800651e:	4b28      	ldr	r3, [pc, #160]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	4a26      	ldr	r2, [pc, #152]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653a:	2b80      	cmp	r3, #128	@ 0x80
 800653c:	d0ef      	beq.n	800651e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800653e:	4b20      	ldr	r3, [pc, #128]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1c3 0307 	rsb	r3, r3, #7
 8006546:	2b04      	cmp	r3, #4
 8006548:	d00b      	beq.n	8006562 <xPortStartScheduler+0x7a>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006562:	4b17      	ldr	r3, [pc, #92]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <xPortStartScheduler+0xd8>)
 800656a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800656c:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <xPortStartScheduler+0xd8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006574:	4a12      	ldr	r2, [pc, #72]	@ (80065c0 <xPortStartScheduler+0xd8>)
 8006576:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006580:	4b10      	ldr	r3, [pc, #64]	@ (80065c4 <xPortStartScheduler+0xdc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a0f      	ldr	r2, [pc, #60]	@ (80065c4 <xPortStartScheduler+0xdc>)
 8006586:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800658a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800658c:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <xPortStartScheduler+0xdc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0c      	ldr	r2, [pc, #48]	@ (80065c4 <xPortStartScheduler+0xdc>)
 8006592:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006596:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006598:	f000 f8b8 	bl	800670c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800659c:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <xPortStartScheduler+0xe0>)
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065a2:	f7ff ff91 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065a6:	f7ff f8a7 	bl	80056f8 <vTaskSwitchContext>
	prvTaskExitError();
 80065aa:	f7ff ff47 	bl	800643c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000e400 	.word	0xe000e400
 80065bc:	20001058 	.word	0x20001058
 80065c0:	2000105c 	.word	0x2000105c
 80065c4:	e000ed20 	.word	0xe000ed20
 80065c8:	2000000c 	.word	0x2000000c

080065cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	607b      	str	r3, [r7, #4]
}
 80065e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <vPortEnterCritical+0x58>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006624 <vPortEnterCritical+0x58>)
 80065ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <vPortEnterCritical+0x58>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d110      	bne.n	800661a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <vPortEnterCritical+0x5c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <vPortEnterCritical+0x4e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	603b      	str	r3, [r7, #0]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <vPortEnterCritical+0x4a>
	}
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	2000000c 	.word	0x2000000c
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006632:	4b12      	ldr	r3, [pc, #72]	@ (800667c <vPortExitCritical+0x50>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <vPortExitCritical+0x26>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	607b      	str	r3, [r7, #4]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a08      	ldr	r2, [pc, #32]	@ (800667c <vPortExitCritical+0x50>)
 800665a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800665c:	4b07      	ldr	r3, [pc, #28]	@ (800667c <vPortExitCritical+0x50>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <vPortExitCritical+0x44>
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	2000000c 	.word	0x2000000c

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006690:	6010      	str	r0, [r2, #0]
 8006692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006696:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800669a:	f380 8811 	msr	BASEPRI, r0
 800669e:	f7ff f82b 	bl	80056f8 <vTaskSwitchContext>
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066b6:	f380 8809 	msr	PSP, r0
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	4770      	bx	lr

080066c0 <pxCurrentTCBConst>:
 80066c0:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e2:	f7fe ff49 	bl	8005578 <xTaskIncrementTick>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ec:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <SysTick_Handler+0x40>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f383 8811 	msr	BASEPRI, r3
}
 80066fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006710:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <vPortSetupTimerInterrupt+0x30>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006716:	4b0a      	ldr	r3, [pc, #40]	@ (8006740 <vPortSetupTimerInterrupt+0x34>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800671c:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <vPortSetupTimerInterrupt+0x38>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a09      	ldr	r2, [pc, #36]	@ (8006748 <vPortSetupTimerInterrupt+0x3c>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	099b      	lsrs	r3, r3, #6
 8006728:	4a08      	ldr	r2, [pc, #32]	@ (800674c <vPortSetupTimerInterrupt+0x40>)
 800672a:	3b01      	subs	r3, #1
 800672c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800672e:	4b03      	ldr	r3, [pc, #12]	@ (800673c <vPortSetupTimerInterrupt+0x30>)
 8006730:	2207      	movs	r2, #7
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	e000e010 	.word	0xe000e010
 8006740:	e000e018 	.word	0xe000e018
 8006744:	20000000 	.word	0x20000000
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	e000e014 	.word	0xe000e014

08006750 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006756:	f3ef 8305 	mrs	r3, IPSR
 800675a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b0f      	cmp	r3, #15
 8006760:	d915      	bls.n	800678e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006762:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <vPortValidateInterruptPriority+0x70>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800676c:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <vPortValidateInterruptPriority+0x74>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	7afa      	ldrb	r2, [r7, #11]
 8006772:	429a      	cmp	r2, r3
 8006774:	d20b      	bcs.n	800678e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	607b      	str	r3, [r7, #4]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800678e:	4b0e      	ldr	r3, [pc, #56]	@ (80067c8 <vPortValidateInterruptPriority+0x78>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006796:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <vPortValidateInterruptPriority+0x7c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d90b      	bls.n	80067b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	603b      	str	r3, [r7, #0]
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	e7fd      	b.n	80067b2 <vPortValidateInterruptPriority+0x62>
	}
 80067b6:	bf00      	nop
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	e000e3f0 	.word	0xe000e3f0
 80067c4:	20001058 	.word	0x20001058
 80067c8:	e000ed0c 	.word	0xe000ed0c
 80067cc:	2000105c 	.word	0x2000105c

080067d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	@ 0x28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067dc:	f7fe fe12 	bl	8005404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067e0:	4b5a      	ldr	r3, [pc, #360]	@ (800694c <pvPortMalloc+0x17c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067e8:	f000 f916 	bl	8006a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067ec:	4b58      	ldr	r3, [pc, #352]	@ (8006950 <pvPortMalloc+0x180>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8090 	bne.w	800691a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01e      	beq.n	800683e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006800:	2208      	movs	r2, #8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	2b00      	cmp	r3, #0
 8006810:	d015      	beq.n	800683e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f023 0307 	bic.w	r3, r3, #7
 8006818:	3308      	adds	r3, #8
 800681a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <pvPortMalloc+0x6e>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	617b      	str	r3, [r7, #20]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d06a      	beq.n	800691a <pvPortMalloc+0x14a>
 8006844:	4b43      	ldr	r3, [pc, #268]	@ (8006954 <pvPortMalloc+0x184>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d865      	bhi.n	800691a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800684e:	4b42      	ldr	r3, [pc, #264]	@ (8006958 <pvPortMalloc+0x188>)
 8006850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006852:	4b41      	ldr	r3, [pc, #260]	@ (8006958 <pvPortMalloc+0x188>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006858:	e004      	b.n	8006864 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d903      	bls.n	8006876 <pvPortMalloc+0xa6>
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f1      	bne.n	800685a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006876:	4b35      	ldr	r3, [pc, #212]	@ (800694c <pvPortMalloc+0x17c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800687c:	429a      	cmp	r2, r3
 800687e:	d04c      	beq.n	800691a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	4413      	add	r3, r2
 8006888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	2308      	movs	r3, #8
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d920      	bls.n	80068e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <pvPortMalloc+0xfc>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	e7fd      	b.n	80068c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068de:	69b8      	ldr	r0, [r7, #24]
 80068e0:	f000 f8fc 	bl	8006adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006954 <pvPortMalloc+0x184>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	4a19      	ldr	r2, [pc, #100]	@ (8006954 <pvPortMalloc+0x184>)
 80068f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068f2:	4b18      	ldr	r3, [pc, #96]	@ (8006954 <pvPortMalloc+0x184>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b19      	ldr	r3, [pc, #100]	@ (800695c <pvPortMalloc+0x18c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d203      	bcs.n	8006906 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068fe:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <pvPortMalloc+0x184>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a16      	ldr	r2, [pc, #88]	@ (800695c <pvPortMalloc+0x18c>)
 8006904:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <pvPortMalloc+0x180>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	431a      	orrs	r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800691a:	f7fe fd81 	bl	8005420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <pvPortMalloc+0x170>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	60fb      	str	r3, [r7, #12]
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	e7fd      	b.n	800693c <pvPortMalloc+0x16c>
	return pvReturn;
 8006940:	69fb      	ldr	r3, [r7, #28]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	@ 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20001c68 	.word	0x20001c68
 8006950:	20001c74 	.word	0x20001c74
 8006954:	20001c6c 	.word	0x20001c6c
 8006958:	20001c60 	.word	0x20001c60
 800695c:	20001c70 	.word	0x20001c70

08006960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04a      	beq.n	8006a08 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006972:	2308      	movs	r3, #8
 8006974:	425b      	negs	r3, r3
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <vPortFree+0xb0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4013      	ands	r3, r2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <vPortFree+0x46>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60fb      	str	r3, [r7, #12]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <vPortFree+0x66>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60bb      	str	r3, [r7, #8]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <vPortFree+0xb0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d019      	beq.n	8006a08 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d115      	bne.n	8006a08 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a10 <vPortFree+0xb0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	401a      	ands	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069ec:	f7fe fd0a 	bl	8005404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <vPortFree+0xb4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4413      	add	r3, r2
 80069fa:	4a06      	ldr	r2, [pc, #24]	@ (8006a14 <vPortFree+0xb4>)
 80069fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fe:	6938      	ldr	r0, [r7, #16]
 8006a00:	f000 f86c 	bl	8006adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a04:	f7fe fd0c 	bl	8005420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20001c74 	.word	0x20001c74
 8006a14:	20001c6c 	.word	0x20001c6c

08006a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a24:	4b27      	ldr	r3, [pc, #156]	@ (8006ac4 <prvHeapInit+0xac>)
 8006a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3307      	adds	r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <prvHeapInit+0xac>)
 8006a48:	4413      	add	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a50:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac8 <prvHeapInit+0xb0>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a56:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac8 <prvHeapInit+0xb0>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a64:	2208      	movs	r2, #8
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a15      	ldr	r2, [pc, #84]	@ (8006acc <prvHeapInit+0xb4>)
 8006a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a7a:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <prvHeapInit+0xb4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a82:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <prvHeapInit+0xb4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a98:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <prvHeapInit+0xb4>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad0 <prvHeapInit+0xb8>)
 8006aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <prvHeapInit+0xbc>)
 8006aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab0:	4b09      	ldr	r3, [pc, #36]	@ (8006ad8 <prvHeapInit+0xc0>)
 8006ab2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ab6:	601a      	str	r2, [r3, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20001060 	.word	0x20001060
 8006ac8:	20001c60 	.word	0x20001c60
 8006acc:	20001c68 	.word	0x20001c68
 8006ad0:	20001c70 	.word	0x20001c70
 8006ad4:	20001c6c 	.word	0x20001c6c
 8006ad8:	20001c74 	.word	0x20001c74

08006adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae4:	4b27      	ldr	r3, [pc, #156]	@ (8006b84 <prvInsertBlockIntoFreeList+0xa8>)
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e002      	b.n	8006af0 <prvInsertBlockIntoFreeList+0x14>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d8f7      	bhi.n	8006aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4413      	add	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d108      	bne.n	8006b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d118      	bne.n	8006b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b14      	ldr	r3, [pc, #80]	@ (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d00d      	beq.n	8006b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e008      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e003      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	20001c60 	.word	0x20001c60
 8006b88:	20001c68 	.word	0x20001c68

08006b8c <__cvt>:
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b92:	461d      	mov	r5, r3
 8006b94:	bfbb      	ittet	lt
 8006b96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006b9a:	461d      	movlt	r5, r3
 8006b9c:	2300      	movge	r3, #0
 8006b9e:	232d      	movlt	r3, #45	@ 0x2d
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	bfb8      	it	lt
 8006ba6:	4614      	movlt	r4, r2
 8006ba8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006baa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006bac:	7013      	strb	r3, [r2, #0]
 8006bae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006bb4:	f023 0820 	bic.w	r8, r3, #32
 8006bb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bbc:	d005      	beq.n	8006bca <__cvt+0x3e>
 8006bbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006bc2:	d100      	bne.n	8006bc6 <__cvt+0x3a>
 8006bc4:	3601      	adds	r6, #1
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e000      	b.n	8006bcc <__cvt+0x40>
 8006bca:	2303      	movs	r3, #3
 8006bcc:	aa07      	add	r2, sp, #28
 8006bce:	9204      	str	r2, [sp, #16]
 8006bd0:	aa06      	add	r2, sp, #24
 8006bd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006bd6:	e9cd 3600 	strd	r3, r6, [sp]
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	f001 f88f 	bl	8007d00 <_dtoa_r>
 8006be2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006be6:	4607      	mov	r7, r0
 8006be8:	d119      	bne.n	8006c1e <__cvt+0x92>
 8006bea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bec:	07db      	lsls	r3, r3, #31
 8006bee:	d50e      	bpl.n	8006c0e <__cvt+0x82>
 8006bf0:	eb00 0906 	add.w	r9, r0, r6
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c00:	b108      	cbz	r0, 8006c06 <__cvt+0x7a>
 8006c02:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c06:	2230      	movs	r2, #48	@ 0x30
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	454b      	cmp	r3, r9
 8006c0c:	d31e      	bcc.n	8006c4c <__cvt+0xc0>
 8006c0e:	4638      	mov	r0, r7
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c14:	1bdb      	subs	r3, r3, r7
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	b008      	add	sp, #32
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c22:	eb00 0906 	add.w	r9, r0, r6
 8006c26:	d1e5      	bne.n	8006bf4 <__cvt+0x68>
 8006c28:	7803      	ldrb	r3, [r0, #0]
 8006c2a:	2b30      	cmp	r3, #48	@ 0x30
 8006c2c:	d10a      	bne.n	8006c44 <__cvt+0xb8>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 feb7 	bl	80009a8 <__aeabi_dcmpeq>
 8006c3a:	b918      	cbnz	r0, 8006c44 <__cvt+0xb8>
 8006c3c:	f1c6 0601 	rsb	r6, r6, #1
 8006c40:	f8ca 6000 	str.w	r6, [sl]
 8006c44:	f8da 3000 	ldr.w	r3, [sl]
 8006c48:	4499      	add	r9, r3
 8006c4a:	e7d3      	b.n	8006bf4 <__cvt+0x68>
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	9107      	str	r1, [sp, #28]
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e7d9      	b.n	8006c08 <__cvt+0x7c>

08006c54 <__exponent>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	2900      	cmp	r1, #0
 8006c58:	bfb6      	itet	lt
 8006c5a:	232d      	movlt	r3, #45	@ 0x2d
 8006c5c:	232b      	movge	r3, #43	@ 0x2b
 8006c5e:	4249      	neglt	r1, r1
 8006c60:	2909      	cmp	r1, #9
 8006c62:	7002      	strb	r2, [r0, #0]
 8006c64:	7043      	strb	r3, [r0, #1]
 8006c66:	dd29      	ble.n	8006cbc <__exponent+0x68>
 8006c68:	f10d 0307 	add.w	r3, sp, #7
 8006c6c:	461d      	mov	r5, r3
 8006c6e:	270a      	movs	r7, #10
 8006c70:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c74:	461a      	mov	r2, r3
 8006c76:	fb07 1416 	mls	r4, r7, r6, r1
 8006c7a:	3430      	adds	r4, #48	@ 0x30
 8006c7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c80:	460c      	mov	r4, r1
 8006c82:	2c63      	cmp	r4, #99	@ 0x63
 8006c84:	4631      	mov	r1, r6
 8006c86:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006c8a:	dcf1      	bgt.n	8006c70 <__exponent+0x1c>
 8006c8c:	3130      	adds	r1, #48	@ 0x30
 8006c8e:	1e94      	subs	r4, r2, #2
 8006c90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c94:	4623      	mov	r3, r4
 8006c96:	1c41      	adds	r1, r0, #1
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	d30a      	bcc.n	8006cb2 <__exponent+0x5e>
 8006c9c:	f10d 0309 	add.w	r3, sp, #9
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	42ac      	cmp	r4, r5
 8006ca4:	bf88      	it	hi
 8006ca6:	2300      	movhi	r3, #0
 8006ca8:	3302      	adds	r3, #2
 8006caa:	4403      	add	r3, r0
 8006cac:	1a18      	subs	r0, r3, r0
 8006cae:	b003      	add	sp, #12
 8006cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cba:	e7ed      	b.n	8006c98 <__exponent+0x44>
 8006cbc:	2330      	movs	r3, #48	@ 0x30
 8006cbe:	3130      	adds	r1, #48	@ 0x30
 8006cc0:	7083      	strb	r3, [r0, #2]
 8006cc2:	70c1      	strb	r1, [r0, #3]
 8006cc4:	1d03      	adds	r3, r0, #4
 8006cc6:	e7f1      	b.n	8006cac <__exponent+0x58>

08006cc8 <_printf_float>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b091      	sub	sp, #68	@ 0x44
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f000 fef1 	bl	8007ac0 <_localeconv_r>
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	9308      	str	r3, [sp, #32]
 8006ce4:	f7f9 fa34 	bl	8000150 <strlen>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cec:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006cf2:	3307      	adds	r3, #7
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	f103 0208 	add.w	r2, r3, #8
 8006cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d00:	f8d4 b000 	ldr.w	fp, [r4]
 8006d04:	f8c8 2000 	str.w	r2, [r8]
 8006d08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d22:	4b9c      	ldr	r3, [pc, #624]	@ (8006f94 <_printf_float+0x2cc>)
 8006d24:	f7f9 fe72 	bl	8000a0c <__aeabi_dcmpun>
 8006d28:	bb70      	cbnz	r0, 8006d88 <_printf_float+0xc0>
 8006d2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d32:	4b98      	ldr	r3, [pc, #608]	@ (8006f94 <_printf_float+0x2cc>)
 8006d34:	f7f9 fe4c 	bl	80009d0 <__aeabi_dcmple>
 8006d38:	bb30      	cbnz	r0, 8006d88 <_printf_float+0xc0>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4640      	mov	r0, r8
 8006d40:	4649      	mov	r1, r9
 8006d42:	f7f9 fe3b 	bl	80009bc <__aeabi_dcmplt>
 8006d46:	b110      	cbz	r0, 8006d4e <_printf_float+0x86>
 8006d48:	232d      	movs	r3, #45	@ 0x2d
 8006d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4e:	4a92      	ldr	r2, [pc, #584]	@ (8006f98 <_printf_float+0x2d0>)
 8006d50:	4b92      	ldr	r3, [pc, #584]	@ (8006f9c <_printf_float+0x2d4>)
 8006d52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d56:	bf94      	ite	ls
 8006d58:	4690      	movls	r8, r2
 8006d5a:	4698      	movhi	r8, r3
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	f04f 0900 	mov.w	r9, #0
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	f02b 0304 	bic.w	r3, fp, #4
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	4633      	mov	r3, r6
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	9700      	str	r7, [sp, #0]
 8006d72:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006d74:	f000 f9d4 	bl	8007120 <_printf_common>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f040 8090 	bne.w	8006e9e <_printf_float+0x1d6>
 8006d7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d82:	b011      	add	sp, #68	@ 0x44
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	4642      	mov	r2, r8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	4649      	mov	r1, r9
 8006d90:	f7f9 fe3c 	bl	8000a0c <__aeabi_dcmpun>
 8006d94:	b148      	cbz	r0, 8006daa <_printf_float+0xe2>
 8006d96:	464b      	mov	r3, r9
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	232d      	movlt	r3, #45	@ 0x2d
 8006d9e:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <_printf_float+0x2d8>)
 8006da0:	bfb8      	it	lt
 8006da2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006da6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fa4 <_printf_float+0x2dc>)
 8006da8:	e7d3      	b.n	8006d52 <_printf_float+0x8a>
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	d13f      	bne.n	8006e34 <_printf_float+0x16c>
 8006db4:	2306      	movs	r3, #6
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	9206      	str	r2, [sp, #24]
 8006dc2:	aa0e      	add	r2, sp, #56	@ 0x38
 8006dc4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006dc8:	aa0d      	add	r2, sp, #52	@ 0x34
 8006dca:	9203      	str	r2, [sp, #12]
 8006dcc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006dd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4628      	mov	r0, r5
 8006ddc:	464b      	mov	r3, r9
 8006dde:	910a      	str	r1, [sp, #40]	@ 0x28
 8006de0:	f7ff fed4 	bl	8006b8c <__cvt>
 8006de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006de6:	4680      	mov	r8, r0
 8006de8:	2947      	cmp	r1, #71	@ 0x47
 8006dea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006dec:	d128      	bne.n	8006e40 <_printf_float+0x178>
 8006dee:	1cc8      	adds	r0, r1, #3
 8006df0:	db02      	blt.n	8006df8 <_printf_float+0x130>
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	4299      	cmp	r1, r3
 8006df6:	dd40      	ble.n	8006e7a <_printf_float+0x1b2>
 8006df8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006dfc:	fa5f fa8a 	uxtb.w	sl, sl
 8006e00:	4652      	mov	r2, sl
 8006e02:	3901      	subs	r1, #1
 8006e04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e08:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e0a:	f7ff ff23 	bl	8006c54 <__exponent>
 8006e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e10:	4681      	mov	r9, r0
 8006e12:	1813      	adds	r3, r2, r0
 8006e14:	2a01      	cmp	r2, #1
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	dc02      	bgt.n	8006e20 <_printf_float+0x158>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	07d2      	lsls	r2, r2, #31
 8006e1e:	d501      	bpl.n	8006e24 <_printf_float+0x15c>
 8006e20:	3301      	adds	r3, #1
 8006e22:	6123      	str	r3, [r4, #16]
 8006e24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d09e      	beq.n	8006d6a <_printf_float+0xa2>
 8006e2c:	232d      	movs	r3, #45	@ 0x2d
 8006e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e32:	e79a      	b.n	8006d6a <_printf_float+0xa2>
 8006e34:	2947      	cmp	r1, #71	@ 0x47
 8006e36:	d1bf      	bne.n	8006db8 <_printf_float+0xf0>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1bd      	bne.n	8006db8 <_printf_float+0xf0>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e7ba      	b.n	8006db6 <_printf_float+0xee>
 8006e40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e44:	d9dc      	bls.n	8006e00 <_printf_float+0x138>
 8006e46:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e4a:	d118      	bne.n	8006e7e <_printf_float+0x1b6>
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	6863      	ldr	r3, [r4, #4]
 8006e50:	dd0b      	ble.n	8006e6a <_printf_float+0x1a2>
 8006e52:	6121      	str	r1, [r4, #16]
 8006e54:	b913      	cbnz	r3, 8006e5c <_printf_float+0x194>
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	07d0      	lsls	r0, r2, #31
 8006e5a:	d502      	bpl.n	8006e62 <_printf_float+0x19a>
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	440b      	add	r3, r1
 8006e60:	6123      	str	r3, [r4, #16]
 8006e62:	f04f 0900 	mov.w	r9, #0
 8006e66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e68:	e7dc      	b.n	8006e24 <_printf_float+0x15c>
 8006e6a:	b913      	cbnz	r3, 8006e72 <_printf_float+0x1aa>
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	07d2      	lsls	r2, r2, #31
 8006e70:	d501      	bpl.n	8006e76 <_printf_float+0x1ae>
 8006e72:	3302      	adds	r3, #2
 8006e74:	e7f4      	b.n	8006e60 <_printf_float+0x198>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7f2      	b.n	8006e60 <_printf_float+0x198>
 8006e7a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e80:	4299      	cmp	r1, r3
 8006e82:	db05      	blt.n	8006e90 <_printf_float+0x1c8>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	6121      	str	r1, [r4, #16]
 8006e88:	07d8      	lsls	r0, r3, #31
 8006e8a:	d5ea      	bpl.n	8006e62 <_printf_float+0x19a>
 8006e8c:	1c4b      	adds	r3, r1, #1
 8006e8e:	e7e7      	b.n	8006e60 <_printf_float+0x198>
 8006e90:	2900      	cmp	r1, #0
 8006e92:	bfcc      	ite	gt
 8006e94:	2201      	movgt	r2, #1
 8006e96:	f1c1 0202 	rsble	r2, r1, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	e7e0      	b.n	8006e60 <_printf_float+0x198>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	055a      	lsls	r2, r3, #21
 8006ea2:	d407      	bmi.n	8006eb4 <_printf_float+0x1ec>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d12b      	bne.n	8006f0a <_printf_float+0x242>
 8006eb2:	e764      	b.n	8006d7e <_printf_float+0xb6>
 8006eb4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eb8:	f240 80dc 	bls.w	8007074 <_printf_float+0x3ac>
 8006ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f7f9 fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d033      	beq.n	8006f34 <_printf_float+0x26c>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	4a35      	ldr	r2, [pc, #212]	@ (8006fa8 <_printf_float+0x2e0>)
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f af51 	beq.w	8006d7e <_printf_float+0xb6>
 8006edc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006ee0:	4543      	cmp	r3, r8
 8006ee2:	db02      	blt.n	8006eea <_printf_float+0x222>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	07d8      	lsls	r0, r3, #31
 8006ee8:	d50f      	bpl.n	8006f0a <_printf_float+0x242>
 8006eea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	f43f af42 	beq.w	8006d7e <_printf_float+0xb6>
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f02:	f104 0a1a 	add.w	sl, r4, #26
 8006f06:	45c8      	cmp	r8, r9
 8006f08:	dc09      	bgt.n	8006f1e <_printf_float+0x256>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	079b      	lsls	r3, r3, #30
 8006f0e:	f100 8102 	bmi.w	8007116 <_printf_float+0x44e>
 8006f12:	68e0      	ldr	r0, [r4, #12]
 8006f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f16:	4298      	cmp	r0, r3
 8006f18:	bfb8      	it	lt
 8006f1a:	4618      	movlt	r0, r3
 8006f1c:	e731      	b.n	8006d82 <_printf_float+0xba>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4652      	mov	r2, sl
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f af28 	beq.w	8006d7e <_printf_float+0xb6>
 8006f2e:	f109 0901 	add.w	r9, r9, #1
 8006f32:	e7e8      	b.n	8006f06 <_printf_float+0x23e>
 8006f34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dc38      	bgt.n	8006fac <_printf_float+0x2e4>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4a19      	ldr	r2, [pc, #100]	@ (8006fa8 <_printf_float+0x2e0>)
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f af1a 	beq.w	8006d7e <_printf_float+0xb6>
 8006f4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006f4e:	ea59 0303 	orrs.w	r3, r9, r3
 8006f52:	d102      	bne.n	8006f5a <_printf_float+0x292>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07d9      	lsls	r1, r3, #31
 8006f58:	d5d7      	bpl.n	8006f0a <_printf_float+0x242>
 8006f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f af0a 	beq.w	8006d7e <_printf_float+0xb6>
 8006f6a:	f04f 0a00 	mov.w	sl, #0
 8006f6e:	f104 0b1a 	add.w	fp, r4, #26
 8006f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f74:	425b      	negs	r3, r3
 8006f76:	4553      	cmp	r3, sl
 8006f78:	dc01      	bgt.n	8006f7e <_printf_float+0x2b6>
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	e793      	b.n	8006ea6 <_printf_float+0x1de>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	465a      	mov	r2, fp
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f aef8 	beq.w	8006d7e <_printf_float+0xb6>
 8006f8e:	f10a 0a01 	add.w	sl, sl, #1
 8006f92:	e7ee      	b.n	8006f72 <_printf_float+0x2aa>
 8006f94:	7fefffff 	.word	0x7fefffff
 8006f98:	0800b302 	.word	0x0800b302
 8006f9c:	0800b306 	.word	0x0800b306
 8006fa0:	0800b30a 	.word	0x0800b30a
 8006fa4:	0800b30e 	.word	0x0800b30e
 8006fa8:	0800b312 	.word	0x0800b312
 8006fac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006fb2:	4553      	cmp	r3, sl
 8006fb4:	bfa8      	it	ge
 8006fb6:	4653      	movge	r3, sl
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	4699      	mov	r9, r3
 8006fbc:	dc36      	bgt.n	800702c <_printf_float+0x364>
 8006fbe:	f04f 0b00 	mov.w	fp, #0
 8006fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fc6:	f104 021a 	add.w	r2, r4, #26
 8006fca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fce:	eba3 0309 	sub.w	r3, r3, r9
 8006fd2:	455b      	cmp	r3, fp
 8006fd4:	dc31      	bgt.n	800703a <_printf_float+0x372>
 8006fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fd8:	459a      	cmp	sl, r3
 8006fda:	dc3a      	bgt.n	8007052 <_printf_float+0x38a>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d437      	bmi.n	8007052 <_printf_float+0x38a>
 8006fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fe4:	ebaa 0903 	sub.w	r9, sl, r3
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fea:	ebaa 0303 	sub.w	r3, sl, r3
 8006fee:	4599      	cmp	r9, r3
 8006ff0:	bfa8      	it	ge
 8006ff2:	4699      	movge	r9, r3
 8006ff4:	f1b9 0f00 	cmp.w	r9, #0
 8006ff8:	dc33      	bgt.n	8007062 <_printf_float+0x39a>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007002:	f104 0b1a 	add.w	fp, r4, #26
 8007006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007008:	ebaa 0303 	sub.w	r3, sl, r3
 800700c:	eba3 0309 	sub.w	r3, r3, r9
 8007010:	4543      	cmp	r3, r8
 8007012:	f77f af7a 	ble.w	8006f0a <_printf_float+0x242>
 8007016:	2301      	movs	r3, #1
 8007018:	465a      	mov	r2, fp
 800701a:	4631      	mov	r1, r6
 800701c:	4628      	mov	r0, r5
 800701e:	47b8      	blx	r7
 8007020:	3001      	adds	r0, #1
 8007022:	f43f aeac 	beq.w	8006d7e <_printf_float+0xb6>
 8007026:	f108 0801 	add.w	r8, r8, #1
 800702a:	e7ec      	b.n	8007006 <_printf_float+0x33e>
 800702c:	4642      	mov	r2, r8
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	47b8      	blx	r7
 8007034:	3001      	adds	r0, #1
 8007036:	d1c2      	bne.n	8006fbe <_printf_float+0x2f6>
 8007038:	e6a1      	b.n	8006d7e <_printf_float+0xb6>
 800703a:	2301      	movs	r3, #1
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	920a      	str	r2, [sp, #40]	@ 0x28
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f ae9a 	beq.w	8006d7e <_printf_float+0xb6>
 800704a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800704c:	f10b 0b01 	add.w	fp, fp, #1
 8007050:	e7bb      	b.n	8006fca <_printf_float+0x302>
 8007052:	4631      	mov	r1, r6
 8007054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007058:	4628      	mov	r0, r5
 800705a:	47b8      	blx	r7
 800705c:	3001      	adds	r0, #1
 800705e:	d1c0      	bne.n	8006fe2 <_printf_float+0x31a>
 8007060:	e68d      	b.n	8006d7e <_printf_float+0xb6>
 8007062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007064:	464b      	mov	r3, r9
 8007066:	4631      	mov	r1, r6
 8007068:	4628      	mov	r0, r5
 800706a:	4442      	add	r2, r8
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	d1c3      	bne.n	8006ffa <_printf_float+0x332>
 8007072:	e684      	b.n	8006d7e <_printf_float+0xb6>
 8007074:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007078:	f1ba 0f01 	cmp.w	sl, #1
 800707c:	dc01      	bgt.n	8007082 <_printf_float+0x3ba>
 800707e:	07db      	lsls	r3, r3, #31
 8007080:	d536      	bpl.n	80070f0 <_printf_float+0x428>
 8007082:	2301      	movs	r3, #1
 8007084:	4642      	mov	r2, r8
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae76 	beq.w	8006d7e <_printf_float+0xb6>
 8007092:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	f43f ae6e 	beq.w	8006d7e <_printf_float+0xb6>
 80070a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070a6:	2200      	movs	r2, #0
 80070a8:	2300      	movs	r3, #0
 80070aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80070ae:	f7f9 fc7b 	bl	80009a8 <__aeabi_dcmpeq>
 80070b2:	b9c0      	cbnz	r0, 80070e6 <_printf_float+0x41e>
 80070b4:	4653      	mov	r3, sl
 80070b6:	f108 0201 	add.w	r2, r8, #1
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	d10c      	bne.n	80070de <_printf_float+0x416>
 80070c4:	e65b      	b.n	8006d7e <_printf_float+0xb6>
 80070c6:	2301      	movs	r3, #1
 80070c8:	465a      	mov	r2, fp
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	f43f ae54 	beq.w	8006d7e <_printf_float+0xb6>
 80070d6:	f108 0801 	add.w	r8, r8, #1
 80070da:	45d0      	cmp	r8, sl
 80070dc:	dbf3      	blt.n	80070c6 <_printf_float+0x3fe>
 80070de:	464b      	mov	r3, r9
 80070e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070e4:	e6e0      	b.n	8006ea8 <_printf_float+0x1e0>
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	f104 0b1a 	add.w	fp, r4, #26
 80070ee:	e7f4      	b.n	80070da <_printf_float+0x412>
 80070f0:	2301      	movs	r3, #1
 80070f2:	4642      	mov	r2, r8
 80070f4:	e7e1      	b.n	80070ba <_printf_float+0x3f2>
 80070f6:	2301      	movs	r3, #1
 80070f8:	464a      	mov	r2, r9
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f ae3c 	beq.w	8006d7e <_printf_float+0xb6>
 8007106:	f108 0801 	add.w	r8, r8, #1
 800710a:	68e3      	ldr	r3, [r4, #12]
 800710c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800710e:	1a5b      	subs	r3, r3, r1
 8007110:	4543      	cmp	r3, r8
 8007112:	dcf0      	bgt.n	80070f6 <_printf_float+0x42e>
 8007114:	e6fd      	b.n	8006f12 <_printf_float+0x24a>
 8007116:	f04f 0800 	mov.w	r8, #0
 800711a:	f104 0919 	add.w	r9, r4, #25
 800711e:	e7f4      	b.n	800710a <_printf_float+0x442>

08007120 <_printf_common>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	4616      	mov	r6, r2
 8007126:	4698      	mov	r8, r3
 8007128:	688a      	ldr	r2, [r1, #8]
 800712a:	690b      	ldr	r3, [r1, #16]
 800712c:	4607      	mov	r7, r0
 800712e:	4293      	cmp	r3, r2
 8007130:	bfb8      	it	lt
 8007132:	4613      	movlt	r3, r2
 8007134:	6033      	str	r3, [r6, #0]
 8007136:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800713a:	460c      	mov	r4, r1
 800713c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007140:	b10a      	cbz	r2, 8007146 <_printf_common+0x26>
 8007142:	3301      	adds	r3, #1
 8007144:	6033      	str	r3, [r6, #0]
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	0699      	lsls	r1, r3, #26
 800714a:	bf42      	ittt	mi
 800714c:	6833      	ldrmi	r3, [r6, #0]
 800714e:	3302      	addmi	r3, #2
 8007150:	6033      	strmi	r3, [r6, #0]
 8007152:	6825      	ldr	r5, [r4, #0]
 8007154:	f015 0506 	ands.w	r5, r5, #6
 8007158:	d106      	bne.n	8007168 <_printf_common+0x48>
 800715a:	f104 0a19 	add.w	sl, r4, #25
 800715e:	68e3      	ldr	r3, [r4, #12]
 8007160:	6832      	ldr	r2, [r6, #0]
 8007162:	1a9b      	subs	r3, r3, r2
 8007164:	42ab      	cmp	r3, r5
 8007166:	dc2b      	bgt.n	80071c0 <_printf_common+0xa0>
 8007168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	3b00      	subs	r3, #0
 8007170:	bf18      	it	ne
 8007172:	2301      	movne	r3, #1
 8007174:	0692      	lsls	r2, r2, #26
 8007176:	d430      	bmi.n	80071da <_printf_common+0xba>
 8007178:	4641      	mov	r1, r8
 800717a:	4638      	mov	r0, r7
 800717c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007180:	47c8      	blx	r9
 8007182:	3001      	adds	r0, #1
 8007184:	d023      	beq.n	80071ce <_printf_common+0xae>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	f003 0306 	and.w	r3, r3, #6
 800718e:	2b04      	cmp	r3, #4
 8007190:	bf14      	ite	ne
 8007192:	2500      	movne	r5, #0
 8007194:	6833      	ldreq	r3, [r6, #0]
 8007196:	f04f 0600 	mov.w	r6, #0
 800719a:	bf08      	it	eq
 800719c:	68e5      	ldreq	r5, [r4, #12]
 800719e:	f104 041a 	add.w	r4, r4, #26
 80071a2:	bf08      	it	eq
 80071a4:	1aed      	subeq	r5, r5, r3
 80071a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80071aa:	bf08      	it	eq
 80071ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b0:	4293      	cmp	r3, r2
 80071b2:	bfc4      	itt	gt
 80071b4:	1a9b      	subgt	r3, r3, r2
 80071b6:	18ed      	addgt	r5, r5, r3
 80071b8:	42b5      	cmp	r5, r6
 80071ba:	d11a      	bne.n	80071f2 <_printf_common+0xd2>
 80071bc:	2000      	movs	r0, #0
 80071be:	e008      	b.n	80071d2 <_printf_common+0xb2>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4652      	mov	r2, sl
 80071c4:	4641      	mov	r1, r8
 80071c6:	4638      	mov	r0, r7
 80071c8:	47c8      	blx	r9
 80071ca:	3001      	adds	r0, #1
 80071cc:	d103      	bne.n	80071d6 <_printf_common+0xb6>
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	3501      	adds	r5, #1
 80071d8:	e7c1      	b.n	800715e <_printf_common+0x3e>
 80071da:	2030      	movs	r0, #48	@ 0x30
 80071dc:	18e1      	adds	r1, r4, r3
 80071de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071e8:	4422      	add	r2, r4
 80071ea:	3302      	adds	r3, #2
 80071ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071f0:	e7c2      	b.n	8007178 <_printf_common+0x58>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4622      	mov	r2, r4
 80071f6:	4641      	mov	r1, r8
 80071f8:	4638      	mov	r0, r7
 80071fa:	47c8      	blx	r9
 80071fc:	3001      	adds	r0, #1
 80071fe:	d0e6      	beq.n	80071ce <_printf_common+0xae>
 8007200:	3601      	adds	r6, #1
 8007202:	e7d9      	b.n	80071b8 <_printf_common+0x98>

08007204 <_printf_i>:
 8007204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	7e0f      	ldrb	r7, [r1, #24]
 800720a:	4691      	mov	r9, r2
 800720c:	2f78      	cmp	r7, #120	@ 0x78
 800720e:	4680      	mov	r8, r0
 8007210:	460c      	mov	r4, r1
 8007212:	469a      	mov	sl, r3
 8007214:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800721a:	d807      	bhi.n	800722c <_printf_i+0x28>
 800721c:	2f62      	cmp	r7, #98	@ 0x62
 800721e:	d80a      	bhi.n	8007236 <_printf_i+0x32>
 8007220:	2f00      	cmp	r7, #0
 8007222:	f000 80d3 	beq.w	80073cc <_printf_i+0x1c8>
 8007226:	2f58      	cmp	r7, #88	@ 0x58
 8007228:	f000 80ba 	beq.w	80073a0 <_printf_i+0x19c>
 800722c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007234:	e03a      	b.n	80072ac <_printf_i+0xa8>
 8007236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800723a:	2b15      	cmp	r3, #21
 800723c:	d8f6      	bhi.n	800722c <_printf_i+0x28>
 800723e:	a101      	add	r1, pc, #4	@ (adr r1, 8007244 <_printf_i+0x40>)
 8007240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007244:	0800729d 	.word	0x0800729d
 8007248:	080072b1 	.word	0x080072b1
 800724c:	0800722d 	.word	0x0800722d
 8007250:	0800722d 	.word	0x0800722d
 8007254:	0800722d 	.word	0x0800722d
 8007258:	0800722d 	.word	0x0800722d
 800725c:	080072b1 	.word	0x080072b1
 8007260:	0800722d 	.word	0x0800722d
 8007264:	0800722d 	.word	0x0800722d
 8007268:	0800722d 	.word	0x0800722d
 800726c:	0800722d 	.word	0x0800722d
 8007270:	080073b3 	.word	0x080073b3
 8007274:	080072db 	.word	0x080072db
 8007278:	0800736d 	.word	0x0800736d
 800727c:	0800722d 	.word	0x0800722d
 8007280:	0800722d 	.word	0x0800722d
 8007284:	080073d5 	.word	0x080073d5
 8007288:	0800722d 	.word	0x0800722d
 800728c:	080072db 	.word	0x080072db
 8007290:	0800722d 	.word	0x0800722d
 8007294:	0800722d 	.word	0x0800722d
 8007298:	08007375 	.word	0x08007375
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6032      	str	r2, [r6, #0]
 80072a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072ac:	2301      	movs	r3, #1
 80072ae:	e09e      	b.n	80073ee <_printf_i+0x1ea>
 80072b0:	6833      	ldr	r3, [r6, #0]
 80072b2:	6820      	ldr	r0, [r4, #0]
 80072b4:	1d19      	adds	r1, r3, #4
 80072b6:	6031      	str	r1, [r6, #0]
 80072b8:	0606      	lsls	r6, r0, #24
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0xbc>
 80072bc:	681d      	ldr	r5, [r3, #0]
 80072be:	e003      	b.n	80072c8 <_printf_i+0xc4>
 80072c0:	0645      	lsls	r5, r0, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0xb8>
 80072c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	da03      	bge.n	80072d4 <_printf_i+0xd0>
 80072cc:	232d      	movs	r3, #45	@ 0x2d
 80072ce:	426d      	negs	r5, r5
 80072d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d4:	230a      	movs	r3, #10
 80072d6:	4859      	ldr	r0, [pc, #356]	@ (800743c <_printf_i+0x238>)
 80072d8:	e011      	b.n	80072fe <_printf_i+0xfa>
 80072da:	6821      	ldr	r1, [r4, #0]
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	0608      	lsls	r0, r1, #24
 80072e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80072e4:	d402      	bmi.n	80072ec <_printf_i+0xe8>
 80072e6:	0649      	lsls	r1, r1, #25
 80072e8:	bf48      	it	mi
 80072ea:	b2ad      	uxthmi	r5, r5
 80072ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	bf14      	ite	ne
 80072f2:	230a      	movne	r3, #10
 80072f4:	2308      	moveq	r3, #8
 80072f6:	4851      	ldr	r0, [pc, #324]	@ (800743c <_printf_i+0x238>)
 80072f8:	2100      	movs	r1, #0
 80072fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072fe:	6866      	ldr	r6, [r4, #4]
 8007300:	2e00      	cmp	r6, #0
 8007302:	bfa8      	it	ge
 8007304:	6821      	ldrge	r1, [r4, #0]
 8007306:	60a6      	str	r6, [r4, #8]
 8007308:	bfa4      	itt	ge
 800730a:	f021 0104 	bicge.w	r1, r1, #4
 800730e:	6021      	strge	r1, [r4, #0]
 8007310:	b90d      	cbnz	r5, 8007316 <_printf_i+0x112>
 8007312:	2e00      	cmp	r6, #0
 8007314:	d04b      	beq.n	80073ae <_printf_i+0x1aa>
 8007316:	4616      	mov	r6, r2
 8007318:	fbb5 f1f3 	udiv	r1, r5, r3
 800731c:	fb03 5711 	mls	r7, r3, r1, r5
 8007320:	5dc7      	ldrb	r7, [r0, r7]
 8007322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007326:	462f      	mov	r7, r5
 8007328:	42bb      	cmp	r3, r7
 800732a:	460d      	mov	r5, r1
 800732c:	d9f4      	bls.n	8007318 <_printf_i+0x114>
 800732e:	2b08      	cmp	r3, #8
 8007330:	d10b      	bne.n	800734a <_printf_i+0x146>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	07df      	lsls	r7, r3, #31
 8007336:	d508      	bpl.n	800734a <_printf_i+0x146>
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	6861      	ldr	r1, [r4, #4]
 800733c:	4299      	cmp	r1, r3
 800733e:	bfde      	ittt	le
 8007340:	2330      	movle	r3, #48	@ 0x30
 8007342:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007346:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800734a:	1b92      	subs	r2, r2, r6
 800734c:	6122      	str	r2, [r4, #16]
 800734e:	464b      	mov	r3, r9
 8007350:	4621      	mov	r1, r4
 8007352:	4640      	mov	r0, r8
 8007354:	f8cd a000 	str.w	sl, [sp]
 8007358:	aa03      	add	r2, sp, #12
 800735a:	f7ff fee1 	bl	8007120 <_printf_common>
 800735e:	3001      	adds	r0, #1
 8007360:	d14a      	bne.n	80073f8 <_printf_i+0x1f4>
 8007362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007366:	b004      	add	sp, #16
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f043 0320 	orr.w	r3, r3, #32
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	2778      	movs	r7, #120	@ 0x78
 8007376:	4832      	ldr	r0, [pc, #200]	@ (8007440 <_printf_i+0x23c>)
 8007378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	6831      	ldr	r1, [r6, #0]
 8007380:	061f      	lsls	r7, r3, #24
 8007382:	f851 5b04 	ldr.w	r5, [r1], #4
 8007386:	d402      	bmi.n	800738e <_printf_i+0x18a>
 8007388:	065f      	lsls	r7, r3, #25
 800738a:	bf48      	it	mi
 800738c:	b2ad      	uxthmi	r5, r5
 800738e:	6031      	str	r1, [r6, #0]
 8007390:	07d9      	lsls	r1, r3, #31
 8007392:	bf44      	itt	mi
 8007394:	f043 0320 	orrmi.w	r3, r3, #32
 8007398:	6023      	strmi	r3, [r4, #0]
 800739a:	b11d      	cbz	r5, 80073a4 <_printf_i+0x1a0>
 800739c:	2310      	movs	r3, #16
 800739e:	e7ab      	b.n	80072f8 <_printf_i+0xf4>
 80073a0:	4826      	ldr	r0, [pc, #152]	@ (800743c <_printf_i+0x238>)
 80073a2:	e7e9      	b.n	8007378 <_printf_i+0x174>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	f023 0320 	bic.w	r3, r3, #32
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	e7f6      	b.n	800739c <_printf_i+0x198>
 80073ae:	4616      	mov	r6, r2
 80073b0:	e7bd      	b.n	800732e <_printf_i+0x12a>
 80073b2:	6833      	ldr	r3, [r6, #0]
 80073b4:	6825      	ldr	r5, [r4, #0]
 80073b6:	1d18      	adds	r0, r3, #4
 80073b8:	6961      	ldr	r1, [r4, #20]
 80073ba:	6030      	str	r0, [r6, #0]
 80073bc:	062e      	lsls	r6, r5, #24
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	d501      	bpl.n	80073c6 <_printf_i+0x1c2>
 80073c2:	6019      	str	r1, [r3, #0]
 80073c4:	e002      	b.n	80073cc <_printf_i+0x1c8>
 80073c6:	0668      	lsls	r0, r5, #25
 80073c8:	d5fb      	bpl.n	80073c2 <_printf_i+0x1be>
 80073ca:	8019      	strh	r1, [r3, #0]
 80073cc:	2300      	movs	r3, #0
 80073ce:	4616      	mov	r6, r2
 80073d0:	6123      	str	r3, [r4, #16]
 80073d2:	e7bc      	b.n	800734e <_printf_i+0x14a>
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	2100      	movs	r1, #0
 80073d8:	1d1a      	adds	r2, r3, #4
 80073da:	6032      	str	r2, [r6, #0]
 80073dc:	681e      	ldr	r6, [r3, #0]
 80073de:	6862      	ldr	r2, [r4, #4]
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 fbe4 	bl	8007bae <memchr>
 80073e6:	b108      	cbz	r0, 80073ec <_printf_i+0x1e8>
 80073e8:	1b80      	subs	r0, r0, r6
 80073ea:	6060      	str	r0, [r4, #4]
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	2300      	movs	r3, #0
 80073f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f6:	e7aa      	b.n	800734e <_printf_i+0x14a>
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	47d0      	blx	sl
 8007402:	3001      	adds	r0, #1
 8007404:	d0ad      	beq.n	8007362 <_printf_i+0x15e>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	079b      	lsls	r3, r3, #30
 800740a:	d413      	bmi.n	8007434 <_printf_i+0x230>
 800740c:	68e0      	ldr	r0, [r4, #12]
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	4298      	cmp	r0, r3
 8007412:	bfb8      	it	lt
 8007414:	4618      	movlt	r0, r3
 8007416:	e7a6      	b.n	8007366 <_printf_i+0x162>
 8007418:	2301      	movs	r3, #1
 800741a:	4632      	mov	r2, r6
 800741c:	4649      	mov	r1, r9
 800741e:	4640      	mov	r0, r8
 8007420:	47d0      	blx	sl
 8007422:	3001      	adds	r0, #1
 8007424:	d09d      	beq.n	8007362 <_printf_i+0x15e>
 8007426:	3501      	adds	r5, #1
 8007428:	68e3      	ldr	r3, [r4, #12]
 800742a:	9903      	ldr	r1, [sp, #12]
 800742c:	1a5b      	subs	r3, r3, r1
 800742e:	42ab      	cmp	r3, r5
 8007430:	dcf2      	bgt.n	8007418 <_printf_i+0x214>
 8007432:	e7eb      	b.n	800740c <_printf_i+0x208>
 8007434:	2500      	movs	r5, #0
 8007436:	f104 0619 	add.w	r6, r4, #25
 800743a:	e7f5      	b.n	8007428 <_printf_i+0x224>
 800743c:	0800b314 	.word	0x0800b314
 8007440:	0800b325 	.word	0x0800b325

08007444 <_scanf_float>:
 8007444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	b087      	sub	sp, #28
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	688b      	ldr	r3, [r1, #8]
 800744e:	4617      	mov	r7, r2
 8007450:	1e5a      	subs	r2, r3, #1
 8007452:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007456:	bf82      	ittt	hi
 8007458:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800745c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007460:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007464:	460a      	mov	r2, r1
 8007466:	f04f 0500 	mov.w	r5, #0
 800746a:	bf88      	it	hi
 800746c:	608b      	strhi	r3, [r1, #8]
 800746e:	680b      	ldr	r3, [r1, #0]
 8007470:	4680      	mov	r8, r0
 8007472:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007476:	f842 3b1c 	str.w	r3, [r2], #28
 800747a:	460c      	mov	r4, r1
 800747c:	bf98      	it	ls
 800747e:	f04f 0b00 	movls.w	fp, #0
 8007482:	4616      	mov	r6, r2
 8007484:	46aa      	mov	sl, r5
 8007486:	46a9      	mov	r9, r5
 8007488:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9502      	str	r5, [sp, #8]
 8007490:	68a2      	ldr	r2, [r4, #8]
 8007492:	b152      	cbz	r2, 80074aa <_scanf_float+0x66>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b4e      	cmp	r3, #78	@ 0x4e
 800749a:	d865      	bhi.n	8007568 <_scanf_float+0x124>
 800749c:	2b40      	cmp	r3, #64	@ 0x40
 800749e:	d83d      	bhi.n	800751c <_scanf_float+0xd8>
 80074a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80074a4:	b2c8      	uxtb	r0, r1
 80074a6:	280e      	cmp	r0, #14
 80074a8:	d93b      	bls.n	8007522 <_scanf_float+0xde>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d003      	beq.n	80074b8 <_scanf_float+0x74>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80074bc:	f1ba 0f01 	cmp.w	sl, #1
 80074c0:	f200 8118 	bhi.w	80076f4 <_scanf_float+0x2b0>
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	429e      	cmp	r6, r3
 80074c8:	f200 8109 	bhi.w	80076de <_scanf_float+0x29a>
 80074cc:	2001      	movs	r0, #1
 80074ce:	b007      	add	sp, #28
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80074d8:	2a0d      	cmp	r2, #13
 80074da:	d8e6      	bhi.n	80074aa <_scanf_float+0x66>
 80074dc:	a101      	add	r1, pc, #4	@ (adr r1, 80074e4 <_scanf_float+0xa0>)
 80074de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	0800762b 	.word	0x0800762b
 80074e8:	080074ab 	.word	0x080074ab
 80074ec:	080074ab 	.word	0x080074ab
 80074f0:	080074ab 	.word	0x080074ab
 80074f4:	0800768b 	.word	0x0800768b
 80074f8:	08007663 	.word	0x08007663
 80074fc:	080074ab 	.word	0x080074ab
 8007500:	080074ab 	.word	0x080074ab
 8007504:	08007639 	.word	0x08007639
 8007508:	080074ab 	.word	0x080074ab
 800750c:	080074ab 	.word	0x080074ab
 8007510:	080074ab 	.word	0x080074ab
 8007514:	080074ab 	.word	0x080074ab
 8007518:	080075f1 	.word	0x080075f1
 800751c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007520:	e7da      	b.n	80074d8 <_scanf_float+0x94>
 8007522:	290e      	cmp	r1, #14
 8007524:	d8c1      	bhi.n	80074aa <_scanf_float+0x66>
 8007526:	a001      	add	r0, pc, #4	@ (adr r0, 800752c <_scanf_float+0xe8>)
 8007528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800752c:	080075e1 	.word	0x080075e1
 8007530:	080074ab 	.word	0x080074ab
 8007534:	080075e1 	.word	0x080075e1
 8007538:	08007677 	.word	0x08007677
 800753c:	080074ab 	.word	0x080074ab
 8007540:	08007589 	.word	0x08007589
 8007544:	080075c7 	.word	0x080075c7
 8007548:	080075c7 	.word	0x080075c7
 800754c:	080075c7 	.word	0x080075c7
 8007550:	080075c7 	.word	0x080075c7
 8007554:	080075c7 	.word	0x080075c7
 8007558:	080075c7 	.word	0x080075c7
 800755c:	080075c7 	.word	0x080075c7
 8007560:	080075c7 	.word	0x080075c7
 8007564:	080075c7 	.word	0x080075c7
 8007568:	2b6e      	cmp	r3, #110	@ 0x6e
 800756a:	d809      	bhi.n	8007580 <_scanf_float+0x13c>
 800756c:	2b60      	cmp	r3, #96	@ 0x60
 800756e:	d8b1      	bhi.n	80074d4 <_scanf_float+0x90>
 8007570:	2b54      	cmp	r3, #84	@ 0x54
 8007572:	d07b      	beq.n	800766c <_scanf_float+0x228>
 8007574:	2b59      	cmp	r3, #89	@ 0x59
 8007576:	d198      	bne.n	80074aa <_scanf_float+0x66>
 8007578:	2d07      	cmp	r5, #7
 800757a:	d196      	bne.n	80074aa <_scanf_float+0x66>
 800757c:	2508      	movs	r5, #8
 800757e:	e02c      	b.n	80075da <_scanf_float+0x196>
 8007580:	2b74      	cmp	r3, #116	@ 0x74
 8007582:	d073      	beq.n	800766c <_scanf_float+0x228>
 8007584:	2b79      	cmp	r3, #121	@ 0x79
 8007586:	e7f6      	b.n	8007576 <_scanf_float+0x132>
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	05c8      	lsls	r0, r1, #23
 800758c:	d51b      	bpl.n	80075c6 <_scanf_float+0x182>
 800758e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007592:	6021      	str	r1, [r4, #0]
 8007594:	f109 0901 	add.w	r9, r9, #1
 8007598:	f1bb 0f00 	cmp.w	fp, #0
 800759c:	d003      	beq.n	80075a6 <_scanf_float+0x162>
 800759e:	3201      	adds	r2, #1
 80075a0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80075a4:	60a2      	str	r2, [r4, #8]
 80075a6:	68a3      	ldr	r3, [r4, #8]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	3301      	adds	r3, #1
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	f340 8087 	ble.w	80076cc <_scanf_float+0x288>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	e764      	b.n	8007490 <_scanf_float+0x4c>
 80075c6:	eb1a 0105 	adds.w	r1, sl, r5
 80075ca:	f47f af6e 	bne.w	80074aa <_scanf_float+0x66>
 80075ce:	460d      	mov	r5, r1
 80075d0:	468a      	mov	sl, r1
 80075d2:	6822      	ldr	r2, [r4, #0]
 80075d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80075d8:	6022      	str	r2, [r4, #0]
 80075da:	f806 3b01 	strb.w	r3, [r6], #1
 80075de:	e7e2      	b.n	80075a6 <_scanf_float+0x162>
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	0610      	lsls	r0, r2, #24
 80075e4:	f57f af61 	bpl.w	80074aa <_scanf_float+0x66>
 80075e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	e7f4      	b.n	80075da <_scanf_float+0x196>
 80075f0:	f1ba 0f00 	cmp.w	sl, #0
 80075f4:	d10e      	bne.n	8007614 <_scanf_float+0x1d0>
 80075f6:	f1b9 0f00 	cmp.w	r9, #0
 80075fa:	d10e      	bne.n	800761a <_scanf_float+0x1d6>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007602:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007606:	d108      	bne.n	800761a <_scanf_float+0x1d6>
 8007608:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800760c:	f04f 0a01 	mov.w	sl, #1
 8007610:	6022      	str	r2, [r4, #0]
 8007612:	e7e2      	b.n	80075da <_scanf_float+0x196>
 8007614:	f1ba 0f02 	cmp.w	sl, #2
 8007618:	d055      	beq.n	80076c6 <_scanf_float+0x282>
 800761a:	2d01      	cmp	r5, #1
 800761c:	d002      	beq.n	8007624 <_scanf_float+0x1e0>
 800761e:	2d04      	cmp	r5, #4
 8007620:	f47f af43 	bne.w	80074aa <_scanf_float+0x66>
 8007624:	3501      	adds	r5, #1
 8007626:	b2ed      	uxtb	r5, r5
 8007628:	e7d7      	b.n	80075da <_scanf_float+0x196>
 800762a:	f1ba 0f01 	cmp.w	sl, #1
 800762e:	f47f af3c 	bne.w	80074aa <_scanf_float+0x66>
 8007632:	f04f 0a02 	mov.w	sl, #2
 8007636:	e7d0      	b.n	80075da <_scanf_float+0x196>
 8007638:	b97d      	cbnz	r5, 800765a <_scanf_float+0x216>
 800763a:	f1b9 0f00 	cmp.w	r9, #0
 800763e:	f47f af37 	bne.w	80074b0 <_scanf_float+0x6c>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007648:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800764c:	f040 8103 	bne.w	8007856 <_scanf_float+0x412>
 8007650:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007654:	2501      	movs	r5, #1
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	e7bf      	b.n	80075da <_scanf_float+0x196>
 800765a:	2d03      	cmp	r5, #3
 800765c:	d0e2      	beq.n	8007624 <_scanf_float+0x1e0>
 800765e:	2d05      	cmp	r5, #5
 8007660:	e7de      	b.n	8007620 <_scanf_float+0x1dc>
 8007662:	2d02      	cmp	r5, #2
 8007664:	f47f af21 	bne.w	80074aa <_scanf_float+0x66>
 8007668:	2503      	movs	r5, #3
 800766a:	e7b6      	b.n	80075da <_scanf_float+0x196>
 800766c:	2d06      	cmp	r5, #6
 800766e:	f47f af1c 	bne.w	80074aa <_scanf_float+0x66>
 8007672:	2507      	movs	r5, #7
 8007674:	e7b1      	b.n	80075da <_scanf_float+0x196>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	0591      	lsls	r1, r2, #22
 800767a:	f57f af16 	bpl.w	80074aa <_scanf_float+0x66>
 800767e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007682:	6022      	str	r2, [r4, #0]
 8007684:	f8cd 9008 	str.w	r9, [sp, #8]
 8007688:	e7a7      	b.n	80075da <_scanf_float+0x196>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007690:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007694:	d006      	beq.n	80076a4 <_scanf_float+0x260>
 8007696:	0550      	lsls	r0, r2, #21
 8007698:	f57f af07 	bpl.w	80074aa <_scanf_float+0x66>
 800769c:	f1b9 0f00 	cmp.w	r9, #0
 80076a0:	f000 80d9 	beq.w	8007856 <_scanf_float+0x412>
 80076a4:	0591      	lsls	r1, r2, #22
 80076a6:	bf58      	it	pl
 80076a8:	9902      	ldrpl	r1, [sp, #8]
 80076aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076ae:	bf58      	it	pl
 80076b0:	eba9 0101 	subpl.w	r1, r9, r1
 80076b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80076b8:	f04f 0900 	mov.w	r9, #0
 80076bc:	bf58      	it	pl
 80076be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076c2:	6022      	str	r2, [r4, #0]
 80076c4:	e789      	b.n	80075da <_scanf_float+0x196>
 80076c6:	f04f 0a03 	mov.w	sl, #3
 80076ca:	e786      	b.n	80075da <_scanf_float+0x196>
 80076cc:	4639      	mov	r1, r7
 80076ce:	4640      	mov	r0, r8
 80076d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80076d4:	4798      	blx	r3
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f aeda 	beq.w	8007490 <_scanf_float+0x4c>
 80076dc:	e6e5      	b.n	80074aa <_scanf_float+0x66>
 80076de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076e2:	463a      	mov	r2, r7
 80076e4:	4640      	mov	r0, r8
 80076e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076ea:	4798      	blx	r3
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	e6e7      	b.n	80074c4 <_scanf_float+0x80>
 80076f4:	1e6b      	subs	r3, r5, #1
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d824      	bhi.n	8007744 <_scanf_float+0x300>
 80076fa:	2d02      	cmp	r5, #2
 80076fc:	d836      	bhi.n	800776c <_scanf_float+0x328>
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	429e      	cmp	r6, r3
 8007702:	f67f aee3 	bls.w	80074cc <_scanf_float+0x88>
 8007706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800770a:	463a      	mov	r2, r7
 800770c:	4640      	mov	r0, r8
 800770e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007712:	4798      	blx	r3
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	3b01      	subs	r3, #1
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	e7f0      	b.n	80076fe <_scanf_float+0x2ba>
 800771c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007720:	463a      	mov	r2, r7
 8007722:	4640      	mov	r0, r8
 8007724:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007728:	4798      	blx	r3
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007734:	fa5f fa8a 	uxtb.w	sl, sl
 8007738:	f1ba 0f02 	cmp.w	sl, #2
 800773c:	d1ee      	bne.n	800771c <_scanf_float+0x2d8>
 800773e:	3d03      	subs	r5, #3
 8007740:	b2ed      	uxtb	r5, r5
 8007742:	1b76      	subs	r6, r6, r5
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	05da      	lsls	r2, r3, #23
 8007748:	d530      	bpl.n	80077ac <_scanf_float+0x368>
 800774a:	055b      	lsls	r3, r3, #21
 800774c:	d511      	bpl.n	8007772 <_scanf_float+0x32e>
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	429e      	cmp	r6, r3
 8007752:	f67f aebb 	bls.w	80074cc <_scanf_float+0x88>
 8007756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800775a:	463a      	mov	r2, r7
 800775c:	4640      	mov	r0, r8
 800775e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007762:	4798      	blx	r3
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	3b01      	subs	r3, #1
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	e7f0      	b.n	800774e <_scanf_float+0x30a>
 800776c:	46aa      	mov	sl, r5
 800776e:	46b3      	mov	fp, r6
 8007770:	e7de      	b.n	8007730 <_scanf_float+0x2ec>
 8007772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	2965      	cmp	r1, #101	@ 0x65
 800777a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800777e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	d00c      	beq.n	80077a0 <_scanf_float+0x35c>
 8007786:	2945      	cmp	r1, #69	@ 0x45
 8007788:	d00a      	beq.n	80077a0 <_scanf_float+0x35c>
 800778a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800778e:	463a      	mov	r2, r7
 8007790:	4640      	mov	r0, r8
 8007792:	4798      	blx	r3
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800779a:	3b01      	subs	r3, #1
 800779c:	1eb5      	subs	r5, r6, #2
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	463a      	mov	r2, r7
 80077a2:	4640      	mov	r0, r8
 80077a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077a8:	4798      	blx	r3
 80077aa:	462e      	mov	r6, r5
 80077ac:	6822      	ldr	r2, [r4, #0]
 80077ae:	f012 0210 	ands.w	r2, r2, #16
 80077b2:	d001      	beq.n	80077b8 <_scanf_float+0x374>
 80077b4:	2000      	movs	r0, #0
 80077b6:	e68a      	b.n	80074ce <_scanf_float+0x8a>
 80077b8:	7032      	strb	r2, [r6, #0]
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c4:	d11c      	bne.n	8007800 <_scanf_float+0x3bc>
 80077c6:	9b02      	ldr	r3, [sp, #8]
 80077c8:	454b      	cmp	r3, r9
 80077ca:	eba3 0209 	sub.w	r2, r3, r9
 80077ce:	d123      	bne.n	8007818 <_scanf_float+0x3d4>
 80077d0:	2200      	movs	r2, #0
 80077d2:	4640      	mov	r0, r8
 80077d4:	9901      	ldr	r1, [sp, #4]
 80077d6:	f002 fbfb 	bl	8009fd0 <_strtod_r>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f015 0f02 	tst.w	r5, #2
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	f103 0204 	add.w	r2, r3, #4
 80077ec:	d01f      	beq.n	800782e <_scanf_float+0x3ea>
 80077ee:	9903      	ldr	r1, [sp, #12]
 80077f0:	600a      	str	r2, [r1, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	e9c3 6700 	strd	r6, r7, [r3]
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60e3      	str	r3, [r4, #12]
 80077fe:	e7d9      	b.n	80077b4 <_scanf_float+0x370>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0e4      	beq.n	80077d0 <_scanf_float+0x38c>
 8007806:	9905      	ldr	r1, [sp, #20]
 8007808:	230a      	movs	r3, #10
 800780a:	4640      	mov	r0, r8
 800780c:	3101      	adds	r1, #1
 800780e:	f002 fc5f 	bl	800a0d0 <_strtol_r>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	9e05      	ldr	r6, [sp, #20]
 8007816:	1ac2      	subs	r2, r0, r3
 8007818:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800781c:	429e      	cmp	r6, r3
 800781e:	bf28      	it	cs
 8007820:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007824:	4630      	mov	r0, r6
 8007826:	490d      	ldr	r1, [pc, #52]	@ (800785c <_scanf_float+0x418>)
 8007828:	f000 f8de 	bl	80079e8 <siprintf>
 800782c:	e7d0      	b.n	80077d0 <_scanf_float+0x38c>
 800782e:	076d      	lsls	r5, r5, #29
 8007830:	d4dd      	bmi.n	80077ee <_scanf_float+0x3aa>
 8007832:	9d03      	ldr	r5, [sp, #12]
 8007834:	602a      	str	r2, [r5, #0]
 8007836:	681d      	ldr	r5, [r3, #0]
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	f7f9 f8e6 	bl	8000a0c <__aeabi_dcmpun>
 8007840:	b120      	cbz	r0, 800784c <_scanf_float+0x408>
 8007842:	4807      	ldr	r0, [pc, #28]	@ (8007860 <_scanf_float+0x41c>)
 8007844:	f000 f9d0 	bl	8007be8 <nanf>
 8007848:	6028      	str	r0, [r5, #0]
 800784a:	e7d5      	b.n	80077f8 <_scanf_float+0x3b4>
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f9 f93a 	bl	8000ac8 <__aeabi_d2f>
 8007854:	e7f8      	b.n	8007848 <_scanf_float+0x404>
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	e62d      	b.n	80074b8 <_scanf_float+0x74>
 800785c:	0800b336 	.word	0x0800b336
 8007860:	0800b6cd 	.word	0x0800b6cd

08007864 <std>:
 8007864:	2300      	movs	r3, #0
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
 800786a:	e9c0 3300 	strd	r3, r3, [r0]
 800786e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007872:	6083      	str	r3, [r0, #8]
 8007874:	8181      	strh	r1, [r0, #12]
 8007876:	6643      	str	r3, [r0, #100]	@ 0x64
 8007878:	81c2      	strh	r2, [r0, #14]
 800787a:	6183      	str	r3, [r0, #24]
 800787c:	4619      	mov	r1, r3
 800787e:	2208      	movs	r2, #8
 8007880:	305c      	adds	r0, #92	@ 0x5c
 8007882:	f000 f914 	bl	8007aae <memset>
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <std+0x58>)
 8007888:	6224      	str	r4, [r4, #32]
 800788a:	6263      	str	r3, [r4, #36]	@ 0x24
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <std+0x5c>)
 800788e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007890:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <std+0x60>)
 8007892:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007894:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <std+0x64>)
 8007896:	6323      	str	r3, [r4, #48]	@ 0x30
 8007898:	4b0c      	ldr	r3, [pc, #48]	@ (80078cc <std+0x68>)
 800789a:	429c      	cmp	r4, r3
 800789c:	d006      	beq.n	80078ac <std+0x48>
 800789e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078a2:	4294      	cmp	r4, r2
 80078a4:	d002      	beq.n	80078ac <std+0x48>
 80078a6:	33d0      	adds	r3, #208	@ 0xd0
 80078a8:	429c      	cmp	r4, r3
 80078aa:	d105      	bne.n	80078b8 <std+0x54>
 80078ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f000 b978 	b.w	8007ba8 <__retarget_lock_init_recursive>
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	bf00      	nop
 80078bc:	08007a29 	.word	0x08007a29
 80078c0:	08007a4b 	.word	0x08007a4b
 80078c4:	08007a83 	.word	0x08007a83
 80078c8:	08007aa7 	.word	0x08007aa7
 80078cc:	20001c78 	.word	0x20001c78

080078d0 <stdio_exit_handler>:
 80078d0:	4a02      	ldr	r2, [pc, #8]	@ (80078dc <stdio_exit_handler+0xc>)
 80078d2:	4903      	ldr	r1, [pc, #12]	@ (80078e0 <stdio_exit_handler+0x10>)
 80078d4:	4803      	ldr	r0, [pc, #12]	@ (80078e4 <stdio_exit_handler+0x14>)
 80078d6:	f000 b869 	b.w	80079ac <_fwalk_sglue>
 80078da:	bf00      	nop
 80078dc:	20000010 	.word	0x20000010
 80078e0:	0800a485 	.word	0x0800a485
 80078e4:	20000020 	.word	0x20000020

080078e8 <cleanup_stdio>:
 80078e8:	6841      	ldr	r1, [r0, #4]
 80078ea:	4b0c      	ldr	r3, [pc, #48]	@ (800791c <cleanup_stdio+0x34>)
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4299      	cmp	r1, r3
 80078f0:	4604      	mov	r4, r0
 80078f2:	d001      	beq.n	80078f8 <cleanup_stdio+0x10>
 80078f4:	f002 fdc6 	bl	800a484 <_fflush_r>
 80078f8:	68a1      	ldr	r1, [r4, #8]
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <cleanup_stdio+0x38>)
 80078fc:	4299      	cmp	r1, r3
 80078fe:	d002      	beq.n	8007906 <cleanup_stdio+0x1e>
 8007900:	4620      	mov	r0, r4
 8007902:	f002 fdbf 	bl	800a484 <_fflush_r>
 8007906:	68e1      	ldr	r1, [r4, #12]
 8007908:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <cleanup_stdio+0x3c>)
 800790a:	4299      	cmp	r1, r3
 800790c:	d004      	beq.n	8007918 <cleanup_stdio+0x30>
 800790e:	4620      	mov	r0, r4
 8007910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007914:	f002 bdb6 	b.w	800a484 <_fflush_r>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	bf00      	nop
 800791c:	20001c78 	.word	0x20001c78
 8007920:	20001ce0 	.word	0x20001ce0
 8007924:	20001d48 	.word	0x20001d48

08007928 <global_stdio_init.part.0>:
 8007928:	b510      	push	{r4, lr}
 800792a:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <global_stdio_init.part.0+0x30>)
 800792c:	4c0b      	ldr	r4, [pc, #44]	@ (800795c <global_stdio_init.part.0+0x34>)
 800792e:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <global_stdio_init.part.0+0x38>)
 8007930:	4620      	mov	r0, r4
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	2104      	movs	r1, #4
 8007936:	2200      	movs	r2, #0
 8007938:	f7ff ff94 	bl	8007864 <std>
 800793c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007940:	2201      	movs	r2, #1
 8007942:	2109      	movs	r1, #9
 8007944:	f7ff ff8e 	bl	8007864 <std>
 8007948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800794c:	2202      	movs	r2, #2
 800794e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007952:	2112      	movs	r1, #18
 8007954:	f7ff bf86 	b.w	8007864 <std>
 8007958:	20001db0 	.word	0x20001db0
 800795c:	20001c78 	.word	0x20001c78
 8007960:	080078d1 	.word	0x080078d1

08007964 <__sfp_lock_acquire>:
 8007964:	4801      	ldr	r0, [pc, #4]	@ (800796c <__sfp_lock_acquire+0x8>)
 8007966:	f000 b920 	b.w	8007baa <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	20001db9 	.word	0x20001db9

08007970 <__sfp_lock_release>:
 8007970:	4801      	ldr	r0, [pc, #4]	@ (8007978 <__sfp_lock_release+0x8>)
 8007972:	f000 b91b 	b.w	8007bac <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	20001db9 	.word	0x20001db9

0800797c <__sinit>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	f7ff fff0 	bl	8007964 <__sfp_lock_acquire>
 8007984:	6a23      	ldr	r3, [r4, #32]
 8007986:	b11b      	cbz	r3, 8007990 <__sinit+0x14>
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f7ff bff0 	b.w	8007970 <__sfp_lock_release>
 8007990:	4b04      	ldr	r3, [pc, #16]	@ (80079a4 <__sinit+0x28>)
 8007992:	6223      	str	r3, [r4, #32]
 8007994:	4b04      	ldr	r3, [pc, #16]	@ (80079a8 <__sinit+0x2c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1f5      	bne.n	8007988 <__sinit+0xc>
 800799c:	f7ff ffc4 	bl	8007928 <global_stdio_init.part.0>
 80079a0:	e7f2      	b.n	8007988 <__sinit+0xc>
 80079a2:	bf00      	nop
 80079a4:	080078e9 	.word	0x080078e9
 80079a8:	20001db0 	.word	0x20001db0

080079ac <_fwalk_sglue>:
 80079ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	4607      	mov	r7, r0
 80079b2:	4688      	mov	r8, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	2600      	movs	r6, #0
 80079b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079bc:	f1b9 0901 	subs.w	r9, r9, #1
 80079c0:	d505      	bpl.n	80079ce <_fwalk_sglue+0x22>
 80079c2:	6824      	ldr	r4, [r4, #0]
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d1f7      	bne.n	80079b8 <_fwalk_sglue+0xc>
 80079c8:	4630      	mov	r0, r6
 80079ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d907      	bls.n	80079e4 <_fwalk_sglue+0x38>
 80079d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079d8:	3301      	adds	r3, #1
 80079da:	d003      	beq.n	80079e4 <_fwalk_sglue+0x38>
 80079dc:	4629      	mov	r1, r5
 80079de:	4638      	mov	r0, r7
 80079e0:	47c0      	blx	r8
 80079e2:	4306      	orrs	r6, r0
 80079e4:	3568      	adds	r5, #104	@ 0x68
 80079e6:	e7e9      	b.n	80079bc <_fwalk_sglue+0x10>

080079e8 <siprintf>:
 80079e8:	b40e      	push	{r1, r2, r3}
 80079ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079ee:	b500      	push	{lr}
 80079f0:	b09c      	sub	sp, #112	@ 0x70
 80079f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	9006      	str	r0, [sp, #24]
 80079f8:	9107      	str	r1, [sp, #28]
 80079fa:	9104      	str	r1, [sp, #16]
 80079fc:	4808      	ldr	r0, [pc, #32]	@ (8007a20 <siprintf+0x38>)
 80079fe:	4909      	ldr	r1, [pc, #36]	@ (8007a24 <siprintf+0x3c>)
 8007a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	a902      	add	r1, sp, #8
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f002 fbbe 	bl	800a18c <_svfiprintf_r>
 8007a10:	2200      	movs	r2, #0
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	b01c      	add	sp, #112	@ 0x70
 8007a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a1c:	b003      	add	sp, #12
 8007a1e:	4770      	bx	lr
 8007a20:	2000001c 	.word	0x2000001c
 8007a24:	ffff0208 	.word	0xffff0208

08007a28 <__sread>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	f000 f86c 	bl	8007b0c <_read_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	bfab      	itete	ge
 8007a38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a3c:	181b      	addge	r3, r3, r0
 8007a3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a42:	bfac      	ite	ge
 8007a44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a46:	81a3      	strhlt	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__swrite>:
 8007a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	461f      	mov	r7, r3
 8007a50:	898b      	ldrh	r3, [r1, #12]
 8007a52:	4605      	mov	r5, r0
 8007a54:	05db      	lsls	r3, r3, #23
 8007a56:	460c      	mov	r4, r1
 8007a58:	4616      	mov	r6, r2
 8007a5a:	d505      	bpl.n	8007a68 <__swrite+0x1e>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	f000 f840 	bl	8007ae8 <_lseek_r>
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	4628      	mov	r0, r5
 8007a74:	463b      	mov	r3, r7
 8007a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	f000 b857 	b.w	8007b30 <_write_r>

08007a82 <__sseek>:
 8007a82:	b510      	push	{r4, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 f82d 	bl	8007ae8 <_lseek_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	bf15      	itete	ne
 8007a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a9e:	81a3      	strheq	r3, [r4, #12]
 8007aa0:	bf18      	it	ne
 8007aa2:	81a3      	strhne	r3, [r4, #12]
 8007aa4:	bd10      	pop	{r4, pc}

08007aa6 <__sclose>:
 8007aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aaa:	f000 b80d 	b.w	8007ac8 <_close_r>

08007aae <memset>:
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d100      	bne.n	8007ab8 <memset+0xa>
 8007ab6:	4770      	bx	lr
 8007ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8007abc:	e7f9      	b.n	8007ab2 <memset+0x4>
	...

08007ac0 <_localeconv_r>:
 8007ac0:	4800      	ldr	r0, [pc, #0]	@ (8007ac4 <_localeconv_r+0x4>)
 8007ac2:	4770      	bx	lr
 8007ac4:	2000015c 	.word	0x2000015c

08007ac8 <_close_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	2300      	movs	r3, #0
 8007acc:	4d05      	ldr	r5, [pc, #20]	@ (8007ae4 <_close_r+0x1c>)
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7f9 ff6d 	bl	80019b2 <_close>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_close_r+0x1a>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_close_r+0x1a>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20001db4 	.word	0x20001db4

08007ae8 <_lseek_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	2200      	movs	r2, #0
 8007af2:	4d05      	ldr	r5, [pc, #20]	@ (8007b08 <_lseek_r+0x20>)
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7f9 ff7f 	bl	80019fa <_lseek>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_lseek_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_lseek_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20001db4 	.word	0x20001db4

08007b0c <_read_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	2200      	movs	r2, #0
 8007b16:	4d05      	ldr	r5, [pc, #20]	@ (8007b2c <_read_r+0x20>)
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f7f9 ff10 	bl	8001940 <_read>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_read_r+0x1e>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_read_r+0x1e>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20001db4 	.word	0x20001db4

08007b30 <_write_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4d05      	ldr	r5, [pc, #20]	@ (8007b50 <_write_r+0x20>)
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7f9 ff1b 	bl	800197a <_write>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_write_r+0x1e>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_write_r+0x1e>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20001db4 	.word	0x20001db4

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	@ (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000001c 	.word	0x2000001c

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	2600      	movs	r6, #0
 8007b64:	4d0c      	ldr	r5, [pc, #48]	@ (8007b98 <__libc_init_array+0x38>)
 8007b66:	4c0d      	ldr	r4, [pc, #52]	@ (8007b9c <__libc_init_array+0x3c>)
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	f003 fb66 	bl	800b240 <_init>
 8007b74:	2600      	movs	r6, #0
 8007b76:	4d0a      	ldr	r5, [pc, #40]	@ (8007ba0 <__libc_init_array+0x40>)
 8007b78:	4c0a      	ldr	r4, [pc, #40]	@ (8007ba4 <__libc_init_array+0x44>)
 8007b7a:	1b64      	subs	r4, r4, r5
 8007b7c:	10a4      	asrs	r4, r4, #2
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	0800b738 	.word	0x0800b738
 8007b9c:	0800b738 	.word	0x0800b738
 8007ba0:	0800b738 	.word	0x0800b738
 8007ba4:	0800b73c 	.word	0x0800b73c

08007ba8 <__retarget_lock_init_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <__retarget_lock_acquire_recursive>:
 8007baa:	4770      	bx	lr

08007bac <__retarget_lock_release_recursive>:
 8007bac:	4770      	bx	lr

08007bae <memchr>:
 8007bae:	4603      	mov	r3, r0
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	b2c9      	uxtb	r1, r1
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	d101      	bne.n	8007bc0 <memchr+0x12>
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	e003      	b.n	8007bc8 <memchr+0x1a>
 8007bc0:	7804      	ldrb	r4, [r0, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	428c      	cmp	r4, r1
 8007bc6:	d1f6      	bne.n	8007bb6 <memchr+0x8>
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <memcpy>:
 8007bca:	440a      	add	r2, r1
 8007bcc:	4291      	cmp	r1, r2
 8007bce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007bd2:	d100      	bne.n	8007bd6 <memcpy+0xc>
 8007bd4:	4770      	bx	lr
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bdc:	4291      	cmp	r1, r2
 8007bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be2:	d1f9      	bne.n	8007bd8 <memcpy+0xe>
 8007be4:	bd10      	pop	{r4, pc}
	...

08007be8 <nanf>:
 8007be8:	4800      	ldr	r0, [pc, #0]	@ (8007bec <nanf+0x4>)
 8007bea:	4770      	bx	lr
 8007bec:	7fc00000 	.word	0x7fc00000

08007bf0 <quorem>:
 8007bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	6903      	ldr	r3, [r0, #16]
 8007bf6:	690c      	ldr	r4, [r1, #16]
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	42a3      	cmp	r3, r4
 8007bfc:	db7e      	blt.n	8007cfc <quorem+0x10c>
 8007bfe:	3c01      	subs	r4, #1
 8007c00:	00a3      	lsls	r3, r4, #2
 8007c02:	f100 0514 	add.w	r5, r0, #20
 8007c06:	f101 0814 	add.w	r8, r1, #20
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c26:	d32e      	bcc.n	8007c86 <quorem+0x96>
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	46c4      	mov	ip, r8
 8007c2e:	46ae      	mov	lr, r5
 8007c30:	46d3      	mov	fp, sl
 8007c32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c36:	b298      	uxth	r0, r3
 8007c38:	fb06 a000 	mla	r0, r6, r0, sl
 8007c3c:	0c1b      	lsrs	r3, r3, #16
 8007c3e:	0c02      	lsrs	r2, r0, #16
 8007c40:	fb06 2303 	mla	r3, r6, r3, r2
 8007c44:	f8de 2000 	ldr.w	r2, [lr]
 8007c48:	b280      	uxth	r0, r0
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	1a12      	subs	r2, r2, r0
 8007c4e:	445a      	add	r2, fp
 8007c50:	f8de 0000 	ldr.w	r0, [lr]
 8007c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c62:	b292      	uxth	r2, r2
 8007c64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c68:	45e1      	cmp	r9, ip
 8007c6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c6e:	f84e 2b04 	str.w	r2, [lr], #4
 8007c72:	d2de      	bcs.n	8007c32 <quorem+0x42>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	58eb      	ldr	r3, [r5, r3]
 8007c78:	b92b      	cbnz	r3, 8007c86 <quorem+0x96>
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	d32f      	bcc.n	8007ce4 <quorem+0xf4>
 8007c84:	613c      	str	r4, [r7, #16]
 8007c86:	4638      	mov	r0, r7
 8007c88:	f001 f9c2 	bl	8009010 <__mcmp>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	db25      	blt.n	8007cdc <quorem+0xec>
 8007c90:	4629      	mov	r1, r5
 8007c92:	2000      	movs	r0, #0
 8007c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c98:	f8d1 c000 	ldr.w	ip, [r1]
 8007c9c:	fa1f fe82 	uxth.w	lr, r2
 8007ca0:	fa1f f38c 	uxth.w	r3, ip
 8007ca4:	eba3 030e 	sub.w	r3, r3, lr
 8007ca8:	4403      	add	r3, r0
 8007caa:	0c12      	lsrs	r2, r2, #16
 8007cac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cba:	45c1      	cmp	r9, r8
 8007cbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cc0:	f841 3b04 	str.w	r3, [r1], #4
 8007cc4:	d2e6      	bcs.n	8007c94 <quorem+0xa4>
 8007cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cce:	b922      	cbnz	r2, 8007cda <quorem+0xea>
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	429d      	cmp	r5, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	d30b      	bcc.n	8007cf0 <quorem+0x100>
 8007cd8:	613c      	str	r4, [r7, #16]
 8007cda:	3601      	adds	r6, #1
 8007cdc:	4630      	mov	r0, r6
 8007cde:	b003      	add	sp, #12
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	6812      	ldr	r2, [r2, #0]
 8007ce6:	3b04      	subs	r3, #4
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	d1cb      	bne.n	8007c84 <quorem+0x94>
 8007cec:	3c01      	subs	r4, #1
 8007cee:	e7c6      	b.n	8007c7e <quorem+0x8e>
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d1ef      	bne.n	8007cd8 <quorem+0xe8>
 8007cf8:	3c01      	subs	r4, #1
 8007cfa:	e7ea      	b.n	8007cd2 <quorem+0xe2>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7ee      	b.n	8007cde <quorem+0xee>

08007d00 <_dtoa_r>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	4614      	mov	r4, r2
 8007d06:	461d      	mov	r5, r3
 8007d08:	69c7      	ldr	r7, [r0, #28]
 8007d0a:	b097      	sub	sp, #92	@ 0x5c
 8007d0c:	4683      	mov	fp, r0
 8007d0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007d12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007d14:	b97f      	cbnz	r7, 8007d36 <_dtoa_r+0x36>
 8007d16:	2010      	movs	r0, #16
 8007d18:	f000 fe02 	bl	8008920 <malloc>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d22:	b920      	cbnz	r0, 8007d2e <_dtoa_r+0x2e>
 8007d24:	21ef      	movs	r1, #239	@ 0xef
 8007d26:	4ba8      	ldr	r3, [pc, #672]	@ (8007fc8 <_dtoa_r+0x2c8>)
 8007d28:	48a8      	ldr	r0, [pc, #672]	@ (8007fcc <_dtoa_r+0x2cc>)
 8007d2a:	f002 fc15 	bl	800a558 <__assert_func>
 8007d2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d32:	6007      	str	r7, [r0, #0]
 8007d34:	60c7      	str	r7, [r0, #12]
 8007d36:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d3a:	6819      	ldr	r1, [r3, #0]
 8007d3c:	b159      	cbz	r1, 8007d56 <_dtoa_r+0x56>
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	2301      	movs	r3, #1
 8007d42:	4093      	lsls	r3, r2
 8007d44:	604a      	str	r2, [r1, #4]
 8007d46:	608b      	str	r3, [r1, #8]
 8007d48:	4658      	mov	r0, fp
 8007d4a:	f000 fedf 	bl	8008b0c <_Bfree>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	1e2b      	subs	r3, r5, #0
 8007d58:	bfaf      	iteee	ge
 8007d5a:	2300      	movge	r3, #0
 8007d5c:	2201      	movlt	r2, #1
 8007d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d62:	9303      	strlt	r3, [sp, #12]
 8007d64:	bfa8      	it	ge
 8007d66:	6033      	strge	r3, [r6, #0]
 8007d68:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d6c:	4b98      	ldr	r3, [pc, #608]	@ (8007fd0 <_dtoa_r+0x2d0>)
 8007d6e:	bfb8      	it	lt
 8007d70:	6032      	strlt	r2, [r6, #0]
 8007d72:	ea33 0308 	bics.w	r3, r3, r8
 8007d76:	d112      	bne.n	8007d9e <_dtoa_r+0x9e>
 8007d78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d84:	4323      	orrs	r3, r4
 8007d86:	f000 8550 	beq.w	800882a <_dtoa_r+0xb2a>
 8007d8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d8c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007fd4 <_dtoa_r+0x2d4>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 8552 	beq.w	800883a <_dtoa_r+0xb3a>
 8007d96:	f10a 0303 	add.w	r3, sl, #3
 8007d9a:	f000 bd4c 	b.w	8008836 <_dtoa_r+0xb36>
 8007d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007daa:	2200      	movs	r2, #0
 8007dac:	2300      	movs	r3, #0
 8007dae:	f7f8 fdfb 	bl	80009a8 <__aeabi_dcmpeq>
 8007db2:	4607      	mov	r7, r0
 8007db4:	b158      	cbz	r0, 8007dce <_dtoa_r+0xce>
 8007db6:	2301      	movs	r3, #1
 8007db8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007dbe:	b113      	cbz	r3, 8007dc6 <_dtoa_r+0xc6>
 8007dc0:	4b85      	ldr	r3, [pc, #532]	@ (8007fd8 <_dtoa_r+0x2d8>)
 8007dc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007fdc <_dtoa_r+0x2dc>
 8007dca:	f000 bd36 	b.w	800883a <_dtoa_r+0xb3a>
 8007dce:	ab14      	add	r3, sp, #80	@ 0x50
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	ab15      	add	r3, sp, #84	@ 0x54
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ddc:	f001 fa30 	bl	8009240 <__d2b>
 8007de0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007de4:	4681      	mov	r9, r0
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	d077      	beq.n	8007eda <_dtoa_r+0x1da>
 8007dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007dfc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e00:	9712      	str	r7, [sp, #72]	@ 0x48
 8007e02:	4619      	mov	r1, r3
 8007e04:	2200      	movs	r2, #0
 8007e06:	4b76      	ldr	r3, [pc, #472]	@ (8007fe0 <_dtoa_r+0x2e0>)
 8007e08:	f7f8 f9ae 	bl	8000168 <__aeabi_dsub>
 8007e0c:	a368      	add	r3, pc, #416	@ (adr r3, 8007fb0 <_dtoa_r+0x2b0>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 fb61 	bl	80004d8 <__aeabi_dmul>
 8007e16:	a368      	add	r3, pc, #416	@ (adr r3, 8007fb8 <_dtoa_r+0x2b8>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 f9a6 	bl	800016c <__adddf3>
 8007e20:	4604      	mov	r4, r0
 8007e22:	4630      	mov	r0, r6
 8007e24:	460d      	mov	r5, r1
 8007e26:	f7f8 faed 	bl	8000404 <__aeabi_i2d>
 8007e2a:	a365      	add	r3, pc, #404	@ (adr r3, 8007fc0 <_dtoa_r+0x2c0>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f7f8 fb52 	bl	80004d8 <__aeabi_dmul>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 f996 	bl	800016c <__adddf3>
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	f7f8 fdf8 	bl	8000a38 <__aeabi_d2iz>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fdb3 	bl	80009bc <__aeabi_dcmplt>
 8007e56:	b140      	cbz	r0, 8007e6a <_dtoa_r+0x16a>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7f8 fad3 	bl	8000404 <__aeabi_i2d>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8007e66:	b900      	cbnz	r0, 8007e6a <_dtoa_r+0x16a>
 8007e68:	3f01      	subs	r7, #1
 8007e6a:	2f16      	cmp	r7, #22
 8007e6c:	d853      	bhi.n	8007f16 <_dtoa_r+0x216>
 8007e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e72:	4b5c      	ldr	r3, [pc, #368]	@ (8007fe4 <_dtoa_r+0x2e4>)
 8007e74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 fd9e 	bl	80009bc <__aeabi_dcmplt>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d04a      	beq.n	8007f1a <_dtoa_r+0x21a>
 8007e84:	2300      	movs	r3, #0
 8007e86:	3f01      	subs	r7, #1
 8007e88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e8c:	1b9b      	subs	r3, r3, r6
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	bf46      	itte	mi
 8007e92:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e96:	2300      	movmi	r3, #0
 8007e98:	f04f 0800 	movpl.w	r8, #0
 8007e9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e9e:	bf48      	it	mi
 8007ea0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	db3b      	blt.n	8007f1e <_dtoa_r+0x21e>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007eaa:	443b      	add	r3, r7
 8007eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eae:	2300      	movs	r3, #0
 8007eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d866      	bhi.n	8007f86 <_dtoa_r+0x286>
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	bfc4      	itt	gt
 8007ebc:	3b04      	subgt	r3, #4
 8007ebe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007ec0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ec2:	bfc8      	it	gt
 8007ec4:	2400      	movgt	r4, #0
 8007ec6:	f1a3 0302 	sub.w	r3, r3, #2
 8007eca:	bfd8      	it	le
 8007ecc:	2401      	movle	r4, #1
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d864      	bhi.n	8007f9c <_dtoa_r+0x29c>
 8007ed2:	e8df f003 	tbb	[pc, r3]
 8007ed6:	382b      	.short	0x382b
 8007ed8:	5636      	.short	0x5636
 8007eda:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ede:	441e      	add	r6, r3
 8007ee0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	bfc1      	itttt	gt
 8007ee8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007eec:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ef0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ef4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ef8:	bfd6      	itet	le
 8007efa:	f1c3 0320 	rsble	r3, r3, #32
 8007efe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f02:	fa04 f003 	lslle.w	r0, r4, r3
 8007f06:	f7f8 fa6d 	bl	80003e4 <__aeabi_ui2d>
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f10:	3e01      	subs	r6, #1
 8007f12:	9212      	str	r2, [sp, #72]	@ 0x48
 8007f14:	e775      	b.n	8007e02 <_dtoa_r+0x102>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7b6      	b.n	8007e88 <_dtoa_r+0x188>
 8007f1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007f1c:	e7b5      	b.n	8007e8a <_dtoa_r+0x18a>
 8007f1e:	427b      	negs	r3, r7
 8007f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f22:	2300      	movs	r3, #0
 8007f24:	eba8 0807 	sub.w	r8, r8, r7
 8007f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f2a:	e7c2      	b.n	8007eb2 <_dtoa_r+0x1b2>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dc35      	bgt.n	8007fa2 <_dtoa_r+0x2a2>
 8007f36:	2301      	movs	r3, #1
 8007f38:	461a      	mov	r2, r3
 8007f3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007f40:	e00b      	b.n	8007f5a <_dtoa_r+0x25a>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e7f3      	b.n	8007f2e <_dtoa_r+0x22e>
 8007f46:	2300      	movs	r3, #0
 8007f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	9308      	str	r3, [sp, #32]
 8007f50:	3301      	adds	r3, #1
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	9307      	str	r3, [sp, #28]
 8007f56:	bfb8      	it	lt
 8007f58:	2301      	movlt	r3, #1
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f62:	f102 0514 	add.w	r5, r2, #20
 8007f66:	429d      	cmp	r5, r3
 8007f68:	d91f      	bls.n	8007faa <_dtoa_r+0x2aa>
 8007f6a:	6041      	str	r1, [r0, #4]
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fd8d 	bl	8008a8c <_Balloc>
 8007f72:	4682      	mov	sl, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d139      	bne.n	8007fec <_dtoa_r+0x2ec>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <_dtoa_r+0x2e8>)
 8007f80:	e6d2      	b.n	8007d28 <_dtoa_r+0x28>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e7e0      	b.n	8007f48 <_dtoa_r+0x248>
 8007f86:	2401      	movs	r4, #1
 8007f88:	2300      	movs	r3, #0
 8007f8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f92:	2200      	movs	r2, #0
 8007f94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f98:	2312      	movs	r3, #18
 8007f9a:	e7d0      	b.n	8007f3e <_dtoa_r+0x23e>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fa0:	e7f5      	b.n	8007f8e <_dtoa_r+0x28e>
 8007fa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007fa8:	e7d7      	b.n	8007f5a <_dtoa_r+0x25a>
 8007faa:	3101      	adds	r1, #1
 8007fac:	0052      	lsls	r2, r2, #1
 8007fae:	e7d8      	b.n	8007f62 <_dtoa_r+0x262>
 8007fb0:	636f4361 	.word	0x636f4361
 8007fb4:	3fd287a7 	.word	0x3fd287a7
 8007fb8:	8b60c8b3 	.word	0x8b60c8b3
 8007fbc:	3fc68a28 	.word	0x3fc68a28
 8007fc0:	509f79fb 	.word	0x509f79fb
 8007fc4:	3fd34413 	.word	0x3fd34413
 8007fc8:	0800b348 	.word	0x0800b348
 8007fcc:	0800b35f 	.word	0x0800b35f
 8007fd0:	7ff00000 	.word	0x7ff00000
 8007fd4:	0800b344 	.word	0x0800b344
 8007fd8:	0800b313 	.word	0x0800b313
 8007fdc:	0800b312 	.word	0x0800b312
 8007fe0:	3ff80000 	.word	0x3ff80000
 8007fe4:	0800b458 	.word	0x0800b458
 8007fe8:	0800b3b7 	.word	0x0800b3b7
 8007fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ff0:	6018      	str	r0, [r3, #0]
 8007ff2:	9b07      	ldr	r3, [sp, #28]
 8007ff4:	2b0e      	cmp	r3, #14
 8007ff6:	f200 80a4 	bhi.w	8008142 <_dtoa_r+0x442>
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	f000 80a1 	beq.w	8008142 <_dtoa_r+0x442>
 8008000:	2f00      	cmp	r7, #0
 8008002:	dd33      	ble.n	800806c <_dtoa_r+0x36c>
 8008004:	4b86      	ldr	r3, [pc, #536]	@ (8008220 <_dtoa_r+0x520>)
 8008006:	f007 020f 	and.w	r2, r7, #15
 800800a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800800e:	05f8      	lsls	r0, r7, #23
 8008010:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008014:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800801c:	d516      	bpl.n	800804c <_dtoa_r+0x34c>
 800801e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008022:	4b80      	ldr	r3, [pc, #512]	@ (8008224 <_dtoa_r+0x524>)
 8008024:	2603      	movs	r6, #3
 8008026:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800802a:	f7f8 fb7f 	bl	800072c <__aeabi_ddiv>
 800802e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008032:	f004 040f 	and.w	r4, r4, #15
 8008036:	4d7b      	ldr	r5, [pc, #492]	@ (8008224 <_dtoa_r+0x524>)
 8008038:	b954      	cbnz	r4, 8008050 <_dtoa_r+0x350>
 800803a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008042:	f7f8 fb73 	bl	800072c <__aeabi_ddiv>
 8008046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800804a:	e028      	b.n	800809e <_dtoa_r+0x39e>
 800804c:	2602      	movs	r6, #2
 800804e:	e7f2      	b.n	8008036 <_dtoa_r+0x336>
 8008050:	07e1      	lsls	r1, r4, #31
 8008052:	d508      	bpl.n	8008066 <_dtoa_r+0x366>
 8008054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800805c:	f7f8 fa3c 	bl	80004d8 <__aeabi_dmul>
 8008060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008064:	3601      	adds	r6, #1
 8008066:	1064      	asrs	r4, r4, #1
 8008068:	3508      	adds	r5, #8
 800806a:	e7e5      	b.n	8008038 <_dtoa_r+0x338>
 800806c:	f000 80d2 	beq.w	8008214 <_dtoa_r+0x514>
 8008070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008074:	427c      	negs	r4, r7
 8008076:	4b6a      	ldr	r3, [pc, #424]	@ (8008220 <_dtoa_r+0x520>)
 8008078:	f004 020f 	and.w	r2, r4, #15
 800807c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fa28 	bl	80004d8 <__aeabi_dmul>
 8008088:	2602      	movs	r6, #2
 800808a:	2300      	movs	r3, #0
 800808c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008090:	4d64      	ldr	r5, [pc, #400]	@ (8008224 <_dtoa_r+0x524>)
 8008092:	1124      	asrs	r4, r4, #4
 8008094:	2c00      	cmp	r4, #0
 8008096:	f040 80b2 	bne.w	80081fe <_dtoa_r+0x4fe>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1d3      	bne.n	8008046 <_dtoa_r+0x346>
 800809e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80b7 	beq.w	8008218 <_dtoa_r+0x518>
 80080aa:	2200      	movs	r2, #0
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008228 <_dtoa_r+0x528>)
 80080b2:	f7f8 fc83 	bl	80009bc <__aeabi_dcmplt>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f000 80ae 	beq.w	8008218 <_dtoa_r+0x518>
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80aa 	beq.w	8008218 <_dtoa_r+0x518>
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd37      	ble.n	800813a <_dtoa_r+0x43a>
 80080ca:	1e7b      	subs	r3, r7, #1
 80080cc:	4620      	mov	r0, r4
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	2200      	movs	r2, #0
 80080d2:	4629      	mov	r1, r5
 80080d4:	4b55      	ldr	r3, [pc, #340]	@ (800822c <_dtoa_r+0x52c>)
 80080d6:	f7f8 f9ff 	bl	80004d8 <__aeabi_dmul>
 80080da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080de:	9c08      	ldr	r4, [sp, #32]
 80080e0:	3601      	adds	r6, #1
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7f8 f98e 	bl	8000404 <__aeabi_i2d>
 80080e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ec:	f7f8 f9f4 	bl	80004d8 <__aeabi_dmul>
 80080f0:	2200      	movs	r2, #0
 80080f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008230 <_dtoa_r+0x530>)
 80080f4:	f7f8 f83a 	bl	800016c <__adddf3>
 80080f8:	4605      	mov	r5, r0
 80080fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080fe:	2c00      	cmp	r4, #0
 8008100:	f040 809a 	bne.w	8008238 <_dtoa_r+0x538>
 8008104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	4b4a      	ldr	r3, [pc, #296]	@ (8008234 <_dtoa_r+0x534>)
 800810c:	f7f8 f82c 	bl	8000168 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008118:	462a      	mov	r2, r5
 800811a:	4633      	mov	r3, r6
 800811c:	f7f8 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8008120:	2800      	cmp	r0, #0
 8008122:	f040 828e 	bne.w	8008642 <_dtoa_r+0x942>
 8008126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800812a:	462a      	mov	r2, r5
 800812c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008130:	f7f8 fc44 	bl	80009bc <__aeabi_dcmplt>
 8008134:	2800      	cmp	r0, #0
 8008136:	f040 8127 	bne.w	8008388 <_dtoa_r+0x688>
 800813a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800813e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008142:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008144:	2b00      	cmp	r3, #0
 8008146:	f2c0 8163 	blt.w	8008410 <_dtoa_r+0x710>
 800814a:	2f0e      	cmp	r7, #14
 800814c:	f300 8160 	bgt.w	8008410 <_dtoa_r+0x710>
 8008150:	4b33      	ldr	r3, [pc, #204]	@ (8008220 <_dtoa_r+0x520>)
 8008152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800815a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800815e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008160:	2b00      	cmp	r3, #0
 8008162:	da03      	bge.n	800816c <_dtoa_r+0x46c>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f340 8100 	ble.w	800836c <_dtoa_r+0x66c>
 800816c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008170:	4656      	mov	r6, sl
 8008172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fad7 	bl	800072c <__aeabi_ddiv>
 800817e:	f7f8 fc5b 	bl	8000a38 <__aeabi_d2iz>
 8008182:	4680      	mov	r8, r0
 8008184:	f7f8 f93e 	bl	8000404 <__aeabi_i2d>
 8008188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800818c:	f7f8 f9a4 	bl	80004d8 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f7 ffe6 	bl	8000168 <__aeabi_dsub>
 800819c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081a0:	9d07      	ldr	r5, [sp, #28]
 80081a2:	f806 4b01 	strb.w	r4, [r6], #1
 80081a6:	eba6 040a 	sub.w	r4, r6, sl
 80081aa:	42a5      	cmp	r5, r4
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	f040 8116 	bne.w	80083e0 <_dtoa_r+0x6e0>
 80081b4:	f7f7 ffda 	bl	800016c <__adddf3>
 80081b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	f7f8 fc1a 	bl	80009f8 <__aeabi_dcmpgt>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f040 80f8 	bne.w	80083ba <_dtoa_r+0x6ba>
 80081ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80081d6:	b118      	cbz	r0, 80081e0 <_dtoa_r+0x4e0>
 80081d8:	f018 0f01 	tst.w	r8, #1
 80081dc:	f040 80ed 	bne.w	80083ba <_dtoa_r+0x6ba>
 80081e0:	4649      	mov	r1, r9
 80081e2:	4658      	mov	r0, fp
 80081e4:	f000 fc92 	bl	8008b0c <_Bfree>
 80081e8:	2300      	movs	r3, #0
 80081ea:	7033      	strb	r3, [r6, #0]
 80081ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80081ee:	3701      	adds	r7, #1
 80081f0:	601f      	str	r7, [r3, #0]
 80081f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8320 	beq.w	800883a <_dtoa_r+0xb3a>
 80081fa:	601e      	str	r6, [r3, #0]
 80081fc:	e31d      	b.n	800883a <_dtoa_r+0xb3a>
 80081fe:	07e2      	lsls	r2, r4, #31
 8008200:	d505      	bpl.n	800820e <_dtoa_r+0x50e>
 8008202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008206:	f7f8 f967 	bl	80004d8 <__aeabi_dmul>
 800820a:	2301      	movs	r3, #1
 800820c:	3601      	adds	r6, #1
 800820e:	1064      	asrs	r4, r4, #1
 8008210:	3508      	adds	r5, #8
 8008212:	e73f      	b.n	8008094 <_dtoa_r+0x394>
 8008214:	2602      	movs	r6, #2
 8008216:	e742      	b.n	800809e <_dtoa_r+0x39e>
 8008218:	9c07      	ldr	r4, [sp, #28]
 800821a:	9704      	str	r7, [sp, #16]
 800821c:	e761      	b.n	80080e2 <_dtoa_r+0x3e2>
 800821e:	bf00      	nop
 8008220:	0800b458 	.word	0x0800b458
 8008224:	0800b430 	.word	0x0800b430
 8008228:	3ff00000 	.word	0x3ff00000
 800822c:	40240000 	.word	0x40240000
 8008230:	401c0000 	.word	0x401c0000
 8008234:	40140000 	.word	0x40140000
 8008238:	4b70      	ldr	r3, [pc, #448]	@ (80083fc <_dtoa_r+0x6fc>)
 800823a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800823c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008244:	4454      	add	r4, sl
 8008246:	2900      	cmp	r1, #0
 8008248:	d045      	beq.n	80082d6 <_dtoa_r+0x5d6>
 800824a:	2000      	movs	r0, #0
 800824c:	496c      	ldr	r1, [pc, #432]	@ (8008400 <_dtoa_r+0x700>)
 800824e:	f7f8 fa6d 	bl	800072c <__aeabi_ddiv>
 8008252:	4633      	mov	r3, r6
 8008254:	462a      	mov	r2, r5
 8008256:	f7f7 ff87 	bl	8000168 <__aeabi_dsub>
 800825a:	4656      	mov	r6, sl
 800825c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008264:	f7f8 fbe8 	bl	8000a38 <__aeabi_d2iz>
 8008268:	4605      	mov	r5, r0
 800826a:	f7f8 f8cb 	bl	8000404 <__aeabi_i2d>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008276:	f7f7 ff77 	bl	8000168 <__aeabi_dsub>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	3530      	adds	r5, #48	@ 0x30
 8008280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008288:	f806 5b01 	strb.w	r5, [r6], #1
 800828c:	f7f8 fb96 	bl	80009bc <__aeabi_dcmplt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d163      	bne.n	800835c <_dtoa_r+0x65c>
 8008294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008298:	2000      	movs	r0, #0
 800829a:	495a      	ldr	r1, [pc, #360]	@ (8008404 <_dtoa_r+0x704>)
 800829c:	f7f7 ff64 	bl	8000168 <__aeabi_dsub>
 80082a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082a4:	f7f8 fb8a 	bl	80009bc <__aeabi_dcmplt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f040 8087 	bne.w	80083bc <_dtoa_r+0x6bc>
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	f43f af43 	beq.w	800813a <_dtoa_r+0x43a>
 80082b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082b8:	2200      	movs	r2, #0
 80082ba:	4b53      	ldr	r3, [pc, #332]	@ (8008408 <_dtoa_r+0x708>)
 80082bc:	f7f8 f90c 	bl	80004d8 <__aeabi_dmul>
 80082c0:	2200      	movs	r2, #0
 80082c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008408 <_dtoa_r+0x708>)
 80082cc:	f7f8 f904 	bl	80004d8 <__aeabi_dmul>
 80082d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d4:	e7c4      	b.n	8008260 <_dtoa_r+0x560>
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	f7f8 f8fd 	bl	80004d8 <__aeabi_dmul>
 80082de:	4656      	mov	r6, sl
 80082e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80082e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ea:	f7f8 fba5 	bl	8000a38 <__aeabi_d2iz>
 80082ee:	4605      	mov	r5, r0
 80082f0:	f7f8 f888 	bl	8000404 <__aeabi_i2d>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fc:	f7f7 ff34 	bl	8000168 <__aeabi_dsub>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	3530      	adds	r5, #48	@ 0x30
 8008306:	f806 5b01 	strb.w	r5, [r6], #1
 800830a:	42a6      	cmp	r6, r4
 800830c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	d124      	bne.n	8008360 <_dtoa_r+0x660>
 8008316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800831a:	4b39      	ldr	r3, [pc, #228]	@ (8008400 <_dtoa_r+0x700>)
 800831c:	f7f7 ff26 	bl	800016c <__adddf3>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008328:	f7f8 fb66 	bl	80009f8 <__aeabi_dcmpgt>
 800832c:	2800      	cmp	r0, #0
 800832e:	d145      	bne.n	80083bc <_dtoa_r+0x6bc>
 8008330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008334:	2000      	movs	r0, #0
 8008336:	4932      	ldr	r1, [pc, #200]	@ (8008400 <_dtoa_r+0x700>)
 8008338:	f7f7 ff16 	bl	8000168 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008344:	f7f8 fb3a 	bl	80009bc <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f43f aef6 	beq.w	800813a <_dtoa_r+0x43a>
 800834e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008350:	1e73      	subs	r3, r6, #1
 8008352:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008358:	2b30      	cmp	r3, #48	@ 0x30
 800835a:	d0f8      	beq.n	800834e <_dtoa_r+0x64e>
 800835c:	9f04      	ldr	r7, [sp, #16]
 800835e:	e73f      	b.n	80081e0 <_dtoa_r+0x4e0>
 8008360:	4b29      	ldr	r3, [pc, #164]	@ (8008408 <_dtoa_r+0x708>)
 8008362:	f7f8 f8b9 	bl	80004d8 <__aeabi_dmul>
 8008366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836a:	e7bc      	b.n	80082e6 <_dtoa_r+0x5e6>
 800836c:	d10c      	bne.n	8008388 <_dtoa_r+0x688>
 800836e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008372:	2200      	movs	r2, #0
 8008374:	4b25      	ldr	r3, [pc, #148]	@ (800840c <_dtoa_r+0x70c>)
 8008376:	f7f8 f8af 	bl	80004d8 <__aeabi_dmul>
 800837a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800837e:	f7f8 fb31 	bl	80009e4 <__aeabi_dcmpge>
 8008382:	2800      	cmp	r0, #0
 8008384:	f000 815b 	beq.w	800863e <_dtoa_r+0x93e>
 8008388:	2400      	movs	r4, #0
 800838a:	4625      	mov	r5, r4
 800838c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800838e:	4656      	mov	r6, sl
 8008390:	43db      	mvns	r3, r3
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	2700      	movs	r7, #0
 8008396:	4621      	mov	r1, r4
 8008398:	4658      	mov	r0, fp
 800839a:	f000 fbb7 	bl	8008b0c <_Bfree>
 800839e:	2d00      	cmp	r5, #0
 80083a0:	d0dc      	beq.n	800835c <_dtoa_r+0x65c>
 80083a2:	b12f      	cbz	r7, 80083b0 <_dtoa_r+0x6b0>
 80083a4:	42af      	cmp	r7, r5
 80083a6:	d003      	beq.n	80083b0 <_dtoa_r+0x6b0>
 80083a8:	4639      	mov	r1, r7
 80083aa:	4658      	mov	r0, fp
 80083ac:	f000 fbae 	bl	8008b0c <_Bfree>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4658      	mov	r0, fp
 80083b4:	f000 fbaa 	bl	8008b0c <_Bfree>
 80083b8:	e7d0      	b.n	800835c <_dtoa_r+0x65c>
 80083ba:	9704      	str	r7, [sp, #16]
 80083bc:	4633      	mov	r3, r6
 80083be:	461e      	mov	r6, r3
 80083c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c4:	2a39      	cmp	r2, #57	@ 0x39
 80083c6:	d107      	bne.n	80083d8 <_dtoa_r+0x6d8>
 80083c8:	459a      	cmp	sl, r3
 80083ca:	d1f8      	bne.n	80083be <_dtoa_r+0x6be>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	3201      	adds	r2, #1
 80083d0:	9204      	str	r2, [sp, #16]
 80083d2:	2230      	movs	r2, #48	@ 0x30
 80083d4:	f88a 2000 	strb.w	r2, [sl]
 80083d8:	781a      	ldrb	r2, [r3, #0]
 80083da:	3201      	adds	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e7bd      	b.n	800835c <_dtoa_r+0x65c>
 80083e0:	2200      	movs	r2, #0
 80083e2:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <_dtoa_r+0x708>)
 80083e4:	f7f8 f878 	bl	80004d8 <__aeabi_dmul>
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	4604      	mov	r4, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	f7f8 fada 	bl	80009a8 <__aeabi_dcmpeq>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f aebc 	beq.w	8008172 <_dtoa_r+0x472>
 80083fa:	e6f1      	b.n	80081e0 <_dtoa_r+0x4e0>
 80083fc:	0800b458 	.word	0x0800b458
 8008400:	3fe00000 	.word	0x3fe00000
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40240000 	.word	0x40240000
 800840c:	40140000 	.word	0x40140000
 8008410:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008412:	2a00      	cmp	r2, #0
 8008414:	f000 80db 	beq.w	80085ce <_dtoa_r+0x8ce>
 8008418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800841a:	2a01      	cmp	r2, #1
 800841c:	f300 80bf 	bgt.w	800859e <_dtoa_r+0x89e>
 8008420:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008422:	2a00      	cmp	r2, #0
 8008424:	f000 80b7 	beq.w	8008596 <_dtoa_r+0x896>
 8008428:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800842c:	4646      	mov	r6, r8
 800842e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008432:	2101      	movs	r1, #1
 8008434:	441a      	add	r2, r3
 8008436:	4658      	mov	r0, fp
 8008438:	4498      	add	r8, r3
 800843a:	9209      	str	r2, [sp, #36]	@ 0x24
 800843c:	f000 fc64 	bl	8008d08 <__i2b>
 8008440:	4605      	mov	r5, r0
 8008442:	b15e      	cbz	r6, 800845c <_dtoa_r+0x75c>
 8008444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd08      	ble.n	800845c <_dtoa_r+0x75c>
 800844a:	42b3      	cmp	r3, r6
 800844c:	bfa8      	it	ge
 800844e:	4633      	movge	r3, r6
 8008450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008452:	eba8 0803 	sub.w	r8, r8, r3
 8008456:	1af6      	subs	r6, r6, r3
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	9309      	str	r3, [sp, #36]	@ 0x24
 800845c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800845e:	b1f3      	cbz	r3, 800849e <_dtoa_r+0x79e>
 8008460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80b7 	beq.w	80085d6 <_dtoa_r+0x8d6>
 8008468:	b18c      	cbz	r4, 800848e <_dtoa_r+0x78e>
 800846a:	4629      	mov	r1, r5
 800846c:	4622      	mov	r2, r4
 800846e:	4658      	mov	r0, fp
 8008470:	f000 fd08 	bl	8008e84 <__pow5mult>
 8008474:	464a      	mov	r2, r9
 8008476:	4601      	mov	r1, r0
 8008478:	4605      	mov	r5, r0
 800847a:	4658      	mov	r0, fp
 800847c:	f000 fc5a 	bl	8008d34 <__multiply>
 8008480:	4649      	mov	r1, r9
 8008482:	9004      	str	r0, [sp, #16]
 8008484:	4658      	mov	r0, fp
 8008486:	f000 fb41 	bl	8008b0c <_Bfree>
 800848a:	9b04      	ldr	r3, [sp, #16]
 800848c:	4699      	mov	r9, r3
 800848e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008490:	1b1a      	subs	r2, r3, r4
 8008492:	d004      	beq.n	800849e <_dtoa_r+0x79e>
 8008494:	4649      	mov	r1, r9
 8008496:	4658      	mov	r0, fp
 8008498:	f000 fcf4 	bl	8008e84 <__pow5mult>
 800849c:	4681      	mov	r9, r0
 800849e:	2101      	movs	r1, #1
 80084a0:	4658      	mov	r0, fp
 80084a2:	f000 fc31 	bl	8008d08 <__i2b>
 80084a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a8:	4604      	mov	r4, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 81c9 	beq.w	8008842 <_dtoa_r+0xb42>
 80084b0:	461a      	mov	r2, r3
 80084b2:	4601      	mov	r1, r0
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 fce5 	bl	8008e84 <__pow5mult>
 80084ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084bc:	4604      	mov	r4, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	f300 808f 	bgt.w	80085e2 <_dtoa_r+0x8e2>
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 8087 	bne.w	80085da <_dtoa_r+0x8da>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 8083 	bne.w	80085de <_dtoa_r+0x8de>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084de:	0d1b      	lsrs	r3, r3, #20
 80084e0:	051b      	lsls	r3, r3, #20
 80084e2:	b12b      	cbz	r3, 80084f0 <_dtoa_r+0x7f0>
 80084e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e6:	f108 0801 	add.w	r8, r8, #1
 80084ea:	3301      	adds	r3, #1
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	2301      	movs	r3, #1
 80084f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80084f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 81aa 	beq.w	800884e <_dtoa_r+0xb4e>
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008500:	6918      	ldr	r0, [r3, #16]
 8008502:	f000 fbb5 	bl	8008c70 <__hi0bits>
 8008506:	f1c0 0020 	rsb	r0, r0, #32
 800850a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800850c:	4418      	add	r0, r3
 800850e:	f010 001f 	ands.w	r0, r0, #31
 8008512:	d071      	beq.n	80085f8 <_dtoa_r+0x8f8>
 8008514:	f1c0 0320 	rsb	r3, r0, #32
 8008518:	2b04      	cmp	r3, #4
 800851a:	dd65      	ble.n	80085e8 <_dtoa_r+0x8e8>
 800851c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851e:	f1c0 001c 	rsb	r0, r0, #28
 8008522:	4403      	add	r3, r0
 8008524:	4480      	add	r8, r0
 8008526:	4406      	add	r6, r0
 8008528:	9309      	str	r3, [sp, #36]	@ 0x24
 800852a:	f1b8 0f00 	cmp.w	r8, #0
 800852e:	dd05      	ble.n	800853c <_dtoa_r+0x83c>
 8008530:	4649      	mov	r1, r9
 8008532:	4642      	mov	r2, r8
 8008534:	4658      	mov	r0, fp
 8008536:	f000 fcff 	bl	8008f38 <__lshift>
 800853a:	4681      	mov	r9, r0
 800853c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	dd05      	ble.n	800854e <_dtoa_r+0x84e>
 8008542:	4621      	mov	r1, r4
 8008544:	461a      	mov	r2, r3
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fcf6 	bl	8008f38 <__lshift>
 800854c:	4604      	mov	r4, r0
 800854e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d053      	beq.n	80085fc <_dtoa_r+0x8fc>
 8008554:	4621      	mov	r1, r4
 8008556:	4648      	mov	r0, r9
 8008558:	f000 fd5a 	bl	8009010 <__mcmp>
 800855c:	2800      	cmp	r0, #0
 800855e:	da4d      	bge.n	80085fc <_dtoa_r+0x8fc>
 8008560:	1e7b      	subs	r3, r7, #1
 8008562:	4649      	mov	r1, r9
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	220a      	movs	r2, #10
 8008568:	2300      	movs	r3, #0
 800856a:	4658      	mov	r0, fp
 800856c:	f000 faf0 	bl	8008b50 <__multadd>
 8008570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008572:	4681      	mov	r9, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 816c 	beq.w	8008852 <_dtoa_r+0xb52>
 800857a:	2300      	movs	r3, #0
 800857c:	4629      	mov	r1, r5
 800857e:	220a      	movs	r2, #10
 8008580:	4658      	mov	r0, fp
 8008582:	f000 fae5 	bl	8008b50 <__multadd>
 8008586:	9b08      	ldr	r3, [sp, #32]
 8008588:	4605      	mov	r5, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc61      	bgt.n	8008652 <_dtoa_r+0x952>
 800858e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008590:	2b02      	cmp	r3, #2
 8008592:	dc3b      	bgt.n	800860c <_dtoa_r+0x90c>
 8008594:	e05d      	b.n	8008652 <_dtoa_r+0x952>
 8008596:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008598:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800859c:	e746      	b.n	800842c <_dtoa_r+0x72c>
 800859e:	9b07      	ldr	r3, [sp, #28]
 80085a0:	1e5c      	subs	r4, r3, #1
 80085a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	bfbf      	itttt	lt
 80085a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80085ac:	1ae3      	sublt	r3, r4, r3
 80085ae:	18d2      	addlt	r2, r2, r3
 80085b0:	bfa8      	it	ge
 80085b2:	1b1c      	subge	r4, r3, r4
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	bfbe      	ittt	lt
 80085b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80085bc:	2400      	movlt	r4, #0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfb5      	itete	lt
 80085c2:	eba8 0603 	sublt.w	r6, r8, r3
 80085c6:	4646      	movge	r6, r8
 80085c8:	2300      	movlt	r3, #0
 80085ca:	9b07      	ldrge	r3, [sp, #28]
 80085cc:	e730      	b.n	8008430 <_dtoa_r+0x730>
 80085ce:	4646      	mov	r6, r8
 80085d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80085d4:	e735      	b.n	8008442 <_dtoa_r+0x742>
 80085d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085d8:	e75c      	b.n	8008494 <_dtoa_r+0x794>
 80085da:	2300      	movs	r3, #0
 80085dc:	e788      	b.n	80084f0 <_dtoa_r+0x7f0>
 80085de:	9b02      	ldr	r3, [sp, #8]
 80085e0:	e786      	b.n	80084f0 <_dtoa_r+0x7f0>
 80085e2:	2300      	movs	r3, #0
 80085e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80085e6:	e788      	b.n	80084fa <_dtoa_r+0x7fa>
 80085e8:	d09f      	beq.n	800852a <_dtoa_r+0x82a>
 80085ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ec:	331c      	adds	r3, #28
 80085ee:	441a      	add	r2, r3
 80085f0:	4498      	add	r8, r3
 80085f2:	441e      	add	r6, r3
 80085f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085f6:	e798      	b.n	800852a <_dtoa_r+0x82a>
 80085f8:	4603      	mov	r3, r0
 80085fa:	e7f6      	b.n	80085ea <_dtoa_r+0x8ea>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	9704      	str	r7, [sp, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	dc20      	bgt.n	8008646 <_dtoa_r+0x946>
 8008604:	9308      	str	r3, [sp, #32]
 8008606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008608:	2b02      	cmp	r3, #2
 800860a:	dd1e      	ble.n	800864a <_dtoa_r+0x94a>
 800860c:	9b08      	ldr	r3, [sp, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f47f aebc 	bne.w	800838c <_dtoa_r+0x68c>
 8008614:	4621      	mov	r1, r4
 8008616:	2205      	movs	r2, #5
 8008618:	4658      	mov	r0, fp
 800861a:	f000 fa99 	bl	8008b50 <__multadd>
 800861e:	4601      	mov	r1, r0
 8008620:	4604      	mov	r4, r0
 8008622:	4648      	mov	r0, r9
 8008624:	f000 fcf4 	bl	8009010 <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	f77f aeaf 	ble.w	800838c <_dtoa_r+0x68c>
 800862e:	2331      	movs	r3, #49	@ 0x31
 8008630:	4656      	mov	r6, sl
 8008632:	f806 3b01 	strb.w	r3, [r6], #1
 8008636:	9b04      	ldr	r3, [sp, #16]
 8008638:	3301      	adds	r3, #1
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	e6aa      	b.n	8008394 <_dtoa_r+0x694>
 800863e:	9c07      	ldr	r4, [sp, #28]
 8008640:	9704      	str	r7, [sp, #16]
 8008642:	4625      	mov	r5, r4
 8008644:	e7f3      	b.n	800862e <_dtoa_r+0x92e>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8104 	beq.w	800885a <_dtoa_r+0xb5a>
 8008652:	2e00      	cmp	r6, #0
 8008654:	dd05      	ble.n	8008662 <_dtoa_r+0x962>
 8008656:	4629      	mov	r1, r5
 8008658:	4632      	mov	r2, r6
 800865a:	4658      	mov	r0, fp
 800865c:	f000 fc6c 	bl	8008f38 <__lshift>
 8008660:	4605      	mov	r5, r0
 8008662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008664:	2b00      	cmp	r3, #0
 8008666:	d05a      	beq.n	800871e <_dtoa_r+0xa1e>
 8008668:	4658      	mov	r0, fp
 800866a:	6869      	ldr	r1, [r5, #4]
 800866c:	f000 fa0e 	bl	8008a8c <_Balloc>
 8008670:	4606      	mov	r6, r0
 8008672:	b928      	cbnz	r0, 8008680 <_dtoa_r+0x980>
 8008674:	4602      	mov	r2, r0
 8008676:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800867a:	4b83      	ldr	r3, [pc, #524]	@ (8008888 <_dtoa_r+0xb88>)
 800867c:	f7ff bb54 	b.w	8007d28 <_dtoa_r+0x28>
 8008680:	692a      	ldr	r2, [r5, #16]
 8008682:	f105 010c 	add.w	r1, r5, #12
 8008686:	3202      	adds	r2, #2
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	300c      	adds	r0, #12
 800868c:	f7ff fa9d 	bl	8007bca <memcpy>
 8008690:	2201      	movs	r2, #1
 8008692:	4631      	mov	r1, r6
 8008694:	4658      	mov	r0, fp
 8008696:	f000 fc4f 	bl	8008f38 <__lshift>
 800869a:	462f      	mov	r7, r5
 800869c:	4605      	mov	r5, r0
 800869e:	f10a 0301 	add.w	r3, sl, #1
 80086a2:	9307      	str	r3, [sp, #28]
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	4453      	add	r3, sl
 80086a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086aa:	9b02      	ldr	r3, [sp, #8]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b2:	9b07      	ldr	r3, [sp, #28]
 80086b4:	4621      	mov	r1, r4
 80086b6:	3b01      	subs	r3, #1
 80086b8:	4648      	mov	r0, r9
 80086ba:	9302      	str	r3, [sp, #8]
 80086bc:	f7ff fa98 	bl	8007bf0 <quorem>
 80086c0:	4639      	mov	r1, r7
 80086c2:	9008      	str	r0, [sp, #32]
 80086c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086c8:	4648      	mov	r0, r9
 80086ca:	f000 fca1 	bl	8009010 <__mcmp>
 80086ce:	462a      	mov	r2, r5
 80086d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80086d2:	4621      	mov	r1, r4
 80086d4:	4658      	mov	r0, fp
 80086d6:	f000 fcb7 	bl	8009048 <__mdiff>
 80086da:	68c2      	ldr	r2, [r0, #12]
 80086dc:	4606      	mov	r6, r0
 80086de:	bb02      	cbnz	r2, 8008722 <_dtoa_r+0xa22>
 80086e0:	4601      	mov	r1, r0
 80086e2:	4648      	mov	r0, r9
 80086e4:	f000 fc94 	bl	8009010 <__mcmp>
 80086e8:	4602      	mov	r2, r0
 80086ea:	4631      	mov	r1, r6
 80086ec:	4658      	mov	r0, fp
 80086ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80086f0:	f000 fa0c 	bl	8008b0c <_Bfree>
 80086f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086f8:	9e07      	ldr	r6, [sp, #28]
 80086fa:	ea43 0102 	orr.w	r1, r3, r2
 80086fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008700:	4319      	orrs	r1, r3
 8008702:	d110      	bne.n	8008726 <_dtoa_r+0xa26>
 8008704:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008708:	d029      	beq.n	800875e <_dtoa_r+0xa5e>
 800870a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	dd02      	ble.n	8008716 <_dtoa_r+0xa16>
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	f883 8000 	strb.w	r8, [r3]
 800871c:	e63b      	b.n	8008396 <_dtoa_r+0x696>
 800871e:	4628      	mov	r0, r5
 8008720:	e7bb      	b.n	800869a <_dtoa_r+0x99a>
 8008722:	2201      	movs	r2, #1
 8008724:	e7e1      	b.n	80086ea <_dtoa_r+0x9ea>
 8008726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	db04      	blt.n	8008736 <_dtoa_r+0xa36>
 800872c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800872e:	430b      	orrs	r3, r1
 8008730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008732:	430b      	orrs	r3, r1
 8008734:	d120      	bne.n	8008778 <_dtoa_r+0xa78>
 8008736:	2a00      	cmp	r2, #0
 8008738:	dded      	ble.n	8008716 <_dtoa_r+0xa16>
 800873a:	4649      	mov	r1, r9
 800873c:	2201      	movs	r2, #1
 800873e:	4658      	mov	r0, fp
 8008740:	f000 fbfa 	bl	8008f38 <__lshift>
 8008744:	4621      	mov	r1, r4
 8008746:	4681      	mov	r9, r0
 8008748:	f000 fc62 	bl	8009010 <__mcmp>
 800874c:	2800      	cmp	r0, #0
 800874e:	dc03      	bgt.n	8008758 <_dtoa_r+0xa58>
 8008750:	d1e1      	bne.n	8008716 <_dtoa_r+0xa16>
 8008752:	f018 0f01 	tst.w	r8, #1
 8008756:	d0de      	beq.n	8008716 <_dtoa_r+0xa16>
 8008758:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800875c:	d1d8      	bne.n	8008710 <_dtoa_r+0xa10>
 800875e:	2339      	movs	r3, #57	@ 0x39
 8008760:	9a02      	ldr	r2, [sp, #8]
 8008762:	7013      	strb	r3, [r2, #0]
 8008764:	4633      	mov	r3, r6
 8008766:	461e      	mov	r6, r3
 8008768:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800876c:	3b01      	subs	r3, #1
 800876e:	2a39      	cmp	r2, #57	@ 0x39
 8008770:	d052      	beq.n	8008818 <_dtoa_r+0xb18>
 8008772:	3201      	adds	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e60e      	b.n	8008396 <_dtoa_r+0x696>
 8008778:	2a00      	cmp	r2, #0
 800877a:	dd07      	ble.n	800878c <_dtoa_r+0xa8c>
 800877c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008780:	d0ed      	beq.n	800875e <_dtoa_r+0xa5e>
 8008782:	9a02      	ldr	r2, [sp, #8]
 8008784:	f108 0301 	add.w	r3, r8, #1
 8008788:	7013      	strb	r3, [r2, #0]
 800878a:	e604      	b.n	8008396 <_dtoa_r+0x696>
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	9a07      	ldr	r2, [sp, #28]
 8008790:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008796:	4293      	cmp	r3, r2
 8008798:	d028      	beq.n	80087ec <_dtoa_r+0xaec>
 800879a:	4649      	mov	r1, r9
 800879c:	2300      	movs	r3, #0
 800879e:	220a      	movs	r2, #10
 80087a0:	4658      	mov	r0, fp
 80087a2:	f000 f9d5 	bl	8008b50 <__multadd>
 80087a6:	42af      	cmp	r7, r5
 80087a8:	4681      	mov	r9, r0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	f04f 020a 	mov.w	r2, #10
 80087b2:	4639      	mov	r1, r7
 80087b4:	4658      	mov	r0, fp
 80087b6:	d107      	bne.n	80087c8 <_dtoa_r+0xac8>
 80087b8:	f000 f9ca 	bl	8008b50 <__multadd>
 80087bc:	4607      	mov	r7, r0
 80087be:	4605      	mov	r5, r0
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	3301      	adds	r3, #1
 80087c4:	9307      	str	r3, [sp, #28]
 80087c6:	e774      	b.n	80086b2 <_dtoa_r+0x9b2>
 80087c8:	f000 f9c2 	bl	8008b50 <__multadd>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4607      	mov	r7, r0
 80087d0:	2300      	movs	r3, #0
 80087d2:	220a      	movs	r2, #10
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 f9bb 	bl	8008b50 <__multadd>
 80087da:	4605      	mov	r5, r0
 80087dc:	e7f0      	b.n	80087c0 <_dtoa_r+0xac0>
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	2700      	movs	r7, #0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfcc      	ite	gt
 80087e6:	461e      	movgt	r6, r3
 80087e8:	2601      	movle	r6, #1
 80087ea:	4456      	add	r6, sl
 80087ec:	4649      	mov	r1, r9
 80087ee:	2201      	movs	r2, #1
 80087f0:	4658      	mov	r0, fp
 80087f2:	f000 fba1 	bl	8008f38 <__lshift>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4681      	mov	r9, r0
 80087fa:	f000 fc09 	bl	8009010 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	dcb0      	bgt.n	8008764 <_dtoa_r+0xa64>
 8008802:	d102      	bne.n	800880a <_dtoa_r+0xb0a>
 8008804:	f018 0f01 	tst.w	r8, #1
 8008808:	d1ac      	bne.n	8008764 <_dtoa_r+0xa64>
 800880a:	4633      	mov	r3, r6
 800880c:	461e      	mov	r6, r3
 800880e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008812:	2a30      	cmp	r2, #48	@ 0x30
 8008814:	d0fa      	beq.n	800880c <_dtoa_r+0xb0c>
 8008816:	e5be      	b.n	8008396 <_dtoa_r+0x696>
 8008818:	459a      	cmp	sl, r3
 800881a:	d1a4      	bne.n	8008766 <_dtoa_r+0xa66>
 800881c:	9b04      	ldr	r3, [sp, #16]
 800881e:	3301      	adds	r3, #1
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	2331      	movs	r3, #49	@ 0x31
 8008824:	f88a 3000 	strb.w	r3, [sl]
 8008828:	e5b5      	b.n	8008396 <_dtoa_r+0x696>
 800882a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800882c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800888c <_dtoa_r+0xb8c>
 8008830:	b11b      	cbz	r3, 800883a <_dtoa_r+0xb3a>
 8008832:	f10a 0308 	add.w	r3, sl, #8
 8008836:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	4650      	mov	r0, sl
 800883c:	b017      	add	sp, #92	@ 0x5c
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008844:	2b01      	cmp	r3, #1
 8008846:	f77f ae3d 	ble.w	80084c4 <_dtoa_r+0x7c4>
 800884a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800884c:	930a      	str	r3, [sp, #40]	@ 0x28
 800884e:	2001      	movs	r0, #1
 8008850:	e65b      	b.n	800850a <_dtoa_r+0x80a>
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f77f aed6 	ble.w	8008606 <_dtoa_r+0x906>
 800885a:	4656      	mov	r6, sl
 800885c:	4621      	mov	r1, r4
 800885e:	4648      	mov	r0, r9
 8008860:	f7ff f9c6 	bl	8007bf0 <quorem>
 8008864:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008868:	9b08      	ldr	r3, [sp, #32]
 800886a:	f806 8b01 	strb.w	r8, [r6], #1
 800886e:	eba6 020a 	sub.w	r2, r6, sl
 8008872:	4293      	cmp	r3, r2
 8008874:	ddb3      	ble.n	80087de <_dtoa_r+0xade>
 8008876:	4649      	mov	r1, r9
 8008878:	2300      	movs	r3, #0
 800887a:	220a      	movs	r2, #10
 800887c:	4658      	mov	r0, fp
 800887e:	f000 f967 	bl	8008b50 <__multadd>
 8008882:	4681      	mov	r9, r0
 8008884:	e7ea      	b.n	800885c <_dtoa_r+0xb5c>
 8008886:	bf00      	nop
 8008888:	0800b3b7 	.word	0x0800b3b7
 800888c:	0800b33b 	.word	0x0800b33b

08008890 <_free_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4605      	mov	r5, r0
 8008894:	2900      	cmp	r1, #0
 8008896:	d040      	beq.n	800891a <_free_r+0x8a>
 8008898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889c:	1f0c      	subs	r4, r1, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfb8      	it	lt
 80088a2:	18e4      	addlt	r4, r4, r3
 80088a4:	f000 f8e6 	bl	8008a74 <__malloc_lock>
 80088a8:	4a1c      	ldr	r2, [pc, #112]	@ (800891c <_free_r+0x8c>)
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	b933      	cbnz	r3, 80088bc <_free_r+0x2c>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	4628      	mov	r0, r5
 80088b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b8:	f000 b8e2 	b.w	8008a80 <__malloc_unlock>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x42>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	1821      	adds	r1, r4, r0
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf01      	itttt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	1809      	addeq	r1, r1, r0
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	e7ed      	b.n	80088ae <_free_r+0x1e>
 80088d2:	461a      	mov	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b10b      	cbz	r3, 80088dc <_free_r+0x4c>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x42>
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	1850      	adds	r0, r2, r1
 80088e0:	42a0      	cmp	r0, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x6c>
 80088e4:	6820      	ldr	r0, [r4, #0]
 80088e6:	4401      	add	r1, r0
 80088e8:	1850      	adds	r0, r2, r1
 80088ea:	4283      	cmp	r3, r0
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	d1e0      	bne.n	80088b2 <_free_r+0x22>
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	4408      	add	r0, r1
 80088f6:	6010      	str	r0, [r2, #0]
 80088f8:	6053      	str	r3, [r2, #4]
 80088fa:	e7da      	b.n	80088b2 <_free_r+0x22>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x74>
 80088fe:	230c      	movs	r3, #12
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	e7d6      	b.n	80088b2 <_free_r+0x22>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	1821      	adds	r1, r4, r0
 8008908:	428b      	cmp	r3, r1
 800890a:	bf01      	itttt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	1809      	addeq	r1, r1, r0
 8008912:	6021      	streq	r1, [r4, #0]
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	6054      	str	r4, [r2, #4]
 8008918:	e7cb      	b.n	80088b2 <_free_r+0x22>
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20001dc0 	.word	0x20001dc0

08008920 <malloc>:
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <malloc+0xc>)
 8008922:	4601      	mov	r1, r0
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f000 b825 	b.w	8008974 <_malloc_r>
 800892a:	bf00      	nop
 800892c:	2000001c 	.word	0x2000001c

08008930 <sbrk_aligned>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4e0f      	ldr	r6, [pc, #60]	@ (8008970 <sbrk_aligned+0x40>)
 8008934:	460c      	mov	r4, r1
 8008936:	6831      	ldr	r1, [r6, #0]
 8008938:	4605      	mov	r5, r0
 800893a:	b911      	cbnz	r1, 8008942 <sbrk_aligned+0x12>
 800893c:	f001 fdf6 	bl	800a52c <_sbrk_r>
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f001 fdf1 	bl	800a52c <_sbrk_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d103      	bne.n	8008956 <sbrk_aligned+0x26>
 800894e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008952:	4620      	mov	r0, r4
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	1cc4      	adds	r4, r0, #3
 8008958:	f024 0403 	bic.w	r4, r4, #3
 800895c:	42a0      	cmp	r0, r4
 800895e:	d0f8      	beq.n	8008952 <sbrk_aligned+0x22>
 8008960:	1a21      	subs	r1, r4, r0
 8008962:	4628      	mov	r0, r5
 8008964:	f001 fde2 	bl	800a52c <_sbrk_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d1f2      	bne.n	8008952 <sbrk_aligned+0x22>
 800896c:	e7ef      	b.n	800894e <sbrk_aligned+0x1e>
 800896e:	bf00      	nop
 8008970:	20001dbc 	.word	0x20001dbc

08008974 <_malloc_r>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4606      	mov	r6, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d904      	bls.n	800899a <_malloc_r+0x26>
 8008990:	230c      	movs	r3, #12
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a70 <_malloc_r+0xfc>
 800899e:	f000 f869 	bl	8008a74 <__malloc_lock>
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	461c      	mov	r4, r3
 80089a8:	bb44      	cbnz	r4, 80089fc <_malloc_r+0x88>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff ffbf 	bl	8008930 <sbrk_aligned>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	4604      	mov	r4, r0
 80089b6:	d158      	bne.n	8008a6a <_malloc_r+0xf6>
 80089b8:	f8d8 4000 	ldr.w	r4, [r8]
 80089bc:	4627      	mov	r7, r4
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d143      	bne.n	8008a4a <_malloc_r+0xd6>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d04b      	beq.n	8008a5e <_malloc_r+0xea>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	eb04 0903 	add.w	r9, r4, r3
 80089d0:	f001 fdac 	bl	800a52c <_sbrk_r>
 80089d4:	4581      	cmp	r9, r0
 80089d6:	d142      	bne.n	8008a5e <_malloc_r+0xea>
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	4630      	mov	r0, r6
 80089dc:	1a6d      	subs	r5, r5, r1
 80089de:	4629      	mov	r1, r5
 80089e0:	f7ff ffa6 	bl	8008930 <sbrk_aligned>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d03a      	beq.n	8008a5e <_malloc_r+0xea>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	442b      	add	r3, r5
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	f8d8 3000 	ldr.w	r3, [r8]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	bb62      	cbnz	r2, 8008a50 <_malloc_r+0xdc>
 80089f6:	f8c8 7000 	str.w	r7, [r8]
 80089fa:	e00f      	b.n	8008a1c <_malloc_r+0xa8>
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	1b52      	subs	r2, r2, r5
 8008a00:	d420      	bmi.n	8008a44 <_malloc_r+0xd0>
 8008a02:	2a0b      	cmp	r2, #11
 8008a04:	d917      	bls.n	8008a36 <_malloc_r+0xc2>
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	6025      	str	r5, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	6059      	strne	r1, [r3, #4]
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	bf08      	it	eq
 8008a14:	f8c8 1000 	streq.w	r1, [r8]
 8008a18:	5162      	str	r2, [r4, r5]
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f82f 	bl	8008a80 <__malloc_unlock>
 8008a22:	f104 000b 	add.w	r0, r4, #11
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	f020 0007 	bic.w	r0, r0, #7
 8008a2c:	1ac2      	subs	r2, r0, r3
 8008a2e:	bf1c      	itt	ne
 8008a30:	1a1b      	subne	r3, r3, r0
 8008a32:	50a3      	strne	r3, [r4, r2]
 8008a34:	e7af      	b.n	8008996 <_malloc_r+0x22>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f8c8 2000 	streq.w	r2, [r8]
 8008a40:	605a      	strne	r2, [r3, #4]
 8008a42:	e7eb      	b.n	8008a1c <_malloc_r+0xa8>
 8008a44:	4623      	mov	r3, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7ae      	b.n	80089a8 <_malloc_r+0x34>
 8008a4a:	463c      	mov	r4, r7
 8008a4c:	687f      	ldr	r7, [r7, #4]
 8008a4e:	e7b6      	b.n	80089be <_malloc_r+0x4a>
 8008a50:	461a      	mov	r2, r3
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d1fb      	bne.n	8008a50 <_malloc_r+0xdc>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	e7de      	b.n	8008a1c <_malloc_r+0xa8>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	4630      	mov	r0, r6
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	f000 f80c 	bl	8008a80 <__malloc_unlock>
 8008a68:	e794      	b.n	8008994 <_malloc_r+0x20>
 8008a6a:	6005      	str	r5, [r0, #0]
 8008a6c:	e7d6      	b.n	8008a1c <_malloc_r+0xa8>
 8008a6e:	bf00      	nop
 8008a70:	20001dc0 	.word	0x20001dc0

08008a74 <__malloc_lock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	@ (8008a7c <__malloc_lock+0x8>)
 8008a76:	f7ff b898 	b.w	8007baa <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20001db8 	.word	0x20001db8

08008a80 <__malloc_unlock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__malloc_unlock+0x8>)
 8008a82:	f7ff b893 	b.w	8007bac <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	20001db8 	.word	0x20001db8

08008a8c <_Balloc>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	69c6      	ldr	r6, [r0, #28]
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	b976      	cbnz	r6, 8008ab4 <_Balloc+0x28>
 8008a96:	2010      	movs	r0, #16
 8008a98:	f7ff ff42 	bl	8008920 <malloc>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	61e0      	str	r0, [r4, #28]
 8008aa0:	b920      	cbnz	r0, 8008aac <_Balloc+0x20>
 8008aa2:	216b      	movs	r1, #107	@ 0x6b
 8008aa4:	4b17      	ldr	r3, [pc, #92]	@ (8008b04 <_Balloc+0x78>)
 8008aa6:	4818      	ldr	r0, [pc, #96]	@ (8008b08 <_Balloc+0x7c>)
 8008aa8:	f001 fd56 	bl	800a558 <__assert_func>
 8008aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ab0:	6006      	str	r6, [r0, #0]
 8008ab2:	60c6      	str	r6, [r0, #12]
 8008ab4:	69e6      	ldr	r6, [r4, #28]
 8008ab6:	68f3      	ldr	r3, [r6, #12]
 8008ab8:	b183      	cbz	r3, 8008adc <_Balloc+0x50>
 8008aba:	69e3      	ldr	r3, [r4, #28]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ac2:	b9b8      	cbnz	r0, 8008af4 <_Balloc+0x68>
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8008aca:	1d72      	adds	r2, r6, #5
 8008acc:	4620      	mov	r0, r4
 8008ace:	0092      	lsls	r2, r2, #2
 8008ad0:	f001 fd60 	bl	800a594 <_calloc_r>
 8008ad4:	b160      	cbz	r0, 8008af0 <_Balloc+0x64>
 8008ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ada:	e00e      	b.n	8008afa <_Balloc+0x6e>
 8008adc:	2221      	movs	r2, #33	@ 0x21
 8008ade:	2104      	movs	r1, #4
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f001 fd57 	bl	800a594 <_calloc_r>
 8008ae6:	69e3      	ldr	r3, [r4, #28]
 8008ae8:	60f0      	str	r0, [r6, #12]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e4      	bne.n	8008aba <_Balloc+0x2e>
 8008af0:	2000      	movs	r0, #0
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	6802      	ldr	r2, [r0, #0]
 8008af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008afa:	2300      	movs	r3, #0
 8008afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b00:	e7f7      	b.n	8008af2 <_Balloc+0x66>
 8008b02:	bf00      	nop
 8008b04:	0800b348 	.word	0x0800b348
 8008b08:	0800b3c8 	.word	0x0800b3c8

08008b0c <_Bfree>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	69c6      	ldr	r6, [r0, #28]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b976      	cbnz	r6, 8008b34 <_Bfree+0x28>
 8008b16:	2010      	movs	r0, #16
 8008b18:	f7ff ff02 	bl	8008920 <malloc>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	61e8      	str	r0, [r5, #28]
 8008b20:	b920      	cbnz	r0, 8008b2c <_Bfree+0x20>
 8008b22:	218f      	movs	r1, #143	@ 0x8f
 8008b24:	4b08      	ldr	r3, [pc, #32]	@ (8008b48 <_Bfree+0x3c>)
 8008b26:	4809      	ldr	r0, [pc, #36]	@ (8008b4c <_Bfree+0x40>)
 8008b28:	f001 fd16 	bl	800a558 <__assert_func>
 8008b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b30:	6006      	str	r6, [r0, #0]
 8008b32:	60c6      	str	r6, [r0, #12]
 8008b34:	b13c      	cbz	r4, 8008b46 <_Bfree+0x3a>
 8008b36:	69eb      	ldr	r3, [r5, #28]
 8008b38:	6862      	ldr	r2, [r4, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b40:	6021      	str	r1, [r4, #0]
 8008b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	0800b348 	.word	0x0800b348
 8008b4c:	0800b3c8 	.word	0x0800b3c8

08008b50 <__multadd>:
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	461e      	mov	r6, r3
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	690d      	ldr	r5, [r1, #16]
 8008b5e:	f101 0c14 	add.w	ip, r1, #20
 8008b62:	f8dc 3000 	ldr.w	r3, [ip]
 8008b66:	3001      	adds	r0, #1
 8008b68:	b299      	uxth	r1, r3
 8008b6a:	fb02 6101 	mla	r1, r2, r1, r6
 8008b6e:	0c1e      	lsrs	r6, r3, #16
 8008b70:	0c0b      	lsrs	r3, r1, #16
 8008b72:	fb02 3306 	mla	r3, r2, r6, r3
 8008b76:	b289      	uxth	r1, r1
 8008b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b7c:	4285      	cmp	r5, r0
 8008b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b82:	f84c 1b04 	str.w	r1, [ip], #4
 8008b86:	dcec      	bgt.n	8008b62 <__multadd+0x12>
 8008b88:	b30e      	cbz	r6, 8008bce <__multadd+0x7e>
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	dc19      	bgt.n	8008bc4 <__multadd+0x74>
 8008b90:	6861      	ldr	r1, [r4, #4]
 8008b92:	4638      	mov	r0, r7
 8008b94:	3101      	adds	r1, #1
 8008b96:	f7ff ff79 	bl	8008a8c <_Balloc>
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	b928      	cbnz	r0, 8008baa <__multadd+0x5a>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	21ba      	movs	r1, #186	@ 0xba
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd4 <__multadd+0x84>)
 8008ba4:	480c      	ldr	r0, [pc, #48]	@ (8008bd8 <__multadd+0x88>)
 8008ba6:	f001 fcd7 	bl	800a558 <__assert_func>
 8008baa:	6922      	ldr	r2, [r4, #16]
 8008bac:	f104 010c 	add.w	r1, r4, #12
 8008bb0:	3202      	adds	r2, #2
 8008bb2:	0092      	lsls	r2, r2, #2
 8008bb4:	300c      	adds	r0, #12
 8008bb6:	f7ff f808 	bl	8007bca <memcpy>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f7ff ffa5 	bl	8008b0c <_Bfree>
 8008bc2:	4644      	mov	r4, r8
 8008bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bc8:	3501      	adds	r5, #1
 8008bca:	615e      	str	r6, [r3, #20]
 8008bcc:	6125      	str	r5, [r4, #16]
 8008bce:	4620      	mov	r0, r4
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd4:	0800b3b7 	.word	0x0800b3b7
 8008bd8:	0800b3c8 	.word	0x0800b3c8

08008bdc <__s2b>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4615      	mov	r5, r2
 8008be2:	2209      	movs	r2, #9
 8008be4:	461f      	mov	r7, r3
 8008be6:	3308      	adds	r3, #8
 8008be8:	460c      	mov	r4, r1
 8008bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bee:	4606      	mov	r6, r0
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	db09      	blt.n	8008c0c <__s2b+0x30>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff ff47 	bl	8008a8c <_Balloc>
 8008bfe:	b940      	cbnz	r0, 8008c12 <__s2b+0x36>
 8008c00:	4602      	mov	r2, r0
 8008c02:	21d3      	movs	r1, #211	@ 0xd3
 8008c04:	4b18      	ldr	r3, [pc, #96]	@ (8008c68 <__s2b+0x8c>)
 8008c06:	4819      	ldr	r0, [pc, #100]	@ (8008c6c <__s2b+0x90>)
 8008c08:	f001 fca6 	bl	800a558 <__assert_func>
 8008c0c:	0052      	lsls	r2, r2, #1
 8008c0e:	3101      	adds	r1, #1
 8008c10:	e7f0      	b.n	8008bf4 <__s2b+0x18>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	2d09      	cmp	r5, #9
 8008c16:	6143      	str	r3, [r0, #20]
 8008c18:	f04f 0301 	mov.w	r3, #1
 8008c1c:	6103      	str	r3, [r0, #16]
 8008c1e:	dd16      	ble.n	8008c4e <__s2b+0x72>
 8008c20:	f104 0909 	add.w	r9, r4, #9
 8008c24:	46c8      	mov	r8, r9
 8008c26:	442c      	add	r4, r5
 8008c28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	220a      	movs	r2, #10
 8008c30:	4630      	mov	r0, r6
 8008c32:	3b30      	subs	r3, #48	@ 0x30
 8008c34:	f7ff ff8c 	bl	8008b50 <__multadd>
 8008c38:	45a0      	cmp	r8, r4
 8008c3a:	d1f5      	bne.n	8008c28 <__s2b+0x4c>
 8008c3c:	f1a5 0408 	sub.w	r4, r5, #8
 8008c40:	444c      	add	r4, r9
 8008c42:	1b2d      	subs	r5, r5, r4
 8008c44:	1963      	adds	r3, r4, r5
 8008c46:	42bb      	cmp	r3, r7
 8008c48:	db04      	blt.n	8008c54 <__s2b+0x78>
 8008c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	2509      	movs	r5, #9
 8008c50:	340a      	adds	r4, #10
 8008c52:	e7f6      	b.n	8008c42 <__s2b+0x66>
 8008c54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c58:	4601      	mov	r1, r0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	3b30      	subs	r3, #48	@ 0x30
 8008c60:	f7ff ff76 	bl	8008b50 <__multadd>
 8008c64:	e7ee      	b.n	8008c44 <__s2b+0x68>
 8008c66:	bf00      	nop
 8008c68:	0800b3b7 	.word	0x0800b3b7
 8008c6c:	0800b3c8 	.word	0x0800b3c8

08008c70 <__hi0bits>:
 8008c70:	4603      	mov	r3, r0
 8008c72:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c76:	bf3a      	itte	cc
 8008c78:	0403      	lslcc	r3, r0, #16
 8008c7a:	2010      	movcc	r0, #16
 8008c7c:	2000      	movcs	r0, #0
 8008c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c82:	bf3c      	itt	cc
 8008c84:	021b      	lslcc	r3, r3, #8
 8008c86:	3008      	addcc	r0, #8
 8008c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c8c:	bf3c      	itt	cc
 8008c8e:	011b      	lslcc	r3, r3, #4
 8008c90:	3004      	addcc	r0, #4
 8008c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c96:	bf3c      	itt	cc
 8008c98:	009b      	lslcc	r3, r3, #2
 8008c9a:	3002      	addcc	r0, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	db05      	blt.n	8008cac <__hi0bits+0x3c>
 8008ca0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ca4:	f100 0001 	add.w	r0, r0, #1
 8008ca8:	bf08      	it	eq
 8008caa:	2020      	moveq	r0, #32
 8008cac:	4770      	bx	lr

08008cae <__lo0bits>:
 8008cae:	6803      	ldr	r3, [r0, #0]
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	f013 0007 	ands.w	r0, r3, #7
 8008cb6:	d00b      	beq.n	8008cd0 <__lo0bits+0x22>
 8008cb8:	07d9      	lsls	r1, r3, #31
 8008cba:	d421      	bmi.n	8008d00 <__lo0bits+0x52>
 8008cbc:	0798      	lsls	r0, r3, #30
 8008cbe:	bf49      	itett	mi
 8008cc0:	085b      	lsrmi	r3, r3, #1
 8008cc2:	089b      	lsrpl	r3, r3, #2
 8008cc4:	2001      	movmi	r0, #1
 8008cc6:	6013      	strmi	r3, [r2, #0]
 8008cc8:	bf5c      	itt	pl
 8008cca:	2002      	movpl	r0, #2
 8008ccc:	6013      	strpl	r3, [r2, #0]
 8008cce:	4770      	bx	lr
 8008cd0:	b299      	uxth	r1, r3
 8008cd2:	b909      	cbnz	r1, 8008cd8 <__lo0bits+0x2a>
 8008cd4:	2010      	movs	r0, #16
 8008cd6:	0c1b      	lsrs	r3, r3, #16
 8008cd8:	b2d9      	uxtb	r1, r3
 8008cda:	b909      	cbnz	r1, 8008ce0 <__lo0bits+0x32>
 8008cdc:	3008      	adds	r0, #8
 8008cde:	0a1b      	lsrs	r3, r3, #8
 8008ce0:	0719      	lsls	r1, r3, #28
 8008ce2:	bf04      	itt	eq
 8008ce4:	091b      	lsreq	r3, r3, #4
 8008ce6:	3004      	addeq	r0, #4
 8008ce8:	0799      	lsls	r1, r3, #30
 8008cea:	bf04      	itt	eq
 8008cec:	089b      	lsreq	r3, r3, #2
 8008cee:	3002      	addeq	r0, #2
 8008cf0:	07d9      	lsls	r1, r3, #31
 8008cf2:	d403      	bmi.n	8008cfc <__lo0bits+0x4e>
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	f100 0001 	add.w	r0, r0, #1
 8008cfa:	d003      	beq.n	8008d04 <__lo0bits+0x56>
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	4770      	bx	lr
 8008d00:	2000      	movs	r0, #0
 8008d02:	4770      	bx	lr
 8008d04:	2020      	movs	r0, #32
 8008d06:	4770      	bx	lr

08008d08 <__i2b>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	f7ff febd 	bl	8008a8c <_Balloc>
 8008d12:	4602      	mov	r2, r0
 8008d14:	b928      	cbnz	r0, 8008d22 <__i2b+0x1a>
 8008d16:	f240 1145 	movw	r1, #325	@ 0x145
 8008d1a:	4b04      	ldr	r3, [pc, #16]	@ (8008d2c <__i2b+0x24>)
 8008d1c:	4804      	ldr	r0, [pc, #16]	@ (8008d30 <__i2b+0x28>)
 8008d1e:	f001 fc1b 	bl	800a558 <__assert_func>
 8008d22:	2301      	movs	r3, #1
 8008d24:	6144      	str	r4, [r0, #20]
 8008d26:	6103      	str	r3, [r0, #16]
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0800b3b7 	.word	0x0800b3b7
 8008d30:	0800b3c8 	.word	0x0800b3c8

08008d34 <__multiply>:
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	4614      	mov	r4, r2
 8008d3a:	690a      	ldr	r2, [r1, #16]
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	460f      	mov	r7, r1
 8008d40:	429a      	cmp	r2, r3
 8008d42:	bfa2      	ittt	ge
 8008d44:	4623      	movge	r3, r4
 8008d46:	460c      	movge	r4, r1
 8008d48:	461f      	movge	r7, r3
 8008d4a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d4e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	6861      	ldr	r1, [r4, #4]
 8008d56:	eb0a 0609 	add.w	r6, sl, r9
 8008d5a:	42b3      	cmp	r3, r6
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	bfb8      	it	lt
 8008d60:	3101      	addlt	r1, #1
 8008d62:	f7ff fe93 	bl	8008a8c <_Balloc>
 8008d66:	b930      	cbnz	r0, 8008d76 <__multiply+0x42>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d6e:	4b43      	ldr	r3, [pc, #268]	@ (8008e7c <__multiply+0x148>)
 8008d70:	4843      	ldr	r0, [pc, #268]	@ (8008e80 <__multiply+0x14c>)
 8008d72:	f001 fbf1 	bl	800a558 <__assert_func>
 8008d76:	f100 0514 	add.w	r5, r0, #20
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d82:	4543      	cmp	r3, r8
 8008d84:	d321      	bcc.n	8008dca <__multiply+0x96>
 8008d86:	f107 0114 	add.w	r1, r7, #20
 8008d8a:	f104 0214 	add.w	r2, r4, #20
 8008d8e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d92:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d96:	9302      	str	r3, [sp, #8]
 8008d98:	1b13      	subs	r3, r2, r4
 8008d9a:	3b15      	subs	r3, #21
 8008d9c:	f023 0303 	bic.w	r3, r3, #3
 8008da0:	3304      	adds	r3, #4
 8008da2:	f104 0715 	add.w	r7, r4, #21
 8008da6:	42ba      	cmp	r2, r7
 8008da8:	bf38      	it	cc
 8008daa:	2304      	movcc	r3, #4
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	428b      	cmp	r3, r1
 8008db4:	d80c      	bhi.n	8008dd0 <__multiply+0x9c>
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	dd03      	ble.n	8008dc2 <__multiply+0x8e>
 8008dba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d05a      	beq.n	8008e78 <__multiply+0x144>
 8008dc2:	6106      	str	r6, [r0, #16]
 8008dc4:	b005      	add	sp, #20
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	f843 2b04 	str.w	r2, [r3], #4
 8008dce:	e7d8      	b.n	8008d82 <__multiply+0x4e>
 8008dd0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008dd4:	f1ba 0f00 	cmp.w	sl, #0
 8008dd8:	d023      	beq.n	8008e22 <__multiply+0xee>
 8008dda:	46a9      	mov	r9, r5
 8008ddc:	f04f 0c00 	mov.w	ip, #0
 8008de0:	f104 0e14 	add.w	lr, r4, #20
 8008de4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008de8:	f8d9 3000 	ldr.w	r3, [r9]
 8008dec:	fa1f fb87 	uxth.w	fp, r7
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	fb0a 330b 	mla	r3, sl, fp, r3
 8008df6:	4463      	add	r3, ip
 8008df8:	f8d9 c000 	ldr.w	ip, [r9]
 8008dfc:	0c3f      	lsrs	r7, r7, #16
 8008dfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008e02:	fb0a c707 	mla	r7, sl, r7, ip
 8008e06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e10:	4572      	cmp	r2, lr
 8008e12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e16:	f849 3b04 	str.w	r3, [r9], #4
 8008e1a:	d8e3      	bhi.n	8008de4 <__multiply+0xb0>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	f845 c003 	str.w	ip, [r5, r3]
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	3104      	adds	r1, #4
 8008e26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	d021      	beq.n	8008e74 <__multiply+0x140>
 8008e30:	46ae      	mov	lr, r5
 8008e32:	f04f 0a00 	mov.w	sl, #0
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	f104 0c14 	add.w	ip, r4, #20
 8008e3c:	f8bc b000 	ldrh.w	fp, [ip]
 8008e40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	fb09 770b 	mla	r7, r9, fp, r7
 8008e4a:	4457      	add	r7, sl
 8008e4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e50:	f84e 3b04 	str.w	r3, [lr], #4
 8008e54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e5c:	f8be 3000 	ldrh.w	r3, [lr]
 8008e60:	4562      	cmp	r2, ip
 8008e62:	fb09 330a 	mla	r3, r9, sl, r3
 8008e66:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e6e:	d8e5      	bhi.n	8008e3c <__multiply+0x108>
 8008e70:	9f01      	ldr	r7, [sp, #4]
 8008e72:	51eb      	str	r3, [r5, r7]
 8008e74:	3504      	adds	r5, #4
 8008e76:	e79a      	b.n	8008dae <__multiply+0x7a>
 8008e78:	3e01      	subs	r6, #1
 8008e7a:	e79c      	b.n	8008db6 <__multiply+0x82>
 8008e7c:	0800b3b7 	.word	0x0800b3b7
 8008e80:	0800b3c8 	.word	0x0800b3c8

08008e84 <__pow5mult>:
 8008e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	4615      	mov	r5, r2
 8008e8a:	f012 0203 	ands.w	r2, r2, #3
 8008e8e:	4607      	mov	r7, r0
 8008e90:	460e      	mov	r6, r1
 8008e92:	d007      	beq.n	8008ea4 <__pow5mult+0x20>
 8008e94:	4c25      	ldr	r4, [pc, #148]	@ (8008f2c <__pow5mult+0xa8>)
 8008e96:	3a01      	subs	r2, #1
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e9e:	f7ff fe57 	bl	8008b50 <__multadd>
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	10ad      	asrs	r5, r5, #2
 8008ea6:	d03d      	beq.n	8008f24 <__pow5mult+0xa0>
 8008ea8:	69fc      	ldr	r4, [r7, #28]
 8008eaa:	b97c      	cbnz	r4, 8008ecc <__pow5mult+0x48>
 8008eac:	2010      	movs	r0, #16
 8008eae:	f7ff fd37 	bl	8008920 <malloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	61f8      	str	r0, [r7, #28]
 8008eb6:	b928      	cbnz	r0, 8008ec4 <__pow5mult+0x40>
 8008eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f30 <__pow5mult+0xac>)
 8008ebe:	481d      	ldr	r0, [pc, #116]	@ (8008f34 <__pow5mult+0xb0>)
 8008ec0:	f001 fb4a 	bl	800a558 <__assert_func>
 8008ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ec8:	6004      	str	r4, [r0, #0]
 8008eca:	60c4      	str	r4, [r0, #12]
 8008ecc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ed4:	b94c      	cbnz	r4, 8008eea <__pow5mult+0x66>
 8008ed6:	f240 2171 	movw	r1, #625	@ 0x271
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff ff14 	bl	8008d08 <__i2b>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	f04f 0900 	mov.w	r9, #0
 8008eee:	07eb      	lsls	r3, r5, #31
 8008ef0:	d50a      	bpl.n	8008f08 <__pow5mult+0x84>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f7ff ff1c 	bl	8008d34 <__multiply>
 8008efc:	4680      	mov	r8, r0
 8008efe:	4631      	mov	r1, r6
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff fe03 	bl	8008b0c <_Bfree>
 8008f06:	4646      	mov	r6, r8
 8008f08:	106d      	asrs	r5, r5, #1
 8008f0a:	d00b      	beq.n	8008f24 <__pow5mult+0xa0>
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	b938      	cbnz	r0, 8008f20 <__pow5mult+0x9c>
 8008f10:	4622      	mov	r2, r4
 8008f12:	4621      	mov	r1, r4
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ff0d 	bl	8008d34 <__multiply>
 8008f1a:	6020      	str	r0, [r4, #0]
 8008f1c:	f8c0 9000 	str.w	r9, [r0]
 8008f20:	4604      	mov	r4, r0
 8008f22:	e7e4      	b.n	8008eee <__pow5mult+0x6a>
 8008f24:	4630      	mov	r0, r6
 8008f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2a:	bf00      	nop
 8008f2c:	0800b424 	.word	0x0800b424
 8008f30:	0800b348 	.word	0x0800b348
 8008f34:	0800b3c8 	.word	0x0800b3c8

08008f38 <__lshift>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4607      	mov	r7, r0
 8008f40:	4691      	mov	r9, r2
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6849      	ldr	r1, [r1, #4]
 8008f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f50:	f108 0601 	add.w	r6, r8, #1
 8008f54:	42b3      	cmp	r3, r6
 8008f56:	db0b      	blt.n	8008f70 <__lshift+0x38>
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff fd97 	bl	8008a8c <_Balloc>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b948      	cbnz	r0, 8008f76 <__lshift+0x3e>
 8008f62:	4602      	mov	r2, r0
 8008f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f68:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <__lshift+0xd0>)
 8008f6a:	4828      	ldr	r0, [pc, #160]	@ (800900c <__lshift+0xd4>)
 8008f6c:	f001 faf4 	bl	800a558 <__assert_func>
 8008f70:	3101      	adds	r1, #1
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	e7ee      	b.n	8008f54 <__lshift+0x1c>
 8008f76:	2300      	movs	r3, #0
 8008f78:	f100 0114 	add.w	r1, r0, #20
 8008f7c:	f100 0210 	add.w	r2, r0, #16
 8008f80:	4618      	mov	r0, r3
 8008f82:	4553      	cmp	r3, sl
 8008f84:	db33      	blt.n	8008fee <__lshift+0xb6>
 8008f86:	6920      	ldr	r0, [r4, #16]
 8008f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f8c:	f104 0314 	add.w	r3, r4, #20
 8008f90:	f019 091f 	ands.w	r9, r9, #31
 8008f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f9c:	d02b      	beq.n	8008ff6 <__lshift+0xbe>
 8008f9e:	468a      	mov	sl, r1
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fa6:	6818      	ldr	r0, [r3, #0]
 8008fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8008fac:	4310      	orrs	r0, r2
 8008fae:	f84a 0b04 	str.w	r0, [sl], #4
 8008fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb6:	459c      	cmp	ip, r3
 8008fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fbc:	d8f3      	bhi.n	8008fa6 <__lshift+0x6e>
 8008fbe:	ebac 0304 	sub.w	r3, ip, r4
 8008fc2:	3b15      	subs	r3, #21
 8008fc4:	f023 0303 	bic.w	r3, r3, #3
 8008fc8:	3304      	adds	r3, #4
 8008fca:	f104 0015 	add.w	r0, r4, #21
 8008fce:	4584      	cmp	ip, r0
 8008fd0:	bf38      	it	cc
 8008fd2:	2304      	movcc	r3, #4
 8008fd4:	50ca      	str	r2, [r1, r3]
 8008fd6:	b10a      	cbz	r2, 8008fdc <__lshift+0xa4>
 8008fd8:	f108 0602 	add.w	r6, r8, #2
 8008fdc:	3e01      	subs	r6, #1
 8008fde:	4638      	mov	r0, r7
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	612e      	str	r6, [r5, #16]
 8008fe4:	f7ff fd92 	bl	8008b0c <_Bfree>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	e7c5      	b.n	8008f82 <__lshift+0x4a>
 8008ff6:	3904      	subs	r1, #4
 8008ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffc:	459c      	cmp	ip, r3
 8008ffe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009002:	d8f9      	bhi.n	8008ff8 <__lshift+0xc0>
 8009004:	e7ea      	b.n	8008fdc <__lshift+0xa4>
 8009006:	bf00      	nop
 8009008:	0800b3b7 	.word	0x0800b3b7
 800900c:	0800b3c8 	.word	0x0800b3c8

08009010 <__mcmp>:
 8009010:	4603      	mov	r3, r0
 8009012:	690a      	ldr	r2, [r1, #16]
 8009014:	6900      	ldr	r0, [r0, #16]
 8009016:	b530      	push	{r4, r5, lr}
 8009018:	1a80      	subs	r0, r0, r2
 800901a:	d10e      	bne.n	800903a <__mcmp+0x2a>
 800901c:	3314      	adds	r3, #20
 800901e:	3114      	adds	r1, #20
 8009020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800902c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009030:	4295      	cmp	r5, r2
 8009032:	d003      	beq.n	800903c <__mcmp+0x2c>
 8009034:	d205      	bcs.n	8009042 <__mcmp+0x32>
 8009036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800903a:	bd30      	pop	{r4, r5, pc}
 800903c:	42a3      	cmp	r3, r4
 800903e:	d3f3      	bcc.n	8009028 <__mcmp+0x18>
 8009040:	e7fb      	b.n	800903a <__mcmp+0x2a>
 8009042:	2001      	movs	r0, #1
 8009044:	e7f9      	b.n	800903a <__mcmp+0x2a>
	...

08009048 <__mdiff>:
 8009048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4689      	mov	r9, r1
 800904e:	4606      	mov	r6, r0
 8009050:	4611      	mov	r1, r2
 8009052:	4648      	mov	r0, r9
 8009054:	4614      	mov	r4, r2
 8009056:	f7ff ffdb 	bl	8009010 <__mcmp>
 800905a:	1e05      	subs	r5, r0, #0
 800905c:	d112      	bne.n	8009084 <__mdiff+0x3c>
 800905e:	4629      	mov	r1, r5
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff fd13 	bl	8008a8c <_Balloc>
 8009066:	4602      	mov	r2, r0
 8009068:	b928      	cbnz	r0, 8009076 <__mdiff+0x2e>
 800906a:	f240 2137 	movw	r1, #567	@ 0x237
 800906e:	4b3e      	ldr	r3, [pc, #248]	@ (8009168 <__mdiff+0x120>)
 8009070:	483e      	ldr	r0, [pc, #248]	@ (800916c <__mdiff+0x124>)
 8009072:	f001 fa71 	bl	800a558 <__assert_func>
 8009076:	2301      	movs	r3, #1
 8009078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800907c:	4610      	mov	r0, r2
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	bfbc      	itt	lt
 8009086:	464b      	movlt	r3, r9
 8009088:	46a1      	movlt	r9, r4
 800908a:	4630      	mov	r0, r6
 800908c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009090:	bfba      	itte	lt
 8009092:	461c      	movlt	r4, r3
 8009094:	2501      	movlt	r5, #1
 8009096:	2500      	movge	r5, #0
 8009098:	f7ff fcf8 	bl	8008a8c <_Balloc>
 800909c:	4602      	mov	r2, r0
 800909e:	b918      	cbnz	r0, 80090a8 <__mdiff+0x60>
 80090a0:	f240 2145 	movw	r1, #581	@ 0x245
 80090a4:	4b30      	ldr	r3, [pc, #192]	@ (8009168 <__mdiff+0x120>)
 80090a6:	e7e3      	b.n	8009070 <__mdiff+0x28>
 80090a8:	f100 0b14 	add.w	fp, r0, #20
 80090ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090b0:	f109 0310 	add.w	r3, r9, #16
 80090b4:	60c5      	str	r5, [r0, #12]
 80090b6:	f04f 0c00 	mov.w	ip, #0
 80090ba:	f109 0514 	add.w	r5, r9, #20
 80090be:	46d9      	mov	r9, fp
 80090c0:	6926      	ldr	r6, [r4, #16]
 80090c2:	f104 0e14 	add.w	lr, r4, #20
 80090c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090da:	b281      	uxth	r1, r0
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	fa1f f38a 	uxth.w	r3, sl
 80090e2:	1a5b      	subs	r3, r3, r1
 80090e4:	0c00      	lsrs	r0, r0, #16
 80090e6:	4463      	add	r3, ip
 80090e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80090ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090f6:	4576      	cmp	r6, lr
 80090f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090fc:	f849 3b04 	str.w	r3, [r9], #4
 8009100:	d8e6      	bhi.n	80090d0 <__mdiff+0x88>
 8009102:	1b33      	subs	r3, r6, r4
 8009104:	3b15      	subs	r3, #21
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	3415      	adds	r4, #21
 800910c:	3304      	adds	r3, #4
 800910e:	42a6      	cmp	r6, r4
 8009110:	bf38      	it	cc
 8009112:	2304      	movcc	r3, #4
 8009114:	441d      	add	r5, r3
 8009116:	445b      	add	r3, fp
 8009118:	461e      	mov	r6, r3
 800911a:	462c      	mov	r4, r5
 800911c:	4544      	cmp	r4, r8
 800911e:	d30e      	bcc.n	800913e <__mdiff+0xf6>
 8009120:	f108 0103 	add.w	r1, r8, #3
 8009124:	1b49      	subs	r1, r1, r5
 8009126:	f021 0103 	bic.w	r1, r1, #3
 800912a:	3d03      	subs	r5, #3
 800912c:	45a8      	cmp	r8, r5
 800912e:	bf38      	it	cc
 8009130:	2100      	movcc	r1, #0
 8009132:	440b      	add	r3, r1
 8009134:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009138:	b199      	cbz	r1, 8009162 <__mdiff+0x11a>
 800913a:	6117      	str	r7, [r2, #16]
 800913c:	e79e      	b.n	800907c <__mdiff+0x34>
 800913e:	46e6      	mov	lr, ip
 8009140:	f854 1b04 	ldr.w	r1, [r4], #4
 8009144:	fa1f fc81 	uxth.w	ip, r1
 8009148:	44f4      	add	ip, lr
 800914a:	0c08      	lsrs	r0, r1, #16
 800914c:	4471      	add	r1, lr
 800914e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009152:	b289      	uxth	r1, r1
 8009154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800915c:	f846 1b04 	str.w	r1, [r6], #4
 8009160:	e7dc      	b.n	800911c <__mdiff+0xd4>
 8009162:	3f01      	subs	r7, #1
 8009164:	e7e6      	b.n	8009134 <__mdiff+0xec>
 8009166:	bf00      	nop
 8009168:	0800b3b7 	.word	0x0800b3b7
 800916c:	0800b3c8 	.word	0x0800b3c8

08009170 <__ulp>:
 8009170:	4b0e      	ldr	r3, [pc, #56]	@ (80091ac <__ulp+0x3c>)
 8009172:	400b      	ands	r3, r1
 8009174:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc08      	bgt.n	800918e <__ulp+0x1e>
 800917c:	425b      	negs	r3, r3
 800917e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009182:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009186:	da04      	bge.n	8009192 <__ulp+0x22>
 8009188:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800918c:	4113      	asrs	r3, r2
 800918e:	2200      	movs	r2, #0
 8009190:	e008      	b.n	80091a4 <__ulp+0x34>
 8009192:	f1a2 0314 	sub.w	r3, r2, #20
 8009196:	2b1e      	cmp	r3, #30
 8009198:	bfd6      	itet	le
 800919a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800919e:	2201      	movgt	r2, #1
 80091a0:	40da      	lsrle	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	7ff00000 	.word	0x7ff00000

080091b0 <__b2d>:
 80091b0:	6902      	ldr	r2, [r0, #16]
 80091b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b4:	f100 0614 	add.w	r6, r0, #20
 80091b8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80091bc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80091c0:	4f1e      	ldr	r7, [pc, #120]	@ (800923c <__b2d+0x8c>)
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7ff fd54 	bl	8008c70 <__hi0bits>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f1c0 0020 	rsb	r0, r0, #32
 80091ce:	2b0a      	cmp	r3, #10
 80091d0:	f1a2 0504 	sub.w	r5, r2, #4
 80091d4:	6008      	str	r0, [r1, #0]
 80091d6:	dc12      	bgt.n	80091fe <__b2d+0x4e>
 80091d8:	42ae      	cmp	r6, r5
 80091da:	bf2c      	ite	cs
 80091dc:	2200      	movcs	r2, #0
 80091de:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80091e2:	f1c3 0c0b 	rsb	ip, r3, #11
 80091e6:	3315      	adds	r3, #21
 80091e8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80091ec:	fa04 f303 	lsl.w	r3, r4, r3
 80091f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80091f4:	ea4e 0107 	orr.w	r1, lr, r7
 80091f8:	431a      	orrs	r2, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fe:	42ae      	cmp	r6, r5
 8009200:	bf36      	itet	cc
 8009202:	f1a2 0508 	subcc.w	r5, r2, #8
 8009206:	2200      	movcs	r2, #0
 8009208:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800920c:	3b0b      	subs	r3, #11
 800920e:	d012      	beq.n	8009236 <__b2d+0x86>
 8009210:	f1c3 0720 	rsb	r7, r3, #32
 8009214:	fa22 f107 	lsr.w	r1, r2, r7
 8009218:	409c      	lsls	r4, r3
 800921a:	430c      	orrs	r4, r1
 800921c:	42b5      	cmp	r5, r6
 800921e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009222:	bf94      	ite	ls
 8009224:	2400      	movls	r4, #0
 8009226:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800922a:	409a      	lsls	r2, r3
 800922c:	40fc      	lsrs	r4, r7
 800922e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009232:	4322      	orrs	r2, r4
 8009234:	e7e1      	b.n	80091fa <__b2d+0x4a>
 8009236:	ea44 0107 	orr.w	r1, r4, r7
 800923a:	e7de      	b.n	80091fa <__b2d+0x4a>
 800923c:	3ff00000 	.word	0x3ff00000

08009240 <__d2b>:
 8009240:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009244:	2101      	movs	r1, #1
 8009246:	4690      	mov	r8, r2
 8009248:	4699      	mov	r9, r3
 800924a:	9e08      	ldr	r6, [sp, #32]
 800924c:	f7ff fc1e 	bl	8008a8c <_Balloc>
 8009250:	4604      	mov	r4, r0
 8009252:	b930      	cbnz	r0, 8009262 <__d2b+0x22>
 8009254:	4602      	mov	r2, r0
 8009256:	f240 310f 	movw	r1, #783	@ 0x30f
 800925a:	4b23      	ldr	r3, [pc, #140]	@ (80092e8 <__d2b+0xa8>)
 800925c:	4823      	ldr	r0, [pc, #140]	@ (80092ec <__d2b+0xac>)
 800925e:	f001 f97b 	bl	800a558 <__assert_func>
 8009262:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009266:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800926a:	b10d      	cbz	r5, 8009270 <__d2b+0x30>
 800926c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	f1b8 0300 	subs.w	r3, r8, #0
 8009276:	d024      	beq.n	80092c2 <__d2b+0x82>
 8009278:	4668      	mov	r0, sp
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f7ff fd17 	bl	8008cae <__lo0bits>
 8009280:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009284:	b1d8      	cbz	r0, 80092be <__d2b+0x7e>
 8009286:	f1c0 0320 	rsb	r3, r0, #32
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	430b      	orrs	r3, r1
 8009290:	40c2      	lsrs	r2, r0
 8009292:	6163      	str	r3, [r4, #20]
 8009294:	9201      	str	r2, [sp, #4]
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf0c      	ite	eq
 800929c:	2201      	moveq	r2, #1
 800929e:	2202      	movne	r2, #2
 80092a0:	61a3      	str	r3, [r4, #24]
 80092a2:	6122      	str	r2, [r4, #16]
 80092a4:	b1ad      	cbz	r5, 80092d2 <__d2b+0x92>
 80092a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092aa:	4405      	add	r5, r0
 80092ac:	6035      	str	r5, [r6, #0]
 80092ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b4:	6018      	str	r0, [r3, #0]
 80092b6:	4620      	mov	r0, r4
 80092b8:	b002      	add	sp, #8
 80092ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80092be:	6161      	str	r1, [r4, #20]
 80092c0:	e7e9      	b.n	8009296 <__d2b+0x56>
 80092c2:	a801      	add	r0, sp, #4
 80092c4:	f7ff fcf3 	bl	8008cae <__lo0bits>
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	6163      	str	r3, [r4, #20]
 80092ce:	3020      	adds	r0, #32
 80092d0:	e7e7      	b.n	80092a2 <__d2b+0x62>
 80092d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092da:	6030      	str	r0, [r6, #0]
 80092dc:	6918      	ldr	r0, [r3, #16]
 80092de:	f7ff fcc7 	bl	8008c70 <__hi0bits>
 80092e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092e6:	e7e4      	b.n	80092b2 <__d2b+0x72>
 80092e8:	0800b3b7 	.word	0x0800b3b7
 80092ec:	0800b3c8 	.word	0x0800b3c8

080092f0 <__ratio>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	b085      	sub	sp, #20
 80092f6:	e9cd 1000 	strd	r1, r0, [sp]
 80092fa:	a902      	add	r1, sp, #8
 80092fc:	f7ff ff58 	bl	80091b0 <__b2d>
 8009300:	468b      	mov	fp, r1
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	9800      	ldr	r0, [sp, #0]
 8009308:	a903      	add	r1, sp, #12
 800930a:	f7ff ff51 	bl	80091b0 <__b2d>
 800930e:	460d      	mov	r5, r1
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	4689      	mov	r9, r1
 8009314:	6919      	ldr	r1, [r3, #16]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	4604      	mov	r4, r0
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	4630      	mov	r0, r6
 800931e:	1ac9      	subs	r1, r1, r3
 8009320:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfcd      	iteet	gt
 800932e:	463a      	movgt	r2, r7
 8009330:	462a      	movle	r2, r5
 8009332:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009336:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800933a:	bfd8      	it	le
 800933c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009340:	464b      	mov	r3, r9
 8009342:	4622      	mov	r2, r4
 8009344:	4659      	mov	r1, fp
 8009346:	f7f7 f9f1 	bl	800072c <__aeabi_ddiv>
 800934a:	b005      	add	sp, #20
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009350 <__copybits>:
 8009350:	3901      	subs	r1, #1
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	1149      	asrs	r1, r1, #5
 8009356:	6914      	ldr	r4, [r2, #16]
 8009358:	3101      	adds	r1, #1
 800935a:	f102 0314 	add.w	r3, r2, #20
 800935e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009362:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009366:	1f05      	subs	r5, r0, #4
 8009368:	42a3      	cmp	r3, r4
 800936a:	d30c      	bcc.n	8009386 <__copybits+0x36>
 800936c:	1aa3      	subs	r3, r4, r2
 800936e:	3b11      	subs	r3, #17
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3211      	adds	r2, #17
 8009376:	42a2      	cmp	r2, r4
 8009378:	bf88      	it	hi
 800937a:	2300      	movhi	r3, #0
 800937c:	4418      	add	r0, r3
 800937e:	2300      	movs	r3, #0
 8009380:	4288      	cmp	r0, r1
 8009382:	d305      	bcc.n	8009390 <__copybits+0x40>
 8009384:	bd70      	pop	{r4, r5, r6, pc}
 8009386:	f853 6b04 	ldr.w	r6, [r3], #4
 800938a:	f845 6f04 	str.w	r6, [r5, #4]!
 800938e:	e7eb      	b.n	8009368 <__copybits+0x18>
 8009390:	f840 3b04 	str.w	r3, [r0], #4
 8009394:	e7f4      	b.n	8009380 <__copybits+0x30>

08009396 <__any_on>:
 8009396:	f100 0214 	add.w	r2, r0, #20
 800939a:	6900      	ldr	r0, [r0, #16]
 800939c:	114b      	asrs	r3, r1, #5
 800939e:	4298      	cmp	r0, r3
 80093a0:	b510      	push	{r4, lr}
 80093a2:	db11      	blt.n	80093c8 <__any_on+0x32>
 80093a4:	dd0a      	ble.n	80093bc <__any_on+0x26>
 80093a6:	f011 011f 	ands.w	r1, r1, #31
 80093aa:	d007      	beq.n	80093bc <__any_on+0x26>
 80093ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80093b0:	fa24 f001 	lsr.w	r0, r4, r1
 80093b4:	fa00 f101 	lsl.w	r1, r0, r1
 80093b8:	428c      	cmp	r4, r1
 80093ba:	d10b      	bne.n	80093d4 <__any_on+0x3e>
 80093bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d803      	bhi.n	80093cc <__any_on+0x36>
 80093c4:	2000      	movs	r0, #0
 80093c6:	bd10      	pop	{r4, pc}
 80093c8:	4603      	mov	r3, r0
 80093ca:	e7f7      	b.n	80093bc <__any_on+0x26>
 80093cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d0f5      	beq.n	80093c0 <__any_on+0x2a>
 80093d4:	2001      	movs	r0, #1
 80093d6:	e7f6      	b.n	80093c6 <__any_on+0x30>

080093d8 <sulp>:
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	460f      	mov	r7, r1
 80093de:	4690      	mov	r8, r2
 80093e0:	f7ff fec6 	bl	8009170 <__ulp>
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	d011      	beq.n	8009412 <sulp+0x3a>
 80093ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80093f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dd0b      	ble.n	8009412 <sulp+0x3a>
 80093fa:	2400      	movs	r4, #0
 80093fc:	051b      	lsls	r3, r3, #20
 80093fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009402:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	f7f7 f865 	bl	80004d8 <__aeabi_dmul>
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941a:	0000      	movs	r0, r0
 800941c:	0000      	movs	r0, r0
	...

08009420 <_strtod_l>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b09f      	sub	sp, #124	@ 0x7c
 8009426:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009428:	2200      	movs	r2, #0
 800942a:	460c      	mov	r4, r1
 800942c:	921a      	str	r2, [sp, #104]	@ 0x68
 800942e:	f04f 0a00 	mov.w	sl, #0
 8009432:	f04f 0b00 	mov.w	fp, #0
 8009436:	460a      	mov	r2, r1
 8009438:	9005      	str	r0, [sp, #20]
 800943a:	9219      	str	r2, [sp, #100]	@ 0x64
 800943c:	7811      	ldrb	r1, [r2, #0]
 800943e:	292b      	cmp	r1, #43	@ 0x2b
 8009440:	d048      	beq.n	80094d4 <_strtod_l+0xb4>
 8009442:	d836      	bhi.n	80094b2 <_strtod_l+0x92>
 8009444:	290d      	cmp	r1, #13
 8009446:	d830      	bhi.n	80094aa <_strtod_l+0x8a>
 8009448:	2908      	cmp	r1, #8
 800944a:	d830      	bhi.n	80094ae <_strtod_l+0x8e>
 800944c:	2900      	cmp	r1, #0
 800944e:	d039      	beq.n	80094c4 <_strtod_l+0xa4>
 8009450:	2200      	movs	r2, #0
 8009452:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009454:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009456:	782a      	ldrb	r2, [r5, #0]
 8009458:	2a30      	cmp	r2, #48	@ 0x30
 800945a:	f040 80b1 	bne.w	80095c0 <_strtod_l+0x1a0>
 800945e:	786a      	ldrb	r2, [r5, #1]
 8009460:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009464:	2a58      	cmp	r2, #88	@ 0x58
 8009466:	d16c      	bne.n	8009542 <_strtod_l+0x122>
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946c:	4a8e      	ldr	r2, [pc, #568]	@ (80096a8 <_strtod_l+0x288>)
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	ab1a      	add	r3, sp, #104	@ 0x68
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	9805      	ldr	r0, [sp, #20]
 8009476:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009478:	a919      	add	r1, sp, #100	@ 0x64
 800947a:	f001 f907 	bl	800a68c <__gethex>
 800947e:	f010 060f 	ands.w	r6, r0, #15
 8009482:	4604      	mov	r4, r0
 8009484:	d005      	beq.n	8009492 <_strtod_l+0x72>
 8009486:	2e06      	cmp	r6, #6
 8009488:	d126      	bne.n	80094d8 <_strtod_l+0xb8>
 800948a:	2300      	movs	r3, #0
 800948c:	3501      	adds	r5, #1
 800948e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009494:	2b00      	cmp	r3, #0
 8009496:	f040 8584 	bne.w	8009fa2 <_strtod_l+0xb82>
 800949a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800949c:	b1bb      	cbz	r3, 80094ce <_strtod_l+0xae>
 800949e:	4650      	mov	r0, sl
 80094a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80094a4:	b01f      	add	sp, #124	@ 0x7c
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	2920      	cmp	r1, #32
 80094ac:	d1d0      	bne.n	8009450 <_strtod_l+0x30>
 80094ae:	3201      	adds	r2, #1
 80094b0:	e7c3      	b.n	800943a <_strtod_l+0x1a>
 80094b2:	292d      	cmp	r1, #45	@ 0x2d
 80094b4:	d1cc      	bne.n	8009450 <_strtod_l+0x30>
 80094b6:	2101      	movs	r1, #1
 80094b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094ba:	1c51      	adds	r1, r2, #1
 80094bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80094be:	7852      	ldrb	r2, [r2, #1]
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d1c7      	bne.n	8009454 <_strtod_l+0x34>
 80094c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094c6:	9419      	str	r4, [sp, #100]	@ 0x64
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f040 8568 	bne.w	8009f9e <_strtod_l+0xb7e>
 80094ce:	4650      	mov	r0, sl
 80094d0:	4659      	mov	r1, fp
 80094d2:	e7e7      	b.n	80094a4 <_strtod_l+0x84>
 80094d4:	2100      	movs	r1, #0
 80094d6:	e7ef      	b.n	80094b8 <_strtod_l+0x98>
 80094d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094da:	b13a      	cbz	r2, 80094ec <_strtod_l+0xcc>
 80094dc:	2135      	movs	r1, #53	@ 0x35
 80094de:	a81c      	add	r0, sp, #112	@ 0x70
 80094e0:	f7ff ff36 	bl	8009350 <__copybits>
 80094e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094e6:	9805      	ldr	r0, [sp, #20]
 80094e8:	f7ff fb10 	bl	8008b0c <_Bfree>
 80094ec:	3e01      	subs	r6, #1
 80094ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094f0:	2e04      	cmp	r6, #4
 80094f2:	d806      	bhi.n	8009502 <_strtod_l+0xe2>
 80094f4:	e8df f006 	tbb	[pc, r6]
 80094f8:	201d0314 	.word	0x201d0314
 80094fc:	14          	.byte	0x14
 80094fd:	00          	.byte	0x00
 80094fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009502:	05e1      	lsls	r1, r4, #23
 8009504:	bf48      	it	mi
 8009506:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800950a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800950e:	0d1b      	lsrs	r3, r3, #20
 8009510:	051b      	lsls	r3, r3, #20
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1bd      	bne.n	8009492 <_strtod_l+0x72>
 8009516:	f7fe fb1d 	bl	8007b54 <__errno>
 800951a:	2322      	movs	r3, #34	@ 0x22
 800951c:	6003      	str	r3, [r0, #0]
 800951e:	e7b8      	b.n	8009492 <_strtod_l+0x72>
 8009520:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009524:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009528:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800952c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009530:	e7e7      	b.n	8009502 <_strtod_l+0xe2>
 8009532:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80096ac <_strtod_l+0x28c>
 8009536:	e7e4      	b.n	8009502 <_strtod_l+0xe2>
 8009538:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800953c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009540:	e7df      	b.n	8009502 <_strtod_l+0xe2>
 8009542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	9219      	str	r2, [sp, #100]	@ 0x64
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	2b30      	cmp	r3, #48	@ 0x30
 800954c:	d0f9      	beq.n	8009542 <_strtod_l+0x122>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d09f      	beq.n	8009492 <_strtod_l+0x72>
 8009552:	2301      	movs	r3, #1
 8009554:	9309      	str	r3, [sp, #36]	@ 0x24
 8009556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009558:	220a      	movs	r2, #10
 800955a:	930c      	str	r3, [sp, #48]	@ 0x30
 800955c:	2300      	movs	r3, #0
 800955e:	461f      	mov	r7, r3
 8009560:	9308      	str	r3, [sp, #32]
 8009562:	930a      	str	r3, [sp, #40]	@ 0x28
 8009564:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009566:	7805      	ldrb	r5, [r0, #0]
 8009568:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800956c:	b2d9      	uxtb	r1, r3
 800956e:	2909      	cmp	r1, #9
 8009570:	d928      	bls.n	80095c4 <_strtod_l+0x1a4>
 8009572:	2201      	movs	r2, #1
 8009574:	494e      	ldr	r1, [pc, #312]	@ (80096b0 <_strtod_l+0x290>)
 8009576:	f000 ffc7 	bl	800a508 <strncmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	d032      	beq.n	80095e4 <_strtod_l+0x1c4>
 800957e:	2000      	movs	r0, #0
 8009580:	462a      	mov	r2, r5
 8009582:	4681      	mov	r9, r0
 8009584:	463d      	mov	r5, r7
 8009586:	4603      	mov	r3, r0
 8009588:	2a65      	cmp	r2, #101	@ 0x65
 800958a:	d001      	beq.n	8009590 <_strtod_l+0x170>
 800958c:	2a45      	cmp	r2, #69	@ 0x45
 800958e:	d114      	bne.n	80095ba <_strtod_l+0x19a>
 8009590:	b91d      	cbnz	r5, 800959a <_strtod_l+0x17a>
 8009592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009594:	4302      	orrs	r2, r0
 8009596:	d095      	beq.n	80094c4 <_strtod_l+0xa4>
 8009598:	2500      	movs	r5, #0
 800959a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800959c:	1c62      	adds	r2, r4, #1
 800959e:	9219      	str	r2, [sp, #100]	@ 0x64
 80095a0:	7862      	ldrb	r2, [r4, #1]
 80095a2:	2a2b      	cmp	r2, #43	@ 0x2b
 80095a4:	d077      	beq.n	8009696 <_strtod_l+0x276>
 80095a6:	2a2d      	cmp	r2, #45	@ 0x2d
 80095a8:	d07b      	beq.n	80096a2 <_strtod_l+0x282>
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80095b2:	2909      	cmp	r1, #9
 80095b4:	f240 8082 	bls.w	80096bc <_strtod_l+0x29c>
 80095b8:	9419      	str	r4, [sp, #100]	@ 0x64
 80095ba:	f04f 0800 	mov.w	r8, #0
 80095be:	e0a2      	b.n	8009706 <_strtod_l+0x2e6>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e7c7      	b.n	8009554 <_strtod_l+0x134>
 80095c4:	2f08      	cmp	r7, #8
 80095c6:	bfd5      	itete	le
 80095c8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80095ca:	9908      	ldrgt	r1, [sp, #32]
 80095cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80095d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80095d4:	f100 0001 	add.w	r0, r0, #1
 80095d8:	bfd4      	ite	le
 80095da:	930a      	strle	r3, [sp, #40]	@ 0x28
 80095dc:	9308      	strgt	r3, [sp, #32]
 80095de:	3701      	adds	r7, #1
 80095e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80095e2:	e7bf      	b.n	8009564 <_strtod_l+0x144>
 80095e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80095ea:	785a      	ldrb	r2, [r3, #1]
 80095ec:	b37f      	cbz	r7, 800964e <_strtod_l+0x22e>
 80095ee:	4681      	mov	r9, r0
 80095f0:	463d      	mov	r5, r7
 80095f2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d912      	bls.n	8009620 <_strtod_l+0x200>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e7c4      	b.n	8009588 <_strtod_l+0x168>
 80095fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009600:	3001      	adds	r0, #1
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	9219      	str	r2, [sp, #100]	@ 0x64
 8009606:	785a      	ldrb	r2, [r3, #1]
 8009608:	2a30      	cmp	r2, #48	@ 0x30
 800960a:	d0f8      	beq.n	80095fe <_strtod_l+0x1de>
 800960c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009610:	2b08      	cmp	r3, #8
 8009612:	f200 84cb 	bhi.w	8009fac <_strtod_l+0xb8c>
 8009616:	4681      	mov	r9, r0
 8009618:	2000      	movs	r0, #0
 800961a:	4605      	mov	r5, r0
 800961c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800961e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009620:	3a30      	subs	r2, #48	@ 0x30
 8009622:	f100 0301 	add.w	r3, r0, #1
 8009626:	d02a      	beq.n	800967e <_strtod_l+0x25e>
 8009628:	4499      	add	r9, r3
 800962a:	210a      	movs	r1, #10
 800962c:	462b      	mov	r3, r5
 800962e:	eb00 0c05 	add.w	ip, r0, r5
 8009632:	4563      	cmp	r3, ip
 8009634:	d10d      	bne.n	8009652 <_strtod_l+0x232>
 8009636:	1c69      	adds	r1, r5, #1
 8009638:	4401      	add	r1, r0
 800963a:	4428      	add	r0, r5
 800963c:	2808      	cmp	r0, #8
 800963e:	dc16      	bgt.n	800966e <_strtod_l+0x24e>
 8009640:	230a      	movs	r3, #10
 8009642:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009644:	fb03 2300 	mla	r3, r3, r0, r2
 8009648:	930a      	str	r3, [sp, #40]	@ 0x28
 800964a:	2300      	movs	r3, #0
 800964c:	e018      	b.n	8009680 <_strtod_l+0x260>
 800964e:	4638      	mov	r0, r7
 8009650:	e7da      	b.n	8009608 <_strtod_l+0x1e8>
 8009652:	2b08      	cmp	r3, #8
 8009654:	f103 0301 	add.w	r3, r3, #1
 8009658:	dc03      	bgt.n	8009662 <_strtod_l+0x242>
 800965a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800965c:	434e      	muls	r6, r1
 800965e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009660:	e7e7      	b.n	8009632 <_strtod_l+0x212>
 8009662:	2b10      	cmp	r3, #16
 8009664:	bfde      	ittt	le
 8009666:	9e08      	ldrle	r6, [sp, #32]
 8009668:	434e      	mulle	r6, r1
 800966a:	9608      	strle	r6, [sp, #32]
 800966c:	e7e1      	b.n	8009632 <_strtod_l+0x212>
 800966e:	280f      	cmp	r0, #15
 8009670:	dceb      	bgt.n	800964a <_strtod_l+0x22a>
 8009672:	230a      	movs	r3, #10
 8009674:	9808      	ldr	r0, [sp, #32]
 8009676:	fb03 2300 	mla	r3, r3, r0, r2
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	e7e5      	b.n	800964a <_strtod_l+0x22a>
 800967e:	4629      	mov	r1, r5
 8009680:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009682:	460d      	mov	r5, r1
 8009684:	1c50      	adds	r0, r2, #1
 8009686:	9019      	str	r0, [sp, #100]	@ 0x64
 8009688:	7852      	ldrb	r2, [r2, #1]
 800968a:	4618      	mov	r0, r3
 800968c:	e7b1      	b.n	80095f2 <_strtod_l+0x1d2>
 800968e:	f04f 0900 	mov.w	r9, #0
 8009692:	2301      	movs	r3, #1
 8009694:	e77d      	b.n	8009592 <_strtod_l+0x172>
 8009696:	f04f 0c00 	mov.w	ip, #0
 800969a:	1ca2      	adds	r2, r4, #2
 800969c:	9219      	str	r2, [sp, #100]	@ 0x64
 800969e:	78a2      	ldrb	r2, [r4, #2]
 80096a0:	e785      	b.n	80095ae <_strtod_l+0x18e>
 80096a2:	f04f 0c01 	mov.w	ip, #1
 80096a6:	e7f8      	b.n	800969a <_strtod_l+0x27a>
 80096a8:	0800b538 	.word	0x0800b538
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	0800b520 	.word	0x0800b520
 80096b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096b6:	1c51      	adds	r1, r2, #1
 80096b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80096ba:	7852      	ldrb	r2, [r2, #1]
 80096bc:	2a30      	cmp	r2, #48	@ 0x30
 80096be:	d0f9      	beq.n	80096b4 <_strtod_l+0x294>
 80096c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80096c4:	2908      	cmp	r1, #8
 80096c6:	f63f af78 	bhi.w	80095ba <_strtod_l+0x19a>
 80096ca:	f04f 080a 	mov.w	r8, #10
 80096ce:	3a30      	subs	r2, #48	@ 0x30
 80096d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80096d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80096d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096d8:	1c56      	adds	r6, r2, #1
 80096da:	9619      	str	r6, [sp, #100]	@ 0x64
 80096dc:	7852      	ldrb	r2, [r2, #1]
 80096de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80096e2:	f1be 0f09 	cmp.w	lr, #9
 80096e6:	d939      	bls.n	800975c <_strtod_l+0x33c>
 80096e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096ee:	1a76      	subs	r6, r6, r1
 80096f0:	2e08      	cmp	r6, #8
 80096f2:	dc03      	bgt.n	80096fc <_strtod_l+0x2dc>
 80096f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096f6:	4588      	cmp	r8, r1
 80096f8:	bfa8      	it	ge
 80096fa:	4688      	movge	r8, r1
 80096fc:	f1bc 0f00 	cmp.w	ip, #0
 8009700:	d001      	beq.n	8009706 <_strtod_l+0x2e6>
 8009702:	f1c8 0800 	rsb	r8, r8, #0
 8009706:	2d00      	cmp	r5, #0
 8009708:	d14e      	bne.n	80097a8 <_strtod_l+0x388>
 800970a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800970c:	4308      	orrs	r0, r1
 800970e:	f47f aec0 	bne.w	8009492 <_strtod_l+0x72>
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f aed6 	bne.w	80094c4 <_strtod_l+0xa4>
 8009718:	2a69      	cmp	r2, #105	@ 0x69
 800971a:	d028      	beq.n	800976e <_strtod_l+0x34e>
 800971c:	dc25      	bgt.n	800976a <_strtod_l+0x34a>
 800971e:	2a49      	cmp	r2, #73	@ 0x49
 8009720:	d025      	beq.n	800976e <_strtod_l+0x34e>
 8009722:	2a4e      	cmp	r2, #78	@ 0x4e
 8009724:	f47f aece 	bne.w	80094c4 <_strtod_l+0xa4>
 8009728:	499a      	ldr	r1, [pc, #616]	@ (8009994 <_strtod_l+0x574>)
 800972a:	a819      	add	r0, sp, #100	@ 0x64
 800972c:	f001 f9d0 	bl	800aad0 <__match>
 8009730:	2800      	cmp	r0, #0
 8009732:	f43f aec7 	beq.w	80094c4 <_strtod_l+0xa4>
 8009736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b28      	cmp	r3, #40	@ 0x28
 800973c:	d12e      	bne.n	800979c <_strtod_l+0x37c>
 800973e:	4996      	ldr	r1, [pc, #600]	@ (8009998 <_strtod_l+0x578>)
 8009740:	aa1c      	add	r2, sp, #112	@ 0x70
 8009742:	a819      	add	r0, sp, #100	@ 0x64
 8009744:	f001 f9d8 	bl	800aaf8 <__hexnan>
 8009748:	2805      	cmp	r0, #5
 800974a:	d127      	bne.n	800979c <_strtod_l+0x37c>
 800974c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800974e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009752:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009756:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800975a:	e69a      	b.n	8009492 <_strtod_l+0x72>
 800975c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800975e:	fb08 2101 	mla	r1, r8, r1, r2
 8009762:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009766:	920e      	str	r2, [sp, #56]	@ 0x38
 8009768:	e7b5      	b.n	80096d6 <_strtod_l+0x2b6>
 800976a:	2a6e      	cmp	r2, #110	@ 0x6e
 800976c:	e7da      	b.n	8009724 <_strtod_l+0x304>
 800976e:	498b      	ldr	r1, [pc, #556]	@ (800999c <_strtod_l+0x57c>)
 8009770:	a819      	add	r0, sp, #100	@ 0x64
 8009772:	f001 f9ad 	bl	800aad0 <__match>
 8009776:	2800      	cmp	r0, #0
 8009778:	f43f aea4 	beq.w	80094c4 <_strtod_l+0xa4>
 800977c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800977e:	4988      	ldr	r1, [pc, #544]	@ (80099a0 <_strtod_l+0x580>)
 8009780:	3b01      	subs	r3, #1
 8009782:	a819      	add	r0, sp, #100	@ 0x64
 8009784:	9319      	str	r3, [sp, #100]	@ 0x64
 8009786:	f001 f9a3 	bl	800aad0 <__match>
 800978a:	b910      	cbnz	r0, 8009792 <_strtod_l+0x372>
 800978c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800978e:	3301      	adds	r3, #1
 8009790:	9319      	str	r3, [sp, #100]	@ 0x64
 8009792:	f04f 0a00 	mov.w	sl, #0
 8009796:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80099a4 <_strtod_l+0x584>
 800979a:	e67a      	b.n	8009492 <_strtod_l+0x72>
 800979c:	4882      	ldr	r0, [pc, #520]	@ (80099a8 <_strtod_l+0x588>)
 800979e:	f000 fed5 	bl	800a54c <nan>
 80097a2:	4682      	mov	sl, r0
 80097a4:	468b      	mov	fp, r1
 80097a6:	e674      	b.n	8009492 <_strtod_l+0x72>
 80097a8:	eba8 0309 	sub.w	r3, r8, r9
 80097ac:	2f00      	cmp	r7, #0
 80097ae:	bf08      	it	eq
 80097b0:	462f      	moveq	r7, r5
 80097b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097b4:	2d10      	cmp	r5, #16
 80097b6:	462c      	mov	r4, r5
 80097b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ba:	bfa8      	it	ge
 80097bc:	2410      	movge	r4, #16
 80097be:	f7f6 fe11 	bl	80003e4 <__aeabi_ui2d>
 80097c2:	2d09      	cmp	r5, #9
 80097c4:	4682      	mov	sl, r0
 80097c6:	468b      	mov	fp, r1
 80097c8:	dc11      	bgt.n	80097ee <_strtod_l+0x3ce>
 80097ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f43f ae60 	beq.w	8009492 <_strtod_l+0x72>
 80097d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d4:	dd76      	ble.n	80098c4 <_strtod_l+0x4a4>
 80097d6:	2b16      	cmp	r3, #22
 80097d8:	dc5d      	bgt.n	8009896 <_strtod_l+0x476>
 80097da:	4974      	ldr	r1, [pc, #464]	@ (80099ac <_strtod_l+0x58c>)
 80097dc:	4652      	mov	r2, sl
 80097de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097e2:	465b      	mov	r3, fp
 80097e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097e8:	f7f6 fe76 	bl	80004d8 <__aeabi_dmul>
 80097ec:	e7d9      	b.n	80097a2 <_strtod_l+0x382>
 80097ee:	4b6f      	ldr	r3, [pc, #444]	@ (80099ac <_strtod_l+0x58c>)
 80097f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097f8:	f7f6 fe6e 	bl	80004d8 <__aeabi_dmul>
 80097fc:	4682      	mov	sl, r0
 80097fe:	9808      	ldr	r0, [sp, #32]
 8009800:	468b      	mov	fp, r1
 8009802:	f7f6 fdef 	bl	80003e4 <__aeabi_ui2d>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4650      	mov	r0, sl
 800980c:	4659      	mov	r1, fp
 800980e:	f7f6 fcad 	bl	800016c <__adddf3>
 8009812:	2d0f      	cmp	r5, #15
 8009814:	4682      	mov	sl, r0
 8009816:	468b      	mov	fp, r1
 8009818:	ddd7      	ble.n	80097ca <_strtod_l+0x3aa>
 800981a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981c:	1b2c      	subs	r4, r5, r4
 800981e:	441c      	add	r4, r3
 8009820:	2c00      	cmp	r4, #0
 8009822:	f340 8096 	ble.w	8009952 <_strtod_l+0x532>
 8009826:	f014 030f 	ands.w	r3, r4, #15
 800982a:	d00a      	beq.n	8009842 <_strtod_l+0x422>
 800982c:	495f      	ldr	r1, [pc, #380]	@ (80099ac <_strtod_l+0x58c>)
 800982e:	4652      	mov	r2, sl
 8009830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009838:	465b      	mov	r3, fp
 800983a:	f7f6 fe4d 	bl	80004d8 <__aeabi_dmul>
 800983e:	4682      	mov	sl, r0
 8009840:	468b      	mov	fp, r1
 8009842:	f034 040f 	bics.w	r4, r4, #15
 8009846:	d073      	beq.n	8009930 <_strtod_l+0x510>
 8009848:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800984c:	dd48      	ble.n	80098e0 <_strtod_l+0x4c0>
 800984e:	2400      	movs	r4, #0
 8009850:	46a0      	mov	r8, r4
 8009852:	46a1      	mov	r9, r4
 8009854:	940a      	str	r4, [sp, #40]	@ 0x28
 8009856:	2322      	movs	r3, #34	@ 0x22
 8009858:	f04f 0a00 	mov.w	sl, #0
 800985c:	9a05      	ldr	r2, [sp, #20]
 800985e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80099a4 <_strtod_l+0x584>
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f ae13 	beq.w	8009492 <_strtod_l+0x72>
 800986c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	f7ff f94c 	bl	8008b0c <_Bfree>
 8009874:	4649      	mov	r1, r9
 8009876:	9805      	ldr	r0, [sp, #20]
 8009878:	f7ff f948 	bl	8008b0c <_Bfree>
 800987c:	4641      	mov	r1, r8
 800987e:	9805      	ldr	r0, [sp, #20]
 8009880:	f7ff f944 	bl	8008b0c <_Bfree>
 8009884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009886:	9805      	ldr	r0, [sp, #20]
 8009888:	f7ff f940 	bl	8008b0c <_Bfree>
 800988c:	4621      	mov	r1, r4
 800988e:	9805      	ldr	r0, [sp, #20]
 8009890:	f7ff f93c 	bl	8008b0c <_Bfree>
 8009894:	e5fd      	b.n	8009492 <_strtod_l+0x72>
 8009896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009898:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800989c:	4293      	cmp	r3, r2
 800989e:	dbbc      	blt.n	800981a <_strtod_l+0x3fa>
 80098a0:	4c42      	ldr	r4, [pc, #264]	@ (80099ac <_strtod_l+0x58c>)
 80098a2:	f1c5 050f 	rsb	r5, r5, #15
 80098a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80098aa:	4652      	mov	r2, sl
 80098ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b0:	465b      	mov	r3, fp
 80098b2:	f7f6 fe11 	bl	80004d8 <__aeabi_dmul>
 80098b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b8:	1b5d      	subs	r5, r3, r5
 80098ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80098be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80098c2:	e791      	b.n	80097e8 <_strtod_l+0x3c8>
 80098c4:	3316      	adds	r3, #22
 80098c6:	dba8      	blt.n	800981a <_strtod_l+0x3fa>
 80098c8:	4b38      	ldr	r3, [pc, #224]	@ (80099ac <_strtod_l+0x58c>)
 80098ca:	eba9 0808 	sub.w	r8, r9, r8
 80098ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80098d2:	4650      	mov	r0, sl
 80098d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80098d8:	4659      	mov	r1, fp
 80098da:	f7f6 ff27 	bl	800072c <__aeabi_ddiv>
 80098de:	e760      	b.n	80097a2 <_strtod_l+0x382>
 80098e0:	4b33      	ldr	r3, [pc, #204]	@ (80099b0 <_strtod_l+0x590>)
 80098e2:	4650      	mov	r0, sl
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	2300      	movs	r3, #0
 80098e8:	4659      	mov	r1, fp
 80098ea:	461e      	mov	r6, r3
 80098ec:	1124      	asrs	r4, r4, #4
 80098ee:	2c01      	cmp	r4, #1
 80098f0:	dc21      	bgt.n	8009936 <_strtod_l+0x516>
 80098f2:	b10b      	cbz	r3, 80098f8 <_strtod_l+0x4d8>
 80098f4:	4682      	mov	sl, r0
 80098f6:	468b      	mov	fp, r1
 80098f8:	492d      	ldr	r1, [pc, #180]	@ (80099b0 <_strtod_l+0x590>)
 80098fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009902:	4652      	mov	r2, sl
 8009904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009908:	465b      	mov	r3, fp
 800990a:	f7f6 fde5 	bl	80004d8 <__aeabi_dmul>
 800990e:	4b25      	ldr	r3, [pc, #148]	@ (80099a4 <_strtod_l+0x584>)
 8009910:	460a      	mov	r2, r1
 8009912:	400b      	ands	r3, r1
 8009914:	4927      	ldr	r1, [pc, #156]	@ (80099b4 <_strtod_l+0x594>)
 8009916:	4682      	mov	sl, r0
 8009918:	428b      	cmp	r3, r1
 800991a:	d898      	bhi.n	800984e <_strtod_l+0x42e>
 800991c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009920:	428b      	cmp	r3, r1
 8009922:	bf86      	itte	hi
 8009924:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009928:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80099b8 <_strtod_l+0x598>
 800992c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009930:	2300      	movs	r3, #0
 8009932:	9308      	str	r3, [sp, #32]
 8009934:	e07a      	b.n	8009a2c <_strtod_l+0x60c>
 8009936:	07e2      	lsls	r2, r4, #31
 8009938:	d505      	bpl.n	8009946 <_strtod_l+0x526>
 800993a:	9b08      	ldr	r3, [sp, #32]
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	2301      	movs	r3, #1
 8009946:	9a08      	ldr	r2, [sp, #32]
 8009948:	3601      	adds	r6, #1
 800994a:	3208      	adds	r2, #8
 800994c:	1064      	asrs	r4, r4, #1
 800994e:	9208      	str	r2, [sp, #32]
 8009950:	e7cd      	b.n	80098ee <_strtod_l+0x4ce>
 8009952:	d0ed      	beq.n	8009930 <_strtod_l+0x510>
 8009954:	4264      	negs	r4, r4
 8009956:	f014 020f 	ands.w	r2, r4, #15
 800995a:	d00a      	beq.n	8009972 <_strtod_l+0x552>
 800995c:	4b13      	ldr	r3, [pc, #76]	@ (80099ac <_strtod_l+0x58c>)
 800995e:	4650      	mov	r0, sl
 8009960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009964:	4659      	mov	r1, fp
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fedf 	bl	800072c <__aeabi_ddiv>
 800996e:	4682      	mov	sl, r0
 8009970:	468b      	mov	fp, r1
 8009972:	1124      	asrs	r4, r4, #4
 8009974:	d0dc      	beq.n	8009930 <_strtod_l+0x510>
 8009976:	2c1f      	cmp	r4, #31
 8009978:	dd20      	ble.n	80099bc <_strtod_l+0x59c>
 800997a:	2400      	movs	r4, #0
 800997c:	46a0      	mov	r8, r4
 800997e:	46a1      	mov	r9, r4
 8009980:	940a      	str	r4, [sp, #40]	@ 0x28
 8009982:	2322      	movs	r3, #34	@ 0x22
 8009984:	9a05      	ldr	r2, [sp, #20]
 8009986:	f04f 0a00 	mov.w	sl, #0
 800998a:	f04f 0b00 	mov.w	fp, #0
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	e768      	b.n	8009864 <_strtod_l+0x444>
 8009992:	bf00      	nop
 8009994:	0800b30f 	.word	0x0800b30f
 8009998:	0800b524 	.word	0x0800b524
 800999c:	0800b307 	.word	0x0800b307
 80099a0:	0800b33e 	.word	0x0800b33e
 80099a4:	7ff00000 	.word	0x7ff00000
 80099a8:	0800b6cd 	.word	0x0800b6cd
 80099ac:	0800b458 	.word	0x0800b458
 80099b0:	0800b430 	.word	0x0800b430
 80099b4:	7ca00000 	.word	0x7ca00000
 80099b8:	7fefffff 	.word	0x7fefffff
 80099bc:	f014 0310 	ands.w	r3, r4, #16
 80099c0:	bf18      	it	ne
 80099c2:	236a      	movne	r3, #106	@ 0x6a
 80099c4:	4650      	mov	r0, sl
 80099c6:	9308      	str	r3, [sp, #32]
 80099c8:	4659      	mov	r1, fp
 80099ca:	2300      	movs	r3, #0
 80099cc:	4ea9      	ldr	r6, [pc, #676]	@ (8009c74 <_strtod_l+0x854>)
 80099ce:	07e2      	lsls	r2, r4, #31
 80099d0:	d504      	bpl.n	80099dc <_strtod_l+0x5bc>
 80099d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099d6:	f7f6 fd7f 	bl	80004d8 <__aeabi_dmul>
 80099da:	2301      	movs	r3, #1
 80099dc:	1064      	asrs	r4, r4, #1
 80099de:	f106 0608 	add.w	r6, r6, #8
 80099e2:	d1f4      	bne.n	80099ce <_strtod_l+0x5ae>
 80099e4:	b10b      	cbz	r3, 80099ea <_strtod_l+0x5ca>
 80099e6:	4682      	mov	sl, r0
 80099e8:	468b      	mov	fp, r1
 80099ea:	9b08      	ldr	r3, [sp, #32]
 80099ec:	b1b3      	cbz	r3, 8009a1c <_strtod_l+0x5fc>
 80099ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	4659      	mov	r1, fp
 80099fa:	dd0f      	ble.n	8009a1c <_strtod_l+0x5fc>
 80099fc:	2b1f      	cmp	r3, #31
 80099fe:	dd57      	ble.n	8009ab0 <_strtod_l+0x690>
 8009a00:	2b34      	cmp	r3, #52	@ 0x34
 8009a02:	bfd8      	it	le
 8009a04:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009a08:	f04f 0a00 	mov.w	sl, #0
 8009a0c:	bfcf      	iteee	gt
 8009a0e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a12:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a16:	4093      	lslle	r3, r2
 8009a18:	ea03 0b01 	andle.w	fp, r3, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	f7f6 ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d1a6      	bne.n	800997a <_strtod_l+0x55a>
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a2e:	463a      	mov	r2, r7
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a34:	462b      	mov	r3, r5
 8009a36:	9805      	ldr	r0, [sp, #20]
 8009a38:	f7ff f8d0 	bl	8008bdc <__s2b>
 8009a3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f43f af05 	beq.w	800984e <_strtod_l+0x42e>
 8009a44:	2400      	movs	r4, #0
 8009a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a48:	eba9 0308 	sub.w	r3, r9, r8
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	bfa8      	it	ge
 8009a50:	2300      	movge	r3, #0
 8009a52:	46a0      	mov	r8, r4
 8009a54:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5e:	9805      	ldr	r0, [sp, #20]
 8009a60:	6859      	ldr	r1, [r3, #4]
 8009a62:	f7ff f813 	bl	8008a8c <_Balloc>
 8009a66:	4681      	mov	r9, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f43f aef4 	beq.w	8009856 <_strtod_l+0x436>
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a70:	300c      	adds	r0, #12
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	f103 010c 	add.w	r1, r3, #12
 8009a78:	3202      	adds	r2, #2
 8009a7a:	0092      	lsls	r2, r2, #2
 8009a7c:	f7fe f8a5 	bl	8007bca <memcpy>
 8009a80:	ab1c      	add	r3, sp, #112	@ 0x70
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4652      	mov	r2, sl
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	9805      	ldr	r0, [sp, #20]
 8009a8e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a92:	f7ff fbd5 	bl	8009240 <__d2b>
 8009a96:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f43f aedc 	beq.w	8009856 <_strtod_l+0x436>
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	9805      	ldr	r0, [sp, #20]
 8009aa2:	f7ff f931 	bl	8008d08 <__i2b>
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	b948      	cbnz	r0, 8009abe <_strtod_l+0x69e>
 8009aaa:	f04f 0800 	mov.w	r8, #0
 8009aae:	e6d2      	b.n	8009856 <_strtod_l+0x436>
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab8:	ea03 0a0a 	and.w	sl, r3, sl
 8009abc:	e7ae      	b.n	8009a1c <_strtod_l+0x5fc>
 8009abe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ac0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ac2:	2d00      	cmp	r5, #0
 8009ac4:	bfab      	itete	ge
 8009ac6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ac8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009aca:	18ef      	addge	r7, r5, r3
 8009acc:	1b5e      	sublt	r6, r3, r5
 8009ace:	9b08      	ldr	r3, [sp, #32]
 8009ad0:	bfa8      	it	ge
 8009ad2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ad4:	eba5 0503 	sub.w	r5, r5, r3
 8009ad8:	4415      	add	r5, r2
 8009ada:	4b67      	ldr	r3, [pc, #412]	@ (8009c78 <_strtod_l+0x858>)
 8009adc:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8009ae0:	bfb8      	it	lt
 8009ae2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ae4:	429d      	cmp	r5, r3
 8009ae6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009aea:	da50      	bge.n	8009b8e <_strtod_l+0x76e>
 8009aec:	1b5b      	subs	r3, r3, r5
 8009aee:	2b1f      	cmp	r3, #31
 8009af0:	f04f 0101 	mov.w	r1, #1
 8009af4:	eba2 0203 	sub.w	r2, r2, r3
 8009af8:	dc3d      	bgt.n	8009b76 <_strtod_l+0x756>
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b00:	2300      	movs	r3, #0
 8009b02:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b04:	18bd      	adds	r5, r7, r2
 8009b06:	9b08      	ldr	r3, [sp, #32]
 8009b08:	42af      	cmp	r7, r5
 8009b0a:	4416      	add	r6, r2
 8009b0c:	441e      	add	r6, r3
 8009b0e:	463b      	mov	r3, r7
 8009b10:	bfa8      	it	ge
 8009b12:	462b      	movge	r3, r5
 8009b14:	42b3      	cmp	r3, r6
 8009b16:	bfa8      	it	ge
 8009b18:	4633      	movge	r3, r6
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bfc2      	ittt	gt
 8009b1e:	1aed      	subgt	r5, r5, r3
 8009b20:	1af6      	subgt	r6, r6, r3
 8009b22:	1aff      	subgt	r7, r7, r3
 8009b24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd16      	ble.n	8009b58 <_strtod_l+0x738>
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	9805      	ldr	r0, [sp, #20]
 8009b30:	f7ff f9a8 	bl	8008e84 <__pow5mult>
 8009b34:	4680      	mov	r8, r0
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d0b7      	beq.n	8009aaa <_strtod_l+0x68a>
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b3e:	9805      	ldr	r0, [sp, #20]
 8009b40:	f7ff f8f8 	bl	8008d34 <__multiply>
 8009b44:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f43f ae85 	beq.w	8009856 <_strtod_l+0x436>
 8009b4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b4e:	9805      	ldr	r0, [sp, #20]
 8009b50:	f7fe ffdc 	bl	8008b0c <_Bfree>
 8009b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b58:	2d00      	cmp	r5, #0
 8009b5a:	dc1d      	bgt.n	8009b98 <_strtod_l+0x778>
 8009b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dd23      	ble.n	8009baa <_strtod_l+0x78a>
 8009b62:	4649      	mov	r1, r9
 8009b64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b66:	9805      	ldr	r0, [sp, #20]
 8009b68:	f7ff f98c 	bl	8008e84 <__pow5mult>
 8009b6c:	4681      	mov	r9, r0
 8009b6e:	b9e0      	cbnz	r0, 8009baa <_strtod_l+0x78a>
 8009b70:	f04f 0900 	mov.w	r9, #0
 8009b74:	e66f      	b.n	8009856 <_strtod_l+0x436>
 8009b76:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b7a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b7e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b82:	35e2      	adds	r5, #226	@ 0xe2
 8009b84:	fa01 f305 	lsl.w	r3, r1, r5
 8009b88:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b8c:	e7ba      	b.n	8009b04 <_strtod_l+0x6e4>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b92:	2301      	movs	r3, #1
 8009b94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b96:	e7b5      	b.n	8009b04 <_strtod_l+0x6e4>
 8009b98:	462a      	mov	r2, r5
 8009b9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b9c:	9805      	ldr	r0, [sp, #20]
 8009b9e:	f7ff f9cb 	bl	8008f38 <__lshift>
 8009ba2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d1d9      	bne.n	8009b5c <_strtod_l+0x73c>
 8009ba8:	e655      	b.n	8009856 <_strtod_l+0x436>
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	dd07      	ble.n	8009bbe <_strtod_l+0x79e>
 8009bae:	4649      	mov	r1, r9
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	f7ff f9c0 	bl	8008f38 <__lshift>
 8009bb8:	4681      	mov	r9, r0
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d0d8      	beq.n	8009b70 <_strtod_l+0x750>
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	dd08      	ble.n	8009bd4 <_strtod_l+0x7b4>
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	463a      	mov	r2, r7
 8009bc6:	9805      	ldr	r0, [sp, #20]
 8009bc8:	f7ff f9b6 	bl	8008f38 <__lshift>
 8009bcc:	4680      	mov	r8, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f ae41 	beq.w	8009856 <_strtod_l+0x436>
 8009bd4:	464a      	mov	r2, r9
 8009bd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bd8:	9805      	ldr	r0, [sp, #20]
 8009bda:	f7ff fa35 	bl	8009048 <__mdiff>
 8009bde:	4604      	mov	r4, r0
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f43f ae38 	beq.w	8009856 <_strtod_l+0x436>
 8009be6:	68c3      	ldr	r3, [r0, #12]
 8009be8:	4641      	mov	r1, r8
 8009bea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bec:	2300      	movs	r3, #0
 8009bee:	60c3      	str	r3, [r0, #12]
 8009bf0:	f7ff fa0e 	bl	8009010 <__mcmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	da45      	bge.n	8009c84 <_strtod_l+0x864>
 8009bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bfa:	ea53 030a 	orrs.w	r3, r3, sl
 8009bfe:	d16b      	bne.n	8009cd8 <_strtod_l+0x8b8>
 8009c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d167      	bne.n	8009cd8 <_strtod_l+0x8b8>
 8009c08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c0c:	0d1b      	lsrs	r3, r3, #20
 8009c0e:	051b      	lsls	r3, r3, #20
 8009c10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c14:	d960      	bls.n	8009cd8 <_strtod_l+0x8b8>
 8009c16:	6963      	ldr	r3, [r4, #20]
 8009c18:	b913      	cbnz	r3, 8009c20 <_strtod_l+0x800>
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	dd5b      	ble.n	8009cd8 <_strtod_l+0x8b8>
 8009c20:	4621      	mov	r1, r4
 8009c22:	2201      	movs	r2, #1
 8009c24:	9805      	ldr	r0, [sp, #20]
 8009c26:	f7ff f987 	bl	8008f38 <__lshift>
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	f7ff f9ef 	bl	8009010 <__mcmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	dd50      	ble.n	8009cd8 <_strtod_l+0x8b8>
 8009c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c3a:	9a08      	ldr	r2, [sp, #32]
 8009c3c:	0d1b      	lsrs	r3, r3, #20
 8009c3e:	051b      	lsls	r3, r3, #20
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	d06a      	beq.n	8009d1a <_strtod_l+0x8fa>
 8009c44:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c48:	d867      	bhi.n	8009d1a <_strtod_l+0x8fa>
 8009c4a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c4e:	f67f ae98 	bls.w	8009982 <_strtod_l+0x562>
 8009c52:	4650      	mov	r0, sl
 8009c54:	4659      	mov	r1, fp
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <_strtod_l+0x85c>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <_strtod_l+0x860>)
 8009c60:	4682      	mov	sl, r0
 8009c62:	400b      	ands	r3, r1
 8009c64:	468b      	mov	fp, r1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f ae00 	bne.w	800986c <_strtod_l+0x44c>
 8009c6c:	2322      	movs	r3, #34	@ 0x22
 8009c6e:	9a05      	ldr	r2, [sp, #20]
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e5fb      	b.n	800986c <_strtod_l+0x44c>
 8009c74:	0800b550 	.word	0x0800b550
 8009c78:	fffffc02 	.word	0xfffffc02
 8009c7c:	39500000 	.word	0x39500000
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c88:	d165      	bne.n	8009d56 <_strtod_l+0x936>
 8009c8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c90:	b35a      	cbz	r2, 8009cea <_strtod_l+0x8ca>
 8009c92:	4a99      	ldr	r2, [pc, #612]	@ (8009ef8 <_strtod_l+0xad8>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d12b      	bne.n	8009cf0 <_strtod_l+0x8d0>
 8009c98:	9b08      	ldr	r3, [sp, #32]
 8009c9a:	4651      	mov	r1, sl
 8009c9c:	b303      	cbz	r3, 8009ce0 <_strtod_l+0x8c0>
 8009c9e:	465a      	mov	r2, fp
 8009ca0:	4b96      	ldr	r3, [pc, #600]	@ (8009efc <_strtod_l+0xadc>)
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cac:	d81b      	bhi.n	8009ce6 <_strtod_l+0x8c6>
 8009cae:	0d1b      	lsrs	r3, r3, #20
 8009cb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb8:	4299      	cmp	r1, r3
 8009cba:	d119      	bne.n	8009cf0 <_strtod_l+0x8d0>
 8009cbc:	4b90      	ldr	r3, [pc, #576]	@ (8009f00 <_strtod_l+0xae0>)
 8009cbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d102      	bne.n	8009cca <_strtod_l+0x8aa>
 8009cc4:	3101      	adds	r1, #1
 8009cc6:	f43f adc6 	beq.w	8009856 <_strtod_l+0x436>
 8009cca:	f04f 0a00 	mov.w	sl, #0
 8009cce:	4b8b      	ldr	r3, [pc, #556]	@ (8009efc <_strtod_l+0xadc>)
 8009cd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cd2:	401a      	ands	r2, r3
 8009cd4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1b9      	bne.n	8009c52 <_strtod_l+0x832>
 8009cde:	e5c5      	b.n	800986c <_strtod_l+0x44c>
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ce4:	e7e8      	b.n	8009cb8 <_strtod_l+0x898>
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	e7e6      	b.n	8009cb8 <_strtod_l+0x898>
 8009cea:	ea53 030a 	orrs.w	r3, r3, sl
 8009cee:	d0a2      	beq.n	8009c36 <_strtod_l+0x816>
 8009cf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cf2:	b1db      	cbz	r3, 8009d2c <_strtod_l+0x90c>
 8009cf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf6:	4213      	tst	r3, r2
 8009cf8:	d0ee      	beq.n	8009cd8 <_strtod_l+0x8b8>
 8009cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	4659      	mov	r1, fp
 8009d00:	9a08      	ldr	r2, [sp, #32]
 8009d02:	b1bb      	cbz	r3, 8009d34 <_strtod_l+0x914>
 8009d04:	f7ff fb68 	bl	80093d8 <sulp>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d10:	f7f6 fa2c 	bl	800016c <__adddf3>
 8009d14:	4682      	mov	sl, r0
 8009d16:	468b      	mov	fp, r1
 8009d18:	e7de      	b.n	8009cd8 <_strtod_l+0x8b8>
 8009d1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d22:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009d26:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d2a:	e7d5      	b.n	8009cd8 <_strtod_l+0x8b8>
 8009d2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d2e:	ea13 0f0a 	tst.w	r3, sl
 8009d32:	e7e1      	b.n	8009cf8 <_strtod_l+0x8d8>
 8009d34:	f7ff fb50 	bl	80093d8 <sulp>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d40:	f7f6 fa12 	bl	8000168 <__aeabi_dsub>
 8009d44:	2200      	movs	r2, #0
 8009d46:	2300      	movs	r3, #0
 8009d48:	4682      	mov	sl, r0
 8009d4a:	468b      	mov	fp, r1
 8009d4c:	f7f6 fe2c 	bl	80009a8 <__aeabi_dcmpeq>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d0c1      	beq.n	8009cd8 <_strtod_l+0x8b8>
 8009d54:	e615      	b.n	8009982 <_strtod_l+0x562>
 8009d56:	4641      	mov	r1, r8
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f7ff fac9 	bl	80092f0 <__ratio>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	f7f6 fe32 	bl	80009d0 <__aeabi_dcmple>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d06d      	beq.n	8009e4c <_strtod_l+0xa2c>
 8009d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d178      	bne.n	8009e68 <_strtod_l+0xa48>
 8009d76:	f1ba 0f00 	cmp.w	sl, #0
 8009d7a:	d156      	bne.n	8009e2a <_strtod_l+0xa0a>
 8009d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d158      	bne.n	8009e38 <_strtod_l+0xa18>
 8009d86:	2200      	movs	r2, #0
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009f04 <_strtod_l+0xae4>)
 8009d8e:	f7f6 fe15 	bl	80009bc <__aeabi_dcmplt>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d157      	bne.n	8009e46 <_strtod_l+0xa26>
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009f08 <_strtod_l+0xae8>)
 8009d9e:	f7f6 fb9b 	bl	80004d8 <__aeabi_dmul>
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009daa:	9606      	str	r6, [sp, #24]
 8009dac:	9307      	str	r3, [sp, #28]
 8009dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db2:	4d52      	ldr	r5, [pc, #328]	@ (8009efc <_strtod_l+0xadc>)
 8009db4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dba:	401d      	ands	r5, r3
 8009dbc:	4b53      	ldr	r3, [pc, #332]	@ (8009f0c <_strtod_l+0xaec>)
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	f040 80aa 	bne.w	8009f18 <_strtod_l+0xaf8>
 8009dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009dcc:	4659      	mov	r1, fp
 8009dce:	f7ff f9cf 	bl	8009170 <__ulp>
 8009dd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dd6:	f7f6 fb7f 	bl	80004d8 <__aeabi_dmul>
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	f7f6 f9c5 	bl	800016c <__adddf3>
 8009de2:	460b      	mov	r3, r1
 8009de4:	4945      	ldr	r1, [pc, #276]	@ (8009efc <_strtod_l+0xadc>)
 8009de6:	4a4a      	ldr	r2, [pc, #296]	@ (8009f10 <_strtod_l+0xaf0>)
 8009de8:	4019      	ands	r1, r3
 8009dea:	4291      	cmp	r1, r2
 8009dec:	4682      	mov	sl, r0
 8009dee:	d942      	bls.n	8009e76 <_strtod_l+0xa56>
 8009df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009df2:	4b43      	ldr	r3, [pc, #268]	@ (8009f00 <_strtod_l+0xae0>)
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d103      	bne.n	8009e00 <_strtod_l+0x9e0>
 8009df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	f43f ad2b 	beq.w	8009856 <_strtod_l+0x436>
 8009e00:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e04:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009f00 <_strtod_l+0xae0>
 8009e08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e0a:	9805      	ldr	r0, [sp, #20]
 8009e0c:	f7fe fe7e 	bl	8008b0c <_Bfree>
 8009e10:	4649      	mov	r1, r9
 8009e12:	9805      	ldr	r0, [sp, #20]
 8009e14:	f7fe fe7a 	bl	8008b0c <_Bfree>
 8009e18:	4641      	mov	r1, r8
 8009e1a:	9805      	ldr	r0, [sp, #20]
 8009e1c:	f7fe fe76 	bl	8008b0c <_Bfree>
 8009e20:	4621      	mov	r1, r4
 8009e22:	9805      	ldr	r0, [sp, #20]
 8009e24:	f7fe fe72 	bl	8008b0c <_Bfree>
 8009e28:	e618      	b.n	8009a5c <_strtod_l+0x63c>
 8009e2a:	f1ba 0f01 	cmp.w	sl, #1
 8009e2e:	d103      	bne.n	8009e38 <_strtod_l+0xa18>
 8009e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f43f ada5 	beq.w	8009982 <_strtod_l+0x562>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4b36      	ldr	r3, [pc, #216]	@ (8009f14 <_strtod_l+0xaf4>)
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e42:	4f30      	ldr	r7, [pc, #192]	@ (8009f04 <_strtod_l+0xae4>)
 8009e44:	e7b3      	b.n	8009dae <_strtod_l+0x98e>
 8009e46:	2600      	movs	r6, #0
 8009e48:	4f2f      	ldr	r7, [pc, #188]	@ (8009f08 <_strtod_l+0xae8>)
 8009e4a:	e7ac      	b.n	8009da6 <_strtod_l+0x986>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4639      	mov	r1, r7
 8009e50:	4b2d      	ldr	r3, [pc, #180]	@ (8009f08 <_strtod_l+0xae8>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	f7f6 fb40 	bl	80004d8 <__aeabi_dmul>
 8009e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0a1      	beq.n	8009da6 <_strtod_l+0x986>
 8009e62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e66:	e7a2      	b.n	8009dae <_strtod_l+0x98e>
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4b26      	ldr	r3, [pc, #152]	@ (8009f04 <_strtod_l+0xae4>)
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	461f      	mov	r7, r3
 8009e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e74:	e79b      	b.n	8009dae <_strtod_l+0x98e>
 8009e76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1c1      	bne.n	8009e08 <_strtod_l+0x9e8>
 8009e84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e88:	0d1b      	lsrs	r3, r3, #20
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	429d      	cmp	r5, r3
 8009e8e:	d1bb      	bne.n	8009e08 <_strtod_l+0x9e8>
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 ffec 	bl	8000e70 <__aeabi_d2lz>
 8009e98:	f7f6 faf0 	bl	800047c <__aeabi_l2d>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 f960 	bl	8000168 <__aeabi_dsub>
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4602      	mov	r2, r0
 8009eac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009eb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eb6:	ea46 060a 	orr.w	r6, r6, sl
 8009eba:	431e      	orrs	r6, r3
 8009ebc:	d069      	beq.n	8009f92 <_strtod_l+0xb72>
 8009ebe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009ee8 <_strtod_l+0xac8>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fd7a 	bl	80009bc <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f47f accf 	bne.w	800986c <_strtod_l+0x44c>
 8009ece:	a308      	add	r3, pc, #32	@ (adr r3, 8009ef0 <_strtod_l+0xad0>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ed8:	f7f6 fd8e 	bl	80009f8 <__aeabi_dcmpgt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d093      	beq.n	8009e08 <_strtod_l+0x9e8>
 8009ee0:	e4c4      	b.n	800986c <_strtod_l+0x44c>
 8009ee2:	bf00      	nop
 8009ee4:	f3af 8000 	nop.w
 8009ee8:	94a03595 	.word	0x94a03595
 8009eec:	3fdfffff 	.word	0x3fdfffff
 8009ef0:	35afe535 	.word	0x35afe535
 8009ef4:	3fe00000 	.word	0x3fe00000
 8009ef8:	000fffff 	.word	0x000fffff
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	7fefffff 	.word	0x7fefffff
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	3fe00000 	.word	0x3fe00000
 8009f0c:	7fe00000 	.word	0x7fe00000
 8009f10:	7c9fffff 	.word	0x7c9fffff
 8009f14:	bff00000 	.word	0xbff00000
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	b323      	cbz	r3, 8009f66 <_strtod_l+0xb46>
 8009f1c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f20:	d821      	bhi.n	8009f66 <_strtod_l+0xb46>
 8009f22:	a327      	add	r3, pc, #156	@ (adr r3, 8009fc0 <_strtod_l+0xba0>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	4630      	mov	r0, r6
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	f7f6 fd50 	bl	80009d0 <__aeabi_dcmple>
 8009f30:	b1a0      	cbz	r0, 8009f5c <_strtod_l+0xb3c>
 8009f32:	4639      	mov	r1, r7
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7f6 fda7 	bl	8000a88 <__aeabi_d2uiz>
 8009f3a:	2801      	cmp	r0, #1
 8009f3c:	bf38      	it	cc
 8009f3e:	2001      	movcc	r0, #1
 8009f40:	f7f6 fa50 	bl	80003e4 <__aeabi_ui2d>
 8009f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f46:	4606      	mov	r6, r0
 8009f48:	460f      	mov	r7, r1
 8009f4a:	b9fb      	cbnz	r3, 8009f8c <_strtod_l+0xb6c>
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f50:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f52:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f5e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f62:	1b5b      	subs	r3, r3, r5
 8009f64:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f6a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f6e:	f7ff f8ff 	bl	8009170 <__ulp>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4650      	mov	r0, sl
 8009f78:	4659      	mov	r1, fp
 8009f7a:	f7f6 faad 	bl	80004d8 <__aeabi_dmul>
 8009f7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f82:	f7f6 f8f3 	bl	800016c <__adddf3>
 8009f86:	4682      	mov	sl, r0
 8009f88:	468b      	mov	fp, r1
 8009f8a:	e776      	b.n	8009e7a <_strtod_l+0xa5a>
 8009f8c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f90:	e7e0      	b.n	8009f54 <_strtod_l+0xb34>
 8009f92:	a30d      	add	r3, pc, #52	@ (adr r3, 8009fc8 <_strtod_l+0xba8>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 fd10 	bl	80009bc <__aeabi_dcmplt>
 8009f9c:	e79e      	b.n	8009edc <_strtod_l+0xabc>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	f7ff ba77 	b.w	800949a <_strtod_l+0x7a>
 8009fac:	2a65      	cmp	r2, #101	@ 0x65
 8009fae:	f43f ab6e 	beq.w	800968e <_strtod_l+0x26e>
 8009fb2:	2a45      	cmp	r2, #69	@ 0x45
 8009fb4:	f43f ab6b 	beq.w	800968e <_strtod_l+0x26e>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f7ff bba6 	b.w	800970a <_strtod_l+0x2ea>
 8009fbe:	bf00      	nop
 8009fc0:	ffc00000 	.word	0xffc00000
 8009fc4:	41dfffff 	.word	0x41dfffff
 8009fc8:	94a03595 	.word	0x94a03595
 8009fcc:	3fcfffff 	.word	0x3fcfffff

08009fd0 <_strtod_r>:
 8009fd0:	4b01      	ldr	r3, [pc, #4]	@ (8009fd8 <_strtod_r+0x8>)
 8009fd2:	f7ff ba25 	b.w	8009420 <_strtod_l>
 8009fd6:	bf00      	nop
 8009fd8:	2000006c 	.word	0x2000006c

08009fdc <_strtol_l.constprop.0>:
 8009fdc:	2b24      	cmp	r3, #36	@ 0x24
 8009fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe2:	4686      	mov	lr, r0
 8009fe4:	4690      	mov	r8, r2
 8009fe6:	d801      	bhi.n	8009fec <_strtol_l.constprop.0+0x10>
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d106      	bne.n	8009ffa <_strtol_l.constprop.0+0x1e>
 8009fec:	f7fd fdb2 	bl	8007b54 <__errno>
 8009ff0:	2316      	movs	r3, #22
 8009ff2:	6003      	str	r3, [r0, #0]
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	4833      	ldr	r0, [pc, #204]	@ (800a0cc <_strtol_l.constprop.0+0xf0>)
 8009ffe:	462a      	mov	r2, r5
 800a000:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a004:	5d06      	ldrb	r6, [r0, r4]
 800a006:	f016 0608 	ands.w	r6, r6, #8
 800a00a:	d1f8      	bne.n	8009ffe <_strtol_l.constprop.0+0x22>
 800a00c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a00e:	d12d      	bne.n	800a06c <_strtol_l.constprop.0+0x90>
 800a010:	2601      	movs	r6, #1
 800a012:	782c      	ldrb	r4, [r5, #0]
 800a014:	1c95      	adds	r5, r2, #2
 800a016:	f033 0210 	bics.w	r2, r3, #16
 800a01a:	d109      	bne.n	800a030 <_strtol_l.constprop.0+0x54>
 800a01c:	2c30      	cmp	r4, #48	@ 0x30
 800a01e:	d12a      	bne.n	800a076 <_strtol_l.constprop.0+0x9a>
 800a020:	782a      	ldrb	r2, [r5, #0]
 800a022:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a026:	2a58      	cmp	r2, #88	@ 0x58
 800a028:	d125      	bne.n	800a076 <_strtol_l.constprop.0+0x9a>
 800a02a:	2310      	movs	r3, #16
 800a02c:	786c      	ldrb	r4, [r5, #1]
 800a02e:	3502      	adds	r5, #2
 800a030:	2200      	movs	r2, #0
 800a032:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a036:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a03a:	fbbc f9f3 	udiv	r9, ip, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	fb03 ca19 	mls	sl, r3, r9, ip
 800a044:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a048:	2f09      	cmp	r7, #9
 800a04a:	d81b      	bhi.n	800a084 <_strtol_l.constprop.0+0xa8>
 800a04c:	463c      	mov	r4, r7
 800a04e:	42a3      	cmp	r3, r4
 800a050:	dd27      	ble.n	800a0a2 <_strtol_l.constprop.0+0xc6>
 800a052:	1c57      	adds	r7, r2, #1
 800a054:	d007      	beq.n	800a066 <_strtol_l.constprop.0+0x8a>
 800a056:	4581      	cmp	r9, r0
 800a058:	d320      	bcc.n	800a09c <_strtol_l.constprop.0+0xc0>
 800a05a:	d101      	bne.n	800a060 <_strtol_l.constprop.0+0x84>
 800a05c:	45a2      	cmp	sl, r4
 800a05e:	db1d      	blt.n	800a09c <_strtol_l.constprop.0+0xc0>
 800a060:	2201      	movs	r2, #1
 800a062:	fb00 4003 	mla	r0, r0, r3, r4
 800a066:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06a:	e7eb      	b.n	800a044 <_strtol_l.constprop.0+0x68>
 800a06c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a06e:	bf04      	itt	eq
 800a070:	782c      	ldrbeq	r4, [r5, #0]
 800a072:	1c95      	addeq	r5, r2, #2
 800a074:	e7cf      	b.n	800a016 <_strtol_l.constprop.0+0x3a>
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1da      	bne.n	800a030 <_strtol_l.constprop.0+0x54>
 800a07a:	2c30      	cmp	r4, #48	@ 0x30
 800a07c:	bf0c      	ite	eq
 800a07e:	2308      	moveq	r3, #8
 800a080:	230a      	movne	r3, #10
 800a082:	e7d5      	b.n	800a030 <_strtol_l.constprop.0+0x54>
 800a084:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a088:	2f19      	cmp	r7, #25
 800a08a:	d801      	bhi.n	800a090 <_strtol_l.constprop.0+0xb4>
 800a08c:	3c37      	subs	r4, #55	@ 0x37
 800a08e:	e7de      	b.n	800a04e <_strtol_l.constprop.0+0x72>
 800a090:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a094:	2f19      	cmp	r7, #25
 800a096:	d804      	bhi.n	800a0a2 <_strtol_l.constprop.0+0xc6>
 800a098:	3c57      	subs	r4, #87	@ 0x57
 800a09a:	e7d8      	b.n	800a04e <_strtol_l.constprop.0+0x72>
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0a0:	e7e1      	b.n	800a066 <_strtol_l.constprop.0+0x8a>
 800a0a2:	1c53      	adds	r3, r2, #1
 800a0a4:	d108      	bne.n	800a0b8 <_strtol_l.constprop.0+0xdc>
 800a0a6:	2322      	movs	r3, #34	@ 0x22
 800a0a8:	4660      	mov	r0, ip
 800a0aa:	f8ce 3000 	str.w	r3, [lr]
 800a0ae:	f1b8 0f00 	cmp.w	r8, #0
 800a0b2:	d0a0      	beq.n	8009ff6 <_strtol_l.constprop.0+0x1a>
 800a0b4:	1e69      	subs	r1, r5, #1
 800a0b6:	e006      	b.n	800a0c6 <_strtol_l.constprop.0+0xea>
 800a0b8:	b106      	cbz	r6, 800a0bc <_strtol_l.constprop.0+0xe0>
 800a0ba:	4240      	negs	r0, r0
 800a0bc:	f1b8 0f00 	cmp.w	r8, #0
 800a0c0:	d099      	beq.n	8009ff6 <_strtol_l.constprop.0+0x1a>
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	d1f6      	bne.n	800a0b4 <_strtol_l.constprop.0+0xd8>
 800a0c6:	f8c8 1000 	str.w	r1, [r8]
 800a0ca:	e794      	b.n	8009ff6 <_strtol_l.constprop.0+0x1a>
 800a0cc:	0800b579 	.word	0x0800b579

0800a0d0 <_strtol_r>:
 800a0d0:	f7ff bf84 	b.w	8009fdc <_strtol_l.constprop.0>

0800a0d4 <__ssputs_r>:
 800a0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d8:	461f      	mov	r7, r3
 800a0da:	688e      	ldr	r6, [r1, #8]
 800a0dc:	4682      	mov	sl, r0
 800a0de:	42be      	cmp	r6, r7
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	4690      	mov	r8, r2
 800a0e4:	680b      	ldr	r3, [r1, #0]
 800a0e6:	d82d      	bhi.n	800a144 <__ssputs_r+0x70>
 800a0e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0f0:	d026      	beq.n	800a140 <__ssputs_r+0x6c>
 800a0f2:	6965      	ldr	r5, [r4, #20]
 800a0f4:	6909      	ldr	r1, [r1, #16]
 800a0f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0fa:	eba3 0901 	sub.w	r9, r3, r1
 800a0fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a102:	1c7b      	adds	r3, r7, #1
 800a104:	444b      	add	r3, r9
 800a106:	106d      	asrs	r5, r5, #1
 800a108:	429d      	cmp	r5, r3
 800a10a:	bf38      	it	cc
 800a10c:	461d      	movcc	r5, r3
 800a10e:	0553      	lsls	r3, r2, #21
 800a110:	d527      	bpl.n	800a162 <__ssputs_r+0x8e>
 800a112:	4629      	mov	r1, r5
 800a114:	f7fe fc2e 	bl	8008974 <_malloc_r>
 800a118:	4606      	mov	r6, r0
 800a11a:	b360      	cbz	r0, 800a176 <__ssputs_r+0xa2>
 800a11c:	464a      	mov	r2, r9
 800a11e:	6921      	ldr	r1, [r4, #16]
 800a120:	f7fd fd53 	bl	8007bca <memcpy>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	6126      	str	r6, [r4, #16]
 800a132:	444e      	add	r6, r9
 800a134:	6026      	str	r6, [r4, #0]
 800a136:	463e      	mov	r6, r7
 800a138:	6165      	str	r5, [r4, #20]
 800a13a:	eba5 0509 	sub.w	r5, r5, r9
 800a13e:	60a5      	str	r5, [r4, #8]
 800a140:	42be      	cmp	r6, r7
 800a142:	d900      	bls.n	800a146 <__ssputs_r+0x72>
 800a144:	463e      	mov	r6, r7
 800a146:	4632      	mov	r2, r6
 800a148:	4641      	mov	r1, r8
 800a14a:	6820      	ldr	r0, [r4, #0]
 800a14c:	f000 f9c2 	bl	800a4d4 <memmove>
 800a150:	2000      	movs	r0, #0
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	1b9b      	subs	r3, r3, r6
 800a156:	60a3      	str	r3, [r4, #8]
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	4433      	add	r3, r6
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a162:	462a      	mov	r2, r5
 800a164:	f000 fd75 	bl	800ac52 <_realloc_r>
 800a168:	4606      	mov	r6, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1e0      	bne.n	800a130 <__ssputs_r+0x5c>
 800a16e:	4650      	mov	r0, sl
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	f7fe fb8d 	bl	8008890 <_free_r>
 800a176:	230c      	movs	r3, #12
 800a178:	f8ca 3000 	str.w	r3, [sl]
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	e7e9      	b.n	800a15e <__ssputs_r+0x8a>
	...

0800a18c <_svfiprintf_r>:
 800a18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a190:	4698      	mov	r8, r3
 800a192:	898b      	ldrh	r3, [r1, #12]
 800a194:	4607      	mov	r7, r0
 800a196:	061b      	lsls	r3, r3, #24
 800a198:	460d      	mov	r5, r1
 800a19a:	4614      	mov	r4, r2
 800a19c:	b09d      	sub	sp, #116	@ 0x74
 800a19e:	d510      	bpl.n	800a1c2 <_svfiprintf_r+0x36>
 800a1a0:	690b      	ldr	r3, [r1, #16]
 800a1a2:	b973      	cbnz	r3, 800a1c2 <_svfiprintf_r+0x36>
 800a1a4:	2140      	movs	r1, #64	@ 0x40
 800a1a6:	f7fe fbe5 	bl	8008974 <_malloc_r>
 800a1aa:	6028      	str	r0, [r5, #0]
 800a1ac:	6128      	str	r0, [r5, #16]
 800a1ae:	b930      	cbnz	r0, 800a1be <_svfiprintf_r+0x32>
 800a1b0:	230c      	movs	r3, #12
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1b8:	b01d      	add	sp, #116	@ 0x74
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	2340      	movs	r3, #64	@ 0x40
 800a1c0:	616b      	str	r3, [r5, #20]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c6:	2320      	movs	r3, #32
 800a1c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1cc:	2330      	movs	r3, #48	@ 0x30
 800a1ce:	f04f 0901 	mov.w	r9, #1
 800a1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a370 <_svfiprintf_r+0x1e4>
 800a1da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1de:	4623      	mov	r3, r4
 800a1e0:	469a      	mov	sl, r3
 800a1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e6:	b10a      	cbz	r2, 800a1ec <_svfiprintf_r+0x60>
 800a1e8:	2a25      	cmp	r2, #37	@ 0x25
 800a1ea:	d1f9      	bne.n	800a1e0 <_svfiprintf_r+0x54>
 800a1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a1f0:	d00b      	beq.n	800a20a <_svfiprintf_r+0x7e>
 800a1f2:	465b      	mov	r3, fp
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff ff6b 	bl	800a0d4 <__ssputs_r>
 800a1fe:	3001      	adds	r0, #1
 800a200:	f000 80a7 	beq.w	800a352 <_svfiprintf_r+0x1c6>
 800a204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a206:	445a      	add	r2, fp
 800a208:	9209      	str	r2, [sp, #36]	@ 0x24
 800a20a:	f89a 3000 	ldrb.w	r3, [sl]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 809f 	beq.w	800a352 <_svfiprintf_r+0x1c6>
 800a214:	2300      	movs	r3, #0
 800a216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a21e:	f10a 0a01 	add.w	sl, sl, #1
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	9307      	str	r3, [sp, #28]
 800a226:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a22a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a22c:	4654      	mov	r4, sl
 800a22e:	2205      	movs	r2, #5
 800a230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a234:	484e      	ldr	r0, [pc, #312]	@ (800a370 <_svfiprintf_r+0x1e4>)
 800a236:	f7fd fcba 	bl	8007bae <memchr>
 800a23a:	9a04      	ldr	r2, [sp, #16]
 800a23c:	b9d8      	cbnz	r0, 800a276 <_svfiprintf_r+0xea>
 800a23e:	06d0      	lsls	r0, r2, #27
 800a240:	bf44      	itt	mi
 800a242:	2320      	movmi	r3, #32
 800a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a248:	0711      	lsls	r1, r2, #28
 800a24a:	bf44      	itt	mi
 800a24c:	232b      	movmi	r3, #43	@ 0x2b
 800a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a252:	f89a 3000 	ldrb.w	r3, [sl]
 800a256:	2b2a      	cmp	r3, #42	@ 0x2a
 800a258:	d015      	beq.n	800a286 <_svfiprintf_r+0xfa>
 800a25a:	4654      	mov	r4, sl
 800a25c:	2000      	movs	r0, #0
 800a25e:	f04f 0c0a 	mov.w	ip, #10
 800a262:	9a07      	ldr	r2, [sp, #28]
 800a264:	4621      	mov	r1, r4
 800a266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a26a:	3b30      	subs	r3, #48	@ 0x30
 800a26c:	2b09      	cmp	r3, #9
 800a26e:	d94b      	bls.n	800a308 <_svfiprintf_r+0x17c>
 800a270:	b1b0      	cbz	r0, 800a2a0 <_svfiprintf_r+0x114>
 800a272:	9207      	str	r2, [sp, #28]
 800a274:	e014      	b.n	800a2a0 <_svfiprintf_r+0x114>
 800a276:	eba0 0308 	sub.w	r3, r0, r8
 800a27a:	fa09 f303 	lsl.w	r3, r9, r3
 800a27e:	4313      	orrs	r3, r2
 800a280:	46a2      	mov	sl, r4
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	e7d2      	b.n	800a22c <_svfiprintf_r+0xa0>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	1d19      	adds	r1, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	9103      	str	r1, [sp, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfbb      	ittet	lt
 800a292:	425b      	neglt	r3, r3
 800a294:	f042 0202 	orrlt.w	r2, r2, #2
 800a298:	9307      	strge	r3, [sp, #28]
 800a29a:	9307      	strlt	r3, [sp, #28]
 800a29c:	bfb8      	it	lt
 800a29e:	9204      	strlt	r2, [sp, #16]
 800a2a0:	7823      	ldrb	r3, [r4, #0]
 800a2a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2a4:	d10a      	bne.n	800a2bc <_svfiprintf_r+0x130>
 800a2a6:	7863      	ldrb	r3, [r4, #1]
 800a2a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2aa:	d132      	bne.n	800a312 <_svfiprintf_r+0x186>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	3402      	adds	r4, #2
 800a2b0:	1d1a      	adds	r2, r3, #4
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	9203      	str	r2, [sp, #12]
 800a2b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2ba:	9305      	str	r3, [sp, #20]
 800a2bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a374 <_svfiprintf_r+0x1e8>
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	7821      	ldrb	r1, [r4, #0]
 800a2c6:	f7fd fc72 	bl	8007bae <memchr>
 800a2ca:	b138      	cbz	r0, 800a2dc <_svfiprintf_r+0x150>
 800a2cc:	2240      	movs	r2, #64	@ 0x40
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	eba0 000a 	sub.w	r0, r0, sl
 800a2d4:	4082      	lsls	r2, r0
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	3401      	adds	r4, #1
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	2206      	movs	r2, #6
 800a2e2:	4825      	ldr	r0, [pc, #148]	@ (800a378 <_svfiprintf_r+0x1ec>)
 800a2e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2e8:	f7fd fc61 	bl	8007bae <memchr>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d036      	beq.n	800a35e <_svfiprintf_r+0x1d2>
 800a2f0:	4b22      	ldr	r3, [pc, #136]	@ (800a37c <_svfiprintf_r+0x1f0>)
 800a2f2:	bb1b      	cbnz	r3, 800a33c <_svfiprintf_r+0x1b0>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	3307      	adds	r3, #7
 800a2f8:	f023 0307 	bic.w	r3, r3, #7
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a302:	4433      	add	r3, r6
 800a304:	9309      	str	r3, [sp, #36]	@ 0x24
 800a306:	e76a      	b.n	800a1de <_svfiprintf_r+0x52>
 800a308:	460c      	mov	r4, r1
 800a30a:	2001      	movs	r0, #1
 800a30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a310:	e7a8      	b.n	800a264 <_svfiprintf_r+0xd8>
 800a312:	2300      	movs	r3, #0
 800a314:	f04f 0c0a 	mov.w	ip, #10
 800a318:	4619      	mov	r1, r3
 800a31a:	3401      	adds	r4, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	4620      	mov	r0, r4
 800a320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a324:	3a30      	subs	r2, #48	@ 0x30
 800a326:	2a09      	cmp	r2, #9
 800a328:	d903      	bls.n	800a332 <_svfiprintf_r+0x1a6>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0c6      	beq.n	800a2bc <_svfiprintf_r+0x130>
 800a32e:	9105      	str	r1, [sp, #20]
 800a330:	e7c4      	b.n	800a2bc <_svfiprintf_r+0x130>
 800a332:	4604      	mov	r4, r0
 800a334:	2301      	movs	r3, #1
 800a336:	fb0c 2101 	mla	r1, ip, r1, r2
 800a33a:	e7f0      	b.n	800a31e <_svfiprintf_r+0x192>
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	462a      	mov	r2, r5
 800a342:	4638      	mov	r0, r7
 800a344:	4b0e      	ldr	r3, [pc, #56]	@ (800a380 <_svfiprintf_r+0x1f4>)
 800a346:	a904      	add	r1, sp, #16
 800a348:	f7fc fcbe 	bl	8006cc8 <_printf_float>
 800a34c:	1c42      	adds	r2, r0, #1
 800a34e:	4606      	mov	r6, r0
 800a350:	d1d6      	bne.n	800a300 <_svfiprintf_r+0x174>
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	065b      	lsls	r3, r3, #25
 800a356:	f53f af2d 	bmi.w	800a1b4 <_svfiprintf_r+0x28>
 800a35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a35c:	e72c      	b.n	800a1b8 <_svfiprintf_r+0x2c>
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	462a      	mov	r2, r5
 800a364:	4638      	mov	r0, r7
 800a366:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <_svfiprintf_r+0x1f4>)
 800a368:	a904      	add	r1, sp, #16
 800a36a:	f7fc ff4b 	bl	8007204 <_printf_i>
 800a36e:	e7ed      	b.n	800a34c <_svfiprintf_r+0x1c0>
 800a370:	0800b679 	.word	0x0800b679
 800a374:	0800b67f 	.word	0x0800b67f
 800a378:	0800b683 	.word	0x0800b683
 800a37c:	08006cc9 	.word	0x08006cc9
 800a380:	0800a0d5 	.word	0x0800a0d5

0800a384 <__sflush_r>:
 800a384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	0716      	lsls	r6, r2, #28
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	d454      	bmi.n	800a43c <__sflush_r+0xb8>
 800a392:	684b      	ldr	r3, [r1, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	dc02      	bgt.n	800a39e <__sflush_r+0x1a>
 800a398:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dd48      	ble.n	800a430 <__sflush_r+0xac>
 800a39e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3a0:	2e00      	cmp	r6, #0
 800a3a2:	d045      	beq.n	800a430 <__sflush_r+0xac>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3aa:	682f      	ldr	r7, [r5, #0]
 800a3ac:	6a21      	ldr	r1, [r4, #32]
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	d030      	beq.n	800a414 <__sflush_r+0x90>
 800a3b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	0759      	lsls	r1, r3, #29
 800a3b8:	d505      	bpl.n	800a3c6 <__sflush_r+0x42>
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	1ad2      	subs	r2, r2, r3
 800a3be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3c0:	b10b      	cbz	r3, 800a3c6 <__sflush_r+0x42>
 800a3c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3c4:	1ad2      	subs	r2, r2, r3
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	47b0      	blx	r6
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	d106      	bne.n	800a3e4 <__sflush_r+0x60>
 800a3d6:	6829      	ldr	r1, [r5, #0]
 800a3d8:	291d      	cmp	r1, #29
 800a3da:	d82b      	bhi.n	800a434 <__sflush_r+0xb0>
 800a3dc:	4a28      	ldr	r2, [pc, #160]	@ (800a480 <__sflush_r+0xfc>)
 800a3de:	410a      	asrs	r2, r1
 800a3e0:	07d6      	lsls	r6, r2, #31
 800a3e2:	d427      	bmi.n	800a434 <__sflush_r+0xb0>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	6062      	str	r2, [r4, #4]
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	04d9      	lsls	r1, r3, #19
 800a3ec:	6022      	str	r2, [r4, #0]
 800a3ee:	d504      	bpl.n	800a3fa <__sflush_r+0x76>
 800a3f0:	1c42      	adds	r2, r0, #1
 800a3f2:	d101      	bne.n	800a3f8 <__sflush_r+0x74>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b903      	cbnz	r3, 800a3fa <__sflush_r+0x76>
 800a3f8:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fc:	602f      	str	r7, [r5, #0]
 800a3fe:	b1b9      	cbz	r1, 800a430 <__sflush_r+0xac>
 800a400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <__sflush_r+0x8a>
 800a408:	4628      	mov	r0, r5
 800a40a:	f7fe fa41 	bl	8008890 <_free_r>
 800a40e:	2300      	movs	r3, #0
 800a410:	6363      	str	r3, [r4, #52]	@ 0x34
 800a412:	e00d      	b.n	800a430 <__sflush_r+0xac>
 800a414:	2301      	movs	r3, #1
 800a416:	4628      	mov	r0, r5
 800a418:	47b0      	blx	r6
 800a41a:	4602      	mov	r2, r0
 800a41c:	1c50      	adds	r0, r2, #1
 800a41e:	d1c9      	bne.n	800a3b4 <__sflush_r+0x30>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0c6      	beq.n	800a3b4 <__sflush_r+0x30>
 800a426:	2b1d      	cmp	r3, #29
 800a428:	d001      	beq.n	800a42e <__sflush_r+0xaa>
 800a42a:	2b16      	cmp	r3, #22
 800a42c:	d11d      	bne.n	800a46a <__sflush_r+0xe6>
 800a42e:	602f      	str	r7, [r5, #0]
 800a430:	2000      	movs	r0, #0
 800a432:	e021      	b.n	800a478 <__sflush_r+0xf4>
 800a434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a438:	b21b      	sxth	r3, r3
 800a43a:	e01a      	b.n	800a472 <__sflush_r+0xee>
 800a43c:	690f      	ldr	r7, [r1, #16]
 800a43e:	2f00      	cmp	r7, #0
 800a440:	d0f6      	beq.n	800a430 <__sflush_r+0xac>
 800a442:	0793      	lsls	r3, r2, #30
 800a444:	bf18      	it	ne
 800a446:	2300      	movne	r3, #0
 800a448:	680e      	ldr	r6, [r1, #0]
 800a44a:	bf08      	it	eq
 800a44c:	694b      	ldreq	r3, [r1, #20]
 800a44e:	1bf6      	subs	r6, r6, r7
 800a450:	600f      	str	r7, [r1, #0]
 800a452:	608b      	str	r3, [r1, #8]
 800a454:	2e00      	cmp	r6, #0
 800a456:	ddeb      	ble.n	800a430 <__sflush_r+0xac>
 800a458:	4633      	mov	r3, r6
 800a45a:	463a      	mov	r2, r7
 800a45c:	4628      	mov	r0, r5
 800a45e:	6a21      	ldr	r1, [r4, #32]
 800a460:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a464:	47e0      	blx	ip
 800a466:	2800      	cmp	r0, #0
 800a468:	dc07      	bgt.n	800a47a <__sflush_r+0xf6>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47a:	4407      	add	r7, r0
 800a47c:	1a36      	subs	r6, r6, r0
 800a47e:	e7e9      	b.n	800a454 <__sflush_r+0xd0>
 800a480:	dfbffffe 	.word	0xdfbffffe

0800a484 <_fflush_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	690b      	ldr	r3, [r1, #16]
 800a488:	4605      	mov	r5, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	b913      	cbnz	r3, 800a494 <_fflush_r+0x10>
 800a48e:	2500      	movs	r5, #0
 800a490:	4628      	mov	r0, r5
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	b118      	cbz	r0, 800a49e <_fflush_r+0x1a>
 800a496:	6a03      	ldr	r3, [r0, #32]
 800a498:	b90b      	cbnz	r3, 800a49e <_fflush_r+0x1a>
 800a49a:	f7fd fa6f 	bl	800797c <__sinit>
 800a49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0f3      	beq.n	800a48e <_fflush_r+0xa>
 800a4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4a8:	07d0      	lsls	r0, r2, #31
 800a4aa:	d404      	bmi.n	800a4b6 <_fflush_r+0x32>
 800a4ac:	0599      	lsls	r1, r3, #22
 800a4ae:	d402      	bmi.n	800a4b6 <_fflush_r+0x32>
 800a4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4b2:	f7fd fb7a 	bl	8007baa <__retarget_lock_acquire_recursive>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	f7ff ff63 	bl	800a384 <__sflush_r>
 800a4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	07da      	lsls	r2, r3, #31
 800a4c4:	d4e4      	bmi.n	800a490 <_fflush_r+0xc>
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	059b      	lsls	r3, r3, #22
 800a4ca:	d4e1      	bmi.n	800a490 <_fflush_r+0xc>
 800a4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ce:	f7fd fb6d 	bl	8007bac <__retarget_lock_release_recursive>
 800a4d2:	e7dd      	b.n	800a490 <_fflush_r+0xc>

0800a4d4 <memmove>:
 800a4d4:	4288      	cmp	r0, r1
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	eb01 0402 	add.w	r4, r1, r2
 800a4dc:	d902      	bls.n	800a4e4 <memmove+0x10>
 800a4de:	4284      	cmp	r4, r0
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	d807      	bhi.n	800a4f4 <memmove+0x20>
 800a4e4:	1e43      	subs	r3, r0, #1
 800a4e6:	42a1      	cmp	r1, r4
 800a4e8:	d008      	beq.n	800a4fc <memmove+0x28>
 800a4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4f2:	e7f8      	b.n	800a4e6 <memmove+0x12>
 800a4f4:	4601      	mov	r1, r0
 800a4f6:	4402      	add	r2, r0
 800a4f8:	428a      	cmp	r2, r1
 800a4fa:	d100      	bne.n	800a4fe <memmove+0x2a>
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a506:	e7f7      	b.n	800a4f8 <memmove+0x24>

0800a508 <strncmp>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	b16a      	cbz	r2, 800a528 <strncmp+0x20>
 800a50c:	3901      	subs	r1, #1
 800a50e:	1884      	adds	r4, r0, r2
 800a510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a514:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a518:	429a      	cmp	r2, r3
 800a51a:	d103      	bne.n	800a524 <strncmp+0x1c>
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d001      	beq.n	800a524 <strncmp+0x1c>
 800a520:	2a00      	cmp	r2, #0
 800a522:	d1f5      	bne.n	800a510 <strncmp+0x8>
 800a524:	1ad0      	subs	r0, r2, r3
 800a526:	bd10      	pop	{r4, pc}
 800a528:	4610      	mov	r0, r2
 800a52a:	e7fc      	b.n	800a526 <strncmp+0x1e>

0800a52c <_sbrk_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	2300      	movs	r3, #0
 800a530:	4d05      	ldr	r5, [pc, #20]	@ (800a548 <_sbrk_r+0x1c>)
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	602b      	str	r3, [r5, #0]
 800a538:	f7f7 fa6c 	bl	8001a14 <_sbrk>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_sbrk_r+0x1a>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_sbrk_r+0x1a>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20001db4 	.word	0x20001db4

0800a54c <nan>:
 800a54c:	2000      	movs	r0, #0
 800a54e:	4901      	ldr	r1, [pc, #4]	@ (800a554 <nan+0x8>)
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	7ff80000 	.word	0x7ff80000

0800a558 <__assert_func>:
 800a558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a55a:	4614      	mov	r4, r2
 800a55c:	461a      	mov	r2, r3
 800a55e:	4b09      	ldr	r3, [pc, #36]	@ (800a584 <__assert_func+0x2c>)
 800a560:	4605      	mov	r5, r0
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68d8      	ldr	r0, [r3, #12]
 800a566:	b954      	cbnz	r4, 800a57e <__assert_func+0x26>
 800a568:	4b07      	ldr	r3, [pc, #28]	@ (800a588 <__assert_func+0x30>)
 800a56a:	461c      	mov	r4, r3
 800a56c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a570:	9100      	str	r1, [sp, #0]
 800a572:	462b      	mov	r3, r5
 800a574:	4905      	ldr	r1, [pc, #20]	@ (800a58c <__assert_func+0x34>)
 800a576:	f000 fba7 	bl	800acc8 <fiprintf>
 800a57a:	f000 fbb7 	bl	800acec <abort>
 800a57e:	4b04      	ldr	r3, [pc, #16]	@ (800a590 <__assert_func+0x38>)
 800a580:	e7f4      	b.n	800a56c <__assert_func+0x14>
 800a582:	bf00      	nop
 800a584:	2000001c 	.word	0x2000001c
 800a588:	0800b6cd 	.word	0x0800b6cd
 800a58c:	0800b69f 	.word	0x0800b69f
 800a590:	0800b692 	.word	0x0800b692

0800a594 <_calloc_r>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	fba1 5402 	umull	r5, r4, r1, r2
 800a59a:	b93c      	cbnz	r4, 800a5ac <_calloc_r+0x18>
 800a59c:	4629      	mov	r1, r5
 800a59e:	f7fe f9e9 	bl	8008974 <_malloc_r>
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	b928      	cbnz	r0, 800a5b2 <_calloc_r+0x1e>
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	220c      	movs	r2, #12
 800a5ae:	6002      	str	r2, [r0, #0]
 800a5b0:	e7f9      	b.n	800a5a6 <_calloc_r+0x12>
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f7fd fa7a 	bl	8007aae <memset>
 800a5ba:	e7f5      	b.n	800a5a8 <_calloc_r+0x14>

0800a5bc <rshift>:
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5c6:	f100 0414 	add.w	r4, r0, #20
 800a5ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5ce:	dd46      	ble.n	800a65e <rshift+0xa2>
 800a5d0:	f011 011f 	ands.w	r1, r1, #31
 800a5d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5dc:	d10c      	bne.n	800a5f8 <rshift+0x3c>
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f100 0710 	add.w	r7, r0, #16
 800a5e4:	42b1      	cmp	r1, r6
 800a5e6:	d335      	bcc.n	800a654 <rshift+0x98>
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	1eea      	subs	r2, r5, #3
 800a5ee:	4296      	cmp	r6, r2
 800a5f0:	bf38      	it	cc
 800a5f2:	2300      	movcc	r3, #0
 800a5f4:	4423      	add	r3, r4
 800a5f6:	e015      	b.n	800a624 <rshift+0x68>
 800a5f8:	46a1      	mov	r9, r4
 800a5fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5fe:	f1c1 0820 	rsb	r8, r1, #32
 800a602:	40cf      	lsrs	r7, r1
 800a604:	f105 0e04 	add.w	lr, r5, #4
 800a608:	4576      	cmp	r6, lr
 800a60a:	46f4      	mov	ip, lr
 800a60c:	d816      	bhi.n	800a63c <rshift+0x80>
 800a60e:	1a9a      	subs	r2, r3, r2
 800a610:	0092      	lsls	r2, r2, #2
 800a612:	3a04      	subs	r2, #4
 800a614:	3501      	adds	r5, #1
 800a616:	42ae      	cmp	r6, r5
 800a618:	bf38      	it	cc
 800a61a:	2200      	movcc	r2, #0
 800a61c:	18a3      	adds	r3, r4, r2
 800a61e:	50a7      	str	r7, [r4, r2]
 800a620:	b107      	cbz	r7, 800a624 <rshift+0x68>
 800a622:	3304      	adds	r3, #4
 800a624:	42a3      	cmp	r3, r4
 800a626:	eba3 0204 	sub.w	r2, r3, r4
 800a62a:	bf08      	it	eq
 800a62c:	2300      	moveq	r3, #0
 800a62e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a632:	6102      	str	r2, [r0, #16]
 800a634:	bf08      	it	eq
 800a636:	6143      	streq	r3, [r0, #20]
 800a638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a63c:	f8dc c000 	ldr.w	ip, [ip]
 800a640:	fa0c fc08 	lsl.w	ip, ip, r8
 800a644:	ea4c 0707 	orr.w	r7, ip, r7
 800a648:	f849 7b04 	str.w	r7, [r9], #4
 800a64c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a650:	40cf      	lsrs	r7, r1
 800a652:	e7d9      	b.n	800a608 <rshift+0x4c>
 800a654:	f851 cb04 	ldr.w	ip, [r1], #4
 800a658:	f847 cf04 	str.w	ip, [r7, #4]!
 800a65c:	e7c2      	b.n	800a5e4 <rshift+0x28>
 800a65e:	4623      	mov	r3, r4
 800a660:	e7e0      	b.n	800a624 <rshift+0x68>

0800a662 <__hexdig_fun>:
 800a662:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d802      	bhi.n	800a670 <__hexdig_fun+0xe>
 800a66a:	3820      	subs	r0, #32
 800a66c:	b2c0      	uxtb	r0, r0
 800a66e:	4770      	bx	lr
 800a670:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a674:	2b05      	cmp	r3, #5
 800a676:	d801      	bhi.n	800a67c <__hexdig_fun+0x1a>
 800a678:	3847      	subs	r0, #71	@ 0x47
 800a67a:	e7f7      	b.n	800a66c <__hexdig_fun+0xa>
 800a67c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a680:	2b05      	cmp	r3, #5
 800a682:	d801      	bhi.n	800a688 <__hexdig_fun+0x26>
 800a684:	3827      	subs	r0, #39	@ 0x27
 800a686:	e7f1      	b.n	800a66c <__hexdig_fun+0xa>
 800a688:	2000      	movs	r0, #0
 800a68a:	4770      	bx	lr

0800a68c <__gethex>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	468a      	mov	sl, r1
 800a692:	4690      	mov	r8, r2
 800a694:	b085      	sub	sp, #20
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	680b      	ldr	r3, [r1, #0]
 800a69a:	9001      	str	r0, [sp, #4]
 800a69c:	1c9c      	adds	r4, r3, #2
 800a69e:	46a1      	mov	r9, r4
 800a6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6a4:	2830      	cmp	r0, #48	@ 0x30
 800a6a6:	d0fa      	beq.n	800a69e <__gethex+0x12>
 800a6a8:	eba9 0303 	sub.w	r3, r9, r3
 800a6ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800a6b0:	f7ff ffd7 	bl	800a662 <__hexdig_fun>
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d168      	bne.n	800a78c <__gethex+0x100>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	4648      	mov	r0, r9
 800a6be:	499f      	ldr	r1, [pc, #636]	@ (800a93c <__gethex+0x2b0>)
 800a6c0:	f7ff ff22 	bl	800a508 <strncmp>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d167      	bne.n	800a79a <__gethex+0x10e>
 800a6ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ce:	4626      	mov	r6, r4
 800a6d0:	f7ff ffc7 	bl	800a662 <__hexdig_fun>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d062      	beq.n	800a79e <__gethex+0x112>
 800a6d8:	4623      	mov	r3, r4
 800a6da:	7818      	ldrb	r0, [r3, #0]
 800a6dc:	4699      	mov	r9, r3
 800a6de:	2830      	cmp	r0, #48	@ 0x30
 800a6e0:	f103 0301 	add.w	r3, r3, #1
 800a6e4:	d0f9      	beq.n	800a6da <__gethex+0x4e>
 800a6e6:	f7ff ffbc 	bl	800a662 <__hexdig_fun>
 800a6ea:	fab0 f580 	clz	r5, r0
 800a6ee:	f04f 0b01 	mov.w	fp, #1
 800a6f2:	096d      	lsrs	r5, r5, #5
 800a6f4:	464a      	mov	r2, r9
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	7830      	ldrb	r0, [r6, #0]
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	f7ff ffb1 	bl	800a662 <__hexdig_fun>
 800a700:	2800      	cmp	r0, #0
 800a702:	d1f8      	bne.n	800a6f6 <__gethex+0x6a>
 800a704:	2201      	movs	r2, #1
 800a706:	4630      	mov	r0, r6
 800a708:	498c      	ldr	r1, [pc, #560]	@ (800a93c <__gethex+0x2b0>)
 800a70a:	f7ff fefd 	bl	800a508 <strncmp>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d13f      	bne.n	800a792 <__gethex+0x106>
 800a712:	b944      	cbnz	r4, 800a726 <__gethex+0x9a>
 800a714:	1c74      	adds	r4, r6, #1
 800a716:	4622      	mov	r2, r4
 800a718:	4616      	mov	r6, r2
 800a71a:	7830      	ldrb	r0, [r6, #0]
 800a71c:	3201      	adds	r2, #1
 800a71e:	f7ff ffa0 	bl	800a662 <__hexdig_fun>
 800a722:	2800      	cmp	r0, #0
 800a724:	d1f8      	bne.n	800a718 <__gethex+0x8c>
 800a726:	1ba4      	subs	r4, r4, r6
 800a728:	00a7      	lsls	r7, r4, #2
 800a72a:	7833      	ldrb	r3, [r6, #0]
 800a72c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a730:	2b50      	cmp	r3, #80	@ 0x50
 800a732:	d13e      	bne.n	800a7b2 <__gethex+0x126>
 800a734:	7873      	ldrb	r3, [r6, #1]
 800a736:	2b2b      	cmp	r3, #43	@ 0x2b
 800a738:	d033      	beq.n	800a7a2 <__gethex+0x116>
 800a73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a73c:	d034      	beq.n	800a7a8 <__gethex+0x11c>
 800a73e:	2400      	movs	r4, #0
 800a740:	1c71      	adds	r1, r6, #1
 800a742:	7808      	ldrb	r0, [r1, #0]
 800a744:	f7ff ff8d 	bl	800a662 <__hexdig_fun>
 800a748:	1e43      	subs	r3, r0, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b18      	cmp	r3, #24
 800a74e:	d830      	bhi.n	800a7b2 <__gethex+0x126>
 800a750:	f1a0 0210 	sub.w	r2, r0, #16
 800a754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a758:	f7ff ff83 	bl	800a662 <__hexdig_fun>
 800a75c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a760:	fa5f fc8c 	uxtb.w	ip, ip
 800a764:	f1bc 0f18 	cmp.w	ip, #24
 800a768:	f04f 030a 	mov.w	r3, #10
 800a76c:	d91e      	bls.n	800a7ac <__gethex+0x120>
 800a76e:	b104      	cbz	r4, 800a772 <__gethex+0xe6>
 800a770:	4252      	negs	r2, r2
 800a772:	4417      	add	r7, r2
 800a774:	f8ca 1000 	str.w	r1, [sl]
 800a778:	b1ed      	cbz	r5, 800a7b6 <__gethex+0x12a>
 800a77a:	f1bb 0f00 	cmp.w	fp, #0
 800a77e:	bf0c      	ite	eq
 800a780:	2506      	moveq	r5, #6
 800a782:	2500      	movne	r5, #0
 800a784:	4628      	mov	r0, r5
 800a786:	b005      	add	sp, #20
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	2500      	movs	r5, #0
 800a78e:	462c      	mov	r4, r5
 800a790:	e7b0      	b.n	800a6f4 <__gethex+0x68>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d1c7      	bne.n	800a726 <__gethex+0x9a>
 800a796:	4627      	mov	r7, r4
 800a798:	e7c7      	b.n	800a72a <__gethex+0x9e>
 800a79a:	464e      	mov	r6, r9
 800a79c:	462f      	mov	r7, r5
 800a79e:	2501      	movs	r5, #1
 800a7a0:	e7c3      	b.n	800a72a <__gethex+0x9e>
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	1cb1      	adds	r1, r6, #2
 800a7a6:	e7cc      	b.n	800a742 <__gethex+0xb6>
 800a7a8:	2401      	movs	r4, #1
 800a7aa:	e7fb      	b.n	800a7a4 <__gethex+0x118>
 800a7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a7b0:	e7ce      	b.n	800a750 <__gethex+0xc4>
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	e7de      	b.n	800a774 <__gethex+0xe8>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	eba6 0309 	sub.w	r3, r6, r9
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	dc0a      	bgt.n	800a7d8 <__gethex+0x14c>
 800a7c2:	9801      	ldr	r0, [sp, #4]
 800a7c4:	f7fe f962 	bl	8008a8c <_Balloc>
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	b940      	cbnz	r0, 800a7de <__gethex+0x152>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	21e4      	movs	r1, #228	@ 0xe4
 800a7d0:	4b5b      	ldr	r3, [pc, #364]	@ (800a940 <__gethex+0x2b4>)
 800a7d2:	485c      	ldr	r0, [pc, #368]	@ (800a944 <__gethex+0x2b8>)
 800a7d4:	f7ff fec0 	bl	800a558 <__assert_func>
 800a7d8:	3101      	adds	r1, #1
 800a7da:	105b      	asrs	r3, r3, #1
 800a7dc:	e7ef      	b.n	800a7be <__gethex+0x132>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f100 0a14 	add.w	sl, r0, #20
 800a7e4:	4655      	mov	r5, sl
 800a7e6:	469b      	mov	fp, r3
 800a7e8:	45b1      	cmp	r9, r6
 800a7ea:	d337      	bcc.n	800a85c <__gethex+0x1d0>
 800a7ec:	f845 bb04 	str.w	fp, [r5], #4
 800a7f0:	eba5 050a 	sub.w	r5, r5, sl
 800a7f4:	10ad      	asrs	r5, r5, #2
 800a7f6:	6125      	str	r5, [r4, #16]
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	f7fe fa39 	bl	8008c70 <__hi0bits>
 800a7fe:	016d      	lsls	r5, r5, #5
 800a800:	f8d8 6000 	ldr.w	r6, [r8]
 800a804:	1a2d      	subs	r5, r5, r0
 800a806:	42b5      	cmp	r5, r6
 800a808:	dd54      	ble.n	800a8b4 <__gethex+0x228>
 800a80a:	1bad      	subs	r5, r5, r6
 800a80c:	4629      	mov	r1, r5
 800a80e:	4620      	mov	r0, r4
 800a810:	f7fe fdc1 	bl	8009396 <__any_on>
 800a814:	4681      	mov	r9, r0
 800a816:	b178      	cbz	r0, 800a838 <__gethex+0x1ac>
 800a818:	f04f 0901 	mov.w	r9, #1
 800a81c:	1e6b      	subs	r3, r5, #1
 800a81e:	1159      	asrs	r1, r3, #5
 800a820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a824:	f003 021f 	and.w	r2, r3, #31
 800a828:	fa09 f202 	lsl.w	r2, r9, r2
 800a82c:	420a      	tst	r2, r1
 800a82e:	d003      	beq.n	800a838 <__gethex+0x1ac>
 800a830:	454b      	cmp	r3, r9
 800a832:	dc36      	bgt.n	800a8a2 <__gethex+0x216>
 800a834:	f04f 0902 	mov.w	r9, #2
 800a838:	4629      	mov	r1, r5
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7ff febe 	bl	800a5bc <rshift>
 800a840:	442f      	add	r7, r5
 800a842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a846:	42bb      	cmp	r3, r7
 800a848:	da42      	bge.n	800a8d0 <__gethex+0x244>
 800a84a:	4621      	mov	r1, r4
 800a84c:	9801      	ldr	r0, [sp, #4]
 800a84e:	f7fe f95d 	bl	8008b0c <_Bfree>
 800a852:	2300      	movs	r3, #0
 800a854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a856:	25a3      	movs	r5, #163	@ 0xa3
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	e793      	b.n	800a784 <__gethex+0xf8>
 800a85c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a860:	2a2e      	cmp	r2, #46	@ 0x2e
 800a862:	d012      	beq.n	800a88a <__gethex+0x1fe>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d104      	bne.n	800a872 <__gethex+0x1e6>
 800a868:	f845 bb04 	str.w	fp, [r5], #4
 800a86c:	f04f 0b00 	mov.w	fp, #0
 800a870:	465b      	mov	r3, fp
 800a872:	7830      	ldrb	r0, [r6, #0]
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	f7ff fef4 	bl	800a662 <__hexdig_fun>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	f000 000f 	and.w	r0, r0, #15
 800a880:	4098      	lsls	r0, r3
 800a882:	ea4b 0b00 	orr.w	fp, fp, r0
 800a886:	3304      	adds	r3, #4
 800a888:	e7ae      	b.n	800a7e8 <__gethex+0x15c>
 800a88a:	45b1      	cmp	r9, r6
 800a88c:	d8ea      	bhi.n	800a864 <__gethex+0x1d8>
 800a88e:	2201      	movs	r2, #1
 800a890:	4630      	mov	r0, r6
 800a892:	492a      	ldr	r1, [pc, #168]	@ (800a93c <__gethex+0x2b0>)
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	f7ff fe37 	bl	800a508 <strncmp>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1e1      	bne.n	800a864 <__gethex+0x1d8>
 800a8a0:	e7a2      	b.n	800a7e8 <__gethex+0x15c>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	1ea9      	subs	r1, r5, #2
 800a8a6:	f7fe fd76 	bl	8009396 <__any_on>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0c2      	beq.n	800a834 <__gethex+0x1a8>
 800a8ae:	f04f 0903 	mov.w	r9, #3
 800a8b2:	e7c1      	b.n	800a838 <__gethex+0x1ac>
 800a8b4:	da09      	bge.n	800a8ca <__gethex+0x23e>
 800a8b6:	1b75      	subs	r5, r6, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	9801      	ldr	r0, [sp, #4]
 800a8be:	f7fe fb3b 	bl	8008f38 <__lshift>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	1b7f      	subs	r7, r7, r5
 800a8c6:	f100 0a14 	add.w	sl, r0, #20
 800a8ca:	f04f 0900 	mov.w	r9, #0
 800a8ce:	e7b8      	b.n	800a842 <__gethex+0x1b6>
 800a8d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8d4:	42bd      	cmp	r5, r7
 800a8d6:	dd6f      	ble.n	800a9b8 <__gethex+0x32c>
 800a8d8:	1bed      	subs	r5, r5, r7
 800a8da:	42ae      	cmp	r6, r5
 800a8dc:	dc34      	bgt.n	800a948 <__gethex+0x2bc>
 800a8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d022      	beq.n	800a92c <__gethex+0x2a0>
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d024      	beq.n	800a934 <__gethex+0x2a8>
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d115      	bne.n	800a91a <__gethex+0x28e>
 800a8ee:	42ae      	cmp	r6, r5
 800a8f0:	d113      	bne.n	800a91a <__gethex+0x28e>
 800a8f2:	2e01      	cmp	r6, #1
 800a8f4:	d10b      	bne.n	800a90e <__gethex+0x282>
 800a8f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8fa:	9a02      	ldr	r2, [sp, #8]
 800a8fc:	2562      	movs	r5, #98	@ 0x62
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	2301      	movs	r3, #1
 800a902:	6123      	str	r3, [r4, #16]
 800a904:	f8ca 3000 	str.w	r3, [sl]
 800a908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90a:	601c      	str	r4, [r3, #0]
 800a90c:	e73a      	b.n	800a784 <__gethex+0xf8>
 800a90e:	4620      	mov	r0, r4
 800a910:	1e71      	subs	r1, r6, #1
 800a912:	f7fe fd40 	bl	8009396 <__any_on>
 800a916:	2800      	cmp	r0, #0
 800a918:	d1ed      	bne.n	800a8f6 <__gethex+0x26a>
 800a91a:	4621      	mov	r1, r4
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	f7fe f8f5 	bl	8008b0c <_Bfree>
 800a922:	2300      	movs	r3, #0
 800a924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a926:	2550      	movs	r5, #80	@ 0x50
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e72b      	b.n	800a784 <__gethex+0xf8>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f3      	bne.n	800a91a <__gethex+0x28e>
 800a932:	e7e0      	b.n	800a8f6 <__gethex+0x26a>
 800a934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1dd      	bne.n	800a8f6 <__gethex+0x26a>
 800a93a:	e7ee      	b.n	800a91a <__gethex+0x28e>
 800a93c:	0800b520 	.word	0x0800b520
 800a940:	0800b3b7 	.word	0x0800b3b7
 800a944:	0800b6ce 	.word	0x0800b6ce
 800a948:	1e6f      	subs	r7, r5, #1
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d130      	bne.n	800a9b2 <__gethex+0x326>
 800a950:	b127      	cbz	r7, 800a95c <__gethex+0x2d0>
 800a952:	4639      	mov	r1, r7
 800a954:	4620      	mov	r0, r4
 800a956:	f7fe fd1e 	bl	8009396 <__any_on>
 800a95a:	4681      	mov	r9, r0
 800a95c:	2301      	movs	r3, #1
 800a95e:	4629      	mov	r1, r5
 800a960:	1b76      	subs	r6, r6, r5
 800a962:	2502      	movs	r5, #2
 800a964:	117a      	asrs	r2, r7, #5
 800a966:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a96a:	f007 071f 	and.w	r7, r7, #31
 800a96e:	40bb      	lsls	r3, r7
 800a970:	4213      	tst	r3, r2
 800a972:	4620      	mov	r0, r4
 800a974:	bf18      	it	ne
 800a976:	f049 0902 	orrne.w	r9, r9, #2
 800a97a:	f7ff fe1f 	bl	800a5bc <rshift>
 800a97e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a982:	f1b9 0f00 	cmp.w	r9, #0
 800a986:	d047      	beq.n	800aa18 <__gethex+0x38c>
 800a988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d015      	beq.n	800a9bc <__gethex+0x330>
 800a990:	2b03      	cmp	r3, #3
 800a992:	d017      	beq.n	800a9c4 <__gethex+0x338>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d109      	bne.n	800a9ac <__gethex+0x320>
 800a998:	f019 0f02 	tst.w	r9, #2
 800a99c:	d006      	beq.n	800a9ac <__gethex+0x320>
 800a99e:	f8da 3000 	ldr.w	r3, [sl]
 800a9a2:	ea49 0903 	orr.w	r9, r9, r3
 800a9a6:	f019 0f01 	tst.w	r9, #1
 800a9aa:	d10e      	bne.n	800a9ca <__gethex+0x33e>
 800a9ac:	f045 0510 	orr.w	r5, r5, #16
 800a9b0:	e032      	b.n	800aa18 <__gethex+0x38c>
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	e7d1      	b.n	800a95c <__gethex+0x2d0>
 800a9b8:	2501      	movs	r5, #1
 800a9ba:	e7e2      	b.n	800a982 <__gethex+0x2f6>
 800a9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9be:	f1c3 0301 	rsb	r3, r3, #1
 800a9c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <__gethex+0x320>
 800a9ca:	f04f 0c00 	mov.w	ip, #0
 800a9ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9d2:	f104 0314 	add.w	r3, r4, #20
 800a9d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a9e8:	d01b      	beq.n	800aa22 <__gethex+0x396>
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	6002      	str	r2, [r0, #0]
 800a9ee:	2d02      	cmp	r5, #2
 800a9f0:	f104 0314 	add.w	r3, r4, #20
 800a9f4:	d13c      	bne.n	800aa70 <__gethex+0x3e4>
 800a9f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	42b2      	cmp	r2, r6
 800a9fe:	d109      	bne.n	800aa14 <__gethex+0x388>
 800aa00:	2201      	movs	r2, #1
 800aa02:	1171      	asrs	r1, r6, #5
 800aa04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa08:	f006 061f 	and.w	r6, r6, #31
 800aa0c:	fa02 f606 	lsl.w	r6, r2, r6
 800aa10:	421e      	tst	r6, r3
 800aa12:	d13a      	bne.n	800aa8a <__gethex+0x3fe>
 800aa14:	f045 0520 	orr.w	r5, r5, #32
 800aa18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa1a:	601c      	str	r4, [r3, #0]
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	601f      	str	r7, [r3, #0]
 800aa20:	e6b0      	b.n	800a784 <__gethex+0xf8>
 800aa22:	4299      	cmp	r1, r3
 800aa24:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa28:	d8d9      	bhi.n	800a9de <__gethex+0x352>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	459b      	cmp	fp, r3
 800aa2e:	db17      	blt.n	800aa60 <__gethex+0x3d4>
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	9801      	ldr	r0, [sp, #4]
 800aa34:	3101      	adds	r1, #1
 800aa36:	f7fe f829 	bl	8008a8c <_Balloc>
 800aa3a:	4681      	mov	r9, r0
 800aa3c:	b918      	cbnz	r0, 800aa46 <__gethex+0x3ba>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	2184      	movs	r1, #132	@ 0x84
 800aa42:	4b19      	ldr	r3, [pc, #100]	@ (800aaa8 <__gethex+0x41c>)
 800aa44:	e6c5      	b.n	800a7d2 <__gethex+0x146>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	f104 010c 	add.w	r1, r4, #12
 800aa4c:	3202      	adds	r2, #2
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7fd f8ba 	bl	8007bca <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	9801      	ldr	r0, [sp, #4]
 800aa5a:	f7fe f857 	bl	8008b0c <_Bfree>
 800aa5e:	464c      	mov	r4, r9
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	6122      	str	r2, [r4, #16]
 800aa66:	2201      	movs	r2, #1
 800aa68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	e7be      	b.n	800a9ee <__gethex+0x362>
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	455a      	cmp	r2, fp
 800aa74:	dd0b      	ble.n	800aa8e <__gethex+0x402>
 800aa76:	2101      	movs	r1, #1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f7ff fd9f 	bl	800a5bc <rshift>
 800aa7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa82:	3701      	adds	r7, #1
 800aa84:	42bb      	cmp	r3, r7
 800aa86:	f6ff aee0 	blt.w	800a84a <__gethex+0x1be>
 800aa8a:	2501      	movs	r5, #1
 800aa8c:	e7c2      	b.n	800aa14 <__gethex+0x388>
 800aa8e:	f016 061f 	ands.w	r6, r6, #31
 800aa92:	d0fa      	beq.n	800aa8a <__gethex+0x3fe>
 800aa94:	4453      	add	r3, sl
 800aa96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa9a:	f7fe f8e9 	bl	8008c70 <__hi0bits>
 800aa9e:	f1c6 0620 	rsb	r6, r6, #32
 800aaa2:	42b0      	cmp	r0, r6
 800aaa4:	dbe7      	blt.n	800aa76 <__gethex+0x3ea>
 800aaa6:	e7f0      	b.n	800aa8a <__gethex+0x3fe>
 800aaa8:	0800b3b7 	.word	0x0800b3b7

0800aaac <L_shift>:
 800aaac:	f1c2 0208 	rsb	r2, r2, #8
 800aab0:	0092      	lsls	r2, r2, #2
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	f1c2 0620 	rsb	r6, r2, #32
 800aab8:	6843      	ldr	r3, [r0, #4]
 800aaba:	6804      	ldr	r4, [r0, #0]
 800aabc:	fa03 f506 	lsl.w	r5, r3, r6
 800aac0:	432c      	orrs	r4, r5
 800aac2:	40d3      	lsrs	r3, r2
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaca:	4288      	cmp	r0, r1
 800aacc:	d3f4      	bcc.n	800aab8 <L_shift+0xc>
 800aace:	bd70      	pop	{r4, r5, r6, pc}

0800aad0 <__match>:
 800aad0:	b530      	push	{r4, r5, lr}
 800aad2:	6803      	ldr	r3, [r0, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aada:	b914      	cbnz	r4, 800aae2 <__match+0x12>
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	2001      	movs	r0, #1
 800aae0:	bd30      	pop	{r4, r5, pc}
 800aae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aaea:	2d19      	cmp	r5, #25
 800aaec:	bf98      	it	ls
 800aaee:	3220      	addls	r2, #32
 800aaf0:	42a2      	cmp	r2, r4
 800aaf2:	d0f0      	beq.n	800aad6 <__match+0x6>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7f3      	b.n	800aae0 <__match+0x10>

0800aaf8 <__hexnan>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	2500      	movs	r5, #0
 800aafe:	680b      	ldr	r3, [r1, #0]
 800ab00:	4682      	mov	sl, r0
 800ab02:	115e      	asrs	r6, r3, #5
 800ab04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab08:	f013 031f 	ands.w	r3, r3, #31
 800ab0c:	bf18      	it	ne
 800ab0e:	3604      	addne	r6, #4
 800ab10:	1f37      	subs	r7, r6, #4
 800ab12:	4690      	mov	r8, r2
 800ab14:	46b9      	mov	r9, r7
 800ab16:	463c      	mov	r4, r7
 800ab18:	46ab      	mov	fp, r5
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	6801      	ldr	r1, [r0, #0]
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab24:	9502      	str	r5, [sp, #8]
 800ab26:	784a      	ldrb	r2, [r1, #1]
 800ab28:	1c4b      	adds	r3, r1, #1
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	b342      	cbz	r2, 800ab80 <__hexnan+0x88>
 800ab2e:	4610      	mov	r0, r2
 800ab30:	9105      	str	r1, [sp, #20]
 800ab32:	9204      	str	r2, [sp, #16]
 800ab34:	f7ff fd95 	bl	800a662 <__hexdig_fun>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d151      	bne.n	800abe0 <__hexnan+0xe8>
 800ab3c:	9a04      	ldr	r2, [sp, #16]
 800ab3e:	9905      	ldr	r1, [sp, #20]
 800ab40:	2a20      	cmp	r2, #32
 800ab42:	d818      	bhi.n	800ab76 <__hexnan+0x7e>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	459b      	cmp	fp, r3
 800ab48:	dd13      	ble.n	800ab72 <__hexnan+0x7a>
 800ab4a:	454c      	cmp	r4, r9
 800ab4c:	d206      	bcs.n	800ab5c <__hexnan+0x64>
 800ab4e:	2d07      	cmp	r5, #7
 800ab50:	dc04      	bgt.n	800ab5c <__hexnan+0x64>
 800ab52:	462a      	mov	r2, r5
 800ab54:	4649      	mov	r1, r9
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff ffa8 	bl	800aaac <L_shift>
 800ab5c:	4544      	cmp	r4, r8
 800ab5e:	d952      	bls.n	800ac06 <__hexnan+0x10e>
 800ab60:	2300      	movs	r3, #0
 800ab62:	f1a4 0904 	sub.w	r9, r4, #4
 800ab66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab6a:	461d      	mov	r5, r3
 800ab6c:	464c      	mov	r4, r9
 800ab6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	e7d7      	b.n	800ab26 <__hexnan+0x2e>
 800ab76:	2a29      	cmp	r2, #41	@ 0x29
 800ab78:	d157      	bne.n	800ac2a <__hexnan+0x132>
 800ab7a:	3102      	adds	r1, #2
 800ab7c:	f8ca 1000 	str.w	r1, [sl]
 800ab80:	f1bb 0f00 	cmp.w	fp, #0
 800ab84:	d051      	beq.n	800ac2a <__hexnan+0x132>
 800ab86:	454c      	cmp	r4, r9
 800ab88:	d206      	bcs.n	800ab98 <__hexnan+0xa0>
 800ab8a:	2d07      	cmp	r5, #7
 800ab8c:	dc04      	bgt.n	800ab98 <__hexnan+0xa0>
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4649      	mov	r1, r9
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff ff8a 	bl	800aaac <L_shift>
 800ab98:	4544      	cmp	r4, r8
 800ab9a:	d936      	bls.n	800ac0a <__hexnan+0x112>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	f1a8 0204 	sub.w	r2, r8, #4
 800aba2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aba6:	429f      	cmp	r7, r3
 800aba8:	f842 1f04 	str.w	r1, [r2, #4]!
 800abac:	d2f9      	bcs.n	800aba2 <__hexnan+0xaa>
 800abae:	1b3b      	subs	r3, r7, r4
 800abb0:	f023 0303 	bic.w	r3, r3, #3
 800abb4:	3304      	adds	r3, #4
 800abb6:	3401      	adds	r4, #1
 800abb8:	3e03      	subs	r6, #3
 800abba:	42b4      	cmp	r4, r6
 800abbc:	bf88      	it	hi
 800abbe:	2304      	movhi	r3, #4
 800abc0:	2200      	movs	r2, #0
 800abc2:	4443      	add	r3, r8
 800abc4:	f843 2b04 	str.w	r2, [r3], #4
 800abc8:	429f      	cmp	r7, r3
 800abca:	d2fb      	bcs.n	800abc4 <__hexnan+0xcc>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	b91b      	cbnz	r3, 800abd8 <__hexnan+0xe0>
 800abd0:	4547      	cmp	r7, r8
 800abd2:	d128      	bne.n	800ac26 <__hexnan+0x12e>
 800abd4:	2301      	movs	r3, #1
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	2005      	movs	r0, #5
 800abda:	b007      	add	sp, #28
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	3501      	adds	r5, #1
 800abe2:	2d08      	cmp	r5, #8
 800abe4:	f10b 0b01 	add.w	fp, fp, #1
 800abe8:	dd06      	ble.n	800abf8 <__hexnan+0x100>
 800abea:	4544      	cmp	r4, r8
 800abec:	d9c1      	bls.n	800ab72 <__hexnan+0x7a>
 800abee:	2300      	movs	r3, #0
 800abf0:	2501      	movs	r5, #1
 800abf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800abf6:	3c04      	subs	r4, #4
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	f000 000f 	and.w	r0, r0, #15
 800abfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	e7b5      	b.n	800ab72 <__hexnan+0x7a>
 800ac06:	2508      	movs	r5, #8
 800ac08:	e7b3      	b.n	800ab72 <__hexnan+0x7a>
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0dd      	beq.n	800abcc <__hexnan+0xd4>
 800ac10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac14:	f1c3 0320 	rsb	r3, r3, #32
 800ac18:	40da      	lsrs	r2, r3
 800ac1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac24:	e7d2      	b.n	800abcc <__hexnan+0xd4>
 800ac26:	3f04      	subs	r7, #4
 800ac28:	e7d0      	b.n	800abcc <__hexnan+0xd4>
 800ac2a:	2004      	movs	r0, #4
 800ac2c:	e7d5      	b.n	800abda <__hexnan+0xe2>

0800ac2e <__ascii_mbtowc>:
 800ac2e:	b082      	sub	sp, #8
 800ac30:	b901      	cbnz	r1, 800ac34 <__ascii_mbtowc+0x6>
 800ac32:	a901      	add	r1, sp, #4
 800ac34:	b142      	cbz	r2, 800ac48 <__ascii_mbtowc+0x1a>
 800ac36:	b14b      	cbz	r3, 800ac4c <__ascii_mbtowc+0x1e>
 800ac38:	7813      	ldrb	r3, [r2, #0]
 800ac3a:	600b      	str	r3, [r1, #0]
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	1e10      	subs	r0, r2, #0
 800ac40:	bf18      	it	ne
 800ac42:	2001      	movne	r0, #1
 800ac44:	b002      	add	sp, #8
 800ac46:	4770      	bx	lr
 800ac48:	4610      	mov	r0, r2
 800ac4a:	e7fb      	b.n	800ac44 <__ascii_mbtowc+0x16>
 800ac4c:	f06f 0001 	mvn.w	r0, #1
 800ac50:	e7f8      	b.n	800ac44 <__ascii_mbtowc+0x16>

0800ac52 <_realloc_r>:
 800ac52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac56:	4680      	mov	r8, r0
 800ac58:	4615      	mov	r5, r2
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b921      	cbnz	r1, 800ac68 <_realloc_r+0x16>
 800ac5e:	4611      	mov	r1, r2
 800ac60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	f7fd be86 	b.w	8008974 <_malloc_r>
 800ac68:	b92a      	cbnz	r2, 800ac76 <_realloc_r+0x24>
 800ac6a:	f7fd fe11 	bl	8008890 <_free_r>
 800ac6e:	2400      	movs	r4, #0
 800ac70:	4620      	mov	r0, r4
 800ac72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac76:	f000 f840 	bl	800acfa <_malloc_usable_size_r>
 800ac7a:	4285      	cmp	r5, r0
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	d802      	bhi.n	800ac86 <_realloc_r+0x34>
 800ac80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ac84:	d8f4      	bhi.n	800ac70 <_realloc_r+0x1e>
 800ac86:	4629      	mov	r1, r5
 800ac88:	4640      	mov	r0, r8
 800ac8a:	f7fd fe73 	bl	8008974 <_malloc_r>
 800ac8e:	4607      	mov	r7, r0
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d0ec      	beq.n	800ac6e <_realloc_r+0x1c>
 800ac94:	42b5      	cmp	r5, r6
 800ac96:	462a      	mov	r2, r5
 800ac98:	4621      	mov	r1, r4
 800ac9a:	bf28      	it	cs
 800ac9c:	4632      	movcs	r2, r6
 800ac9e:	f7fc ff94 	bl	8007bca <memcpy>
 800aca2:	4621      	mov	r1, r4
 800aca4:	4640      	mov	r0, r8
 800aca6:	f7fd fdf3 	bl	8008890 <_free_r>
 800acaa:	463c      	mov	r4, r7
 800acac:	e7e0      	b.n	800ac70 <_realloc_r+0x1e>

0800acae <__ascii_wctomb>:
 800acae:	4603      	mov	r3, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	b141      	cbz	r1, 800acc6 <__ascii_wctomb+0x18>
 800acb4:	2aff      	cmp	r2, #255	@ 0xff
 800acb6:	d904      	bls.n	800acc2 <__ascii_wctomb+0x14>
 800acb8:	228a      	movs	r2, #138	@ 0x8a
 800acba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	4770      	bx	lr
 800acc2:	2001      	movs	r0, #1
 800acc4:	700a      	strb	r2, [r1, #0]
 800acc6:	4770      	bx	lr

0800acc8 <fiprintf>:
 800acc8:	b40e      	push	{r1, r2, r3}
 800acca:	b503      	push	{r0, r1, lr}
 800accc:	4601      	mov	r1, r0
 800acce:	ab03      	add	r3, sp, #12
 800acd0:	4805      	ldr	r0, [pc, #20]	@ (800ace8 <fiprintf+0x20>)
 800acd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd6:	6800      	ldr	r0, [r0, #0]
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	f000 f83d 	bl	800ad58 <_vfiprintf_r>
 800acde:	b002      	add	sp, #8
 800ace0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ace4:	b003      	add	sp, #12
 800ace6:	4770      	bx	lr
 800ace8:	2000001c 	.word	0x2000001c

0800acec <abort>:
 800acec:	2006      	movs	r0, #6
 800acee:	b508      	push	{r3, lr}
 800acf0:	f000 fa06 	bl	800b100 <raise>
 800acf4:	2001      	movs	r0, #1
 800acf6:	f7f6 fe18 	bl	800192a <_exit>

0800acfa <_malloc_usable_size_r>:
 800acfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acfe:	1f18      	subs	r0, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbc      	itt	lt
 800ad04:	580b      	ldrlt	r3, [r1, r0]
 800ad06:	18c0      	addlt	r0, r0, r3
 800ad08:	4770      	bx	lr

0800ad0a <__sfputc_r>:
 800ad0a:	6893      	ldr	r3, [r2, #8]
 800ad0c:	b410      	push	{r4}
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	6093      	str	r3, [r2, #8]
 800ad14:	da07      	bge.n	800ad26 <__sfputc_r+0x1c>
 800ad16:	6994      	ldr	r4, [r2, #24]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	db01      	blt.n	800ad20 <__sfputc_r+0x16>
 800ad1c:	290a      	cmp	r1, #10
 800ad1e:	d102      	bne.n	800ad26 <__sfputc_r+0x1c>
 800ad20:	bc10      	pop	{r4}
 800ad22:	f000 b931 	b.w	800af88 <__swbuf_r>
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	1c58      	adds	r0, r3, #1
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	7019      	strb	r1, [r3, #0]
 800ad2e:	4608      	mov	r0, r1
 800ad30:	bc10      	pop	{r4}
 800ad32:	4770      	bx	lr

0800ad34 <__sfputs_r>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	4606      	mov	r6, r0
 800ad38:	460f      	mov	r7, r1
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	18d5      	adds	r5, r2, r3
 800ad3e:	42ac      	cmp	r4, r5
 800ad40:	d101      	bne.n	800ad46 <__sfputs_r+0x12>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e007      	b.n	800ad56 <__sfputs_r+0x22>
 800ad46:	463a      	mov	r2, r7
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4e:	f7ff ffdc 	bl	800ad0a <__sfputc_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d1f3      	bne.n	800ad3e <__sfputs_r+0xa>
 800ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad58 <_vfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	4614      	mov	r4, r2
 800ad60:	4698      	mov	r8, r3
 800ad62:	4606      	mov	r6, r0
 800ad64:	b09d      	sub	sp, #116	@ 0x74
 800ad66:	b118      	cbz	r0, 800ad70 <_vfiprintf_r+0x18>
 800ad68:	6a03      	ldr	r3, [r0, #32]
 800ad6a:	b90b      	cbnz	r3, 800ad70 <_vfiprintf_r+0x18>
 800ad6c:	f7fc fe06 	bl	800797c <__sinit>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7fc ff14 	bl	8007baa <__retarget_lock_acquire_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <_vfiprintf_r+0x34>
 800ad88:	692b      	ldr	r3, [r5, #16]
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x5c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f000 f938 	bl	800b004 <__swsetup_r>
 800ad94:	b170      	cbz	r0, 800adb4 <_vfiprintf_r+0x5c>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad98:	07dc      	lsls	r4, r3, #31
 800ad9a:	d504      	bpl.n	800ada6 <_vfiprintf_r+0x4e>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	0598      	lsls	r0, r3, #22
 800adaa:	d4f7      	bmi.n	800ad9c <_vfiprintf_r+0x44>
 800adac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adae:	f7fc fefd 	bl	8007bac <__retarget_lock_release_recursive>
 800adb2:	e7f3      	b.n	800ad9c <_vfiprintf_r+0x44>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb8:	2320      	movs	r3, #32
 800adba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adbe:	2330      	movs	r3, #48	@ 0x30
 800adc0:	f04f 0901 	mov.w	r9, #1
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800af74 <_vfiprintf_r+0x21c>
 800adcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800add0:	4623      	mov	r3, r4
 800add2:	469a      	mov	sl, r3
 800add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add8:	b10a      	cbz	r2, 800adde <_vfiprintf_r+0x86>
 800adda:	2a25      	cmp	r2, #37	@ 0x25
 800addc:	d1f9      	bne.n	800add2 <_vfiprintf_r+0x7a>
 800adde:	ebba 0b04 	subs.w	fp, sl, r4
 800ade2:	d00b      	beq.n	800adfc <_vfiprintf_r+0xa4>
 800ade4:	465b      	mov	r3, fp
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa2 	bl	800ad34 <__sfputs_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f000 80a7 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf8:	445a      	add	r2, fp
 800adfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 809f 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2205      	movs	r2, #5
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4853      	ldr	r0, [pc, #332]	@ (800af74 <_vfiprintf_r+0x21c>)
 800ae28:	f7fc fec1 	bl	8007bae <memchr>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	b9d8      	cbnz	r0, 800ae68 <_vfiprintf_r+0x110>
 800ae30:	06d1      	lsls	r1, r2, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2320      	movmi	r3, #32
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	0713      	lsls	r3, r2, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	232b      	movmi	r3, #43	@ 0x2b
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4a:	d015      	beq.n	800ae78 <_vfiprintf_r+0x120>
 800ae4c:	4654      	mov	r4, sl
 800ae4e:	2000      	movs	r0, #0
 800ae50:	f04f 0c0a 	mov.w	ip, #10
 800ae54:	9a07      	ldr	r2, [sp, #28]
 800ae56:	4621      	mov	r1, r4
 800ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5c:	3b30      	subs	r3, #48	@ 0x30
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d94b      	bls.n	800aefa <_vfiprintf_r+0x1a2>
 800ae62:	b1b0      	cbz	r0, 800ae92 <_vfiprintf_r+0x13a>
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	e014      	b.n	800ae92 <_vfiprintf_r+0x13a>
 800ae68:	eba0 0308 	sub.w	r3, r0, r8
 800ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	46a2      	mov	sl, r4
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	e7d2      	b.n	800ae1e <_vfiprintf_r+0xc6>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d19      	adds	r1, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9103      	str	r1, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbb      	ittet	lt
 800ae84:	425b      	neglt	r3, r3
 800ae86:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8a:	9307      	strge	r3, [sp, #28]
 800ae8c:	9307      	strlt	r3, [sp, #28]
 800ae8e:	bfb8      	it	lt
 800ae90:	9204      	strlt	r2, [sp, #16]
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae96:	d10a      	bne.n	800aeae <_vfiprintf_r+0x156>
 800ae98:	7863      	ldrb	r3, [r4, #1]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d132      	bne.n	800af04 <_vfiprintf_r+0x1ac>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	3402      	adds	r4, #2
 800aea2:	1d1a      	adds	r2, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9203      	str	r2, [sp, #12]
 800aea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800af78 <_vfiprintf_r+0x220>
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	4650      	mov	r0, sl
 800aeb6:	7821      	ldrb	r1, [r4, #0]
 800aeb8:	f7fc fe79 	bl	8007bae <memchr>
 800aebc:	b138      	cbz	r0, 800aece <_vfiprintf_r+0x176>
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	eba0 000a 	sub.w	r0, r0, sl
 800aec6:	4082      	lsls	r2, r0
 800aec8:	4313      	orrs	r3, r2
 800aeca:	3401      	adds	r4, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed2:	2206      	movs	r2, #6
 800aed4:	4829      	ldr	r0, [pc, #164]	@ (800af7c <_vfiprintf_r+0x224>)
 800aed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeda:	f7fc fe68 	bl	8007bae <memchr>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d03f      	beq.n	800af62 <_vfiprintf_r+0x20a>
 800aee2:	4b27      	ldr	r3, [pc, #156]	@ (800af80 <_vfiprintf_r+0x228>)
 800aee4:	bb1b      	cbnz	r3, 800af2e <_vfiprintf_r+0x1d6>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	3307      	adds	r3, #7
 800aeea:	f023 0307 	bic.w	r3, r3, #7
 800aeee:	3308      	adds	r3, #8
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef4:	443b      	add	r3, r7
 800aef6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef8:	e76a      	b.n	800add0 <_vfiprintf_r+0x78>
 800aefa:	460c      	mov	r4, r1
 800aefc:	2001      	movs	r0, #1
 800aefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800af02:	e7a8      	b.n	800ae56 <_vfiprintf_r+0xfe>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 0c0a 	mov.w	ip, #10
 800af0a:	4619      	mov	r1, r3
 800af0c:	3401      	adds	r4, #1
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	4620      	mov	r0, r4
 800af12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af16:	3a30      	subs	r2, #48	@ 0x30
 800af18:	2a09      	cmp	r2, #9
 800af1a:	d903      	bls.n	800af24 <_vfiprintf_r+0x1cc>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0c6      	beq.n	800aeae <_vfiprintf_r+0x156>
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	e7c4      	b.n	800aeae <_vfiprintf_r+0x156>
 800af24:	4604      	mov	r4, r0
 800af26:	2301      	movs	r3, #1
 800af28:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2c:	e7f0      	b.n	800af10 <_vfiprintf_r+0x1b8>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4630      	mov	r0, r6
 800af36:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <_vfiprintf_r+0x22c>)
 800af38:	a904      	add	r1, sp, #16
 800af3a:	f7fb fec5 	bl	8006cc8 <_printf_float>
 800af3e:	4607      	mov	r7, r0
 800af40:	1c78      	adds	r0, r7, #1
 800af42:	d1d6      	bne.n	800aef2 <_vfiprintf_r+0x19a>
 800af44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d405      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7fc fe2b 	bl	8007bac <__retarget_lock_release_recursive>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af1f 	bmi.w	800ad9c <_vfiprintf_r+0x44>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e71e      	b.n	800ada0 <_vfiprintf_r+0x48>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4630      	mov	r0, r6
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <_vfiprintf_r+0x22c>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	f7fc f949 	bl	8007204 <_printf_i>
 800af72:	e7e4      	b.n	800af3e <_vfiprintf_r+0x1e6>
 800af74:	0800b679 	.word	0x0800b679
 800af78:	0800b67f 	.word	0x0800b67f
 800af7c:	0800b683 	.word	0x0800b683
 800af80:	08006cc9 	.word	0x08006cc9
 800af84:	0800ad35 	.word	0x0800ad35

0800af88 <__swbuf_r>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	460e      	mov	r6, r1
 800af8c:	4614      	mov	r4, r2
 800af8e:	4605      	mov	r5, r0
 800af90:	b118      	cbz	r0, 800af9a <__swbuf_r+0x12>
 800af92:	6a03      	ldr	r3, [r0, #32]
 800af94:	b90b      	cbnz	r3, 800af9a <__swbuf_r+0x12>
 800af96:	f7fc fcf1 	bl	800797c <__sinit>
 800af9a:	69a3      	ldr	r3, [r4, #24]
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	071a      	lsls	r2, r3, #28
 800afa2:	d501      	bpl.n	800afa8 <__swbuf_r+0x20>
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	b943      	cbnz	r3, 800afba <__swbuf_r+0x32>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f82a 	bl	800b004 <__swsetup_r>
 800afb0:	b118      	cbz	r0, 800afba <__swbuf_r+0x32>
 800afb2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800afb6:	4638      	mov	r0, r7
 800afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	b2f6      	uxtb	r6, r6
 800afc0:	1a98      	subs	r0, r3, r2
 800afc2:	6963      	ldr	r3, [r4, #20]
 800afc4:	4637      	mov	r7, r6
 800afc6:	4283      	cmp	r3, r0
 800afc8:	dc05      	bgt.n	800afd6 <__swbuf_r+0x4e>
 800afca:	4621      	mov	r1, r4
 800afcc:	4628      	mov	r0, r5
 800afce:	f7ff fa59 	bl	800a484 <_fflush_r>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d1ed      	bne.n	800afb2 <__swbuf_r+0x2a>
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	3b01      	subs	r3, #1
 800afda:	60a3      	str	r3, [r4, #8]
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	6022      	str	r2, [r4, #0]
 800afe2:	701e      	strb	r6, [r3, #0]
 800afe4:	6962      	ldr	r2, [r4, #20]
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	429a      	cmp	r2, r3
 800afea:	d004      	beq.n	800aff6 <__swbuf_r+0x6e>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	07db      	lsls	r3, r3, #31
 800aff0:	d5e1      	bpl.n	800afb6 <__swbuf_r+0x2e>
 800aff2:	2e0a      	cmp	r6, #10
 800aff4:	d1df      	bne.n	800afb6 <__swbuf_r+0x2e>
 800aff6:	4621      	mov	r1, r4
 800aff8:	4628      	mov	r0, r5
 800affa:	f7ff fa43 	bl	800a484 <_fflush_r>
 800affe:	2800      	cmp	r0, #0
 800b000:	d0d9      	beq.n	800afb6 <__swbuf_r+0x2e>
 800b002:	e7d6      	b.n	800afb2 <__swbuf_r+0x2a>

0800b004 <__swsetup_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4b29      	ldr	r3, [pc, #164]	@ (800b0ac <__swsetup_r+0xa8>)
 800b008:	4605      	mov	r5, r0
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	460c      	mov	r4, r1
 800b00e:	b118      	cbz	r0, 800b018 <__swsetup_r+0x14>
 800b010:	6a03      	ldr	r3, [r0, #32]
 800b012:	b90b      	cbnz	r3, 800b018 <__swsetup_r+0x14>
 800b014:	f7fc fcb2 	bl	800797c <__sinit>
 800b018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01c:	0719      	lsls	r1, r3, #28
 800b01e:	d422      	bmi.n	800b066 <__swsetup_r+0x62>
 800b020:	06da      	lsls	r2, r3, #27
 800b022:	d407      	bmi.n	800b034 <__swsetup_r+0x30>
 800b024:	2209      	movs	r2, #9
 800b026:	602a      	str	r2, [r5, #0]
 800b028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	e033      	b.n	800b09c <__swsetup_r+0x98>
 800b034:	0758      	lsls	r0, r3, #29
 800b036:	d512      	bpl.n	800b05e <__swsetup_r+0x5a>
 800b038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b03a:	b141      	cbz	r1, 800b04e <__swsetup_r+0x4a>
 800b03c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b040:	4299      	cmp	r1, r3
 800b042:	d002      	beq.n	800b04a <__swsetup_r+0x46>
 800b044:	4628      	mov	r0, r5
 800b046:	f7fd fc23 	bl	8008890 <_free_r>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	2300      	movs	r3, #0
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f043 0308 	orr.w	r3, r3, #8
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b94b      	cbnz	r3, 800b07e <__swsetup_r+0x7a>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b074:	d003      	beq.n	800b07e <__swsetup_r+0x7a>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 f882 	bl	800b182 <__smakebuf_r>
 800b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b082:	f013 0201 	ands.w	r2, r3, #1
 800b086:	d00a      	beq.n	800b09e <__swsetup_r+0x9a>
 800b088:	2200      	movs	r2, #0
 800b08a:	60a2      	str	r2, [r4, #8]
 800b08c:	6962      	ldr	r2, [r4, #20]
 800b08e:	4252      	negs	r2, r2
 800b090:	61a2      	str	r2, [r4, #24]
 800b092:	6922      	ldr	r2, [r4, #16]
 800b094:	b942      	cbnz	r2, 800b0a8 <__swsetup_r+0xa4>
 800b096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b09a:	d1c5      	bne.n	800b028 <__swsetup_r+0x24>
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	0799      	lsls	r1, r3, #30
 800b0a0:	bf58      	it	pl
 800b0a2:	6962      	ldrpl	r2, [r4, #20]
 800b0a4:	60a2      	str	r2, [r4, #8]
 800b0a6:	e7f4      	b.n	800b092 <__swsetup_r+0x8e>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e7f7      	b.n	800b09c <__swsetup_r+0x98>
 800b0ac:	2000001c 	.word	0x2000001c

0800b0b0 <_raise_r>:
 800b0b0:	291f      	cmp	r1, #31
 800b0b2:	b538      	push	{r3, r4, r5, lr}
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	d904      	bls.n	800b0c4 <_raise_r+0x14>
 800b0ba:	2316      	movs	r3, #22
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0c6:	b112      	cbz	r2, 800b0ce <_raise_r+0x1e>
 800b0c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0cc:	b94b      	cbnz	r3, 800b0e2 <_raise_r+0x32>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f830 	bl	800b134 <_getpid_r>
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	4628      	mov	r0, r5
 800b0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0de:	f000 b817 	b.w	800b110 <_kill_r>
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d00a      	beq.n	800b0fc <_raise_r+0x4c>
 800b0e6:	1c59      	adds	r1, r3, #1
 800b0e8:	d103      	bne.n	800b0f2 <_raise_r+0x42>
 800b0ea:	2316      	movs	r3, #22
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	2001      	movs	r0, #1
 800b0f0:	e7e7      	b.n	800b0c2 <_raise_r+0x12>
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0fa:	4798      	blx	r3
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7e0      	b.n	800b0c2 <_raise_r+0x12>

0800b100 <raise>:
 800b100:	4b02      	ldr	r3, [pc, #8]	@ (800b10c <raise+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f7ff bfd3 	b.w	800b0b0 <_raise_r>
 800b10a:	bf00      	nop
 800b10c:	2000001c 	.word	0x2000001c

0800b110 <_kill_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	2300      	movs	r3, #0
 800b114:	4d06      	ldr	r5, [pc, #24]	@ (800b130 <_kill_r+0x20>)
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	f7f6 fbf4 	bl	800190a <_kill>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d102      	bne.n	800b12c <_kill_r+0x1c>
 800b126:	682b      	ldr	r3, [r5, #0]
 800b128:	b103      	cbz	r3, 800b12c <_kill_r+0x1c>
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop
 800b130:	20001db4 	.word	0x20001db4

0800b134 <_getpid_r>:
 800b134:	f7f6 bbe2 	b.w	80018fc <_getpid>

0800b138 <__swhatbuf_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	4615      	mov	r5, r2
 800b142:	2900      	cmp	r1, #0
 800b144:	461e      	mov	r6, r3
 800b146:	b096      	sub	sp, #88	@ 0x58
 800b148:	da0c      	bge.n	800b164 <__swhatbuf_r+0x2c>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	2100      	movs	r1, #0
 800b14e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b152:	bf14      	ite	ne
 800b154:	2340      	movne	r3, #64	@ 0x40
 800b156:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b15a:	2000      	movs	r0, #0
 800b15c:	6031      	str	r1, [r6, #0]
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	b016      	add	sp, #88	@ 0x58
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	466a      	mov	r2, sp
 800b166:	f000 f849 	bl	800b1fc <_fstat_r>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	dbed      	blt.n	800b14a <__swhatbuf_r+0x12>
 800b16e:	9901      	ldr	r1, [sp, #4]
 800b170:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b174:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b178:	4259      	negs	r1, r3
 800b17a:	4159      	adcs	r1, r3
 800b17c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b180:	e7eb      	b.n	800b15a <__swhatbuf_r+0x22>

0800b182 <__smakebuf_r>:
 800b182:	898b      	ldrh	r3, [r1, #12]
 800b184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b186:	079d      	lsls	r5, r3, #30
 800b188:	4606      	mov	r6, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	d507      	bpl.n	800b19e <__smakebuf_r+0x1c>
 800b18e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	6123      	str	r3, [r4, #16]
 800b196:	2301      	movs	r3, #1
 800b198:	6163      	str	r3, [r4, #20]
 800b19a:	b003      	add	sp, #12
 800b19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19e:	466a      	mov	r2, sp
 800b1a0:	ab01      	add	r3, sp, #4
 800b1a2:	f7ff ffc9 	bl	800b138 <__swhatbuf_r>
 800b1a6:	9f00      	ldr	r7, [sp, #0]
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7fd fbe1 	bl	8008974 <_malloc_r>
 800b1b2:	b948      	cbnz	r0, 800b1c8 <__smakebuf_r+0x46>
 800b1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d4ee      	bmi.n	800b19a <__smakebuf_r+0x18>
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	f043 0302 	orr.w	r3, r3, #2
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	e7e2      	b.n	800b18e <__smakebuf_r+0xc>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	6020      	str	r0, [r4, #0]
 800b1d8:	b15b      	cbz	r3, 800b1f2 <__smakebuf_r+0x70>
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e0:	f000 f81e 	bl	800b220 <_isatty_r>
 800b1e4:	b128      	cbz	r0, 800b1f2 <__smakebuf_r+0x70>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	f043 0301 	orr.w	r3, r3, #1
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	431d      	orrs	r5, r3
 800b1f6:	81a5      	strh	r5, [r4, #12]
 800b1f8:	e7cf      	b.n	800b19a <__smakebuf_r+0x18>
	...

0800b1fc <_fstat_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	2300      	movs	r3, #0
 800b200:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_fstat_r+0x20>)
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7f6 fbdd 	bl	80019c8 <_fstat>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_fstat_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_fstat_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	20001db4 	.word	0x20001db4

0800b220 <_isatty_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	2300      	movs	r3, #0
 800b224:	4d05      	ldr	r5, [pc, #20]	@ (800b23c <_isatty_r+0x1c>)
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f6 fbdb 	bl	80019e6 <_isatty>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_isatty_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_isatty_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20001db4 	.word	0x20001db4

0800b240 <_init>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

0800b24c <_fini>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr
