
C_prog_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bed8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800bfe8  0800bfe8  0000cfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c518  0800c518  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c518  0800c518  0000d518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c520  0800c520  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c520  0800c520  0000d520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c524  0800c524  0000d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c528  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  200001dc  0800c704  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e1c  0800c704  0000ee1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001696a  00000000  00000000  0000e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003436  00000000  00000000  00024b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00027fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  00029430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043ee  00000000  00000000  0002a42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e26  00000000  00000000  0002e81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f35  00000000  00000000  00044643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd8  00000000  00000000  000da5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e1194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bfd0 	.word	0x0800bfd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800bfd0 	.word	0x0800bfd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	2200      	movs	r2, #0
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	460d      	mov	r5, r1
 8000e7a:	f7ff fd9f 	bl	80009bc <__aeabi_dcmplt>
 8000e7e:	b928      	cbnz	r0, 8000e8c <__aeabi_d2lz+0x1c>
 8000e80:	4620      	mov	r0, r4
 8000e82:	4629      	mov	r1, r5
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f000 b80a 	b.w	8000ea0 <__aeabi_d2ulz>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000e92:	f000 f805 	bl	8000ea0 <__aeabi_d2ulz>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_d2ulz>:
 8000ea0:	b5d0      	push	{r4, r6, r7, lr}
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <__aeabi_d2ulz+0x34>)
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	460f      	mov	r7, r1
 8000eaa:	f7ff fb15 	bl	80004d8 <__aeabi_dmul>
 8000eae:	f7ff fdeb 	bl	8000a88 <__aeabi_d2uiz>
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	f7ff fa96 	bl	80003e4 <__aeabi_ui2d>
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <__aeabi_d2ulz+0x38>)
 8000ebc:	f7ff fb0c 	bl	80004d8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	f7ff f94e 	bl	8000168 <__aeabi_dsub>
 8000ecc:	f7ff fddc 	bl	8000a88 <__aeabi_d2uiz>
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed4:	3df00000 	.word	0x3df00000
 8000ed8:	41f00000 	.word	0x41f00000

08000edc <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <delay+0x2c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000eee:	bf00      	nop
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <delay+0x2c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3f9      	bcc.n	8000ef0 <delay+0x14>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200001f8 	.word	0x200001f8
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA

// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f040 8082 	bne.w	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11a      	bne.n	8000f60 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 fec3 	bl	8003cb8 <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f36:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f38:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020a 	bic.w	r2, r2, #10
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0202 	orr.w	r2, r2, #2
 8000f5c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f5e:	e062      	b.n	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d15e      	bne.n	8001026 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 fea4 	bl	8003cb8 <HAL_TIM_ReadCapturedValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d907      	bls.n	8000f9a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4a2b      	ldr	r2, [pc, #172]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e00f      	b.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d909      	bls.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000fb4:	33ff      	adds	r3, #255	@ 0xff
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa10 	bl	80003e4 <__aeabi_ui2d>
 8000fc4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001030 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fa85 	bl	80004d8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fde:	f7ff fba5 	bl	800072c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd6d 	bl	8000ac8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ff2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 020a 	bic.w	r2, r2, #10
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a12      	ldr	r2, [r2, #32]
 8001014:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0202 	bic.w	r2, r2, #2
 8001024:	60da      	str	r2, [r3, #12]
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	b020c49c 	.word	0xb020c49c
 8001034:	3fa16872 	.word	0x3fa16872
 8001038:	200002ec 	.word	0x200002ec
 800103c:	200002e0 	.word	0x200002e0
 8001040:	200002e4 	.word	0x200002e4
 8001044:	200002e8 	.word	0x200002e8
 8001048:	200002f0 	.word	0x200002f0
 800104c:	200001f8 	.word	0x200001f8

08001050 <HCSR04_Read>:

void HCSR04_Read(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HCSR04_Read+0x38>)
 800105c:	f001 fc5d 	bl	800291a <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001060:	200a      	movs	r0, #10
 8001062:	f7ff ff3b 	bl	8000edc <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <HCSR04_Read+0x38>)
 800106e:	f001 fc54 	bl	800291a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HCSR04_Read+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HCSR04_Read+0x3c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0202 	orr.w	r2, r2, #2
 8001080:	60da      	str	r2, [r3, #12]
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010800 	.word	0x40010800
 800108c:	200001f8 	.word	0x200001f8

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f001 f8e2 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f85a 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f98e 	bl	80013bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80010a0:	f000 f89c 	bl	80011dc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80010a4:	f000 f960 	bl	8001368 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010a8:	f000 f8ee 	bl	8001288 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	481a      	ldr	r0, [pc, #104]	@ (8001118 <main+0x88>)
 80010b0:	f002 fa90 	bl	80035d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	4819      	ldr	r0, [pc, #100]	@ (800111c <main+0x8c>)
 80010b8:	f002 f99a 	bl	80033f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010bc:	2104      	movs	r1, #4
 80010be:	4817      	ldr	r0, [pc, #92]	@ (800111c <main+0x8c>)
 80010c0:	f002 f996 	bl	80033f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010c4:	210c      	movs	r1, #12
 80010c6:	4815      	ldr	r0, [pc, #84]	@ (800111c <main+0x8c>)
 80010c8:	f002 f992 	bl	80033f0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010cc:	f003 ff12 	bl	8004ef4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <main+0x90>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4813      	ldr	r0, [pc, #76]	@ (8001124 <main+0x94>)
 80010d6:	f003 ff73 	bl	8004fc0 <osThreadNew>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <main+0x98>)
 80010de:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <main+0x9c>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4812      	ldr	r0, [pc, #72]	@ (8001130 <main+0xa0>)
 80010e6:	f003 ff6b 	bl	8004fc0 <osThreadNew>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <main+0xa4>)
 80010ee:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80010f0:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <main+0xa8>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4811      	ldr	r0, [pc, #68]	@ (800113c <main+0xac>)
 80010f6:	f003 ff63 	bl	8004fc0 <osThreadNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <main+0xb0>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001100:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <main+0xb4>)
 8001102:	2100      	movs	r1, #0
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <main+0xb8>)
 8001106:	f003 ff5b 	bl	8004fc0 <osThreadNew>
 800110a:	4603      	mov	r3, r0
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <main+0xbc>)
 800110e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001110:	f003 ff22 	bl	8004f58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <main+0x84>
 8001118:	200001f8 	.word	0x200001f8
 800111c:	20000240 	.word	0x20000240
 8001120:	0800c030 	.word	0x0800c030
 8001124:	08001579 	.word	0x08001579
 8001128:	200002d0 	.word	0x200002d0
 800112c:	0800c054 	.word	0x0800c054
 8001130:	08001919 	.word	0x08001919
 8001134:	200002d4 	.word	0x200002d4
 8001138:	0800c078 	.word	0x0800c078
 800113c:	0800194d 	.word	0x0800194d
 8001140:	200002d8 	.word	0x200002d8
 8001144:	0800c09c 	.word	0x0800c09c
 8001148:	08001c11 	.word	0x08001c11
 800114c:	200002dc 	.word	0x200002dc

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	@ 0x40
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	2228      	movs	r2, #40	@ 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f007 fb6d 	bl	800883e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800117a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800118e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fbef 	bl	800297c <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011a4:	f000 fd6a 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fe5c 	bl	8002e80 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ce:	f000 fd55 	bl	8001c7c <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3740      	adds	r7, #64	@ 0x40
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f8:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_TIM1_Init+0xa4>)
 80011fa:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <MX_TIM1_Init+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011fe:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001200:	2247      	movs	r2, #71	@ 0x47
 8001202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_TIM1_Init+0xa4>)
 800120c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001210:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_TIM1_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001224:	4816      	ldr	r0, [pc, #88]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001226:	f002 f985 	bl	8003534 <HAL_TIM_IC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001230:	f000 fd24 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	480f      	ldr	r0, [pc, #60]	@ (8001280 <MX_TIM1_Init+0xa4>)
 8001244:	f003 f8b4 	bl	80043b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800124e:	f000 fd15 	bl	8001c7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001256:	2301      	movs	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_TIM1_Init+0xa4>)
 800126a:	f002 fbc7 	bl	80039fc <HAL_TIM_IC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001274:	f000 fd02 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001f8 	.word	0x200001f8
 8001284:	40012c00 	.word	0x40012c00

08001288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001364 <MX_TIM3_Init+0xdc>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012b2:	2248      	movs	r2, #72	@ 0x48
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d0:	4823      	ldr	r0, [pc, #140]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012d2:	f002 f83d 	bl	8003350 <HAL_TIM_PWM_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fcce 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4619      	mov	r1, r3
 80012ee:	481c      	ldr	r0, [pc, #112]	@ (8001360 <MX_TIM3_Init+0xd8>)
 80012f0:	f003 f85e 	bl	80043b0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012fa:	f000 fcbf 	bl	8001c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	@ 0x60
 8001300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	4812      	ldr	r0, [pc, #72]	@ (8001360 <MX_TIM3_Init+0xd8>)
 8001316:	f002 fc0d 	bl	8003b34 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001320:	f000 fcac 	bl	8001c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2204      	movs	r2, #4
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_TIM3_Init+0xd8>)
 800132c:	f002 fc02 	bl	8003b34 <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001336:	f000 fca1 	bl	8001c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	220c      	movs	r2, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	@ (8001360 <MX_TIM3_Init+0xd8>)
 8001342:	f002 fbf7 	bl	8003b34 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800134c:	f000 fc96 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_TIM3_Init+0xd8>)
 8001352:	f000 fd3f 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000240 	.word	0x20000240
 8001364:	40000400 	.word	0x40000400

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f003 f876 	bl	8004490 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 fc67 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000288 	.word	0x20000288
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a37      	ldr	r2, [pc, #220]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <MX_GPIO_Init+0x110>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <MX_GPIO_Init+0x110>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <MX_GPIO_Init+0x110>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <MX_GPIO_Init+0x110>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <MX_GPIO_Init+0x110>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a2b      	ldr	r2, [pc, #172]	@ (80014cc <MX_GPIO_Init+0x110>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <MX_GPIO_Init+0x110>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001436:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <MX_GPIO_Init+0x114>)
 8001438:	f001 fa6f 	bl	800291a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2101      	movs	r1, #1
 8001440:	4824      	ldr	r0, [pc, #144]	@ (80014d4 <MX_GPIO_Init+0x118>)
 8001442:	f001 fa6a 	bl	800291a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800144c:	4822      	ldr	r0, [pc, #136]	@ (80014d8 <MX_GPIO_Init+0x11c>)
 800144e:	f001 fa64 	bl	800291a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4819      	ldr	r0, [pc, #100]	@ (80014d0 <MX_GPIO_Init+0x114>)
 800146c:	f001 f8ba 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23d0      	movs	r3, #208	@ 0xd0
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <MX_GPIO_Init+0x11c>)
 8001484:	f001 f8ae 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_GPIO_Init+0x118>)
 80014a0:	f001 f8a0 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014a4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <MX_GPIO_Init+0x11c>)
 80014be:	f001 f891 	bl	80025e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40010800 	.word	0x40010800

080014dc <RGB>:

/* USER CODE BEGIN 4 */
void RGB(int red, int green, int blue){
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	redpwm = (int)(red * 3000 / 255);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <RGB+0x88>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	441a      	add	r2, r3
 80014fa:	11d2      	asrs	r2, r2, #7
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <RGB+0x8c>)
 8001502:	6013      	str	r3, [r2, #0]
	greenpwm = (int)(green * 3000 / 255);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <RGB+0x88>)
 8001510:	fb82 1203 	smull	r1, r2, r2, r3
 8001514:	441a      	add	r2, r3
 8001516:	11d2      	asrs	r2, r2, #7
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <RGB+0x90>)
 800151e:	6013      	str	r3, [r2, #0]
	bluepwm = (int)(blue * 3000 / 255);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <RGB+0x88>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	441a      	add	r2, r3
 8001532:	11d2      	asrs	r2, r2, #7
 8001534:	17db      	asrs	r3, r3, #31
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <RGB+0x94>)
 800153a:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, redpwm); //red
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <RGB+0x8c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <RGB+0x98>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, greenpwm); //green
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <RGB+0x90>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <RGB+0x98>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, bluepwm); //blue
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <RGB+0x94>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <RGB+0x98>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	80808081 	.word	0x80808081
 8001568:	2000032c 	.word	0x2000032c
 800156c:	20000330 	.word	0x20000330
 8001570:	20000334 	.word	0x20000334
 8001574:	20000240 	.word	0x20000240

08001578 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//assign the initial value of the variables used
	PB1state = 0;
 8001580:	4ba3      	ldr	r3, [pc, #652]	@ (8001810 <StartDefaultTask+0x298>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	PB2state = 0;
 8001586:	4ba3      	ldr	r3, [pc, #652]	@ (8001814 <StartDefaultTask+0x29c>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
	PB3state = 0;
 800158c:	4ba2      	ldr	r3, [pc, #648]	@ (8001818 <StartDefaultTask+0x2a0>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	PB1buffer = 0;
 8001592:	4ba2      	ldr	r3, [pc, #648]	@ (800181c <StartDefaultTask+0x2a4>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
	PB2buffer = 0;
 8001598:	4ba1      	ldr	r3, [pc, #644]	@ (8001820 <StartDefaultTask+0x2a8>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
	PB3buffer = 0;
 800159e:	4ba1      	ldr	r3, [pc, #644]	@ (8001824 <StartDefaultTask+0x2ac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
	resettimer1 = HAL_GetTick();
 80015a4:	f000 fe82 	bl	80022ac <HAL_GetTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fb92 	bl	8000cd4 <__aeabi_ui2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a9d      	ldr	r2, [pc, #628]	@ (8001828 <StartDefaultTask+0x2b0>)
 80015b4:	6013      	str	r3, [r2, #0]
	resettimer2 = HAL_GetTick();
 80015b6:	f000 fe79 	bl	80022ac <HAL_GetTick>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb89 	bl	8000cd4 <__aeabi_ui2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a99      	ldr	r2, [pc, #612]	@ (800182c <StartDefaultTask+0x2b4>)
 80015c6:	6013      	str	r3, [r2, #0]
	resettimer3 = HAL_GetTick();
 80015c8:	f000 fe70 	bl	80022ac <HAL_GetTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb80 	bl	8000cd4 <__aeabi_ui2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a96      	ldr	r2, [pc, #600]	@ (8001830 <StartDefaultTask+0x2b8>)
 80015d8:	6013      	str	r3, [r2, #0]
	ustrigtimer = HAL_GetTick();
 80015da:	f000 fe67 	bl	80022ac <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fb77 	bl	8000cd4 <__aeabi_ui2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a92      	ldr	r2, [pc, #584]	@ (8001834 <StartDefaultTask+0x2bc>)
 80015ea:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	for (;;) {
		if (!startup) { //after the led finish showing
 80015ec:	4b92      	ldr	r3, [pc, #584]	@ (8001838 <StartDefaultTask+0x2c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1fb      	bne.n	80015ec <StartDefaultTask+0x74>

			//Save the pressing status of push button into the variable
			PB1state = !HAL_GPIO_ReadPin(PB1);
 80015f4:	2110      	movs	r1, #16
 80015f6:	4891      	ldr	r0, [pc, #580]	@ (800183c <StartDefaultTask+0x2c4>)
 80015f8:	f001 f978 	bl	80028ec <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4b81      	ldr	r3, [pc, #516]	@ (8001810 <StartDefaultTask+0x298>)
 800160c:	601a      	str	r2, [r3, #0]
			PB2state = !HAL_GPIO_ReadPin(PB2);
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	488a      	ldr	r0, [pc, #552]	@ (800183c <StartDefaultTask+0x2c4>)
 8001612:	f001 f96b 	bl	80028ec <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b7b      	ldr	r3, [pc, #492]	@ (8001814 <StartDefaultTask+0x29c>)
 8001626:	601a      	str	r2, [r3, #0]
			PB3state = !HAL_GPIO_ReadPin(PB3);
 8001628:	2140      	movs	r1, #64	@ 0x40
 800162a:	4884      	ldr	r0, [pc, #528]	@ (800183c <StartDefaultTask+0x2c4>)
 800162c:	f001 f95e 	bl	80028ec <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <StartDefaultTask+0x2a0>)
 8001640:	601a      	str	r2, [r3, #0]

			//Compare 2 of these variables so that the code will only execute once
			//when button pressed, toggle the flag (0->1, 1->0)
			if (PB1state && !PB1buffer) {
 8001642:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <StartDefaultTask+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d016      	beq.n	8001678 <StartDefaultTask+0x100>
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <StartDefaultTask+0x2a4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d112      	bne.n	8001678 <StartDefaultTask+0x100>
				flag1 = !flag1;
 8001652:	4b7b      	ldr	r3, [pc, #492]	@ (8001840 <StartDefaultTask+0x2c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf0c      	ite	eq
 800165a:	2301      	moveq	r3, #1
 800165c:	2300      	movne	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4b77      	ldr	r3, [pc, #476]	@ (8001840 <StartDefaultTask+0x2c8>)
 8001664:	601a      	str	r2, [r3, #0]
				resettimer1 = HAL_GetTick();
 8001666:	f000 fe21 	bl	80022ac <HAL_GetTick>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb31 	bl	8000cd4 <__aeabi_ui2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a6c      	ldr	r2, [pc, #432]	@ (8001828 <StartDefaultTask+0x2b0>)
 8001676:	6013      	str	r3, [r2, #0]
			}
			if (PB2state && !PB2buffer) {
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <StartDefaultTask+0x29c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <StartDefaultTask+0x136>
 8001680:	4b67      	ldr	r3, [pc, #412]	@ (8001820 <StartDefaultTask+0x2a8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d112      	bne.n	80016ae <StartDefaultTask+0x136>
				flag2 = !flag2;
 8001688:	4b6e      	ldr	r3, [pc, #440]	@ (8001844 <StartDefaultTask+0x2cc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	4b6a      	ldr	r3, [pc, #424]	@ (8001844 <StartDefaultTask+0x2cc>)
 800169a:	601a      	str	r2, [r3, #0]
				resettimer2 = HAL_GetTick();
 800169c:	f000 fe06 	bl	80022ac <HAL_GetTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb16 	bl	8000cd4 <__aeabi_ui2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a60      	ldr	r2, [pc, #384]	@ (800182c <StartDefaultTask+0x2b4>)
 80016ac:	6013      	str	r3, [r2, #0]
			}
			if (PB3state && !PB3buffer) {
 80016ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <StartDefaultTask+0x2a0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <StartDefaultTask+0x16c>
 80016b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <StartDefaultTask+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d112      	bne.n	80016e4 <StartDefaultTask+0x16c>
				flag3 = !flag3;
 80016be:	4b62      	ldr	r3, [pc, #392]	@ (8001848 <StartDefaultTask+0x2d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001848 <StartDefaultTask+0x2d0>)
 80016d0:	601a      	str	r2, [r3, #0]
				resettimer3 = HAL_GetTick();
 80016d2:	f000 fdeb 	bl	80022ac <HAL_GetTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fafb 	bl	8000cd4 <__aeabi_ui2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a53      	ldr	r2, [pc, #332]	@ (8001830 <StartDefaultTask+0x2b8>)
 80016e2:	6013      	str	r3, [r2, #0]
			}

			//update the state into the buffer
			PB1buffer = PB1state;
 80016e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <StartDefaultTask+0x298>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <StartDefaultTask+0x2a4>)
 80016ea:	6013      	str	r3, [r2, #0]
			PB2buffer = PB2state;
 80016ec:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <StartDefaultTask+0x29c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001820 <StartDefaultTask+0x2a8>)
 80016f2:	6013      	str	r3, [r2, #0]
			PB3buffer = PB3state;
 80016f4:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <StartDefaultTask+0x2a0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001824 <StartDefaultTask+0x2ac>)
 80016fa:	6013      	str	r3, [r2, #0]


			//if LED light up more than RSTTIME, turn off the led by reset the flag
			if (HAL_GetTick() - resettimer1 >= RSTTIME) {
 80016fc:	f000 fdd6 	bl	80022ac <HAL_GetTick>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fae6 	bl	8000cd4 <__aeabi_ui2f>
 8001708:	4602      	mov	r2, r0
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <StartDefaultTask+0x2b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fa2d 	bl	8000b70 <__aeabi_fsub>
 8001716:	4603      	mov	r3, r0
 8001718:	494c      	ldr	r1, [pc, #304]	@ (800184c <StartDefaultTask+0x2d4>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fb94 	bl	8000e48 <__aeabi_fcmpge>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <StartDefaultTask+0x1c6>
				flag1 = 0;
 8001726:	4b46      	ldr	r3, [pc, #280]	@ (8001840 <StartDefaultTask+0x2c8>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
				resettimer1 = HAL_GetTick();
 800172c:	f000 fdbe 	bl	80022ac <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff face 	bl	8000cd4 <__aeabi_ui2f>
 8001738:	4603      	mov	r3, r0
 800173a:	4a3b      	ldr	r2, [pc, #236]	@ (8001828 <StartDefaultTask+0x2b0>)
 800173c:	6013      	str	r3, [r2, #0]
			}

			if (HAL_GetTick() - resettimer2 >= RSTTIME) {
 800173e:	f000 fdb5 	bl	80022ac <HAL_GetTick>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fac5 	bl	8000cd4 <__aeabi_ui2f>
 800174a:	4602      	mov	r2, r0
 800174c:	4b37      	ldr	r3, [pc, #220]	@ (800182c <StartDefaultTask+0x2b4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff fa0c 	bl	8000b70 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	493c      	ldr	r1, [pc, #240]	@ (800184c <StartDefaultTask+0x2d4>)
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fb73 	bl	8000e48 <__aeabi_fcmpge>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <StartDefaultTask+0x208>
				flag2 = 0;
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <StartDefaultTask+0x2cc>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
				resettimer2 = HAL_GetTick();
 800176e:	f000 fd9d 	bl	80022ac <HAL_GetTick>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff faad 	bl	8000cd4 <__aeabi_ui2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <StartDefaultTask+0x2b4>)
 800177e:	6013      	str	r3, [r2, #0]
			}

			if (HAL_GetTick() - resettimer3 >= RSTTIME) {
 8001780:	f000 fd94 	bl	80022ac <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff faa4 	bl	8000cd4 <__aeabi_ui2f>
 800178c:	4602      	mov	r2, r0
 800178e:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <StartDefaultTask+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff f9eb 	bl	8000b70 <__aeabi_fsub>
 800179a:	4603      	mov	r3, r0
 800179c:	492b      	ldr	r1, [pc, #172]	@ (800184c <StartDefaultTask+0x2d4>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb52 	bl	8000e48 <__aeabi_fcmpge>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <StartDefaultTask+0x24a>
				flag3 = 0;
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <StartDefaultTask+0x2d0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
				resettimer3 = HAL_GetTick();
 80017b0:	f000 fd7c 	bl	80022ac <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa8c 	bl	8000cd4 <__aeabi_ui2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <StartDefaultTask+0x2b8>)
 80017c0:	6013      	str	r3, [r2, #0]
			}

			//if ultrasonic sensor sense obstacle within 8cm, reset the ultrasonic timer
			if (Distance <= 8.00 && Distance >= 0.01) {
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <StartDefaultTask+0x2d8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb32 	bl	8000e34 <__aeabi_fcmple>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03e      	beq.n	8001854 <StartDefaultTask+0x2dc>
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <StartDefaultTask+0x2d8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe24 	bl	8000428 <__aeabi_f2d>
 80017e0:	a309      	add	r3, pc, #36	@ (adr r3, 8001808 <StartDefaultTask+0x290>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7ff f8fd 	bl	80009e4 <__aeabi_dcmpge>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d031      	beq.n	8001854 <StartDefaultTask+0x2dc>
				ustrigtimer = HAL_GetTick();
 80017f0:	f000 fd5c 	bl	80022ac <HAL_GetTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa6c 	bl	8000cd4 <__aeabi_ui2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <StartDefaultTask+0x2bc>)
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e027      	b.n	8001854 <StartDefaultTask+0x2dc>
 8001804:	f3af 8000 	nop.w
 8001808:	47ae147b 	.word	0x47ae147b
 800180c:	3f847ae1 	.word	0x3f847ae1
 8001810:	20000304 	.word	0x20000304
 8001814:	20000308 	.word	0x20000308
 8001818:	2000030c 	.word	0x2000030c
 800181c:	20000310 	.word	0x20000310
 8001820:	20000314 	.word	0x20000314
 8001824:	20000318 	.word	0x20000318
 8001828:	2000031c 	.word	0x2000031c
 800182c:	20000320 	.word	0x20000320
 8001830:	20000324 	.word	0x20000324
 8001834:	20000328 	.word	0x20000328
 8001838:	20000000 	.word	0x20000000
 800183c:	40010800 	.word	0x40010800
 8001840:	200002f8 	.word	0x200002f8
 8001844:	200002fc 	.word	0x200002fc
 8001848:	20000300 	.word	0x20000300
 800184c:	461c4000 	.word	0x461c4000
 8001850:	200002f0 	.word	0x200002f0
			}

			//if ultrasonic timer < 500, light up LED
			if (HAL_GetTick() - ustrigtimer > 500) {
 8001854:	f000 fd2a 	bl	80022ac <HAL_GetTick>
 8001858:	4603      	mov	r3, r0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa3a 	bl	8000cd4 <__aeabi_ui2f>
 8001860:	4602      	mov	r2, r0
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <StartDefaultTask+0x384>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff f981 	bl	8000b70 <__aeabi_fsub>
 800186e:	4603      	mov	r3, r0
 8001870:	4923      	ldr	r1, [pc, #140]	@ (8001900 <StartDefaultTask+0x388>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff faf2 	bl	8000e5c <__aeabi_fcmpgt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <StartDefaultTask+0x312>
				HAL_GPIO_WritePin(LEDUS, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	4820      	ldr	r0, [pc, #128]	@ (8001904 <StartDefaultTask+0x38c>)
 8001884:	f001 f849 	bl	800291a <HAL_GPIO_WritePin>
 8001888:	e004      	b.n	8001894 <StartDefaultTask+0x31c>
			} else {
				HAL_GPIO_WritePin(LEDUS, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	2101      	movs	r1, #1
 800188e:	481d      	ldr	r0, [pc, #116]	@ (8001904 <StartDefaultTask+0x38c>)
 8001890:	f001 f843 	bl	800291a <HAL_GPIO_WritePin>
			}

			// if flag = 1, then light up the led
			flag1 ? HAL_GPIO_WritePin(LED1, 1) : HAL_GPIO_WritePin(LED1, 0);
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <StartDefaultTask+0x390>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <StartDefaultTask+0x332>
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018a2:	481a      	ldr	r0, [pc, #104]	@ (800190c <StartDefaultTask+0x394>)
 80018a4:	f001 f839 	bl	800291a <HAL_GPIO_WritePin>
 80018a8:	e005      	b.n	80018b6 <StartDefaultTask+0x33e>
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b0:	4816      	ldr	r0, [pc, #88]	@ (800190c <StartDefaultTask+0x394>)
 80018b2:	f001 f832 	bl	800291a <HAL_GPIO_WritePin>
			flag2 ? HAL_GPIO_WritePin(LED2, 1) : HAL_GPIO_WritePin(LED2, 0);
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <StartDefaultTask+0x398>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <StartDefaultTask+0x354>
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c4:	4811      	ldr	r0, [pc, #68]	@ (800190c <StartDefaultTask+0x394>)
 80018c6:	f001 f828 	bl	800291a <HAL_GPIO_WritePin>
 80018ca:	e005      	b.n	80018d8 <StartDefaultTask+0x360>
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d2:	480e      	ldr	r0, [pc, #56]	@ (800190c <StartDefaultTask+0x394>)
 80018d4:	f001 f821 	bl	800291a <HAL_GPIO_WritePin>
			flag3 ? HAL_GPIO_WritePin(LED3, 1) : HAL_GPIO_WritePin(LED3, 0);
 80018d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <StartDefaultTask+0x39c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <StartDefaultTask+0x376>
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018e6:	4809      	ldr	r0, [pc, #36]	@ (800190c <StartDefaultTask+0x394>)
 80018e8:	f001 f817 	bl	800291a <HAL_GPIO_WritePin>
 80018ec:	e67e      	b.n	80015ec <StartDefaultTask+0x74>
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <StartDefaultTask+0x394>)
 80018f6:	f001 f810 	bl	800291a <HAL_GPIO_WritePin>
		if (!startup) { //after the led finish showing
 80018fa:	e677      	b.n	80015ec <StartDefaultTask+0x74>
 80018fc:	20000328 	.word	0x20000328
 8001900:	43fa0000 	.word	0x43fa0000
 8001904:	40010c00 	.word	0x40010c00
 8001908:	200002f8 	.word	0x200002f8
 800190c:	40010800 	.word	0x40010800
 8001910:	200002fc 	.word	0x200002fc
 8001914:	20000300 	.word	0x20000300

08001918 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8001920:	f7ff fb96 	bl	8001050 <HCSR04_Read>
		distancebuffer = Distance;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <StartTask02+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <StartTask02+0x2c>)
 800192a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800192c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <StartTask02+0x30>)
 8001932:	f001 f80a 	bl	800294a <HAL_GPIO_TogglePin>
		osDelay(20);
 8001936:	2014      	movs	r0, #20
 8001938:	f003 fbec 	bl	8005114 <osDelay>
		HCSR04_Read();
 800193c:	bf00      	nop
 800193e:	e7ef      	b.n	8001920 <StartTask02+0x8>
 8001940:	200002f0 	.word	0x200002f0
 8001944:	200002f4 	.word	0x200002f4
 8001948:	40011000 	.word	0x40011000

0800194c <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		if (startup) {
 8001954:	4bab      	ldr	r3, [pc, #684]	@ (8001c04 <StartTask03+0x2b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0fb      	beq.n	8001954 <StartTask03+0x8>
			HAL_GPIO_TogglePin(LED1);
 800195c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001960:	48a9      	ldr	r0, [pc, #676]	@ (8001c08 <StartTask03+0x2bc>)
 8001962:	f000 fff2 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001966:	2064      	movs	r0, #100	@ 0x64
 8001968:	f003 fbd4 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 800196c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001970:	48a5      	ldr	r0, [pc, #660]	@ (8001c08 <StartTask03+0x2bc>)
 8001972:	f000 ffea 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001976:	2064      	movs	r0, #100	@ 0x64
 8001978:	f003 fbcc 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 800197c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001980:	48a1      	ldr	r0, [pc, #644]	@ (8001c08 <StartTask03+0x2bc>)
 8001982:	f000 ffe2 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001986:	2064      	movs	r0, #100	@ 0x64
 8001988:	f003 fbc4 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LEDUS);
 800198c:	2101      	movs	r1, #1
 800198e:	489f      	ldr	r0, [pc, #636]	@ (8001c0c <StartTask03+0x2c0>)
 8001990:	f000 ffdb 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001994:	2064      	movs	r0, #100	@ 0x64
 8001996:	f003 fbbd 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LEDUS);
 800199a:	2101      	movs	r1, #1
 800199c:	489b      	ldr	r0, [pc, #620]	@ (8001c0c <StartTask03+0x2c0>)
 800199e:	f000 ffd4 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019a2:	2064      	movs	r0, #100	@ 0x64
 80019a4:	f003 fbb6 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 80019a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ac:	4896      	ldr	r0, [pc, #600]	@ (8001c08 <StartTask03+0x2bc>)
 80019ae:	f000 ffcc 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019b2:	2064      	movs	r0, #100	@ 0x64
 80019b4:	f003 fbae 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 80019b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019bc:	4892      	ldr	r0, [pc, #584]	@ (8001c08 <StartTask03+0x2bc>)
 80019be:	f000 ffc4 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019c2:	2064      	movs	r0, #100	@ 0x64
 80019c4:	f003 fba6 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 80019c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019cc:	488e      	ldr	r0, [pc, #568]	@ (8001c08 <StartTask03+0x2bc>)
 80019ce:	f000 ffbc 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019d2:	2064      	movs	r0, #100	@ 0x64
 80019d4:	f003 fb9e 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 80019d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019dc:	488a      	ldr	r0, [pc, #552]	@ (8001c08 <StartTask03+0x2bc>)
 80019de:	f000 ffb4 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019e2:	2064      	movs	r0, #100	@ 0x64
 80019e4:	f003 fb96 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 80019e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ec:	4886      	ldr	r0, [pc, #536]	@ (8001c08 <StartTask03+0x2bc>)
 80019ee:	f000 ffac 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 80019f2:	2064      	movs	r0, #100	@ 0x64
 80019f4:	f003 fb8e 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 80019f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019fc:	4882      	ldr	r0, [pc, #520]	@ (8001c08 <StartTask03+0x2bc>)
 80019fe:	f000 ffa4 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a02:	2064      	movs	r0, #100	@ 0x64
 8001a04:	f003 fb86 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LEDUS);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4880      	ldr	r0, [pc, #512]	@ (8001c0c <StartTask03+0x2c0>)
 8001a0c:	f000 ff9d 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a10:	2064      	movs	r0, #100	@ 0x64
 8001a12:	f003 fb7f 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LEDUS);
 8001a16:	2101      	movs	r1, #1
 8001a18:	487c      	ldr	r0, [pc, #496]	@ (8001c0c <StartTask03+0x2c0>)
 8001a1a:	f000 ff96 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a1e:	2064      	movs	r0, #100	@ 0x64
 8001a20:	f003 fb78 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 8001a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a28:	4877      	ldr	r0, [pc, #476]	@ (8001c08 <StartTask03+0x2bc>)
 8001a2a:	f000 ff8e 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a2e:	2064      	movs	r0, #100	@ 0x64
 8001a30:	f003 fb70 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 8001a34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a38:	4873      	ldr	r0, [pc, #460]	@ (8001c08 <StartTask03+0x2bc>)
 8001a3a:	f000 ff86 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a3e:	2064      	movs	r0, #100	@ 0x64
 8001a40:	f003 fb68 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a48:	486f      	ldr	r0, [pc, #444]	@ (8001c08 <StartTask03+0x2bc>)
 8001a4a:	f000 ff7e 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a4e:	2064      	movs	r0, #100	@ 0x64
 8001a50:	f003 fb60 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a58:	486b      	ldr	r0, [pc, #428]	@ (8001c08 <StartTask03+0x2bc>)
 8001a5a:	f000 ff76 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001a5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a62:	4869      	ldr	r0, [pc, #420]	@ (8001c08 <StartTask03+0x2bc>)
 8001a64:	f000 ff71 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001a68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a6c:	4866      	ldr	r0, [pc, #408]	@ (8001c08 <StartTask03+0x2bc>)
 8001a6e:	f000 ff6c 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LEDUS);
 8001a72:	2101      	movs	r1, #1
 8001a74:	4865      	ldr	r0, [pc, #404]	@ (8001c0c <StartTask03+0x2c0>)
 8001a76:	f000 ff68 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001a7a:	2064      	movs	r0, #100	@ 0x64
 8001a7c:	f003 fb4a 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001a80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a84:	4860      	ldr	r0, [pc, #384]	@ (8001c08 <StartTask03+0x2bc>)
 8001a86:	f000 ff60 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001a8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a8e:	485e      	ldr	r0, [pc, #376]	@ (8001c08 <StartTask03+0x2bc>)
 8001a90:	f000 ff5b 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001a94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a98:	485b      	ldr	r0, [pc, #364]	@ (8001c08 <StartTask03+0x2bc>)
 8001a9a:	f000 ff56 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LEDUS);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	485a      	ldr	r0, [pc, #360]	@ (8001c0c <StartTask03+0x2c0>)
 8001aa2:	f000 ff52 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001aa6:	2064      	movs	r0, #100	@ 0x64
 8001aa8:	f003 fb34 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001aac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ab0:	4855      	ldr	r0, [pc, #340]	@ (8001c08 <StartTask03+0x2bc>)
 8001ab2:	f000 ff4a 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001ab6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aba:	4853      	ldr	r0, [pc, #332]	@ (8001c08 <StartTask03+0x2bc>)
 8001abc:	f000 ff45 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ac4:	4850      	ldr	r0, [pc, #320]	@ (8001c08 <StartTask03+0x2bc>)
 8001ac6:	f000 ff40 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LEDUS);
 8001aca:	2101      	movs	r1, #1
 8001acc:	484f      	ldr	r0, [pc, #316]	@ (8001c0c <StartTask03+0x2c0>)
 8001ace:	f000 ff3c 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001ad2:	2064      	movs	r0, #100	@ 0x64
 8001ad4:	f003 fb1e 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001adc:	484a      	ldr	r0, [pc, #296]	@ (8001c08 <StartTask03+0x2bc>)
 8001ade:	f000 ff34 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001ae2:	2064      	movs	r0, #100	@ 0x64
 8001ae4:	f003 fb16 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aec:	4846      	ldr	r0, [pc, #280]	@ (8001c08 <StartTask03+0x2bc>)
 8001aee:	f000 ff2c 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001af2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001af6:	4844      	ldr	r0, [pc, #272]	@ (8001c08 <StartTask03+0x2bc>)
 8001af8:	f000 ff27 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001afc:	2064      	movs	r0, #100	@ 0x64
 8001afe:	f003 fb09 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 8001b02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b06:	4840      	ldr	r0, [pc, #256]	@ (8001c08 <StartTask03+0x2bc>)
 8001b08:	f000 ff1f 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001b0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b10:	483d      	ldr	r0, [pc, #244]	@ (8001c08 <StartTask03+0x2bc>)
 8001b12:	f000 ff1a 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b16:	2064      	movs	r0, #100	@ 0x64
 8001b18:	f003 fafc 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 8001b1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b20:	4839      	ldr	r0, [pc, #228]	@ (8001c08 <StartTask03+0x2bc>)
 8001b22:	f000 ff12 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LEDUS);
 8001b26:	2101      	movs	r1, #1
 8001b28:	4838      	ldr	r0, [pc, #224]	@ (8001c0c <StartTask03+0x2c0>)
 8001b2a:	f000 ff0e 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b2e:	2064      	movs	r0, #100	@ 0x64
 8001b30:	f003 faf0 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LEDUS);
 8001b34:	2101      	movs	r1, #1
 8001b36:	4835      	ldr	r0, [pc, #212]	@ (8001c0c <StartTask03+0x2c0>)
 8001b38:	f000 ff07 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001b3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b40:	4831      	ldr	r0, [pc, #196]	@ (8001c08 <StartTask03+0x2bc>)
 8001b42:	f000 ff02 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b46:	2064      	movs	r0, #100	@ 0x64
 8001b48:	f003 fae4 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 8001b4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b50:	482d      	ldr	r0, [pc, #180]	@ (8001c08 <StartTask03+0x2bc>)
 8001b52:	f000 fefa 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5a:	482b      	ldr	r0, [pc, #172]	@ (8001c08 <StartTask03+0x2bc>)
 8001b5c:	f000 fef5 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b60:	2064      	movs	r0, #100	@ 0x64
 8001b62:	f003 fad7 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001b66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b6a:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <StartTask03+0x2bc>)
 8001b6c:	f000 feed 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001b70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b74:	4824      	ldr	r0, [pc, #144]	@ (8001c08 <StartTask03+0x2bc>)
 8001b76:	f000 fee8 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b7a:	2064      	movs	r0, #100	@ 0x64
 8001b7c:	f003 faca 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001b80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b84:	4820      	ldr	r0, [pc, #128]	@ (8001c08 <StartTask03+0x2bc>)
 8001b86:	f000 fee0 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2);
 8001b8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b8e:	481e      	ldr	r0, [pc, #120]	@ (8001c08 <StartTask03+0x2bc>)
 8001b90:	f000 fedb 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001b94:	2064      	movs	r0, #100	@ 0x64
 8001b96:	f003 fabd 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 8001b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b9e:	481a      	ldr	r0, [pc, #104]	@ (8001c08 <StartTask03+0x2bc>)
 8001ba0:	f000 fed3 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3);
 8001ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba8:	4817      	ldr	r0, [pc, #92]	@ (8001c08 <StartTask03+0x2bc>)
 8001baa:	f000 fece 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001bae:	2064      	movs	r0, #100	@ 0x64
 8001bb0:	f003 fab0 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 8001bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bb8:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <StartTask03+0x2bc>)
 8001bba:	f000 fec6 	bl	800294a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LEDUS);
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4812      	ldr	r0, [pc, #72]	@ (8001c0c <StartTask03+0x2c0>)
 8001bc2:	f000 fec2 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001bc6:	2064      	movs	r0, #100	@ 0x64
 8001bc8:	f003 faa4 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED3);
 8001bcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <StartTask03+0x2bc>)
 8001bd2:	f000 feba 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001bd6:	2064      	movs	r0, #100	@ 0x64
 8001bd8:	f003 fa9c 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED2);
 8001bdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001be0:	4809      	ldr	r0, [pc, #36]	@ (8001c08 <StartTask03+0x2bc>)
 8001be2:	f000 feb2 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001be6:	2064      	movs	r0, #100	@ 0x64
 8001be8:	f003 fa94 	bl	8005114 <osDelay>
			HAL_GPIO_TogglePin(LED1);
 8001bec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <StartTask03+0x2bc>)
 8001bf2:	f000 feaa 	bl	800294a <HAL_GPIO_TogglePin>
			osDelay(GAY);
 8001bf6:	2064      	movs	r0, #100	@ 0x64
 8001bf8:	f003 fa8c 	bl	8005114 <osDelay>
			startup = 0;
 8001bfc:	4b01      	ldr	r3, [pc, #4]	@ (8001c04 <StartTask03+0x2b8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
		if (startup) {
 8001c02:	e6a7      	b.n	8001954 <StartTask03+0x8>
 8001c04:	20000000 	.word	0x20000000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40010c00 	.word	0x40010c00

08001c10 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */

	while (1) {
		for(int i = 0; i<255; i++){
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e00a      	b.n	8001c34 <StartTask04+0x24>
			RGB(i, i, i);
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fc5a 	bl	80014dc <RGB>
			osDelay(5);
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f003 fa73 	bl	8005114 <osDelay>
		for(int i = 0; i<255; i++){
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c38:	ddf1      	ble.n	8001c1e <StartTask04+0xe>
		}

		for(int i=255; i>0; i--){
 8001c3a:	23ff      	movs	r3, #255	@ 0xff
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	e00a      	b.n	8001c56 <StartTask04+0x46>
			RGB(i, i, i);
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff fc49 	bl	80014dc <RGB>
			osDelay(5);
 8001c4a:	2005      	movs	r0, #5
 8001c4c:	f003 fa62 	bl	8005114 <osDelay>
		for(int i=255; i>0; i--){
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dcf1      	bgt.n	8001c40 <StartTask04+0x30>
		for(int i = 0; i<255; i++){
 8001c5c:	e7dc      	b.n	8001c18 <StartTask04+0x8>

08001c5e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6e:	d101      	bne.n	8001c74 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c70:	f000 fb0a 	bl	8002288 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_MspInit+0x68>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	f06f 0001 	mvn.w	r0, #1
 8001cc6:	f000 fbb0 	bl	800242a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_MspInit+0x6c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_MspInit+0x6c>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000

08001cf8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <HAL_TIM_IC_MspInit+0x84>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d12c      	bne.n	8001d72 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_TIM_IC_MspInit+0x88>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <HAL_TIM_IC_MspInit+0x8c>)
 8001d5e:	f000 fc41 	bl	80025e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2105      	movs	r1, #5
 8001d66:	201b      	movs	r0, #27
 8001d68:	f000 fb5f 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d6c:	201b      	movs	r0, #27
 8001d6e:	f000 fb78 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010800 	.word	0x40010800

08001d88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <HAL_TIM_PWM_MspInit+0x44>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_TIM_PWM_MspInit+0x48>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <HAL_TIM_PWM_MspInit+0x48>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_TIM_PWM_MspInit+0x48>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	201d      	movs	r0, #29
 8001db8:	f000 fb37 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dbc:	201d      	movs	r0, #29
 8001dbe:	f000 fb50 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <HAL_TIM_MspPostInit+0x7c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d129      	bne.n	8001e48 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_TIM_MspPostInit+0x80>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a16      	ldr	r2, [pc, #88]	@ (8001e54 <HAL_TIM_MspPostInit+0x80>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_TIM_MspPostInit+0x80>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e0c:	2332      	movs	r3, #50	@ 0x32
 8001e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480e      	ldr	r0, [pc, #56]	@ (8001e58 <HAL_TIM_MspPostInit+0x84>)
 8001e20:	f000 fbe0 	bl	80025e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_TIM_MspPostInit+0x88>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_TIM_MspPostInit+0x88>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40010000 	.word	0x40010000

08001e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <HAL_UART_MspInit+0x98>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d137      	bne.n	8001ef0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8a:	61d3      	str	r3, [r2, #28]
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_UART_MspInit+0x9c>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480f      	ldr	r0, [pc, #60]	@ (8001f00 <HAL_UART_MspInit+0xa0>)
 8001ec4:	f000 fb8e 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_UART_MspInit+0xa0>)
 8001edc:	f000 fb82 	bl	80025e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	2026      	movs	r0, #38	@ 0x26
 8001ee6:	f000 faa0 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eea:	2026      	movs	r0, #38	@ 0x26
 8001eec:	f000 fab9 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010800 	.word	0x40010800

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a33      	ldr	r2, [pc, #204]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 f90f 	bl	8003160 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f4c:	f001 f8e0 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8001f50:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f52:	e004      	b.n	8001f5e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f54:	f001 f8dc 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_InitTick+0xec>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f94:	4817      	ldr	r0, [pc, #92]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f96:	f001 f931 	bl	80031fc <HAL_TIM_Base_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001fa8:	4812      	ldr	r0, [pc, #72]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001faa:	f001 f97f 	bl	80032ac <HAL_TIM_Base_Start_IT>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fbc:	201c      	movs	r0, #28
 8001fbe:	f000 fa50 	bl	8002462 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d808      	bhi.n	8001fda <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f000 fa2c 	bl	800242a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_InitTick+0xf4>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e002      	b.n	8001fe0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3738      	adds	r7, #56	@ 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	20000338 	.word	0x20000338
 8001ff8:	20000008 	.word	0x20000008

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <NMI_Handler+0x4>

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <MemManage_Handler+0x4>

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <UsageFault_Handler+0x4>

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM1_CC_IRQHandler+0x10>)
 8002036:	f001 fbd9 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001f8 	.word	0x200001f8

08002044 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM2_IRQHandler+0x10>)
 800204a:	f001 fbcf 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000338 	.word	0x20000338

08002058 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM3_IRQHandler+0x10>)
 800205e:	f001 fbc5 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000240 	.word	0x20000240

0800206c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <USART2_IRQHandler+0x10>)
 8002072:	f002 fa5d 	bl	8004530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000288 	.word	0x20000288

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <_kill>:

int _kill(int pid, int sig)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002098:	f006 fc24 	bl	80088e4 <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	2216      	movs	r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
  return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_exit>:

void _exit (int status)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffe7 	bl	800208e <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <_exit+0x12>

080020c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e00a      	b.n	80020ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d6:	f3af 8000 	nop.w
 80020da:	4601      	mov	r1, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf0      	blt.n	80020d6 <_read+0x12>
  }

  return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf1      	blt.n	8002110 <_write+0x12>
  }
  return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_close>:

int _close(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800215c:	605a      	str	r2, [r3, #4]
  return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f006 fb8c 	bl	80088e4 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20005000 	.word	0x20005000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000380 	.word	0x20000380
 8002200:	20001e20 	.word	0x20001e20

08002204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff fff8 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480b      	ldr	r0, [pc, #44]	@ (8002244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002216:	490c      	ldr	r1, [pc, #48]	@ (8002248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002218:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <LoopFillZerobss+0x16>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800222c:	4c09      	ldr	r4, [pc, #36]	@ (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f006 fb59 	bl	80088f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7fe ff27 	bl	8001090 <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800224c:	0800c528 	.word	0x0800c528
  ldr r2, =_sbss
 8002250:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002254:	20001e1c 	.word	0x20001e1c

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_Init+0x28>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <HAL_Init+0x28>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f8d1 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	200f      	movs	r0, #15
 8002274:	f7ff fe46 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fd06 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_IncTick+0x1c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_IncTick+0x20>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a03      	ldr	r2, [pc, #12]	@ (80022a8 <HAL_IncTick+0x20>)
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	2000000c 	.word	0x2000000c
 80022a8:	20000384 	.word	0x20000384

080022ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <HAL_GetTick+0x10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000384 	.word	0x20000384

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4906      	ldr	r1, [pc, #24]	@ (8002358 <__NVIC_EnableIRQ+0x34>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff4f 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff64 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ffb2 	bl	80023b0 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff81 	bl	800235c <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff57 	bl	8002324 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d008      	beq.n	80024a8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e020      	b.n	80024ea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 020e 	bic.w	r2, r2, #14
 80024b6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d005      	beq.n	8002518 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e051      	b.n	80025bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 020e 	bic.w	r2, r2, #14
 8002526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	@ (80025c8 <HAL_DMA_Abort_IT+0xd4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d029      	beq.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_DMA_Abort_IT+0xd8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort_IT+0x9e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_DMA_Abort_IT+0xdc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01a      	beq.n	800258c <HAL_DMA_Abort_IT+0x98>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <HAL_DMA_Abort_IT+0xe0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d012      	beq.n	8002586 <HAL_DMA_Abort_IT+0x92>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_DMA_Abort_IT+0xe4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00a      	beq.n	8002580 <HAL_DMA_Abort_IT+0x8c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <HAL_DMA_Abort_IT+0xe8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d102      	bne.n	800257a <HAL_DMA_Abort_IT+0x86>
 8002574:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002578:	e00e      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 800257a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800257e:	e00b      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002580:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002584:	e008      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258a:	e005      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 800258c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002590:	e002      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002592:	2310      	movs	r3, #16
 8002594:	e000      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002596:	2301      	movs	r3, #1
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_DMA_Abort_IT+0xec>)
 800259a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    } 
  }
  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020008 	.word	0x40020008
 80025cc:	4002001c 	.word	0x4002001c
 80025d0:	40020030 	.word	0x40020030
 80025d4:	40020044 	.word	0x40020044
 80025d8:	40020058 	.word	0x40020058
 80025dc:	4002006c 	.word	0x4002006c
 80025e0:	40020000 	.word	0x40020000

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b08b      	sub	sp, #44	@ 0x2c
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e169      	b.n	80028cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025f8:	2201      	movs	r2, #1
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 8158 	bne.w	80028c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a9a      	ldr	r2, [pc, #616]	@ (8002884 <HAL_GPIO_Init+0x2a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d05e      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002620:	4a98      	ldr	r2, [pc, #608]	@ (8002884 <HAL_GPIO_Init+0x2a0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d875      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002626:	4a98      	ldr	r2, [pc, #608]	@ (8002888 <HAL_GPIO_Init+0x2a4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d058      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 800262c:	4a96      	ldr	r2, [pc, #600]	@ (8002888 <HAL_GPIO_Init+0x2a4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d86f      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002632:	4a96      	ldr	r2, [pc, #600]	@ (800288c <HAL_GPIO_Init+0x2a8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d052      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002638:	4a94      	ldr	r2, [pc, #592]	@ (800288c <HAL_GPIO_Init+0x2a8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d869      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800263e:	4a94      	ldr	r2, [pc, #592]	@ (8002890 <HAL_GPIO_Init+0x2ac>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04c      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002644:	4a92      	ldr	r2, [pc, #584]	@ (8002890 <HAL_GPIO_Init+0x2ac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d863      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800264a:	4a92      	ldr	r2, [pc, #584]	@ (8002894 <HAL_GPIO_Init+0x2b0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d046      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002650:	4a90      	ldr	r2, [pc, #576]	@ (8002894 <HAL_GPIO_Init+0x2b0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d85d      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002656:	2b12      	cmp	r3, #18
 8002658:	d82a      	bhi.n	80026b0 <HAL_GPIO_Init+0xcc>
 800265a:	2b12      	cmp	r3, #18
 800265c:	d859      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <HAL_GPIO_Init+0x80>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	080026df 	.word	0x080026df
 8002668:	080026b9 	.word	0x080026b9
 800266c:	080026cb 	.word	0x080026cb
 8002670:	0800270d 	.word	0x0800270d
 8002674:	08002713 	.word	0x08002713
 8002678:	08002713 	.word	0x08002713
 800267c:	08002713 	.word	0x08002713
 8002680:	08002713 	.word	0x08002713
 8002684:	08002713 	.word	0x08002713
 8002688:	08002713 	.word	0x08002713
 800268c:	08002713 	.word	0x08002713
 8002690:	08002713 	.word	0x08002713
 8002694:	08002713 	.word	0x08002713
 8002698:	08002713 	.word	0x08002713
 800269c:	08002713 	.word	0x08002713
 80026a0:	08002713 	.word	0x08002713
 80026a4:	08002713 	.word	0x08002713
 80026a8:	080026c1 	.word	0x080026c1
 80026ac:	080026d5 	.word	0x080026d5
 80026b0:	4a79      	ldr	r2, [pc, #484]	@ (8002898 <HAL_GPIO_Init+0x2b4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026b6:	e02c      	b.n	8002712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e029      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	3304      	adds	r3, #4
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e024      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	3308      	adds	r3, #8
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e01f      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	330c      	adds	r3, #12
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e01a      	b.n	8002714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026e6:	2304      	movs	r3, #4
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e013      	b.n	8002714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f4:	2308      	movs	r3, #8
 80026f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	611a      	str	r2, [r3, #16]
          break;
 80026fe:	e009      	b.n	8002714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002700:	2308      	movs	r3, #8
 8002702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	615a      	str	r2, [r3, #20]
          break;
 800270a:	e003      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
          break;
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x130>
          break;
 8002712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2bff      	cmp	r3, #255	@ 0xff
 8002718:	d801      	bhi.n	800271e <HAL_GPIO_Init+0x13a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_Init+0x13e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2bff      	cmp	r3, #255	@ 0xff
 8002728:	d802      	bhi.n	8002730 <HAL_GPIO_Init+0x14c>
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x152>
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	3b08      	subs	r3, #8
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	210f      	movs	r1, #15
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	401a      	ands	r2, r3
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80b1 	beq.w	80028c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002764:	4b4d      	ldr	r3, [pc, #308]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a4c      	ldr	r2, [pc, #304]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800277c:	4a48      	ldr	r2, [pc, #288]	@ (80028a0 <HAL_GPIO_Init+0x2bc>)
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a40      	ldr	r2, [pc, #256]	@ (80028a4 <HAL_GPIO_Init+0x2c0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_GPIO_Init+0x1ec>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3f      	ldr	r2, [pc, #252]	@ (80028a8 <HAL_GPIO_Init+0x2c4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00d      	beq.n	80027cc <HAL_GPIO_Init+0x1e8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3e      	ldr	r2, [pc, #248]	@ (80028ac <HAL_GPIO_Init+0x2c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x1e4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a3d      	ldr	r2, [pc, #244]	@ (80028b0 <HAL_GPIO_Init+0x2cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_GPIO_Init+0x1e0>
 80027c0:	2303      	movs	r3, #3
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027d0:	2300      	movs	r3, #0
 80027d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027e2:	492f      	ldr	r1, [pc, #188]	@ (80028a0 <HAL_GPIO_Init+0x2bc>)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027fc:	4b2d      	ldr	r3, [pc, #180]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	492c      	ldr	r1, [pc, #176]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	4928      	ldr	r1, [pc, #160]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002814:	4013      	ands	r3, r2
 8002816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002824:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	4922      	ldr	r1, [pc, #136]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	60cb      	str	r3, [r1, #12]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	491e      	ldr	r1, [pc, #120]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4918      	ldr	r1, [pc, #96]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4914      	ldr	r1, [pc, #80]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002864:	4013      	ands	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d021      	beq.n	80028b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	490e      	ldr	r1, [pc, #56]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e021      	b.n	80028c6 <HAL_GPIO_Init+0x2e2>
 8002882:	bf00      	nop
 8002884:	10320000 	.word	0x10320000
 8002888:	10310000 	.word	0x10310000
 800288c:	10220000 	.word	0x10220000
 8002890:	10210000 	.word	0x10210000
 8002894:	10120000 	.word	0x10120000
 8002898:	10110000 	.word	0x10110000
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40010800 	.word	0x40010800
 80028a8:	40010c00 	.word	0x40010c00
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40011400 	.word	0x40011400
 80028b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	43db      	mvns	r3, r3
 80028c0:	4909      	ldr	r1, [pc, #36]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	3301      	adds	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f47f ae8e 	bne.w	80025f8 <HAL_GPIO_Init+0x14>
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	372c      	adds	r7, #44	@ 0x2c
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e001      	b.n	800290e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]
 8002926:	4613      	mov	r3, r2
 8002928:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800292a:	787b      	ldrb	r3, [r7, #1]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002930:	887a      	ldrh	r2, [r7, #2]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002936:	e003      	b.n	8002940 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	611a      	str	r2, [r3, #16]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	041a      	lsls	r2, r3, #16
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43d9      	mvns	r1, r3
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	400b      	ands	r3, r1
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e272      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8087 	beq.w	8002aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299c:	4b92      	ldr	r3, [pc, #584]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d00c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a8:	4b8f      	ldr	r3, [pc, #572]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d112      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
 80029b4:	4b8c      	ldr	r3, [pc, #560]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4b89      	ldr	r3, [pc, #548]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d06c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d168      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e24c      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x76>
 80029e4:	4b80      	ldr	r3, [pc, #512]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a7f      	ldr	r2, [pc, #508]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e02e      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b7b      	ldr	r3, [pc, #492]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7a      	ldr	r2, [pc, #488]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b78      	ldr	r3, [pc, #480]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a77      	ldr	r2, [pc, #476]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0xbc>
 8002a1e:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a71      	ldr	r2, [pc, #452]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a38:	4b6b      	ldr	r3, [pc, #428]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b68      	ldr	r3, [pc, #416]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a67      	ldr	r2, [pc, #412]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fc28 	bl	80022ac <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff fc24 	bl	80022ac <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	@ 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e200      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b5d      	ldr	r3, [pc, #372]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe4>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fc14 	bl	80022ac <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff fc10 	bl	80022ac <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	@ 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1ec      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b53      	ldr	r3, [pc, #332]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x10c>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ac2:	4b49      	ldr	r3, [pc, #292]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x18c>
 8002ace:	4b46      	ldr	r3, [pc, #280]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b43      	ldr	r3, [pc, #268]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x176>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1c0      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4939      	ldr	r1, [pc, #228]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b36      	ldr	r3, [pc, #216]	@ (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7ff fbc9 	bl	80022ac <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7ff fbc5 	bl	80022ac <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1a1      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4927      	ldr	r1, [pc, #156]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b26      	ldr	r3, [pc, #152]	@ (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7ff fba8 	bl	80022ac <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7ff fba4 	bl	80022ac <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e180      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03a      	beq.n	8002c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d019      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7ff fb88 	bl	80022ac <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7ff fb84 	bl	80022ac <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e160      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f000 fafe 	bl	80031c0 <RCC_Delay>
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7ff fb6e 	bl	80022ac <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd2:	e00f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7ff fb6a 	bl	80022ac <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d908      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e146      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	42420000 	.word	0x42420000
 8002bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b92      	ldr	r3, [pc, #584]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e9      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a6 	beq.w	8002d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b8b      	ldr	r3, [pc, #556]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10d      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a87      	ldr	r2, [pc, #540]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b85      	ldr	r3, [pc, #532]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b82      	ldr	r3, [pc, #520]	@ (8002e44 <HAL_RCC_OscConfig+0x4c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b7f      	ldr	r3, [pc, #508]	@ (8002e44 <HAL_RCC_OscConfig+0x4c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e44 <HAL_RCC_OscConfig+0x4c8>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7ff fb2b 	bl	80022ac <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7ff fb27 	bl	80022ac <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b64      	cmp	r3, #100	@ 0x64
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e103      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b75      	ldr	r3, [pc, #468]	@ (8002e44 <HAL_RCC_OscConfig+0x4c8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x312>
 8002c80:	4b6f      	ldr	r3, [pc, #444]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a6e      	ldr	r2, [pc, #440]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	e02d      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x334>
 8002c96:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a69      	ldr	r2, [pc, #420]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	4b67      	ldr	r3, [pc, #412]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a66      	ldr	r2, [pc, #408]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6213      	str	r3, [r2, #32]
 8002cae:	e01c      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x356>
 8002cb8:	4b61      	ldr	r3, [pc, #388]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a60      	ldr	r2, [pc, #384]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e00b      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	4b58      	ldr	r3, [pc, #352]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a57      	ldr	r2, [pc, #348]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fadb 	bl	80022ac <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7ff fad7 	bl	80022ac <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0b1      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	4b4b      	ldr	r3, [pc, #300]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ee      	beq.n	8002cfa <HAL_RCC_OscConfig+0x37e>
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fac5 	bl	80022ac <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7ff fac1 	bl	80022ac <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e09b      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	4b40      	ldr	r3, [pc, #256]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ee      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a3b      	ldr	r2, [pc, #236]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d061      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d146      	bne.n	8002e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff fa95 	bl	80022ac <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7ff fa91 	bl	80022ac <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e06d      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4921      	ldr	r1, [pc, #132]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a19      	ldr	r1, [r3, #32]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	491b      	ldr	r1, [pc, #108]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7ff fa65 	bl	80022ac <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7ff fa61 	bl	80022ac <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e03d      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x46a>
 8002e04:	e035      	b.n	8002e72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fa4e 	bl	80022ac <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7ff fa4a 	bl	80022ac <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e026      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x498>
 8002e32:	e01e      	b.n	8002e72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e019      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_OscConfig+0x500>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d0      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d910      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b67      	ldr	r3, [pc, #412]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4965      	ldr	r1, [pc, #404]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002efe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d040      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b41      	ldr	r3, [pc, #260]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e073      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06b      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4936      	ldr	r1, [pc, #216]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7ff f99c 	bl	80022ac <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7ff f998 	bl	80022ac <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e053      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d210      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4922      	ldr	r1, [pc, #136]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	490a      	ldr	r1, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_RCC_ClockConfig+0x1cc>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1d0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ff68 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40022000 	.word	0x40022000
 8003044:	40021000 	.word	0x40021000
 8003048:	0800c0c0 	.word	0x0800c0c0
 800304c:	20000004 	.word	0x20000004
 8003050:	20000008 	.word	0x20000008

08003054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b04      	cmp	r3, #4
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x30>
 800307e:	2b08      	cmp	r3, #8
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x36>
 8003082:	e027      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	613b      	str	r3, [r7, #16]
      break;
 8003088:	e027      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0c9b      	lsrs	r3, r3, #18
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a17      	ldr	r2, [pc, #92]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a2:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0c5b      	lsrs	r3, r3, #17
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	4a11      	ldr	r2, [pc, #68]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x98>)
 80030b6:	fb03 f202 	mul.w	r2, r3, r2
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	e004      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a0c      	ldr	r2, [pc, #48]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	613b      	str	r3, [r7, #16]
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x98>)
 80030d6:	613b      	str	r3, [r7, #16]
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	693b      	ldr	r3, [r7, #16]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	007a1200 	.word	0x007a1200
 80030f0:	0800c0d8 	.word	0x0800c0d8
 80030f4:	0800c0e8 	.word	0x0800c0e8
 80030f8:	003d0900 	.word	0x003d0900

080030fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b02      	ldr	r3, [pc, #8]	@ (800310c <HAL_RCC_GetHCLKFreq+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff2 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	0800c0d0 	.word	0x0800c0d0

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffde 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	0800c0d0 	.word	0x0800c0d0

08003160 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	220f      	movs	r2, #15
 800316e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_RCC_GetClockConfig+0x58>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_RCC_GetClockConfig+0x5c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40022000 	.word	0x40022000

080031c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c8:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <RCC_Delay+0x34>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <RCC_Delay+0x38>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031dc:	bf00      	nop
  }
  while (Delay --);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <RCC_Delay+0x1c>
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000004 	.word	0x20000004
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e041      	b.n	8003292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f839 	bl	800329a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 fd9c 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e03a      	b.n	800333a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_TIM_Base_Start_IT+0x98>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	@ (800334c <HAL_TIM_Base_Start_IT+0xa0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fd06 	bl	8001d88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fcf2 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_TIM_PWM_Start+0x24>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e022      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d109      	bne.n	800342e <HAL_TIM_PWM_Start+0x3e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e015      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d109      	bne.n	8003448 <HAL_TIM_PWM_Start+0x58>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e05e      	b.n	8003520 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0x82>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	e013      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0x92>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003480:	e00b      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xa2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003490:	e003      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 ff5f 	bl	8004366 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003528 <HAL_TIM_PWM_Start+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d107      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <HAL_TIM_PWM_Start+0x138>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_TIM_PWM_Start+0x13c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <HAL_TIM_PWM_Start+0x140>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d010      	beq.n	800351e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	e007      	b.n	800351e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800

08003534 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fbcc 	bl	8001cf8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fc00 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0x1e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e013      	b.n	800361a <HAL_TIM_IC_Start_IT+0x46>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0x2e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e00b      	b.n	800361a <HAL_TIM_IC_Start_IT+0x46>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_IC_Start_IT+0x3e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e003      	b.n	800361a <HAL_TIM_IC_Start_IT+0x46>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_TIM_IC_Start_IT+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e013      	b.n	8003654 <HAL_TIM_IC_Start_IT+0x80>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d104      	bne.n	800363c <HAL_TIM_IC_Start_IT+0x68>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e00b      	b.n	8003654 <HAL_TIM_IC_Start_IT+0x80>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d104      	bne.n	800364c <HAL_TIM_IC_Start_IT+0x78>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e003      	b.n	8003654 <HAL_TIM_IC_Start_IT+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003652:	b2db      	uxtb	r3, r3
 8003654:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800365c:	7b7b      	ldrb	r3, [r7, #13]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0b8      	b.n	80037d8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_TIM_IC_Start_IT+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003674:	e013      	b.n	800369e <HAL_TIM_IC_Start_IT+0xca>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d104      	bne.n	8003686 <HAL_TIM_IC_Start_IT+0xb2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	e00b      	b.n	800369e <HAL_TIM_IC_Start_IT+0xca>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d104      	bne.n	8003696 <HAL_TIM_IC_Start_IT+0xc2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003694:	e003      	b.n	800369e <HAL_TIM_IC_Start_IT+0xca>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_IC_Start_IT+0xda>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ac:	e013      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x102>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d104      	bne.n	80036be <HAL_TIM_IC_Start_IT+0xea>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036bc:	e00b      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x102>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0xfa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036cc:	e003      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x102>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b0c      	cmp	r3, #12
 80036da:	d841      	bhi.n	8003760 <HAL_TIM_IC_Start_IT+0x18c>
 80036dc:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <HAL_TIM_IC_Start_IT+0x110>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003719 	.word	0x08003719
 80036e8:	08003761 	.word	0x08003761
 80036ec:	08003761 	.word	0x08003761
 80036f0:	08003761 	.word	0x08003761
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	08003761 	.word	0x08003761
 80036fc:	08003761 	.word	0x08003761
 8003700:	08003761 	.word	0x08003761
 8003704:	0800373d 	.word	0x0800373d
 8003708:	08003761 	.word	0x08003761
 800370c:	08003761 	.word	0x08003761
 8003710:	08003761 	.word	0x08003761
 8003714:	0800374f 	.word	0x0800374f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0202 	orr.w	r2, r2, #2
 8003726:	60da      	str	r2, [r3, #12]
      break;
 8003728:	e01d      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0204 	orr.w	r2, r2, #4
 8003738:	60da      	str	r2, [r3, #12]
      break;
 800373a:	e014      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	60da      	str	r2, [r3, #12]
      break;
 800374c:	e00b      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0210 	orr.w	r2, r2, #16
 800375c:	60da      	str	r2, [r3, #12]
      break;
 800375e:	e002      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	bf00      	nop
  }

  if (status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d134      	bne.n	80037d6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fdf6 	bl	8004366 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <HAL_TIM_IC_Start_IT+0x20c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_IC_Start_IT+0x1ce>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_IC_Start_IT+0x1ce>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <HAL_TIM_IC_Start_IT+0x210>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_IC_Start_IT+0x1ce>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <HAL_TIM_IC_Start_IT+0x214>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800

080037ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0202 	mvn.w	r2, #2
 8003818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fb6e 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa82 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa88 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0204 	mvn.w	r2, #4
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fb44 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa58 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa5e 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fb1a 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa2e 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa34 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0210 	mvn.w	r2, #16
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2208      	movs	r2, #8
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd faf0 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa04 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fa0a 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fe f977 	bl	8001c5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	2b80      	cmp	r3, #128	@ 0x80
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	2b80      	cmp	r3, #128	@ 0x80
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fd71 	bl	800447e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9ce 	bl	8003d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0220 	mvn.w	r2, #32
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fd3c 	bl	800446c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e088      	b.n	8003b2c <HAL_TIM_IC_ConfigChannel+0x130>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a38:	f000 fb88 	bl	800414c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020c 	bic.w	r2, r2, #12
 8003a4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	619a      	str	r2, [r3, #24]
 8003a5e:	e060      	b.n	8003b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d11c      	bne.n	8003aa0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a76:	f000 fbc3 	bl	8004200 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	021a      	lsls	r2, r3, #8
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	619a      	str	r2, [r3, #24]
 8003a9e:	e040      	b.n	8003b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11b      	bne.n	8003ade <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003ab6:	f000 fbdf 	bl	8004278 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 020c 	bic.w	r2, r2, #12
 8003ac8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69d9      	ldr	r1, [r3, #28]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	61da      	str	r2, [r3, #28]
 8003adc:	e021      	b.n	8003b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d11c      	bne.n	8003b1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003af4:	f000 fbfb 	bl	80042ee <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69d9      	ldr	r1, [r3, #28]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
 8003b1c:	e001      	b.n	8003b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0ae      	b.n	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	f200 809f 	bhi.w	8003ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b62:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003ca1 	.word	0x08003ca1
 8003b70:	08003ca1 	.word	0x08003ca1
 8003b74:	08003ca1 	.word	0x08003ca1
 8003b78:	08003bdd 	.word	0x08003bdd
 8003b7c:	08003ca1 	.word	0x08003ca1
 8003b80:	08003ca1 	.word	0x08003ca1
 8003b84:	08003ca1 	.word	0x08003ca1
 8003b88:	08003c1f 	.word	0x08003c1f
 8003b8c:	08003ca1 	.word	0x08003ca1
 8003b90:	08003ca1 	.word	0x08003ca1
 8003b94:	08003ca1 	.word	0x08003ca1
 8003b98:	08003c5f 	.word	0x08003c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f94a 	bl	8003e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0208 	orr.w	r2, r2, #8
 8003bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0204 	bic.w	r2, r2, #4
 8003bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6999      	ldr	r1, [r3, #24]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	619a      	str	r2, [r3, #24]
      break;
 8003bda:	e064      	b.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f990 	bl	8003f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6999      	ldr	r1, [r3, #24]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	619a      	str	r2, [r3, #24]
      break;
 8003c1c:	e043      	b.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f9d9 	bl	8003fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0208 	orr.w	r2, r2, #8
 8003c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0204 	bic.w	r2, r2, #4
 8003c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69d9      	ldr	r1, [r3, #28]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	61da      	str	r2, [r3, #28]
      break;
 8003c5c:	e023      	b.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa23 	bl	80040b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69d9      	ldr	r1, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	021a      	lsls	r2, r3, #8
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	61da      	str	r2, [r3, #28]
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d831      	bhi.n	8003d30 <HAL_TIM_ReadCapturedValue+0x78>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	60fb      	str	r3, [r7, #12]

      break;
 8003d10:	e00f      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	60fb      	str	r3, [r7, #12]

      break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	60fb      	str	r3, [r7, #12]

      break;
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	60fb      	str	r3, [r7, #12]

      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d30:	bf00      	nop
  }

  return tmpreg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <TIM_Base_SetConfig+0xbc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0x30>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a25      	ldr	r2, [pc, #148]	@ (8003e38 <TIM_Base_SetConfig+0xc0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d007      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	@ (8003e34 <TIM_Base_SetConfig+0xbc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <TIM_Base_SetConfig+0xc0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <TIM_Base_SetConfig+0xb8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d103      	bne.n	8003e20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	615a      	str	r2, [r3, #20]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800

08003e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0201 	bic.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0302 	bic.w	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	@ (8003f04 <TIM_OC1_SetConfig+0xc8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0308 	bic.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	@ (8003f04 <TIM_OC1_SetConfig+0xc8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00

08003f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f023 0210 	bic.w	r2, r3, #16
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0320 	bic.w	r3, r3, #32
 8003f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <TIM_OC2_SetConfig+0xd0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10d      	bne.n	8003f84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <TIM_OC2_SetConfig+0xd0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d113      	bne.n	8003fb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <TIM_OC3_SetConfig+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10d      	bne.n	8004056 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <TIM_OC3_SetConfig+0xd0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d113      	bne.n	8004086 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00

080040b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <TIM_OC4_SetConfig+0x98>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00

0800414c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f023 0201 	bic.w	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <TIM_TI1_SetConfig+0xa8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_TI1_SetConfig+0x46>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d007      	beq.n	8004192 <TIM_TI1_SetConfig+0x46>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a1c      	ldr	r2, [pc, #112]	@ (80041f8 <TIM_TI1_SetConfig+0xac>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_TI1_SetConfig+0x46>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a1b      	ldr	r2, [pc, #108]	@ (80041fc <TIM_TI1_SetConfig+0xb0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <TIM_TI1_SetConfig+0x4a>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <TIM_TI1_SetConfig+0x4c>
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e003      	b.n	80041b6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f003 030a 	and.w	r3, r3, #10
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800

08004200 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f023 0210 	bic.w	r2, r3, #16
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800423e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	031b      	lsls	r3, r3, #12
 8004244:	b29b      	uxth	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004252:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 0303 	bic.w	r3, r3, #3
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800432c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	b29b      	uxth	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004366:	b480      	push	{r7}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	43db      	mvns	r3, r3
 8004388:	401a      	ands	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e046      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a16      	ldr	r2, [pc, #88]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a10      	ldr	r2, [pc, #64]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800

0800446c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e042      	b.n	8004528 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fcd2 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	@ 0x24
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fc7f 	bl	8004dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b0ba      	sub	sp, #232	@ 0xe8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800456e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb63 	bl	8004c5a <UART_Receive_IT>
      return;
 8004594:	e25b      	b.n	8004a4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80de 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80d1 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
 80045ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0208 	orr.w	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 81f2 	beq.w	8004a44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 faee 	bl	8004c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_UART_IRQHandler+0x17a>
 80046a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04f      	beq.n	800474a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9f8 	bl	8004aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d041      	beq.n	8004742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d9      	bne.n	80046be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_UART_IRQHandler+0x3e0>)
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fee8 	bl	80024f4 <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00e      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f99c 	bl	8004a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00a      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f998 	bl	8004a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e006      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f994 	bl	8004a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004756:	e175      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	bf00      	nop
    return;
 800475a:	e173      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 814f 	bne.w	8004a04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8148 	beq.w	8004a04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8141 	beq.w	8004a04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80b6 	beq.w	8004914 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8145 	beq.w	8004a48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 813e 	bcs.w	8004a48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b20      	cmp	r3, #32
 80047dc:	f000 8088 	beq.w	80048f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800480c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004818:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1d9      	bne.n	80047e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800483c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004850:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004854:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004858:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e1      	bne.n	800482c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3314      	adds	r3, #20
 800486e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800487a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800488c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800488e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004892:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800489a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e3      	bne.n	8004868 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c0:	f023 0310 	bic.w	r3, r3, #16
 80048c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e3      	bne.n	80048ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd fdc7 	bl	800247e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8bf 	bl	8004a8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800490c:	e09c      	b.n	8004a48 <HAL_UART_IRQHandler+0x518>
 800490e:	bf00      	nop
 8004910:	08004b65 	.word	0x08004b65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 808e 	beq.w	8004a4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8089 	beq.w	8004a4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800494a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004950:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800495e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004960:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800496c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e3      	bne.n	800493a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	623b      	str	r3, [r7, #32]
   return(result);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004996:	633a      	str	r2, [r7, #48]	@ 0x30
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e3      	bne.n	8004972 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0310 	bic.w	r3, r3, #16
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049dc:	61fa      	str	r2, [r7, #28]
 80049de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e3      	bne.n	80049b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f844 	bl	8004a8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a02:	e023      	b.n	8004a4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <HAL_UART_IRQHandler+0x4f4>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8b5 	bl	8004b8c <UART_Transmit_IT>
    return;
 8004a22:	e014      	b.n	8004a4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <HAL_UART_IRQHandler+0x51e>
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8f4 	bl	8004c2a <UART_EndTransmit_IT>
    return;
 8004a42:	e004      	b.n	8004a4e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a44:	bf00      	nop
 8004a46:	e002      	b.n	8004a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a4c:	bf00      	nop
  }
}
 8004a4e:	37e8      	adds	r7, #232	@ 0xe8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b095      	sub	sp, #84	@ 0x54
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ac8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d119      	bne.n	8004b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b38:	61ba      	str	r2, [r7, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	613b      	str	r3, [r7, #16]
   return(result);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b5a:	bf00      	nop
 8004b5c:	3754      	adds	r7, #84	@ 0x54
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff7a 	bl	8004a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b21      	cmp	r3, #33	@ 0x21
 8004b9e:	d13e      	bne.n	8004c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d114      	bne.n	8004bd4 <UART_Transmit_IT+0x48>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]
 8004bd2:	e008      	b.n	8004be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6211      	str	r1, [r2, #32]
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ff02 	bl	8004a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b08c      	sub	sp, #48	@ 0x30
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b22      	cmp	r3, #34	@ 0x22
 8004c6c:	f040 80ae 	bne.w	8004dcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d117      	bne.n	8004caa <UART_Receive_IT+0x50>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ca8:	e026      	b.n	8004cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d007      	beq.n	8004cce <UART_Receive_IT+0x74>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <UART_Receive_IT+0x82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e008      	b.n	8004cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d15d      	bne.n	8004dc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d135      	bne.n	8004dbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	613b      	str	r3, [r7, #16]
   return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	623a      	str	r2, [r7, #32]
 8004d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d10a      	bne.n	8004db0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fe67 	bl	8004a8a <HAL_UARTEx_RxEventCallback>
 8004dbc:	e002      	b.n	8004dc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe51 	bl	8004a66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e002      	b.n	8004dce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3730      	adds	r7, #48	@ 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e12:	f023 030c 	bic.w	r3, r3, #12
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <UART_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fe f97a 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	e002      	b.n	8004e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fe f962 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009a      	lsls	r2, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <UART_SetConfig+0x118>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	0119      	lsls	r1, r3, #4
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef0 <UART_SetConfig+0x118>)
 8004e86:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2064      	movs	r0, #100	@ 0x64
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	@ 0x32
 8004e98:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <UART_SetConfig+0x118>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	4419      	add	r1, r3
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <UART_SetConfig+0x118>)
 8004ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2064      	movs	r0, #100	@ 0x64
 8004ec6:	fb00 f303 	mul.w	r3, r0, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	3332      	adds	r3, #50	@ 0x32
 8004ed0:	4a07      	ldr	r2, [pc, #28]	@ (8004ef0 <UART_SetConfig+0x118>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40013800 	.word	0x40013800
 8004ef0:	51eb851f 	.word	0x51eb851f

08004ef4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004efa:	f3ef 8305 	mrs	r3, IPSR
 8004efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10f      	bne.n	8004f26 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f06:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <osKernelInitialize+0x32>
 8004f12:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <osKernelInitialize+0x60>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d109      	bne.n	8004f2e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f26:	f06f 0305 	mvn.w	r3, #5
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e00c      	b.n	8004f48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <osKernelInitialize+0x60>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f36:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <osKernelInitialize+0x60>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e002      	b.n	8004f48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	20000388 	.word	0x20000388

08004f58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6e:	607b      	str	r3, [r7, #4]
  return(result);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <osKernelStart+0x32>
 8004f76:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <osKernelStart+0x64>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d109      	bne.n	8004f92 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f82:	603b      	str	r3, [r7, #0]
  return(result);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f8a:	f06f 0305 	mvn.w	r3, #5
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e00e      	b.n	8004fb0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f92:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <osKernelStart+0x64>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <osKernelStart+0x64>)
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004fa0:	f001 f890 	bl	80060c4 <vTaskStartScheduler>
      stat = osOK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e002      	b.n	8004fb0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000388 	.word	0x20000388

08004fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b092      	sub	sp, #72	@ 0x48
 8004fc4:	af04      	add	r7, sp, #16
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd0:	f3ef 8305 	mrs	r3, IPSR
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 8094 	bne.w	8005106 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	623b      	str	r3, [r7, #32]
  return(result);
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 808d 	bne.w	8005106 <osThreadNew+0x146>
 8004fec:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <osThreadNew+0x150>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d106      	bne.n	8005002 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 8082 	bne.w	8005106 <osThreadNew+0x146>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d07e      	beq.n	8005106 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800500c:	2318      	movs	r3, #24
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8005010:	2300      	movs	r3, #0
 8005012:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005014:	f107 031b 	add.w	r3, r7, #27
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800501a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d045      	beq.n	80050b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <osThreadNew+0x74>
        name = attr->name;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <osThreadNew+0x9a>
 8005048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504a:	2b38      	cmp	r3, #56	@ 0x38
 800504c:	d805      	bhi.n	800505a <osThreadNew+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <osThreadNew+0x9e>
        return (NULL);
 800505a:	2300      	movs	r3, #0
 800505c:	e054      	b.n	8005108 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00e      	beq.n	8005094 <osThreadNew+0xd4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b5b      	cmp	r3, #91	@ 0x5b
 800507c:	d90a      	bls.n	8005094 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <osThreadNew+0xd4>
        mem = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005092:	e010      	b.n	80050b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10c      	bne.n	80050b6 <osThreadNew+0xf6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <osThreadNew+0xf6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <osThreadNew+0xf6>
          mem = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b0:	e001      	b.n	80050b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d110      	bne.n	80050de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050c4:	9202      	str	r2, [sp, #8]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fe24 	bl	8005d20 <xTaskCreateStatic>
 80050d8:	4603      	mov	r3, r0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e013      	b.n	8005106 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d110      	bne.n	8005106 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fe71 	bl	8005dde <xTaskCreate>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <osThreadNew+0x146>
          hTask = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005106:	697b      	ldr	r3, [r7, #20]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3738      	adds	r7, #56	@ 0x38
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000388 	.word	0x20000388

08005114 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511c:	f3ef 8305 	mrs	r3, IPSR
 8005120:	613b      	str	r3, [r7, #16]
  return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005128:	f3ef 8310 	mrs	r3, PRIMASK
 800512c:	60fb      	str	r3, [r7, #12]
  return(result);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <osDelay+0x34>
 8005134:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <osDelay+0x58>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d109      	bne.n	8005150 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800513c:	f3ef 8311 	mrs	r3, BASEPRI
 8005140:	60bb      	str	r3, [r7, #8]
  return(result);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <osDelay+0x3c>
    stat = osErrorISR;
 8005148:	f06f 0305 	mvn.w	r3, #5
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e007      	b.n	8005160 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <osDelay+0x4c>
      vTaskDelay(ticks);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 ff7c 	bl	8006058 <vTaskDelay>
    }
  }

  return (stat);
 8005160:	697b      	ldr	r3, [r7, #20]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000388 	.word	0x20000388

08005170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <vApplicationGetIdleTaskMemory+0x28>)
 8005180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a05      	ldr	r2, [pc, #20]	@ (800519c <vApplicationGetIdleTaskMemory+0x2c>)
 8005186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	601a      	str	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	2000038c 	.word	0x2000038c
 800519c:	200003e8 	.word	0x200003e8

080051a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a07      	ldr	r2, [pc, #28]	@ (80051cc <vApplicationGetTimerTaskMemory+0x2c>)
 80051b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a06      	ldr	r2, [pc, #24]	@ (80051d0 <vApplicationGetTimerTaskMemory+0x30>)
 80051b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200005e8 	.word	0x200005e8
 80051d0:	20000644 	.word	0x20000644

080051d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005286:	d103      	bne.n	8005290 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e00c      	b.n	80052aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3308      	adds	r3, #8
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e002      	b.n	800529e <vListInsert+0x2e>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d2f6      	bcs.n	8005298 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d103      	bne.n	8005314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
	...

08005334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	e7fd      	b.n	800535c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005360:	f001 fffc 	bl	800735c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	441a      	add	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	3b01      	subs	r3, #1
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	441a      	add	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	22ff      	movs	r2, #255	@ 0xff
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	22ff      	movs	r2, #255	@ 0xff
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d114      	bne.n	80053e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3310      	adds	r3, #16
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 f910 	bl	80065e8 <xTaskRemoveFromEventList>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d012      	beq.n	80053f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <xQueueGenericReset+0xd0>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	e009      	b.n	80053f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3310      	adds	r3, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fef5 	bl	80051d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3324      	adds	r3, #36	@ 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fef0 	bl	80051d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053f4:	f001 ffe2 	bl	80073bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053f8:	2301      	movs	r3, #1
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <xQueueGenericCreateStatic+0x56>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <xQueueGenericCreateStatic+0x5a>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericCreateStatic+0x5c>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <xQueueGenericCreateStatic+0x84>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <xQueueGenericCreateStatic+0x88>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <xQueueGenericCreateStatic+0x8a>
 8005490:	2300      	movs	r3, #0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	61fb      	str	r3, [r7, #28]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054ae:	2350      	movs	r3, #80	@ 0x50
 80054b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b50      	cmp	r3, #80	@ 0x50
 80054b6:	d00b      	beq.n	80054d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61bb      	str	r3, [r7, #24]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054e2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80054e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f805 	bl	8005500 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3730      	adds	r7, #48	@ 0x30
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e002      	b.n	8005522 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800552e:	2101      	movs	r1, #1
 8005530:	69b8      	ldr	r0, [r7, #24]
 8005532:	f7ff feff 	bl	8005334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	@ 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueGenericSend+0x34>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <xQueueGenericSend+0x42>
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <xQueueGenericSend+0x46>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueGenericSend+0x48>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <xQueueGenericSend+0x64>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSend+0x72>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <xQueueGenericSend+0x76>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <xQueueGenericSend+0x78>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <xQueueGenericSend+0x94>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055dc:	f001 f9c8 	bl	8006970 <xTaskGetSchedulerState>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <xQueueGenericSend+0xa4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xQueueGenericSend+0xa8>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <xQueueGenericSend+0xaa>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <xQueueGenericSend+0xc6>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	61fb      	str	r3, [r7, #28]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800560e:	f001 fea5 	bl	800735c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <xQueueGenericSend+0xdc>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d129      	bne.n	8005678 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800562a:	f000 fa0d 	bl	8005a48 <prvCopyDataToQueue>
 800562e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	3324      	adds	r3, #36	@ 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f000 ffd3 	bl	80065e8 <xTaskRemoveFromEventList>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005648:	4b3f      	ldr	r3, [pc, #252]	@ (8005748 <xQueueGenericSend+0x200>)
 800564a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	e00a      	b.n	8005670 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005660:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <xQueueGenericSend+0x200>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005670:	f001 fea4 	bl	80073bc <vPortExitCritical>
				return pdPASS;
 8005674:	2301      	movs	r3, #1
 8005676:	e063      	b.n	8005740 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800567e:	f001 fe9d 	bl	80073bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005682:	2300      	movs	r3, #0
 8005684:	e05c      	b.n	8005740 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f80d 	bl	80066b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569a:	f001 fe8f 	bl	80073bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800569e:	f000 fd79 	bl	8006194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a2:	f001 fe5b 	bl	800735c <vPortEnterCritical>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056b2:	d103      	bne.n	80056bc <xQueueGenericSend+0x174>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x18a>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056d2:	f001 fe73 	bl	80073bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d6:	1d3a      	adds	r2, r7, #4
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	4611      	mov	r1, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fffc 	bl	80066dc <xTaskCheckForTimeOut>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d124      	bne.n	8005734 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ec:	f000 faa4 	bl	8005c38 <prvIsQueueFull>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	3310      	adds	r3, #16
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ff20 	bl	8006544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005706:	f000 fa2f 	bl	8005b68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570a:	f000 fd51 	bl	80061b0 <xTaskResumeAll>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f47f af7c 	bne.w	800560e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <xQueueGenericSend+0x200>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	e772      	b.n	800560e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800572a:	f000 fa1d 	bl	8005b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800572e:	f000 fd3f 	bl	80061b0 <xTaskResumeAll>
 8005732:	e76c      	b.n	800560e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005736:	f000 fa17 	bl	8005b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573a:	f000 fd39 	bl	80061b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800573e:	2300      	movs	r3, #0
		}
	}
}
 8005740:	4618      	mov	r0, r3
 8005742:	3738      	adds	r7, #56	@ 0x38
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	@ 0x38
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <xQueueGenericSendFromISR+0x3e>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <xQueueGenericSendFromISR+0x42>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericSendFromISR+0x44>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	623b      	str	r3, [r7, #32]
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d103      	bne.n	80057ba <xQueueGenericSendFromISR+0x6e>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <xQueueGenericSendFromISR+0x72>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericSendFromISR+0x74>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057dc:	f001 fe80 	bl	80074e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057e0:	f3ef 8211 	mrs	r2, BASEPRI
 80057e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61ba      	str	r2, [r7, #24]
 80057f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <xQueueGenericSendFromISR+0xc2>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d12c      	bne.n	8005868 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800581e:	f000 f913 	bl	8005a48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005822:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582a:	d112      	bne.n	8005852 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	3324      	adds	r3, #36	@ 0x24
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fed5 	bl	80065e8 <xTaskRemoveFromEventList>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e007      	b.n	8005862 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005852:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005856:	3301      	adds	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	b25a      	sxtb	r2, r3
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005862:	2301      	movs	r3, #1
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005866:	e001      	b.n	800586c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005868:	2300      	movs	r3, #0
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005876:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800587a:	4618      	mov	r0, r3
 800587c:	3738      	adds	r7, #56	@ 0x38
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	@ 0x30
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <xQueueReceive+0x32>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	623b      	str	r3, [r7, #32]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0x40>
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <xQueueReceive+0x44>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <xQueueReceive+0x46>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <xQueueReceive+0x62>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	61fb      	str	r3, [r7, #28]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e6:	f001 f843 	bl	8006970 <xTaskGetSchedulerState>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <xQueueReceive+0x72>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <xQueueReceive+0x76>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <xQueueReceive+0x78>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <xQueueReceive+0x94>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61bb      	str	r3, [r7, #24]
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005918:	f001 fd20 	bl	800735c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01f      	beq.n	8005968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800592c:	f000 f8f6 	bl	8005b1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00f      	beq.n	8005960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	3310      	adds	r3, #16
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fe4f 	bl	80065e8 <xTaskRemoveFromEventList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005950:	4b3c      	ldr	r3, [pc, #240]	@ (8005a44 <xQueueReceive+0x1c0>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005960:	f001 fd2c 	bl	80073bc <vPortExitCritical>
				return pdPASS;
 8005964:	2301      	movs	r3, #1
 8005966:	e069      	b.n	8005a3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800596e:	f001 fd25 	bl	80073bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005972:	2300      	movs	r3, #0
 8005974:	e062      	b.n	8005a3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fe95 	bl	80066b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800598a:	f001 fd17 	bl	80073bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800598e:	f000 fc01 	bl	8006194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005992:	f001 fce3 	bl	800735c <vPortEnterCritical>
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800599c:	b25b      	sxtb	r3, r3
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a2:	d103      	bne.n	80059ac <xQueueReceive+0x128>
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059b2:	b25b      	sxtb	r3, r3
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b8:	d103      	bne.n	80059c2 <xQueueReceive+0x13e>
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c2:	f001 fcfb 	bl	80073bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059c6:	1d3a      	adds	r2, r7, #4
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fe84 	bl	80066dc <xTaskCheckForTimeOut>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d123      	bne.n	8005a22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059dc:	f000 f916 	bl	8005c0c <prvIsQueueEmpty>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d017      	beq.n	8005a16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	3324      	adds	r3, #36	@ 0x24
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4611      	mov	r1, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fda8 	bl	8006544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f6:	f000 f8b7 	bl	8005b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059fa:	f000 fbd9 	bl	80061b0 <xTaskResumeAll>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d189      	bne.n	8005918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a04:	4b0f      	ldr	r3, [pc, #60]	@ (8005a44 <xQueueReceive+0x1c0>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	e780      	b.n	8005918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a18:	f000 f8a6 	bl	8005b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a1c:	f000 fbc8 	bl	80061b0 <xTaskResumeAll>
 8005a20:	e77a      	b.n	8005918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a24:	f000 f8a0 	bl	8005b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a28:	f000 fbc2 	bl	80061b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a2e:	f000 f8ed 	bl	8005c0c <prvIsQueueEmpty>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f43f af6f 	beq.w	8005918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3730      	adds	r7, #48	@ 0x30
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d14d      	bne.n	8005b0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 ff9a 	bl	80069ac <xTaskPriorityDisinherit>
 8005a78:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	e043      	b.n	8005b0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d119      	bne.n	8005abc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6898      	ldr	r0, [r3, #8]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	461a      	mov	r2, r3
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	f002 ff61 	bl	800895a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d32b      	bcc.n	8005b0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	e026      	b.n	8005b0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68d8      	ldr	r0, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	f002 ff47 	bl	800895a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d207      	bcs.n	8005af8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	425b      	negs	r3, r3
 8005af2:	441a      	add	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d105      	bne.n	8005b0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d018      	beq.n	8005b60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	441a      	add	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d303      	bcc.n	8005b50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	f002 fefd 	bl	800895a <memcpy>
	}
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b70:	f001 fbf4 	bl	800735c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b7c:	e011      	b.n	8005ba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3324      	adds	r3, #36	@ 0x24
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fd2c 	bl	80065e8 <xTaskRemoveFromEventList>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b96:	f000 fe05 	bl	80067a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dce9      	bgt.n	8005b7e <prvUnlockQueue+0x16>
 8005baa:	e000      	b.n	8005bae <prvUnlockQueue+0x46>
					break;
 8005bac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	22ff      	movs	r2, #255	@ 0xff
 8005bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005bb6:	f001 fc01 	bl	80073bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bba:	f001 fbcf 	bl	800735c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc6:	e011      	b.n	8005bec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fd07 	bl	80065e8 <xTaskRemoveFromEventList>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005be0:	f000 fde0 	bl	80067a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dce9      	bgt.n	8005bc8 <prvUnlockQueue+0x60>
 8005bf4:	e000      	b.n	8005bf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	22ff      	movs	r2, #255	@ 0xff
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c00:	f001 fbdc 	bl	80073bc <vPortExitCritical>
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c14:	f001 fba2 	bl	800735c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e001      	b.n	8005c2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c2a:	f001 fbc7 	bl	80073bc <vPortExitCritical>

	return xReturn;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c40:	f001 fb8c 	bl	800735c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d102      	bne.n	8005c56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e001      	b.n	8005c5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c5a:	f001 fbaf 	bl	80073bc <vPortExitCritical>

	return xReturn;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e014      	b.n	8005ca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c78:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb4 <vQueueAddToRegistry+0x4c>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c84:	490b      	ldr	r1, [pc, #44]	@ (8005cb4 <vQueueAddToRegistry+0x4c>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c8e:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <vQueueAddToRegistry+0x4c>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c9a:	e006      	b.n	8005caa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b07      	cmp	r3, #7
 8005ca6:	d9e7      	bls.n	8005c78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr
 8005cb4:	20000a44 	.word	0x20000a44

08005cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cc8:	f001 fb48 	bl	800735c <vPortEnterCritical>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cd8:	d103      	bne.n	8005ce2 <vQueueWaitForMessageRestricted+0x2a>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cee:	d103      	bne.n	8005cf8 <vQueueWaitForMessageRestricted+0x40>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf8:	f001 fb60 	bl	80073bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3324      	adds	r3, #36	@ 0x24
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fc3f 	bl	8006590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d12:	6978      	ldr	r0, [r7, #20]
 8005d14:	f7ff ff28 	bl	8005b68 <prvUnlockQueue>
	}
 8005d18:	bf00      	nop
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61fb      	str	r3, [r7, #28]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d6a:	235c      	movs	r3, #92	@ 0x5c
 8005d6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d72:	d00b      	beq.n	8005d8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61bb      	str	r3, [r7, #24]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01e      	beq.n	8005dd0 <xTaskCreateStatic+0xb0>
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005da0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005daa:	2300      	movs	r3, #0
 8005dac:	9303      	str	r3, [sp, #12]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	9302      	str	r3, [sp, #8]
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f850 	bl	8005e68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dca:	f000 f8d5 	bl	8005f78 <prvAddNewTaskToReadyList>
 8005dce:	e001      	b.n	8005dd4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dd4:	697b      	ldr	r3, [r7, #20]
	}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3728      	adds	r7, #40	@ 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b08c      	sub	sp, #48	@ 0x30
 8005de2:	af04      	add	r7, sp, #16
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 fbb4 	bl	8007560 <pvPortMalloc>
 8005df8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e00:	205c      	movs	r0, #92	@ 0x5c
 8005e02:	f001 fbad 	bl	8007560 <pvPortMalloc>
 8005e06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e14:	e005      	b.n	8005e22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e16:	6978      	ldr	r0, [r7, #20]
 8005e18:	f001 fc6a 	bl	80076f0 <vPortFree>
 8005e1c:	e001      	b.n	8005e22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d017      	beq.n	8005e58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f80e 	bl	8005e68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e4c:	69f8      	ldr	r0, [r7, #28]
 8005e4e:	f000 f893 	bl	8005f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e52:	2301      	movs	r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e002      	b.n	8005e5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	461a      	mov	r2, r3
 8005e80:	21a5      	movs	r1, #165	@ 0xa5
 8005e82:	f002 fcdc 	bl	800883e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e90:	3b01      	subs	r3, #1
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	617b      	str	r3, [r7, #20]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e012      	b.n	8005eee <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	7819      	ldrb	r1, [r3, #0]
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3334      	adds	r3, #52	@ 0x34
 8005ed8:	460a      	mov	r2, r1
 8005eda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d006      	beq.n	8005ef6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d9e9      	bls.n	8005ec8 <prvInitialiseNewTask+0x60>
 8005ef4:	e000      	b.n	8005ef8 <prvInitialiseNewTask+0x90>
		{
			break;
 8005ef6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	2b37      	cmp	r3, #55	@ 0x37
 8005f04:	d901      	bls.n	8005f0a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f06:	2337      	movs	r3, #55	@ 0x37
 8005f08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f976 	bl	8005212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f28:	3318      	adds	r3, #24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f971 	bl	8005212 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	2200      	movs	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	69b8      	ldr	r0, [r7, #24]
 8005f5a:	f001 f90b 	bl	8007174 <pxPortInitialiseStack>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f70:	bf00      	nop
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f80:	f001 f9ec 	bl	800735c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f84:	4b2d      	ldr	r3, [pc, #180]	@ (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f96:	4a2a      	ldr	r2, [pc, #168]	@ (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f9c:	4b27      	ldr	r3, [pc, #156]	@ (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d110      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fa4:	f000 fc22 	bl	80067ec <prvInitialiseTaskLists>
 8005fa8:	e00d      	b.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005faa:	4b26      	ldr	r3, [pc, #152]	@ (8006044 <prvAddNewTaskToReadyList+0xcc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fb2:	4b23      	ldr	r3, [pc, #140]	@ (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d802      	bhi.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fc6:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <prvAddNewTaskToReadyList+0xd4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d903      	bls.n	8005fec <prvAddNewTaskToReadyList+0x74>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4a18      	ldr	r2, [pc, #96]	@ (800604c <prvAddNewTaskToReadyList+0xd4>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <prvAddNewTaskToReadyList+0xd8>)
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7ff f911 	bl	800522a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006008:	f001 f9d8 	bl	80073bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800600c:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <prvAddNewTaskToReadyList+0xcc>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00e      	beq.n	8006032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	429a      	cmp	r2, r3
 8006020:	d207      	bcs.n	8006032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006022:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <prvAddNewTaskToReadyList+0xdc>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000f58 	.word	0x20000f58
 8006040:	20000a84 	.word	0x20000a84
 8006044:	20000f64 	.word	0x20000f64
 8006048:	20000f74 	.word	0x20000f74
 800604c:	20000f60 	.word	0x20000f60
 8006050:	20000a88 	.word	0x20000a88
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800606a:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <vTaskDelay+0x64>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <vTaskDelay+0x32>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60bb      	str	r3, [r7, #8]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800608a:	f000 f883 	bl	8006194 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800608e:	2100      	movs	r1, #0
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fcfb 	bl	8006a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006096:	f000 f88b 	bl	80061b0 <xTaskResumeAll>
 800609a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <vTaskDelay+0x68>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000f80 	.word	0x20000f80
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	@ 0x28
 80060c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060d2:	463a      	mov	r2, r7
 80060d4:	1d39      	adds	r1, r7, #4
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff f848 	bl	8005170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	9202      	str	r2, [sp, #8]
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	2300      	movs	r3, #0
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	460a      	mov	r2, r1
 80060f2:	4922      	ldr	r1, [pc, #136]	@ (800617c <vTaskStartScheduler+0xb8>)
 80060f4:	4822      	ldr	r0, [pc, #136]	@ (8006180 <vTaskStartScheduler+0xbc>)
 80060f6:	f7ff fe13 	bl	8005d20 <xTaskCreateStatic>
 80060fa:	4603      	mov	r3, r0
 80060fc:	4a21      	ldr	r2, [pc, #132]	@ (8006184 <vTaskStartScheduler+0xc0>)
 80060fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006100:	4b20      	ldr	r3, [pc, #128]	@ (8006184 <vTaskStartScheduler+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e001      	b.n	8006112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d102      	bne.n	800611e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006118:	f000 fd0c 	bl	8006b34 <xTimerCreateTimerTask>
 800611c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d116      	bne.n	8006152 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	613b      	str	r3, [r7, #16]
}
 8006136:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <vTaskStartScheduler+0xc4>)
 800613a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800613e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006140:	4b12      	ldr	r3, [pc, #72]	@ (800618c <vTaskStartScheduler+0xc8>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006146:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <vTaskStartScheduler+0xcc>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800614c:	f001 f894 	bl	8007278 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006150:	e00f      	b.n	8006172 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006158:	d10b      	bne.n	8006172 <vTaskStartScheduler+0xae>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	60fb      	str	r3, [r7, #12]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <vTaskStartScheduler+0xaa>
}
 8006172:	bf00      	nop
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	0800c018 	.word	0x0800c018
 8006180:	080067bd 	.word	0x080067bd
 8006184:	20000f7c 	.word	0x20000f7c
 8006188:	20000f78 	.word	0x20000f78
 800618c:	20000f64 	.word	0x20000f64
 8006190:	20000f5c 	.word	0x20000f5c

08006194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006198:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <vTaskSuspendAll+0x18>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	4a03      	ldr	r2, [pc, #12]	@ (80061ac <vTaskSuspendAll+0x18>)
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000f80 	.word	0x20000f80

080061b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061be:	4b42      	ldr	r3, [pc, #264]	@ (80062c8 <xTaskResumeAll+0x118>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <xTaskResumeAll+0x2e>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	603b      	str	r3, [r7, #0]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061de:	f001 f8bd 	bl	800735c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061e2:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <xTaskResumeAll+0x118>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a37      	ldr	r2, [pc, #220]	@ (80062c8 <xTaskResumeAll+0x118>)
 80061ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ec:	4b36      	ldr	r3, [pc, #216]	@ (80062c8 <xTaskResumeAll+0x118>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d162      	bne.n	80062ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061f4:	4b35      	ldr	r3, [pc, #212]	@ (80062cc <xTaskResumeAll+0x11c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05e      	beq.n	80062ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061fc:	e02f      	b.n	800625e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061fe:	4b34      	ldr	r3, [pc, #208]	@ (80062d0 <xTaskResumeAll+0x120>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3318      	adds	r3, #24
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff f868 	bl	80052e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f863 	bl	80052e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	4b2d      	ldr	r3, [pc, #180]	@ (80062d4 <xTaskResumeAll+0x124>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d903      	bls.n	800622e <xTaskResumeAll+0x7e>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	4a2a      	ldr	r2, [pc, #168]	@ (80062d4 <xTaskResumeAll+0x124>)
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4a27      	ldr	r2, [pc, #156]	@ (80062d8 <xTaskResumeAll+0x128>)
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fe fff0 	bl	800522a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624e:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <xTaskResumeAll+0x12c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006258:	4b21      	ldr	r3, [pc, #132]	@ (80062e0 <xTaskResumeAll+0x130>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800625e:	4b1c      	ldr	r3, [pc, #112]	@ (80062d0 <xTaskResumeAll+0x120>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1cb      	bne.n	80061fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800626c:	f000 fb5c 	bl	8006928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006270:	4b1c      	ldr	r3, [pc, #112]	@ (80062e4 <xTaskResumeAll+0x134>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d010      	beq.n	800629e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800627c:	f000 f844 	bl	8006308 <xTaskIncrementTick>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006286:	4b16      	ldr	r3, [pc, #88]	@ (80062e0 <xTaskResumeAll+0x130>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3b01      	subs	r3, #1
 8006290:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f1      	bne.n	800627c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006298:	4b12      	ldr	r3, [pc, #72]	@ (80062e4 <xTaskResumeAll+0x134>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800629e:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <xTaskResumeAll+0x130>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062a6:	2301      	movs	r3, #1
 80062a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062aa:	4b0f      	ldr	r3, [pc, #60]	@ (80062e8 <xTaskResumeAll+0x138>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062ba:	f001 f87f 	bl	80073bc <vPortExitCritical>

	return xAlreadyYielded;
 80062be:	68bb      	ldr	r3, [r7, #8]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000f80 	.word	0x20000f80
 80062cc:	20000f58 	.word	0x20000f58
 80062d0:	20000f18 	.word	0x20000f18
 80062d4:	20000f60 	.word	0x20000f60
 80062d8:	20000a88 	.word	0x20000a88
 80062dc:	20000a84 	.word	0x20000a84
 80062e0:	20000f6c 	.word	0x20000f6c
 80062e4:	20000f68 	.word	0x20000f68
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062f2:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <xTaskGetTickCount+0x18>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062f8:	687b      	ldr	r3, [r7, #4]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	20000f5c 	.word	0x20000f5c

08006308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006312:	4b52      	ldr	r3, [pc, #328]	@ (800645c <xTaskIncrementTick+0x154>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 808f 	bne.w	800643a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800631c:	4b50      	ldr	r3, [pc, #320]	@ (8006460 <xTaskIncrementTick+0x158>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006324:	4a4e      	ldr	r2, [pc, #312]	@ (8006460 <xTaskIncrementTick+0x158>)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d121      	bne.n	8006374 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006330:	4b4c      	ldr	r3, [pc, #304]	@ (8006464 <xTaskIncrementTick+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <xTaskIncrementTick+0x4a>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	603b      	str	r3, [r7, #0]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <xTaskIncrementTick+0x46>
 8006352:	4b44      	ldr	r3, [pc, #272]	@ (8006464 <xTaskIncrementTick+0x15c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <xTaskIncrementTick+0x160>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a41      	ldr	r2, [pc, #260]	@ (8006464 <xTaskIncrementTick+0x15c>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4a41      	ldr	r2, [pc, #260]	@ (8006468 <xTaskIncrementTick+0x160>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b41      	ldr	r3, [pc, #260]	@ (800646c <xTaskIncrementTick+0x164>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	4a3f      	ldr	r2, [pc, #252]	@ (800646c <xTaskIncrementTick+0x164>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	f000 fada 	bl	8006928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006374:	4b3e      	ldr	r3, [pc, #248]	@ (8006470 <xTaskIncrementTick+0x168>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	d34e      	bcc.n	800641c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800637e:	4b39      	ldr	r3, [pc, #228]	@ (8006464 <xTaskIncrementTick+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <xTaskIncrementTick+0x84>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <xTaskIncrementTick+0x86>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006392:	4b37      	ldr	r3, [pc, #220]	@ (8006470 <xTaskIncrementTick+0x168>)
 8006394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006398:	601a      	str	r2, [r3, #0]
					break;
 800639a:	e03f      	b.n	800641c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800639c:	4b31      	ldr	r3, [pc, #196]	@ (8006464 <xTaskIncrementTick+0x15c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d203      	bcs.n	80063bc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006470 <xTaskIncrementTick+0x168>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6013      	str	r3, [r2, #0]
						break;
 80063ba:	e02f      	b.n	800641c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe ff8d 	bl	80052e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe ff84 	bl	80052e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <xTaskIncrementTick+0x16c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d903      	bls.n	80063ec <xTaskIncrementTick+0xe4>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	4a22      	ldr	r2, [pc, #136]	@ (8006474 <xTaskIncrementTick+0x16c>)
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006478 <xTaskIncrementTick+0x170>)
 80063fa:	441a      	add	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f7fe ff11 	bl	800522a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	4b1b      	ldr	r3, [pc, #108]	@ (800647c <xTaskIncrementTick+0x174>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	429a      	cmp	r2, r3
 8006414:	d3b3      	bcc.n	800637e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006416:	2301      	movs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641a:	e7b0      	b.n	800637e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800641c:	4b17      	ldr	r3, [pc, #92]	@ (800647c <xTaskIncrementTick+0x174>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006422:	4915      	ldr	r1, [pc, #84]	@ (8006478 <xTaskIncrementTick+0x170>)
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d907      	bls.n	8006444 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e004      	b.n	8006444 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800643a:	4b11      	ldr	r3, [pc, #68]	@ (8006480 <xTaskIncrementTick+0x178>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	4a0f      	ldr	r2, [pc, #60]	@ (8006480 <xTaskIncrementTick+0x178>)
 8006442:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006444:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <xTaskIncrementTick+0x17c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006450:	697b      	ldr	r3, [r7, #20]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000f80 	.word	0x20000f80
 8006460:	20000f5c 	.word	0x20000f5c
 8006464:	20000f10 	.word	0x20000f10
 8006468:	20000f14 	.word	0x20000f14
 800646c:	20000f70 	.word	0x20000f70
 8006470:	20000f78 	.word	0x20000f78
 8006474:	20000f60 	.word	0x20000f60
 8006478:	20000a88 	.word	0x20000a88
 800647c:	20000a84 	.word	0x20000a84
 8006480:	20000f68 	.word	0x20000f68
 8006484:	20000f6c 	.word	0x20000f6c

08006488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800648e:	4b28      	ldr	r3, [pc, #160]	@ (8006530 <vTaskSwitchContext+0xa8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006496:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <vTaskSwitchContext+0xac>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800649c:	e042      	b.n	8006524 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800649e:	4b25      	ldr	r3, [pc, #148]	@ (8006534 <vTaskSwitchContext+0xac>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064a4:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <vTaskSwitchContext+0xb0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e011      	b.n	80064d0 <vTaskSwitchContext+0x48>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <vTaskSwitchContext+0x42>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	e7fd      	b.n	80064c6 <vTaskSwitchContext+0x3e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	491a      	ldr	r1, [pc, #104]	@ (800653c <vTaskSwitchContext+0xb4>)
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0e3      	beq.n	80064ac <vTaskSwitchContext+0x24>
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a13      	ldr	r2, [pc, #76]	@ (800653c <vTaskSwitchContext+0xb4>)
 80064f0:	4413      	add	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3308      	adds	r3, #8
 8006506:	429a      	cmp	r2, r3
 8006508:	d104      	bne.n	8006514 <vTaskSwitchContext+0x8c>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4a09      	ldr	r2, [pc, #36]	@ (8006540 <vTaskSwitchContext+0xb8>)
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4a06      	ldr	r2, [pc, #24]	@ (8006538 <vTaskSwitchContext+0xb0>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000f80 	.word	0x20000f80
 8006534:	20000f6c 	.word	0x20000f6c
 8006538:	20000f60 	.word	0x20000f60
 800653c:	20000a88 	.word	0x20000a88
 8006540:	20000a84 	.word	0x20000a84

08006544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800656c:	4b07      	ldr	r3, [pc, #28]	@ (800658c <vTaskPlaceOnEventList+0x48>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3318      	adds	r3, #24
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fe fe7b 	bl	8005270 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800657a:	2101      	movs	r1, #1
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f000 fa85 	bl	8006a8c <prvAddCurrentTaskToDelayedList>
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000a84 	.word	0x20000a84

08006590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	617b      	str	r3, [r7, #20]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3318      	adds	r3, #24
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7fe fe31 	bl	800522a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f000 fa58 	bl	8006a8c <prvAddCurrentTaskToDelayedList>
	}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000a84 	.word	0x20000a84

080065e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3318      	adds	r3, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fe60 	bl	80052e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006620:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <xTaskRemoveFromEventList+0xb0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11d      	bne.n	8006664 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	3304      	adds	r3, #4
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fe57 	bl	80052e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006636:	4b19      	ldr	r3, [pc, #100]	@ (800669c <xTaskRemoveFromEventList+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d903      	bls.n	8006646 <xTaskRemoveFromEventList+0x5e>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	4a16      	ldr	r2, [pc, #88]	@ (800669c <xTaskRemoveFromEventList+0xb4>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a13      	ldr	r2, [pc, #76]	@ (80066a0 <xTaskRemoveFromEventList+0xb8>)
 8006654:	441a      	add	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fe fde4 	bl	800522a <vListInsertEnd>
 8006662:	e005      	b.n	8006670 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3318      	adds	r3, #24
 8006668:	4619      	mov	r1, r3
 800666a:	480e      	ldr	r0, [pc, #56]	@ (80066a4 <xTaskRemoveFromEventList+0xbc>)
 800666c:	f7fe fddd 	bl	800522a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006674:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <xTaskRemoveFromEventList+0xc0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	429a      	cmp	r2, r3
 800667c:	d905      	bls.n	800668a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006682:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <xTaskRemoveFromEventList+0xc4>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e001      	b.n	800668e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800668e:	697b      	ldr	r3, [r7, #20]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000f80 	.word	0x20000f80
 800669c:	20000f60 	.word	0x20000f60
 80066a0:	20000a88 	.word	0x20000a88
 80066a4:	20000f18 	.word	0x20000f18
 80066a8:	20000a84 	.word	0x20000a84
 80066ac:	20000f6c 	.word	0x20000f6c

080066b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <vTaskInternalSetTimeOutState+0x24>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <vTaskInternalSetTimeOutState+0x28>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	605a      	str	r2, [r3, #4]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000f70 	.word	0x20000f70
 80066d8:	20000f5c 	.word	0x20000f5c

080066dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60fb      	str	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006722:	f000 fe1b 	bl	800735c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006726:	4b1d      	ldr	r3, [pc, #116]	@ (800679c <xTaskCheckForTimeOut+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800673e:	d102      	bne.n	8006746 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e023      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <xTaskCheckForTimeOut+0xc4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d007      	beq.n	8006762 <xTaskCheckForTimeOut+0x86>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e015      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d20b      	bcs.n	8006784 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff99 	bl	80066b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e004      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800678e:	f000 fe15 	bl	80073bc <vPortExitCritical>

	return xReturn;
 8006792:	69fb      	ldr	r3, [r7, #28]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000f5c 	.word	0x20000f5c
 80067a0:	20000f70 	.word	0x20000f70

080067a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067a8:	4b03      	ldr	r3, [pc, #12]	@ (80067b8 <vTaskMissedYield+0x14>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000f6c 	.word	0x20000f6c

080067bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067c4:	f000 f852 	bl	800686c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067c8:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <prvIdleTask+0x28>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d9f9      	bls.n	80067c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <prvIdleTask+0x2c>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067e0:	e7f0      	b.n	80067c4 <prvIdleTask+0x8>
 80067e2:	bf00      	nop
 80067e4:	20000a88 	.word	0x20000a88
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f2:	2300      	movs	r3, #0
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	e00c      	b.n	8006812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a12      	ldr	r2, [pc, #72]	@ (800684c <prvInitialiseTaskLists+0x60>)
 8006804:	4413      	add	r3, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fce4 	bl	80051d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3301      	adds	r3, #1
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b37      	cmp	r3, #55	@ 0x37
 8006816:	d9ef      	bls.n	80067f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006818:	480d      	ldr	r0, [pc, #52]	@ (8006850 <prvInitialiseTaskLists+0x64>)
 800681a:	f7fe fcdb 	bl	80051d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800681e:	480d      	ldr	r0, [pc, #52]	@ (8006854 <prvInitialiseTaskLists+0x68>)
 8006820:	f7fe fcd8 	bl	80051d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006824:	480c      	ldr	r0, [pc, #48]	@ (8006858 <prvInitialiseTaskLists+0x6c>)
 8006826:	f7fe fcd5 	bl	80051d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800682a:	480c      	ldr	r0, [pc, #48]	@ (800685c <prvInitialiseTaskLists+0x70>)
 800682c:	f7fe fcd2 	bl	80051d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006830:	480b      	ldr	r0, [pc, #44]	@ (8006860 <prvInitialiseTaskLists+0x74>)
 8006832:	f7fe fccf 	bl	80051d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <prvInitialiseTaskLists+0x78>)
 8006838:	4a05      	ldr	r2, [pc, #20]	@ (8006850 <prvInitialiseTaskLists+0x64>)
 800683a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <prvInitialiseTaskLists+0x7c>)
 800683e:	4a05      	ldr	r2, [pc, #20]	@ (8006854 <prvInitialiseTaskLists+0x68>)
 8006840:	601a      	str	r2, [r3, #0]
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000a88 	.word	0x20000a88
 8006850:	20000ee8 	.word	0x20000ee8
 8006854:	20000efc 	.word	0x20000efc
 8006858:	20000f18 	.word	0x20000f18
 800685c:	20000f2c 	.word	0x20000f2c
 8006860:	20000f44 	.word	0x20000f44
 8006864:	20000f10 	.word	0x20000f10
 8006868:	20000f14 	.word	0x20000f14

0800686c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006872:	e019      	b.n	80068a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006874:	f000 fd72 	bl	800735c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006878:	4b10      	ldr	r3, [pc, #64]	@ (80068bc <prvCheckTasksWaitingTermination+0x50>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fd2b 	bl	80052e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <prvCheckTasksWaitingTermination+0x54>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	4a0b      	ldr	r2, [pc, #44]	@ (80068c0 <prvCheckTasksWaitingTermination+0x54>)
 8006892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006894:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	4a0a      	ldr	r2, [pc, #40]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 800689c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800689e:	f000 fd8d 	bl	80073bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f810 	bl	80068c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a8:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e1      	bne.n	8006874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000f2c 	.word	0x20000f2c
 80068c0:	20000f58 	.word	0x20000f58
 80068c4:	20000f40 	.word	0x20000f40

080068c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d108      	bne.n	80068ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 ff06 	bl	80076f0 <vPortFree>
				vPortFree( pxTCB );
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 ff03 	bl	80076f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068ea:	e019      	b.n	8006920 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d103      	bne.n	80068fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fefa 	bl	80076f0 <vPortFree>
	}
 80068fc:	e010      	b.n	8006920 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006904:	2b02      	cmp	r3, #2
 8006906:	d00b      	beq.n	8006920 <prvDeleteTCB+0x58>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60fb      	str	r3, [r7, #12]
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <prvDeleteTCB+0x54>
	}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692e:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <prvResetNextTaskUnblockTime+0x40>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <prvResetNextTaskUnblockTime+0x14>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <prvResetNextTaskUnblockTime+0x16>
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006942:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <prvResetNextTaskUnblockTime+0x44>)
 8006944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006948:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800694a:	e008      	b.n	800695e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <prvResetNextTaskUnblockTime+0x40>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	4a04      	ldr	r2, [pc, #16]	@ (800696c <prvResetNextTaskUnblockTime+0x44>)
 800695c:	6013      	str	r3, [r2, #0]
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	20000f10 	.word	0x20000f10
 800696c:	20000f78 	.word	0x20000f78

08006970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <xTaskGetSchedulerState+0x34>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800697e:	2301      	movs	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	e008      	b.n	8006996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006984:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <xTaskGetSchedulerState+0x38>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800698c:	2302      	movs	r3, #2
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	e001      	b.n	8006996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006996:	687b      	ldr	r3, [r7, #4]
	}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000f64 	.word	0x20000f64
 80069a8:	20000f80 	.word	0x20000f80

080069ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d058      	beq.n	8006a74 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a80 <xTaskPriorityDisinherit+0xd4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d00b      	beq.n	80069e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10b      	bne.n	8006a04 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60bb      	str	r3, [r7, #8]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d02c      	beq.n	8006a74 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d128      	bne.n	8006a74 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fc5a 	bl	80052e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a44:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <xTaskPriorityDisinherit+0xd8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d903      	bls.n	8006a54 <xTaskPriorityDisinherit+0xa8>
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	4a0c      	ldr	r2, [pc, #48]	@ (8006a84 <xTaskPriorityDisinherit+0xd8>)
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <xTaskPriorityDisinherit+0xdc>)
 8006a62:	441a      	add	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fe fbdd 	bl	800522a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a74:	697b      	ldr	r3, [r7, #20]
	}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000a84 	.word	0x20000a84
 8006a84:	20000f60 	.word	0x20000f60
 8006a88:	20000a88 	.word	0x20000a88

08006a8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a96:	4b21      	ldr	r3, [pc, #132]	@ (8006b1c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a9c:	4b20      	ldr	r3, [pc, #128]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fc1c 	bl	80052e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aae:	d10a      	bne.n	8006ac6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4619      	mov	r1, r3
 8006abe:	4819      	ldr	r0, [pc, #100]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ac0:	f7fe fbb3 	bl	800522a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ac4:	e026      	b.n	8006b14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d209      	bcs.n	8006af2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ade:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fe fbc0 	bl	8005270 <vListInsert>
}
 8006af0:	e010      	b.n	8006b14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fe fbb6 	bl	8005270 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b04:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d202      	bcs.n	8006b14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b0e:	4a08      	ldr	r2, [pc, #32]	@ (8006b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6013      	str	r3, [r2, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000f5c 	.word	0x20000f5c
 8006b20:	20000a84 	.word	0x20000a84
 8006b24:	20000f44 	.word	0x20000f44
 8006b28:	20000f14 	.word	0x20000f14
 8006b2c:	20000f10 	.word	0x20000f10
 8006b30:	20000f78 	.word	0x20000f78

08006b34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	@ 0x28
 8006b38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b3e:	f000 fad9 	bl	80070f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b42:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <xTimerCreateTimerTask+0x84>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d021      	beq.n	8006b8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b52:	1d3a      	adds	r2, r7, #4
 8006b54:	f107 0108 	add.w	r1, r7, #8
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fb1f 	bl	80051a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	460a      	mov	r2, r1
 8006b74:	4911      	ldr	r1, [pc, #68]	@ (8006bbc <xTimerCreateTimerTask+0x88>)
 8006b76:	4812      	ldr	r0, [pc, #72]	@ (8006bc0 <xTimerCreateTimerTask+0x8c>)
 8006b78:	f7ff f8d2 	bl	8005d20 <xTaskCreateStatic>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4a11      	ldr	r2, [pc, #68]	@ (8006bc4 <xTimerCreateTimerTask+0x90>)
 8006b80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b82:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <xTimerCreateTimerTask+0x90>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	613b      	str	r3, [r7, #16]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bac:	697b      	ldr	r3, [r7, #20]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000fb4 	.word	0x20000fb4
 8006bbc:	0800c020 	.word	0x0800c020
 8006bc0:	08006ce9 	.word	0x08006ce9
 8006bc4:	20000fb8 	.word	0x20000fb8

08006bc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	@ 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	623b      	str	r3, [r7, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bf8:	4b19      	ldr	r3, [pc, #100]	@ (8006c60 <xTimerGenericCommand+0x98>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02a      	beq.n	8006c56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	dc18      	bgt.n	8006c44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c12:	f7ff fead 	bl	8006970 <xTaskGetSchedulerState>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d109      	bne.n	8006c30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c1c:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <xTimerGenericCommand+0x98>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	f107 0110 	add.w	r1, r7, #16
 8006c24:	2300      	movs	r3, #0
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	f7fe fc8e 	bl	8005548 <xQueueGenericSend>
 8006c2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c2e:	e012      	b.n	8006c56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c30:	4b0b      	ldr	r3, [pc, #44]	@ (8006c60 <xTimerGenericCommand+0x98>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	f107 0110 	add.w	r1, r7, #16
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7fe fc84 	bl	8005548 <xQueueGenericSend>
 8006c40:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c42:	e008      	b.n	8006c56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c44:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <xTimerGenericCommand+0x98>)
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	f107 0110 	add.w	r1, r7, #16
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	f7fe fd7c 	bl	800574c <xQueueGenericSendFromISR>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3728      	adds	r7, #40	@ 0x28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20000fb4 	.word	0x20000fb4

08006c64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce4 <prvProcessExpiredTimer+0x80>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fb2f 	bl	80052e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d123      	bne.n	8006cd2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	18d1      	adds	r1, r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	6978      	ldr	r0, [r7, #20]
 8006c98:	f000 f8cc 	bl	8006e34 <prvInsertTimerInActiveList>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d017      	beq.n	8006cd2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	2100      	movs	r1, #0
 8006cac:	6978      	ldr	r0, [r7, #20]
 8006cae:	f7ff ff8b 	bl	8006bc8 <xTimerGenericCommand>
 8006cb2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	60fb      	str	r3, [r7, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	6978      	ldr	r0, [r7, #20]
 8006cd8:	4798      	blx	r3
}
 8006cda:	bf00      	nop
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000fac 	.word	0x20000fac

08006ce8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 f859 	bl	8006dac <prvGetNextExpireTime>
 8006cfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f805 	bl	8006d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d06:	f000 f8d7 	bl	8006eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d0a:	bf00      	nop
 8006d0c:	e7f0      	b.n	8006cf0 <prvTimerTask+0x8>
	...

08006d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d1a:	f7ff fa3b 	bl	8006194 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d1e:	f107 0308 	add.w	r3, r7, #8
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f866 	bl	8006df4 <prvSampleTimeNow>
 8006d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d130      	bne.n	8006d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <prvProcessTimerOrBlockTask+0x3c>
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d806      	bhi.n	8006d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d3e:	f7ff fa37 	bl	80061b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff8d 	bl	8006c64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d4a:	e024      	b.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d52:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <prvProcessTimerOrBlockTask+0x90>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d64:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <prvProcessTimerOrBlockTask+0x94>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7fe ffa1 	bl	8005cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d76:	f7ff fa1b 	bl	80061b0 <xTaskResumeAll>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d80:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <prvProcessTimerOrBlockTask+0x98>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
}
 8006d90:	e001      	b.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d92:	f7ff fa0d 	bl	80061b0 <xTaskResumeAll>
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000fb0 	.word	0x20000fb0
 8006da4:	20000fb4 	.word	0x20000fb4
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	@ (8006df0 <prvGetNextExpireTime+0x44>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bf0c      	ite	eq
 8006dbe:	2301      	moveq	r3, #1
 8006dc0:	2300      	movne	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d105      	bne.n	8006dde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd2:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <prvGetNextExpireTime+0x44>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e001      	b.n	8006de2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006de2:	68fb      	ldr	r3, [r7, #12]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000fac 	.word	0x20000fac

08006df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dfc:	f7ff fa76 	bl	80062ec <xTaskGetTickCount>
 8006e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e02:	4b0b      	ldr	r3, [pc, #44]	@ (8006e30 <prvSampleTimeNow+0x3c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d205      	bcs.n	8006e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e0c:	f000 f910 	bl	8007030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e002      	b.n	8006e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e1e:	4a04      	ldr	r2, [pc, #16]	@ (8006e30 <prvSampleTimeNow+0x3c>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e24:	68fb      	ldr	r3, [r7, #12]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000fbc 	.word	0x20000fbc

08006e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d812      	bhi.n	8006e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	e01b      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e6e:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <prvInsertTimerInActiveList+0x7c>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fe f9f9 	bl	8005270 <vListInsert>
 8006e7e:	e012      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d206      	bcs.n	8006e96 <prvInsertTimerInActiveList+0x62>
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e007      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <prvInsertTimerInActiveList+0x80>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe f9e5 	bl	8005270 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000fb0 	.word	0x20000fb0
 8006eb4:	20000fac 	.word	0x20000fac

08006eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	@ 0x38
 8006ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ebe:	e0a5      	b.n	800700c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da19      	bge.n	8006efa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	3304      	adds	r3, #4
 8006eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61fb      	str	r3, [r7, #28]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef0:	6850      	ldr	r0, [r2, #4]
 8006ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef4:	6892      	ldr	r2, [r2, #8]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f2c0 8085 	blt.w	800700c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	3304      	adds	r3, #4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe f9e4 	bl	80052e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f18:	463b      	mov	r3, r7
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff6a 	bl	8006df4 <prvSampleTimeNow>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d86c      	bhi.n	8007002 <prvProcessReceivedCommands+0x14a>
 8006f28:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <prvProcessReceivedCommands+0x78>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08007003 	.word	0x08007003
 8006f40:	08006fb7 	.word	0x08006fb7
 8006f44:	08006ff1 	.word	0x08006ff1
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f59 	.word	0x08006f59
 8006f50:	08007003 	.word	0x08007003
 8006f54:	08006fb7 	.word	0x08006fb7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	18d1      	adds	r1, r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f66:	f7ff ff65 	bl	8006e34 <prvInsertTimerInActiveList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d04a      	beq.n	8007006 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f76:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d142      	bne.n	8007006 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	441a      	add	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f92:	f7ff fe19 	bl	8006bc8 <xTimerGenericCommand>
 8006f96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d133      	bne.n	8007006 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	61bb      	str	r3, [r7, #24]
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	e7fd      	b.n	8006fb2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	617b      	str	r3, [r7, #20]
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	18d1      	adds	r1, r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fea:	f7ff ff23 	bl	8006e34 <prvInsertTimerInActiveList>
					break;
 8006fee:	e00d      	b.n	800700c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffc:	f000 fb78 	bl	80076f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007000:	e003      	b.n	800700a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007002:	bf00      	nop
 8007004:	e002      	b.n	800700c <prvProcessReceivedCommands+0x154>
					break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <prvProcessReceivedCommands+0x154>
					break;
 800700a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800700c:	4b07      	ldr	r3, [pc, #28]	@ (800702c <prvProcessReceivedCommands+0x174>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	1d39      	adds	r1, r7, #4
 8007012:	2200      	movs	r2, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fc35 	bl	8005884 <xQueueReceive>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	f47f af4f 	bne.w	8006ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3730      	adds	r7, #48	@ 0x30
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000fb4 	.word	0x20000fb4

08007030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007036:	e046      	b.n	80070c6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007038:	4b2c      	ldr	r3, [pc, #176]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007042:	4b2a      	ldr	r3, [pc, #168]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3304      	adds	r3, #4
 8007050:	4618      	mov	r0, r3
 8007052:	f7fe f945 	bl	80052e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d12f      	bne.n	80070c6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4413      	add	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d90e      	bls.n	8007096 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007084:	4b19      	ldr	r3, [pc, #100]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fe f8ee 	bl	8005270 <vListInsert>
 8007094:	e017      	b.n	80070c6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007096:	2300      	movs	r3, #0
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	2100      	movs	r1, #0
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fd91 	bl	8006bc8 <xTimerGenericCommand>
 80070a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <prvSwitchTimerLists+0x96>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	603b      	str	r3, [r7, #0]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070c6:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1b3      	bne.n	8007038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070d6:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <prvSwitchTimerLists+0xc0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a04      	ldr	r2, [pc, #16]	@ (80070ec <prvSwitchTimerLists+0xbc>)
 80070dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070de:	4a04      	ldr	r2, [pc, #16]	@ (80070f0 <prvSwitchTimerLists+0xc0>)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000fac 	.word	0x20000fac
 80070f0:	20000fb0 	.word	0x20000fb0

080070f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070fa:	f000 f92f 	bl	800735c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070fe:	4b15      	ldr	r3, [pc, #84]	@ (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d120      	bne.n	8007148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007106:	4814      	ldr	r0, [pc, #80]	@ (8007158 <prvCheckForValidListAndQueue+0x64>)
 8007108:	f7fe f864 	bl	80051d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800710c:	4813      	ldr	r0, [pc, #76]	@ (800715c <prvCheckForValidListAndQueue+0x68>)
 800710e:	f7fe f861 	bl	80051d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007112:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <prvCheckForValidListAndQueue+0x6c>)
 8007114:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <prvCheckForValidListAndQueue+0x64>)
 8007116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007118:	4b12      	ldr	r3, [pc, #72]	@ (8007164 <prvCheckForValidListAndQueue+0x70>)
 800711a:	4a10      	ldr	r2, [pc, #64]	@ (800715c <prvCheckForValidListAndQueue+0x68>)
 800711c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <prvCheckForValidListAndQueue+0x74>)
 8007124:	4a11      	ldr	r2, [pc, #68]	@ (800716c <prvCheckForValidListAndQueue+0x78>)
 8007126:	2110      	movs	r1, #16
 8007128:	200a      	movs	r0, #10
 800712a:	f7fe f96d 	bl	8005408 <xQueueGenericCreateStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	4a08      	ldr	r2, [pc, #32]	@ (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007132:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007134:	4b07      	ldr	r3, [pc, #28]	@ (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800713c:	4b05      	ldr	r3, [pc, #20]	@ (8007154 <prvCheckForValidListAndQueue+0x60>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	490b      	ldr	r1, [pc, #44]	@ (8007170 <prvCheckForValidListAndQueue+0x7c>)
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd90 	bl	8005c68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007148:	f000 f938 	bl	80073bc <vPortExitCritical>
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000fb4 	.word	0x20000fb4
 8007158:	20000f84 	.word	0x20000f84
 800715c:	20000f98 	.word	0x20000f98
 8007160:	20000fac 	.word	0x20000fac
 8007164:	20000fb0 	.word	0x20000fb0
 8007168:	20001060 	.word	0x20001060
 800716c:	20000fc0 	.word	0x20000fc0
 8007170:	0800c028 	.word	0x0800c028

08007174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3b04      	subs	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800718c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b04      	subs	r3, #4
 80071a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071a4:	4a08      	ldr	r2, [pc, #32]	@ (80071c8 <pxPortInitialiseStack+0x54>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b14      	subs	r3, #20
 80071ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b20      	subs	r3, #32
 80071ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	080071cd 	.word	0x080071cd

080071cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071d6:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <prvTaskExitError+0x54>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071de:	d00b      	beq.n	80071f8 <prvTaskExitError+0x2c>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60fb      	str	r3, [r7, #12]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <prvTaskExitError+0x28>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60bb      	str	r3, [r7, #8]
}
 800720a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800720c:	bf00      	nop
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0fc      	beq.n	800720e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr
 8007220:	20000010 	.word	0x20000010
	...

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	@ (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	f04e 0e0d 	orr.w	lr, lr, #13
 800724e:	4770      	bx	lr

08007250 <pxCurrentTCBConst2>:
 8007250:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007258:	4806      	ldr	r0, [pc, #24]	@ (8007274 <prvPortStartFirstTask+0x1c>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	b662      	cpsie	i
 8007264:	b661      	cpsie	f
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	df00      	svc	0
 8007270:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007272:	bf00      	nop
 8007274:	e000ed08 	.word	0xe000ed08

08007278 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800727e:	4b32      	ldr	r3, [pc, #200]	@ (8007348 <xPortStartScheduler+0xd0>)
 8007280:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	22ff      	movs	r2, #255	@ 0xff
 800728e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	4b2a      	ldr	r3, [pc, #168]	@ (800734c <xPortStartScheduler+0xd4>)
 80072a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072a8:	2207      	movs	r2, #7
 80072aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ac:	e009      	b.n	80072c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072ae:	4b28      	ldr	r3, [pc, #160]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4a26      	ldr	r2, [pc, #152]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	2b80      	cmp	r3, #128	@ 0x80
 80072cc:	d0ef      	beq.n	80072ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072ce:	4b20      	ldr	r3, [pc, #128]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1c3 0307 	rsb	r3, r3, #7
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d00b      	beq.n	80072f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60bb      	str	r3, [r7, #8]
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	e7fd      	b.n	80072ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072f2:	4b17      	ldr	r3, [pc, #92]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	4a15      	ldr	r2, [pc, #84]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072fc:	4b14      	ldr	r3, [pc, #80]	@ (8007350 <xPortStartScheduler+0xd8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007304:	4a12      	ldr	r2, [pc, #72]	@ (8007350 <xPortStartScheduler+0xd8>)
 8007306:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <xPortStartScheduler+0xdc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a0f      	ldr	r2, [pc, #60]	@ (8007354 <xPortStartScheduler+0xdc>)
 8007316:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800731a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800731c:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <xPortStartScheduler+0xdc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0c      	ldr	r2, [pc, #48]	@ (8007354 <xPortStartScheduler+0xdc>)
 8007322:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007326:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007328:	f000 f8b8 	bl	800749c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800732c:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <xPortStartScheduler+0xe0>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007332:	f7ff ff91 	bl	8007258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007336:	f7ff f8a7 	bl	8006488 <vTaskSwitchContext>
	prvTaskExitError();
 800733a:	f7ff ff47 	bl	80071cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000e400 	.word	0xe000e400
 800734c:	200010b0 	.word	0x200010b0
 8007350:	200010b4 	.word	0x200010b4
 8007354:	e000ed20 	.word	0xe000ed20
 8007358:	20000010 	.word	0x20000010

0800735c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	607b      	str	r3, [r7, #4]
}
 8007374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007376:	4b0f      	ldr	r3, [pc, #60]	@ (80073b4 <vPortEnterCritical+0x58>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	4a0d      	ldr	r2, [pc, #52]	@ (80073b4 <vPortEnterCritical+0x58>)
 800737e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <vPortEnterCritical+0x58>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d110      	bne.n	80073aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007388:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <vPortEnterCritical+0x5c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <vPortEnterCritical+0x4e>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	603b      	str	r3, [r7, #0]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <vPortEnterCritical+0x4a>
	}
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr
 80073b4:	20000010 	.word	0x20000010
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073c2:	4b12      	ldr	r3, [pc, #72]	@ (800740c <vPortExitCritical+0x50>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <vPortExitCritical+0x26>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	607b      	str	r3, [r7, #4]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <vPortExitCritical+0x50>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4a08      	ldr	r2, [pc, #32]	@ (800740c <vPortExitCritical+0x50>)
 80073ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073ec:	4b07      	ldr	r3, [pc, #28]	@ (800740c <vPortExitCritical+0x50>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <vPortExitCritical+0x44>
 80073f4:	2300      	movs	r3, #0
 80073f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f383 8811 	msr	BASEPRI, r3
}
 80073fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000010 	.word	0x20000010

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b0d      	ldr	r3, [pc, #52]	@ (8007450 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007420:	6010      	str	r0, [r2, #0]
 8007422:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007426:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800742a:	f380 8811 	msr	BASEPRI, r0
 800742e:	f7ff f82b 	bl	8006488 <vTaskSwitchContext>
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8811 	msr	BASEPRI, r0
 800743a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007446:	f380 8809 	msr	PSP, r0
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	4770      	bx	lr

08007450 <pxCurrentTCBConst>:
 8007450:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007472:	f7fe ff49 	bl	8006308 <xTaskIncrementTick>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800747c:	4b06      	ldr	r3, [pc, #24]	@ (8007498 <SysTick_Handler+0x40>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	f383 8811 	msr	BASEPRI, r3
}
 800748e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <vPortSetupTimerInterrupt+0x30>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074a6:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <vPortSetupTimerInterrupt+0x34>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <vPortSetupTimerInterrupt+0x38>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a09      	ldr	r2, [pc, #36]	@ (80074d8 <vPortSetupTimerInterrupt+0x3c>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	4a08      	ldr	r2, [pc, #32]	@ (80074dc <vPortSetupTimerInterrupt+0x40>)
 80074ba:	3b01      	subs	r3, #1
 80074bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074be:	4b03      	ldr	r3, [pc, #12]	@ (80074cc <vPortSetupTimerInterrupt+0x30>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr
 80074cc:	e000e010 	.word	0xe000e010
 80074d0:	e000e018 	.word	0xe000e018
 80074d4:	20000004 	.word	0x20000004
 80074d8:	10624dd3 	.word	0x10624dd3
 80074dc:	e000e014 	.word	0xe000e014

080074e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074e6:	f3ef 8305 	mrs	r3, IPSR
 80074ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d915      	bls.n	800751e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074f2:	4a17      	ldr	r2, [pc, #92]	@ (8007550 <vPortValidateInterruptPriority+0x70>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074fc:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <vPortValidateInterruptPriority+0x74>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	7afa      	ldrb	r2, [r7, #11]
 8007502:	429a      	cmp	r2, r3
 8007504:	d20b      	bcs.n	800751e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	607b      	str	r3, [r7, #4]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800751e:	4b0e      	ldr	r3, [pc, #56]	@ (8007558 <vPortValidateInterruptPriority+0x78>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007526:	4b0d      	ldr	r3, [pc, #52]	@ (800755c <vPortValidateInterruptPriority+0x7c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d90b      	bls.n	8007546 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	603b      	str	r3, [r7, #0]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <vPortValidateInterruptPriority+0x62>
	}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr
 8007550:	e000e3f0 	.word	0xe000e3f0
 8007554:	200010b0 	.word	0x200010b0
 8007558:	e000ed0c 	.word	0xe000ed0c
 800755c:	200010b4 	.word	0x200010b4

08007560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800756c:	f7fe fe12 	bl	8006194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007570:	4b5a      	ldr	r3, [pc, #360]	@ (80076dc <pvPortMalloc+0x17c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007578:	f000 f916 	bl	80077a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800757c:	4b58      	ldr	r3, [pc, #352]	@ (80076e0 <pvPortMalloc+0x180>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	f040 8090 	bne.w	80076aa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007590:	2208      	movs	r2, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d015      	beq.n	80075ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	3308      	adds	r3, #8
 80075aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <pvPortMalloc+0x6e>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d06a      	beq.n	80076aa <pvPortMalloc+0x14a>
 80075d4:	4b43      	ldr	r3, [pc, #268]	@ (80076e4 <pvPortMalloc+0x184>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d865      	bhi.n	80076aa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075de:	4b42      	ldr	r3, [pc, #264]	@ (80076e8 <pvPortMalloc+0x188>)
 80075e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075e2:	4b41      	ldr	r3, [pc, #260]	@ (80076e8 <pvPortMalloc+0x188>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e8:	e004      	b.n	80075f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d903      	bls.n	8007606 <pvPortMalloc+0xa6>
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f1      	bne.n	80075ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007606:	4b35      	ldr	r3, [pc, #212]	@ (80076dc <pvPortMalloc+0x17c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800760c:	429a      	cmp	r2, r3
 800760e:	d04c      	beq.n	80076aa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2208      	movs	r2, #8
 8007616:	4413      	add	r3, r2
 8007618:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	2308      	movs	r3, #8
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	429a      	cmp	r2, r3
 8007630:	d920      	bls.n	8007674 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4413      	add	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <pvPortMalloc+0xfc>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	613b      	str	r3, [r7, #16]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800766e:	69b8      	ldr	r0, [r7, #24]
 8007670:	f000 f8fc 	bl	800786c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007674:	4b1b      	ldr	r3, [pc, #108]	@ (80076e4 <pvPortMalloc+0x184>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	4a19      	ldr	r2, [pc, #100]	@ (80076e4 <pvPortMalloc+0x184>)
 8007680:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007682:	4b18      	ldr	r3, [pc, #96]	@ (80076e4 <pvPortMalloc+0x184>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b19      	ldr	r3, [pc, #100]	@ (80076ec <pvPortMalloc+0x18c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d203      	bcs.n	8007696 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800768e:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <pvPortMalloc+0x184>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <pvPortMalloc+0x18c>)
 8007694:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4b11      	ldr	r3, [pc, #68]	@ (80076e0 <pvPortMalloc+0x180>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	431a      	orrs	r2, r3
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076aa:	f7fe fd81 	bl	80061b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <pvPortMalloc+0x170>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <pvPortMalloc+0x16c>
	return pvReturn;
 80076d0:	69fb      	ldr	r3, [r7, #28]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3728      	adds	r7, #40	@ 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20001cc0 	.word	0x20001cc0
 80076e0:	20001ccc 	.word	0x20001ccc
 80076e4:	20001cc4 	.word	0x20001cc4
 80076e8:	20001cb8 	.word	0x20001cb8
 80076ec:	20001cc8 	.word	0x20001cc8

080076f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04a      	beq.n	8007798 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007702:	2308      	movs	r3, #8
 8007704:	425b      	negs	r3, r3
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b22      	ldr	r3, [pc, #136]	@ (80077a0 <vPortFree+0xb0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <vPortFree+0x46>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <vPortFree+0x66>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60bb      	str	r3, [r7, #8]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <vPortFree+0xb0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d019      	beq.n	8007798 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d115      	bne.n	8007798 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <vPortFree+0xb0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	43db      	mvns	r3, r3
 8007776:	401a      	ands	r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800777c:	f7fe fd0a 	bl	8006194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <vPortFree+0xb4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4413      	add	r3, r2
 800778a:	4a06      	ldr	r2, [pc, #24]	@ (80077a4 <vPortFree+0xb4>)
 800778c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f000 f86c 	bl	800786c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007794:	f7fe fd0c 	bl	80061b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007798:	bf00      	nop
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20001ccc 	.word	0x20001ccc
 80077a4:	20001cc4 	.word	0x20001cc4

080077a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80077b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077b4:	4b27      	ldr	r3, [pc, #156]	@ (8007854 <prvHeapInit+0xac>)
 80077b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3307      	adds	r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007854 <prvHeapInit+0xac>)
 80077d8:	4413      	add	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <prvHeapInit+0xb0>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007858 <prvHeapInit+0xb0>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077f4:	2208      	movs	r2, #8
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0307 	bic.w	r3, r3, #7
 8007802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a15      	ldr	r2, [pc, #84]	@ (800785c <prvHeapInit+0xb4>)
 8007808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800780a:	4b14      	ldr	r3, [pc, #80]	@ (800785c <prvHeapInit+0xb4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <prvHeapInit+0xb4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007828:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <prvHeapInit+0xb4>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	4a0a      	ldr	r2, [pc, #40]	@ (8007860 <prvHeapInit+0xb8>)
 8007836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a09      	ldr	r2, [pc, #36]	@ (8007864 <prvHeapInit+0xbc>)
 800783e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007840:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <prvHeapInit+0xc0>)
 8007842:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007846:	601a      	str	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	200010b8 	.word	0x200010b8
 8007858:	20001cb8 	.word	0x20001cb8
 800785c:	20001cc0 	.word	0x20001cc0
 8007860:	20001cc8 	.word	0x20001cc8
 8007864:	20001cc4 	.word	0x20001cc4
 8007868:	20001ccc 	.word	0x20001ccc

0800786c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007874:	4b27      	ldr	r3, [pc, #156]	@ (8007914 <prvInsertBlockIntoFreeList+0xa8>)
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <prvInsertBlockIntoFreeList+0x14>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d8f7      	bhi.n	800787a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4413      	add	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	429a      	cmp	r2, r3
 800789a:	d108      	bne.n	80078ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	441a      	add	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d118      	bne.n	80078f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <prvInsertBlockIntoFreeList+0xac>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d00d      	beq.n	80078ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e008      	b.n	80078fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <prvInsertBlockIntoFreeList+0xac>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e003      	b.n	80078fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d002      	beq.n	800790a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	20001cb8 	.word	0x20001cb8
 8007918:	20001cc0 	.word	0x20001cc0

0800791c <__cvt>:
 800791c:	2b00      	cmp	r3, #0
 800791e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007922:	461d      	mov	r5, r3
 8007924:	bfbb      	ittet	lt
 8007926:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800792a:	461d      	movlt	r5, r3
 800792c:	2300      	movge	r3, #0
 800792e:	232d      	movlt	r3, #45	@ 0x2d
 8007930:	b088      	sub	sp, #32
 8007932:	4614      	mov	r4, r2
 8007934:	bfb8      	it	lt
 8007936:	4614      	movlt	r4, r2
 8007938:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800793a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800793c:	7013      	strb	r3, [r2, #0]
 800793e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007940:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007944:	f023 0820 	bic.w	r8, r3, #32
 8007948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800794c:	d005      	beq.n	800795a <__cvt+0x3e>
 800794e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007952:	d100      	bne.n	8007956 <__cvt+0x3a>
 8007954:	3601      	adds	r6, #1
 8007956:	2302      	movs	r3, #2
 8007958:	e000      	b.n	800795c <__cvt+0x40>
 800795a:	2303      	movs	r3, #3
 800795c:	aa07      	add	r2, sp, #28
 800795e:	9204      	str	r2, [sp, #16]
 8007960:	aa06      	add	r2, sp, #24
 8007962:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007966:	e9cd 3600 	strd	r3, r6, [sp]
 800796a:	4622      	mov	r2, r4
 800796c:	462b      	mov	r3, r5
 800796e:	f001 f88f 	bl	8008a90 <_dtoa_r>
 8007972:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007976:	4607      	mov	r7, r0
 8007978:	d119      	bne.n	80079ae <__cvt+0x92>
 800797a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d50e      	bpl.n	800799e <__cvt+0x82>
 8007980:	eb00 0906 	add.w	r9, r0, r6
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4620      	mov	r0, r4
 800798a:	4629      	mov	r1, r5
 800798c:	f7f9 f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8007990:	b108      	cbz	r0, 8007996 <__cvt+0x7a>
 8007992:	f8cd 901c 	str.w	r9, [sp, #28]
 8007996:	2230      	movs	r2, #48	@ 0x30
 8007998:	9b07      	ldr	r3, [sp, #28]
 800799a:	454b      	cmp	r3, r9
 800799c:	d31e      	bcc.n	80079dc <__cvt+0xc0>
 800799e:	4638      	mov	r0, r7
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80079a4:	1bdb      	subs	r3, r3, r7
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	b008      	add	sp, #32
 80079aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079b2:	eb00 0906 	add.w	r9, r0, r6
 80079b6:	d1e5      	bne.n	8007984 <__cvt+0x68>
 80079b8:	7803      	ldrb	r3, [r0, #0]
 80079ba:	2b30      	cmp	r3, #48	@ 0x30
 80079bc:	d10a      	bne.n	80079d4 <__cvt+0xb8>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f8 ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80079ca:	b918      	cbnz	r0, 80079d4 <__cvt+0xb8>
 80079cc:	f1c6 0601 	rsb	r6, r6, #1
 80079d0:	f8ca 6000 	str.w	r6, [sl]
 80079d4:	f8da 3000 	ldr.w	r3, [sl]
 80079d8:	4499      	add	r9, r3
 80079da:	e7d3      	b.n	8007984 <__cvt+0x68>
 80079dc:	1c59      	adds	r1, r3, #1
 80079de:	9107      	str	r1, [sp, #28]
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e7d9      	b.n	8007998 <__cvt+0x7c>

080079e4 <__exponent>:
 80079e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079e6:	2900      	cmp	r1, #0
 80079e8:	bfb6      	itet	lt
 80079ea:	232d      	movlt	r3, #45	@ 0x2d
 80079ec:	232b      	movge	r3, #43	@ 0x2b
 80079ee:	4249      	neglt	r1, r1
 80079f0:	2909      	cmp	r1, #9
 80079f2:	7002      	strb	r2, [r0, #0]
 80079f4:	7043      	strb	r3, [r0, #1]
 80079f6:	dd29      	ble.n	8007a4c <__exponent+0x68>
 80079f8:	f10d 0307 	add.w	r3, sp, #7
 80079fc:	461d      	mov	r5, r3
 80079fe:	270a      	movs	r7, #10
 8007a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a04:	461a      	mov	r2, r3
 8007a06:	fb07 1416 	mls	r4, r7, r6, r1
 8007a0a:	3430      	adds	r4, #48	@ 0x30
 8007a0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a10:	460c      	mov	r4, r1
 8007a12:	2c63      	cmp	r4, #99	@ 0x63
 8007a14:	4631      	mov	r1, r6
 8007a16:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007a1a:	dcf1      	bgt.n	8007a00 <__exponent+0x1c>
 8007a1c:	3130      	adds	r1, #48	@ 0x30
 8007a1e:	1e94      	subs	r4, r2, #2
 8007a20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a24:	4623      	mov	r3, r4
 8007a26:	1c41      	adds	r1, r0, #1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	d30a      	bcc.n	8007a42 <__exponent+0x5e>
 8007a2c:	f10d 0309 	add.w	r3, sp, #9
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	42ac      	cmp	r4, r5
 8007a34:	bf88      	it	hi
 8007a36:	2300      	movhi	r3, #0
 8007a38:	3302      	adds	r3, #2
 8007a3a:	4403      	add	r3, r0
 8007a3c:	1a18      	subs	r0, r3, r0
 8007a3e:	b003      	add	sp, #12
 8007a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a4a:	e7ed      	b.n	8007a28 <__exponent+0x44>
 8007a4c:	2330      	movs	r3, #48	@ 0x30
 8007a4e:	3130      	adds	r1, #48	@ 0x30
 8007a50:	7083      	strb	r3, [r0, #2]
 8007a52:	70c1      	strb	r1, [r0, #3]
 8007a54:	1d03      	adds	r3, r0, #4
 8007a56:	e7f1      	b.n	8007a3c <__exponent+0x58>

08007a58 <_printf_float>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	b091      	sub	sp, #68	@ 0x44
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007a64:	4616      	mov	r6, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	4605      	mov	r5, r0
 8007a6a:	f000 fef1 	bl	8008850 <_localeconv_r>
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	9308      	str	r3, [sp, #32]
 8007a74:	f7f8 fb6c 	bl	8000150 <strlen>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	f103 0208 	add.w	r2, r3, #8
 8007a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a90:	f8d4 b000 	ldr.w	fp, [r4]
 8007a94:	f8c8 2000 	str.w	r2, [r8]
 8007a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8007d24 <_printf_float+0x2cc>)
 8007ab4:	f7f8 ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8007ab8:	bb70      	cbnz	r0, 8007b18 <_printf_float+0xc0>
 8007aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac2:	4b98      	ldr	r3, [pc, #608]	@ (8007d24 <_printf_float+0x2cc>)
 8007ac4:	f7f8 ff84 	bl	80009d0 <__aeabi_dcmple>
 8007ac8:	bb30      	cbnz	r0, 8007b18 <_printf_float+0xc0>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 ff73 	bl	80009bc <__aeabi_dcmplt>
 8007ad6:	b110      	cbz	r0, 8007ade <_printf_float+0x86>
 8007ad8:	232d      	movs	r3, #45	@ 0x2d
 8007ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ade:	4a92      	ldr	r2, [pc, #584]	@ (8007d28 <_printf_float+0x2d0>)
 8007ae0:	4b92      	ldr	r3, [pc, #584]	@ (8007d2c <_printf_float+0x2d4>)
 8007ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ae6:	bf94      	ite	ls
 8007ae8:	4690      	movls	r8, r2
 8007aea:	4698      	movhi	r8, r3
 8007aec:	2303      	movs	r3, #3
 8007aee:	f04f 0900 	mov.w	r9, #0
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	f02b 0304 	bic.w	r3, fp, #4
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	4633      	mov	r3, r6
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	9700      	str	r7, [sp, #0]
 8007b02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007b04:	f000 f9d4 	bl	8007eb0 <_printf_common>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f040 8090 	bne.w	8007c2e <_printf_float+0x1d6>
 8007b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b12:	b011      	add	sp, #68	@ 0x44
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f8 ff74 	bl	8000a0c <__aeabi_dcmpun>
 8007b24:	b148      	cbz	r0, 8007b3a <_printf_float+0xe2>
 8007b26:	464b      	mov	r3, r9
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bfb8      	it	lt
 8007b2c:	232d      	movlt	r3, #45	@ 0x2d
 8007b2e:	4a80      	ldr	r2, [pc, #512]	@ (8007d30 <_printf_float+0x2d8>)
 8007b30:	bfb8      	it	lt
 8007b32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b36:	4b7f      	ldr	r3, [pc, #508]	@ (8007d34 <_printf_float+0x2dc>)
 8007b38:	e7d3      	b.n	8007ae2 <_printf_float+0x8a>
 8007b3a:	6863      	ldr	r3, [r4, #4]
 8007b3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	d13f      	bne.n	8007bc4 <_printf_float+0x16c>
 8007b44:	2306      	movs	r3, #6
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	9206      	str	r2, [sp, #24]
 8007b52:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007b58:	aa0d      	add	r2, sp, #52	@ 0x34
 8007b5a:	9203      	str	r2, [sp, #12]
 8007b5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007b60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	4642      	mov	r2, r8
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007b70:	f7ff fed4 	bl	800791c <__cvt>
 8007b74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b76:	4680      	mov	r8, r0
 8007b78:	2947      	cmp	r1, #71	@ 0x47
 8007b7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007b7c:	d128      	bne.n	8007bd0 <_printf_float+0x178>
 8007b7e:	1cc8      	adds	r0, r1, #3
 8007b80:	db02      	blt.n	8007b88 <_printf_float+0x130>
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	4299      	cmp	r1, r3
 8007b86:	dd40      	ble.n	8007c0a <_printf_float+0x1b2>
 8007b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b90:	4652      	mov	r2, sl
 8007b92:	3901      	subs	r1, #1
 8007b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b98:	910d      	str	r1, [sp, #52]	@ 0x34
 8007b9a:	f7ff ff23 	bl	80079e4 <__exponent>
 8007b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ba0:	4681      	mov	r9, r0
 8007ba2:	1813      	adds	r3, r2, r0
 8007ba4:	2a01      	cmp	r2, #1
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	dc02      	bgt.n	8007bb0 <_printf_float+0x158>
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	07d2      	lsls	r2, r2, #31
 8007bae:	d501      	bpl.n	8007bb4 <_printf_float+0x15c>
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d09e      	beq.n	8007afa <_printf_float+0xa2>
 8007bbc:	232d      	movs	r3, #45	@ 0x2d
 8007bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bc2:	e79a      	b.n	8007afa <_printf_float+0xa2>
 8007bc4:	2947      	cmp	r1, #71	@ 0x47
 8007bc6:	d1bf      	bne.n	8007b48 <_printf_float+0xf0>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1bd      	bne.n	8007b48 <_printf_float+0xf0>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e7ba      	b.n	8007b46 <_printf_float+0xee>
 8007bd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bd4:	d9dc      	bls.n	8007b90 <_printf_float+0x138>
 8007bd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007bda:	d118      	bne.n	8007c0e <_printf_float+0x1b6>
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	6863      	ldr	r3, [r4, #4]
 8007be0:	dd0b      	ble.n	8007bfa <_printf_float+0x1a2>
 8007be2:	6121      	str	r1, [r4, #16]
 8007be4:	b913      	cbnz	r3, 8007bec <_printf_float+0x194>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	07d0      	lsls	r0, r2, #31
 8007bea:	d502      	bpl.n	8007bf2 <_printf_float+0x19a>
 8007bec:	3301      	adds	r3, #1
 8007bee:	440b      	add	r3, r1
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	f04f 0900 	mov.w	r9, #0
 8007bf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bf8:	e7dc      	b.n	8007bb4 <_printf_float+0x15c>
 8007bfa:	b913      	cbnz	r3, 8007c02 <_printf_float+0x1aa>
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	07d2      	lsls	r2, r2, #31
 8007c00:	d501      	bpl.n	8007c06 <_printf_float+0x1ae>
 8007c02:	3302      	adds	r3, #2
 8007c04:	e7f4      	b.n	8007bf0 <_printf_float+0x198>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e7f2      	b.n	8007bf0 <_printf_float+0x198>
 8007c0a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c10:	4299      	cmp	r1, r3
 8007c12:	db05      	blt.n	8007c20 <_printf_float+0x1c8>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	6121      	str	r1, [r4, #16]
 8007c18:	07d8      	lsls	r0, r3, #31
 8007c1a:	d5ea      	bpl.n	8007bf2 <_printf_float+0x19a>
 8007c1c:	1c4b      	adds	r3, r1, #1
 8007c1e:	e7e7      	b.n	8007bf0 <_printf_float+0x198>
 8007c20:	2900      	cmp	r1, #0
 8007c22:	bfcc      	ite	gt
 8007c24:	2201      	movgt	r2, #1
 8007c26:	f1c1 0202 	rsble	r2, r1, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	e7e0      	b.n	8007bf0 <_printf_float+0x198>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	055a      	lsls	r2, r3, #21
 8007c32:	d407      	bmi.n	8007c44 <_printf_float+0x1ec>
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	4642      	mov	r2, r8
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d12b      	bne.n	8007c9a <_printf_float+0x242>
 8007c42:	e764      	b.n	8007b0e <_printf_float+0xb6>
 8007c44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c48:	f240 80dc 	bls.w	8007e04 <_printf_float+0x3ac>
 8007c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	f7f8 fea8 	bl	80009a8 <__aeabi_dcmpeq>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d033      	beq.n	8007cc4 <_printf_float+0x26c>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	4a35      	ldr	r2, [pc, #212]	@ (8007d38 <_printf_float+0x2e0>)
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	f43f af51 	beq.w	8007b0e <_printf_float+0xb6>
 8007c6c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007c70:	4543      	cmp	r3, r8
 8007c72:	db02      	blt.n	8007c7a <_printf_float+0x222>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	07d8      	lsls	r0, r3, #31
 8007c78:	d50f      	bpl.n	8007c9a <_printf_float+0x242>
 8007c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f af42 	beq.w	8007b0e <_printf_float+0xb6>
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007c92:	f104 0a1a 	add.w	sl, r4, #26
 8007c96:	45c8      	cmp	r8, r9
 8007c98:	dc09      	bgt.n	8007cae <_printf_float+0x256>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	079b      	lsls	r3, r3, #30
 8007c9e:	f100 8102 	bmi.w	8007ea6 <_printf_float+0x44e>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e731      	b.n	8007b12 <_printf_float+0xba>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f af28 	beq.w	8007b0e <_printf_float+0xb6>
 8007cbe:	f109 0901 	add.w	r9, r9, #1
 8007cc2:	e7e8      	b.n	8007c96 <_printf_float+0x23e>
 8007cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dc38      	bgt.n	8007d3c <_printf_float+0x2e4>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4a19      	ldr	r2, [pc, #100]	@ (8007d38 <_printf_float+0x2e0>)
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f af1a 	beq.w	8007b0e <_printf_float+0xb6>
 8007cda:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007cde:	ea59 0303 	orrs.w	r3, r9, r3
 8007ce2:	d102      	bne.n	8007cea <_printf_float+0x292>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	07d9      	lsls	r1, r3, #31
 8007ce8:	d5d7      	bpl.n	8007c9a <_printf_float+0x242>
 8007cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f43f af0a 	beq.w	8007b0e <_printf_float+0xb6>
 8007cfa:	f04f 0a00 	mov.w	sl, #0
 8007cfe:	f104 0b1a 	add.w	fp, r4, #26
 8007d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d04:	425b      	negs	r3, r3
 8007d06:	4553      	cmp	r3, sl
 8007d08:	dc01      	bgt.n	8007d0e <_printf_float+0x2b6>
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	e793      	b.n	8007c36 <_printf_float+0x1de>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	465a      	mov	r2, fp
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f43f aef8 	beq.w	8007b0e <_printf_float+0xb6>
 8007d1e:	f10a 0a01 	add.w	sl, sl, #1
 8007d22:	e7ee      	b.n	8007d02 <_printf_float+0x2aa>
 8007d24:	7fefffff 	.word	0x7fefffff
 8007d28:	0800c0ea 	.word	0x0800c0ea
 8007d2c:	0800c0ee 	.word	0x0800c0ee
 8007d30:	0800c0f2 	.word	0x0800c0f2
 8007d34:	0800c0f6 	.word	0x0800c0f6
 8007d38:	0800c0fa 	.word	0x0800c0fa
 8007d3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d3e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007d42:	4553      	cmp	r3, sl
 8007d44:	bfa8      	it	ge
 8007d46:	4653      	movge	r3, sl
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	4699      	mov	r9, r3
 8007d4c:	dc36      	bgt.n	8007dbc <_printf_float+0x364>
 8007d4e:	f04f 0b00 	mov.w	fp, #0
 8007d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d56:	f104 021a 	add.w	r2, r4, #26
 8007d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d5e:	eba3 0309 	sub.w	r3, r3, r9
 8007d62:	455b      	cmp	r3, fp
 8007d64:	dc31      	bgt.n	8007dca <_printf_float+0x372>
 8007d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d68:	459a      	cmp	sl, r3
 8007d6a:	dc3a      	bgt.n	8007de2 <_printf_float+0x38a>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d437      	bmi.n	8007de2 <_printf_float+0x38a>
 8007d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d74:	ebaa 0903 	sub.w	r9, sl, r3
 8007d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d7e:	4599      	cmp	r9, r3
 8007d80:	bfa8      	it	ge
 8007d82:	4699      	movge	r9, r3
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	dc33      	bgt.n	8007df2 <_printf_float+0x39a>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d92:	f104 0b1a 	add.w	fp, r4, #26
 8007d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d98:	ebaa 0303 	sub.w	r3, sl, r3
 8007d9c:	eba3 0309 	sub.w	r3, r3, r9
 8007da0:	4543      	cmp	r3, r8
 8007da2:	f77f af7a 	ble.w	8007c9a <_printf_float+0x242>
 8007da6:	2301      	movs	r3, #1
 8007da8:	465a      	mov	r2, fp
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	f43f aeac 	beq.w	8007b0e <_printf_float+0xb6>
 8007db6:	f108 0801 	add.w	r8, r8, #1
 8007dba:	e7ec      	b.n	8007d96 <_printf_float+0x33e>
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1c2      	bne.n	8007d4e <_printf_float+0x2f6>
 8007dc8:	e6a1      	b.n	8007b0e <_printf_float+0xb6>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f43f ae9a 	beq.w	8007b0e <_printf_float+0xb6>
 8007dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ddc:	f10b 0b01 	add.w	fp, fp, #1
 8007de0:	e7bb      	b.n	8007d5a <_printf_float+0x302>
 8007de2:	4631      	mov	r1, r6
 8007de4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	d1c0      	bne.n	8007d72 <_printf_float+0x31a>
 8007df0:	e68d      	b.n	8007b0e <_printf_float+0xb6>
 8007df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007df4:	464b      	mov	r3, r9
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	4442      	add	r2, r8
 8007dfc:	47b8      	blx	r7
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d1c3      	bne.n	8007d8a <_printf_float+0x332>
 8007e02:	e684      	b.n	8007b0e <_printf_float+0xb6>
 8007e04:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007e08:	f1ba 0f01 	cmp.w	sl, #1
 8007e0c:	dc01      	bgt.n	8007e12 <_printf_float+0x3ba>
 8007e0e:	07db      	lsls	r3, r3, #31
 8007e10:	d536      	bpl.n	8007e80 <_printf_float+0x428>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4642      	mov	r2, r8
 8007e16:	4631      	mov	r1, r6
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b8      	blx	r7
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f43f ae76 	beq.w	8007b0e <_printf_float+0xb6>
 8007e22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f43f ae6e 	beq.w	8007b0e <_printf_float+0xb6>
 8007e32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e36:	2200      	movs	r2, #0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e3e:	f7f8 fdb3 	bl	80009a8 <__aeabi_dcmpeq>
 8007e42:	b9c0      	cbnz	r0, 8007e76 <_printf_float+0x41e>
 8007e44:	4653      	mov	r3, sl
 8007e46:	f108 0201 	add.w	r2, r8, #1
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d10c      	bne.n	8007e6e <_printf_float+0x416>
 8007e54:	e65b      	b.n	8007b0e <_printf_float+0xb6>
 8007e56:	2301      	movs	r3, #1
 8007e58:	465a      	mov	r2, fp
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae54 	beq.w	8007b0e <_printf_float+0xb6>
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	45d0      	cmp	r8, sl
 8007e6c:	dbf3      	blt.n	8007e56 <_printf_float+0x3fe>
 8007e6e:	464b      	mov	r3, r9
 8007e70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e74:	e6e0      	b.n	8007c38 <_printf_float+0x1e0>
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	f104 0b1a 	add.w	fp, r4, #26
 8007e7e:	e7f4      	b.n	8007e6a <_printf_float+0x412>
 8007e80:	2301      	movs	r3, #1
 8007e82:	4642      	mov	r2, r8
 8007e84:	e7e1      	b.n	8007e4a <_printf_float+0x3f2>
 8007e86:	2301      	movs	r3, #1
 8007e88:	464a      	mov	r2, r9
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f ae3c 	beq.w	8007b0e <_printf_float+0xb6>
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	68e3      	ldr	r3, [r4, #12]
 8007e9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e9e:	1a5b      	subs	r3, r3, r1
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	dcf0      	bgt.n	8007e86 <_printf_float+0x42e>
 8007ea4:	e6fd      	b.n	8007ca2 <_printf_float+0x24a>
 8007ea6:	f04f 0800 	mov.w	r8, #0
 8007eaa:	f104 0919 	add.w	r9, r4, #25
 8007eae:	e7f4      	b.n	8007e9a <_printf_float+0x442>

08007eb0 <_printf_common>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	4698      	mov	r8, r3
 8007eb8:	688a      	ldr	r2, [r1, #8]
 8007eba:	690b      	ldr	r3, [r1, #16]
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	bfb8      	it	lt
 8007ec2:	4613      	movlt	r3, r2
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ed0:	b10a      	cbz	r2, 8007ed6 <_printf_common+0x26>
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	6033      	str	r3, [r6, #0]
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	0699      	lsls	r1, r3, #26
 8007eda:	bf42      	ittt	mi
 8007edc:	6833      	ldrmi	r3, [r6, #0]
 8007ede:	3302      	addmi	r3, #2
 8007ee0:	6033      	strmi	r3, [r6, #0]
 8007ee2:	6825      	ldr	r5, [r4, #0]
 8007ee4:	f015 0506 	ands.w	r5, r5, #6
 8007ee8:	d106      	bne.n	8007ef8 <_printf_common+0x48>
 8007eea:	f104 0a19 	add.w	sl, r4, #25
 8007eee:	68e3      	ldr	r3, [r4, #12]
 8007ef0:	6832      	ldr	r2, [r6, #0]
 8007ef2:	1a9b      	subs	r3, r3, r2
 8007ef4:	42ab      	cmp	r3, r5
 8007ef6:	dc2b      	bgt.n	8007f50 <_printf_common+0xa0>
 8007ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	3b00      	subs	r3, #0
 8007f00:	bf18      	it	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	0692      	lsls	r2, r2, #26
 8007f06:	d430      	bmi.n	8007f6a <_printf_common+0xba>
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f10:	47c8      	blx	r9
 8007f12:	3001      	adds	r0, #1
 8007f14:	d023      	beq.n	8007f5e <_printf_common+0xae>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	f003 0306 	and.w	r3, r3, #6
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	bf14      	ite	ne
 8007f22:	2500      	movne	r5, #0
 8007f24:	6833      	ldreq	r3, [r6, #0]
 8007f26:	f04f 0600 	mov.w	r6, #0
 8007f2a:	bf08      	it	eq
 8007f2c:	68e5      	ldreq	r5, [r4, #12]
 8007f2e:	f104 041a 	add.w	r4, r4, #26
 8007f32:	bf08      	it	eq
 8007f34:	1aed      	subeq	r5, r5, r3
 8007f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f3a:	bf08      	it	eq
 8007f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfc4      	itt	gt
 8007f44:	1a9b      	subgt	r3, r3, r2
 8007f46:	18ed      	addgt	r5, r5, r3
 8007f48:	42b5      	cmp	r5, r6
 8007f4a:	d11a      	bne.n	8007f82 <_printf_common+0xd2>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e008      	b.n	8007f62 <_printf_common+0xb2>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	4641      	mov	r1, r8
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c8      	blx	r9
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d103      	bne.n	8007f66 <_printf_common+0xb6>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	3501      	adds	r5, #1
 8007f68:	e7c1      	b.n	8007eee <_printf_common+0x3e>
 8007f6a:	2030      	movs	r0, #48	@ 0x30
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f78:	4422      	add	r2, r4
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f80:	e7c2      	b.n	8007f08 <_printf_common+0x58>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4622      	mov	r2, r4
 8007f86:	4641      	mov	r1, r8
 8007f88:	4638      	mov	r0, r7
 8007f8a:	47c8      	blx	r9
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d0e6      	beq.n	8007f5e <_printf_common+0xae>
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7d9      	b.n	8007f48 <_printf_common+0x98>

08007f94 <_printf_i>:
 8007f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	7e0f      	ldrb	r7, [r1, #24]
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	2f78      	cmp	r7, #120	@ 0x78
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	469a      	mov	sl, r3
 8007fa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007faa:	d807      	bhi.n	8007fbc <_printf_i+0x28>
 8007fac:	2f62      	cmp	r7, #98	@ 0x62
 8007fae:	d80a      	bhi.n	8007fc6 <_printf_i+0x32>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	f000 80d3 	beq.w	800815c <_printf_i+0x1c8>
 8007fb6:	2f58      	cmp	r7, #88	@ 0x58
 8007fb8:	f000 80ba 	beq.w	8008130 <_printf_i+0x19c>
 8007fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fc4:	e03a      	b.n	800803c <_printf_i+0xa8>
 8007fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fca:	2b15      	cmp	r3, #21
 8007fcc:	d8f6      	bhi.n	8007fbc <_printf_i+0x28>
 8007fce:	a101      	add	r1, pc, #4	@ (adr r1, 8007fd4 <_printf_i+0x40>)
 8007fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	08008041 	.word	0x08008041
 8007fdc:	08007fbd 	.word	0x08007fbd
 8007fe0:	08007fbd 	.word	0x08007fbd
 8007fe4:	08007fbd 	.word	0x08007fbd
 8007fe8:	08007fbd 	.word	0x08007fbd
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08007fbd 	.word	0x08007fbd
 8007ff4:	08007fbd 	.word	0x08007fbd
 8007ff8:	08007fbd 	.word	0x08007fbd
 8007ffc:	08007fbd 	.word	0x08007fbd
 8008000:	08008143 	.word	0x08008143
 8008004:	0800806b 	.word	0x0800806b
 8008008:	080080fd 	.word	0x080080fd
 800800c:	08007fbd 	.word	0x08007fbd
 8008010:	08007fbd 	.word	0x08007fbd
 8008014:	08008165 	.word	0x08008165
 8008018:	08007fbd 	.word	0x08007fbd
 800801c:	0800806b 	.word	0x0800806b
 8008020:	08007fbd 	.word	0x08007fbd
 8008024:	08007fbd 	.word	0x08007fbd
 8008028:	08008105 	.word	0x08008105
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6032      	str	r2, [r6, #0]
 8008034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800803c:	2301      	movs	r3, #1
 800803e:	e09e      	b.n	800817e <_printf_i+0x1ea>
 8008040:	6833      	ldr	r3, [r6, #0]
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	1d19      	adds	r1, r3, #4
 8008046:	6031      	str	r1, [r6, #0]
 8008048:	0606      	lsls	r6, r0, #24
 800804a:	d501      	bpl.n	8008050 <_printf_i+0xbc>
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	e003      	b.n	8008058 <_printf_i+0xc4>
 8008050:	0645      	lsls	r5, r0, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0xb8>
 8008054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008058:	2d00      	cmp	r5, #0
 800805a:	da03      	bge.n	8008064 <_printf_i+0xd0>
 800805c:	232d      	movs	r3, #45	@ 0x2d
 800805e:	426d      	negs	r5, r5
 8008060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008064:	230a      	movs	r3, #10
 8008066:	4859      	ldr	r0, [pc, #356]	@ (80081cc <_printf_i+0x238>)
 8008068:	e011      	b.n	800808e <_printf_i+0xfa>
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	0608      	lsls	r0, r1, #24
 8008070:	f853 5b04 	ldr.w	r5, [r3], #4
 8008074:	d402      	bmi.n	800807c <_printf_i+0xe8>
 8008076:	0649      	lsls	r1, r1, #25
 8008078:	bf48      	it	mi
 800807a:	b2ad      	uxthmi	r5, r5
 800807c:	2f6f      	cmp	r7, #111	@ 0x6f
 800807e:	6033      	str	r3, [r6, #0]
 8008080:	bf14      	ite	ne
 8008082:	230a      	movne	r3, #10
 8008084:	2308      	moveq	r3, #8
 8008086:	4851      	ldr	r0, [pc, #324]	@ (80081cc <_printf_i+0x238>)
 8008088:	2100      	movs	r1, #0
 800808a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800808e:	6866      	ldr	r6, [r4, #4]
 8008090:	2e00      	cmp	r6, #0
 8008092:	bfa8      	it	ge
 8008094:	6821      	ldrge	r1, [r4, #0]
 8008096:	60a6      	str	r6, [r4, #8]
 8008098:	bfa4      	itt	ge
 800809a:	f021 0104 	bicge.w	r1, r1, #4
 800809e:	6021      	strge	r1, [r4, #0]
 80080a0:	b90d      	cbnz	r5, 80080a6 <_printf_i+0x112>
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	d04b      	beq.n	800813e <_printf_i+0x1aa>
 80080a6:	4616      	mov	r6, r2
 80080a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ac:	fb03 5711 	mls	r7, r3, r1, r5
 80080b0:	5dc7      	ldrb	r7, [r0, r7]
 80080b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080b6:	462f      	mov	r7, r5
 80080b8:	42bb      	cmp	r3, r7
 80080ba:	460d      	mov	r5, r1
 80080bc:	d9f4      	bls.n	80080a8 <_printf_i+0x114>
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d10b      	bne.n	80080da <_printf_i+0x146>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	07df      	lsls	r7, r3, #31
 80080c6:	d508      	bpl.n	80080da <_printf_i+0x146>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	6861      	ldr	r1, [r4, #4]
 80080cc:	4299      	cmp	r1, r3
 80080ce:	bfde      	ittt	le
 80080d0:	2330      	movle	r3, #48	@ 0x30
 80080d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80080da:	1b92      	subs	r2, r2, r6
 80080dc:	6122      	str	r2, [r4, #16]
 80080de:	464b      	mov	r3, r9
 80080e0:	4621      	mov	r1, r4
 80080e2:	4640      	mov	r0, r8
 80080e4:	f8cd a000 	str.w	sl, [sp]
 80080e8:	aa03      	add	r2, sp, #12
 80080ea:	f7ff fee1 	bl	8007eb0 <_printf_common>
 80080ee:	3001      	adds	r0, #1
 80080f0:	d14a      	bne.n	8008188 <_printf_i+0x1f4>
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080f6:	b004      	add	sp, #16
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	f043 0320 	orr.w	r3, r3, #32
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	2778      	movs	r7, #120	@ 0x78
 8008106:	4832      	ldr	r0, [pc, #200]	@ (80081d0 <_printf_i+0x23c>)
 8008108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	6831      	ldr	r1, [r6, #0]
 8008110:	061f      	lsls	r7, r3, #24
 8008112:	f851 5b04 	ldr.w	r5, [r1], #4
 8008116:	d402      	bmi.n	800811e <_printf_i+0x18a>
 8008118:	065f      	lsls	r7, r3, #25
 800811a:	bf48      	it	mi
 800811c:	b2ad      	uxthmi	r5, r5
 800811e:	6031      	str	r1, [r6, #0]
 8008120:	07d9      	lsls	r1, r3, #31
 8008122:	bf44      	itt	mi
 8008124:	f043 0320 	orrmi.w	r3, r3, #32
 8008128:	6023      	strmi	r3, [r4, #0]
 800812a:	b11d      	cbz	r5, 8008134 <_printf_i+0x1a0>
 800812c:	2310      	movs	r3, #16
 800812e:	e7ab      	b.n	8008088 <_printf_i+0xf4>
 8008130:	4826      	ldr	r0, [pc, #152]	@ (80081cc <_printf_i+0x238>)
 8008132:	e7e9      	b.n	8008108 <_printf_i+0x174>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	f023 0320 	bic.w	r3, r3, #32
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	e7f6      	b.n	800812c <_printf_i+0x198>
 800813e:	4616      	mov	r6, r2
 8008140:	e7bd      	b.n	80080be <_printf_i+0x12a>
 8008142:	6833      	ldr	r3, [r6, #0]
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	1d18      	adds	r0, r3, #4
 8008148:	6961      	ldr	r1, [r4, #20]
 800814a:	6030      	str	r0, [r6, #0]
 800814c:	062e      	lsls	r6, r5, #24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	d501      	bpl.n	8008156 <_printf_i+0x1c2>
 8008152:	6019      	str	r1, [r3, #0]
 8008154:	e002      	b.n	800815c <_printf_i+0x1c8>
 8008156:	0668      	lsls	r0, r5, #25
 8008158:	d5fb      	bpl.n	8008152 <_printf_i+0x1be>
 800815a:	8019      	strh	r1, [r3, #0]
 800815c:	2300      	movs	r3, #0
 800815e:	4616      	mov	r6, r2
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	e7bc      	b.n	80080de <_printf_i+0x14a>
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	2100      	movs	r1, #0
 8008168:	1d1a      	adds	r2, r3, #4
 800816a:	6032      	str	r2, [r6, #0]
 800816c:	681e      	ldr	r6, [r3, #0]
 800816e:	6862      	ldr	r2, [r4, #4]
 8008170:	4630      	mov	r0, r6
 8008172:	f000 fbe4 	bl	800893e <memchr>
 8008176:	b108      	cbz	r0, 800817c <_printf_i+0x1e8>
 8008178:	1b80      	subs	r0, r0, r6
 800817a:	6060      	str	r0, [r4, #4]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	2300      	movs	r3, #0
 8008182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008186:	e7aa      	b.n	80080de <_printf_i+0x14a>
 8008188:	4632      	mov	r2, r6
 800818a:	4649      	mov	r1, r9
 800818c:	4640      	mov	r0, r8
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	47d0      	blx	sl
 8008192:	3001      	adds	r0, #1
 8008194:	d0ad      	beq.n	80080f2 <_printf_i+0x15e>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	079b      	lsls	r3, r3, #30
 800819a:	d413      	bmi.n	80081c4 <_printf_i+0x230>
 800819c:	68e0      	ldr	r0, [r4, #12]
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	4298      	cmp	r0, r3
 80081a2:	bfb8      	it	lt
 80081a4:	4618      	movlt	r0, r3
 80081a6:	e7a6      	b.n	80080f6 <_printf_i+0x162>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4632      	mov	r2, r6
 80081ac:	4649      	mov	r1, r9
 80081ae:	4640      	mov	r0, r8
 80081b0:	47d0      	blx	sl
 80081b2:	3001      	adds	r0, #1
 80081b4:	d09d      	beq.n	80080f2 <_printf_i+0x15e>
 80081b6:	3501      	adds	r5, #1
 80081b8:	68e3      	ldr	r3, [r4, #12]
 80081ba:	9903      	ldr	r1, [sp, #12]
 80081bc:	1a5b      	subs	r3, r3, r1
 80081be:	42ab      	cmp	r3, r5
 80081c0:	dcf2      	bgt.n	80081a8 <_printf_i+0x214>
 80081c2:	e7eb      	b.n	800819c <_printf_i+0x208>
 80081c4:	2500      	movs	r5, #0
 80081c6:	f104 0619 	add.w	r6, r4, #25
 80081ca:	e7f5      	b.n	80081b8 <_printf_i+0x224>
 80081cc:	0800c0fc 	.word	0x0800c0fc
 80081d0:	0800c10d 	.word	0x0800c10d

080081d4 <_scanf_float>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	b087      	sub	sp, #28
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	688b      	ldr	r3, [r1, #8]
 80081de:	4617      	mov	r7, r2
 80081e0:	1e5a      	subs	r2, r3, #1
 80081e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081e6:	bf82      	ittt	hi
 80081e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80081f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081f4:	460a      	mov	r2, r1
 80081f6:	f04f 0500 	mov.w	r5, #0
 80081fa:	bf88      	it	hi
 80081fc:	608b      	strhi	r3, [r1, #8]
 80081fe:	680b      	ldr	r3, [r1, #0]
 8008200:	4680      	mov	r8, r0
 8008202:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008206:	f842 3b1c 	str.w	r3, [r2], #28
 800820a:	460c      	mov	r4, r1
 800820c:	bf98      	it	ls
 800820e:	f04f 0b00 	movls.w	fp, #0
 8008212:	4616      	mov	r6, r2
 8008214:	46aa      	mov	sl, r5
 8008216:	46a9      	mov	r9, r5
 8008218:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800821c:	9201      	str	r2, [sp, #4]
 800821e:	9502      	str	r5, [sp, #8]
 8008220:	68a2      	ldr	r2, [r4, #8]
 8008222:	b152      	cbz	r2, 800823a <_scanf_float+0x66>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b4e      	cmp	r3, #78	@ 0x4e
 800822a:	d865      	bhi.n	80082f8 <_scanf_float+0x124>
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d83d      	bhi.n	80082ac <_scanf_float+0xd8>
 8008230:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008234:	b2c8      	uxtb	r0, r1
 8008236:	280e      	cmp	r0, #14
 8008238:	d93b      	bls.n	80082b2 <_scanf_float+0xde>
 800823a:	f1b9 0f00 	cmp.w	r9, #0
 800823e:	d003      	beq.n	8008248 <_scanf_float+0x74>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800824c:	f1ba 0f01 	cmp.w	sl, #1
 8008250:	f200 8118 	bhi.w	8008484 <_scanf_float+0x2b0>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	429e      	cmp	r6, r3
 8008258:	f200 8109 	bhi.w	800846e <_scanf_float+0x29a>
 800825c:	2001      	movs	r0, #1
 800825e:	b007      	add	sp, #28
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008268:	2a0d      	cmp	r2, #13
 800826a:	d8e6      	bhi.n	800823a <_scanf_float+0x66>
 800826c:	a101      	add	r1, pc, #4	@ (adr r1, 8008274 <_scanf_float+0xa0>)
 800826e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008272:	bf00      	nop
 8008274:	080083bb 	.word	0x080083bb
 8008278:	0800823b 	.word	0x0800823b
 800827c:	0800823b 	.word	0x0800823b
 8008280:	0800823b 	.word	0x0800823b
 8008284:	0800841b 	.word	0x0800841b
 8008288:	080083f3 	.word	0x080083f3
 800828c:	0800823b 	.word	0x0800823b
 8008290:	0800823b 	.word	0x0800823b
 8008294:	080083c9 	.word	0x080083c9
 8008298:	0800823b 	.word	0x0800823b
 800829c:	0800823b 	.word	0x0800823b
 80082a0:	0800823b 	.word	0x0800823b
 80082a4:	0800823b 	.word	0x0800823b
 80082a8:	08008381 	.word	0x08008381
 80082ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80082b0:	e7da      	b.n	8008268 <_scanf_float+0x94>
 80082b2:	290e      	cmp	r1, #14
 80082b4:	d8c1      	bhi.n	800823a <_scanf_float+0x66>
 80082b6:	a001      	add	r0, pc, #4	@ (adr r0, 80082bc <_scanf_float+0xe8>)
 80082b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082bc:	08008371 	.word	0x08008371
 80082c0:	0800823b 	.word	0x0800823b
 80082c4:	08008371 	.word	0x08008371
 80082c8:	08008407 	.word	0x08008407
 80082cc:	0800823b 	.word	0x0800823b
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008357 	.word	0x08008357
 80082d8:	08008357 	.word	0x08008357
 80082dc:	08008357 	.word	0x08008357
 80082e0:	08008357 	.word	0x08008357
 80082e4:	08008357 	.word	0x08008357
 80082e8:	08008357 	.word	0x08008357
 80082ec:	08008357 	.word	0x08008357
 80082f0:	08008357 	.word	0x08008357
 80082f4:	08008357 	.word	0x08008357
 80082f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80082fa:	d809      	bhi.n	8008310 <_scanf_float+0x13c>
 80082fc:	2b60      	cmp	r3, #96	@ 0x60
 80082fe:	d8b1      	bhi.n	8008264 <_scanf_float+0x90>
 8008300:	2b54      	cmp	r3, #84	@ 0x54
 8008302:	d07b      	beq.n	80083fc <_scanf_float+0x228>
 8008304:	2b59      	cmp	r3, #89	@ 0x59
 8008306:	d198      	bne.n	800823a <_scanf_float+0x66>
 8008308:	2d07      	cmp	r5, #7
 800830a:	d196      	bne.n	800823a <_scanf_float+0x66>
 800830c:	2508      	movs	r5, #8
 800830e:	e02c      	b.n	800836a <_scanf_float+0x196>
 8008310:	2b74      	cmp	r3, #116	@ 0x74
 8008312:	d073      	beq.n	80083fc <_scanf_float+0x228>
 8008314:	2b79      	cmp	r3, #121	@ 0x79
 8008316:	e7f6      	b.n	8008306 <_scanf_float+0x132>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	05c8      	lsls	r0, r1, #23
 800831c:	d51b      	bpl.n	8008356 <_scanf_float+0x182>
 800831e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008322:	6021      	str	r1, [r4, #0]
 8008324:	f109 0901 	add.w	r9, r9, #1
 8008328:	f1bb 0f00 	cmp.w	fp, #0
 800832c:	d003      	beq.n	8008336 <_scanf_float+0x162>
 800832e:	3201      	adds	r2, #1
 8008330:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008334:	60a2      	str	r2, [r4, #8]
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	607b      	str	r3, [r7, #4]
 800834a:	f340 8087 	ble.w	800845c <_scanf_float+0x288>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	e764      	b.n	8008220 <_scanf_float+0x4c>
 8008356:	eb1a 0105 	adds.w	r1, sl, r5
 800835a:	f47f af6e 	bne.w	800823a <_scanf_float+0x66>
 800835e:	460d      	mov	r5, r1
 8008360:	468a      	mov	sl, r1
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	f806 3b01 	strb.w	r3, [r6], #1
 800836e:	e7e2      	b.n	8008336 <_scanf_float+0x162>
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	0610      	lsls	r0, r2, #24
 8008374:	f57f af61 	bpl.w	800823a <_scanf_float+0x66>
 8008378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800837c:	6022      	str	r2, [r4, #0]
 800837e:	e7f4      	b.n	800836a <_scanf_float+0x196>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d10e      	bne.n	80083a4 <_scanf_float+0x1d0>
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	d10e      	bne.n	80083aa <_scanf_float+0x1d6>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008392:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008396:	d108      	bne.n	80083aa <_scanf_float+0x1d6>
 8008398:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800839c:	f04f 0a01 	mov.w	sl, #1
 80083a0:	6022      	str	r2, [r4, #0]
 80083a2:	e7e2      	b.n	800836a <_scanf_float+0x196>
 80083a4:	f1ba 0f02 	cmp.w	sl, #2
 80083a8:	d055      	beq.n	8008456 <_scanf_float+0x282>
 80083aa:	2d01      	cmp	r5, #1
 80083ac:	d002      	beq.n	80083b4 <_scanf_float+0x1e0>
 80083ae:	2d04      	cmp	r5, #4
 80083b0:	f47f af43 	bne.w	800823a <_scanf_float+0x66>
 80083b4:	3501      	adds	r5, #1
 80083b6:	b2ed      	uxtb	r5, r5
 80083b8:	e7d7      	b.n	800836a <_scanf_float+0x196>
 80083ba:	f1ba 0f01 	cmp.w	sl, #1
 80083be:	f47f af3c 	bne.w	800823a <_scanf_float+0x66>
 80083c2:	f04f 0a02 	mov.w	sl, #2
 80083c6:	e7d0      	b.n	800836a <_scanf_float+0x196>
 80083c8:	b97d      	cbnz	r5, 80083ea <_scanf_float+0x216>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	f47f af37 	bne.w	8008240 <_scanf_float+0x6c>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083dc:	f040 8103 	bne.w	80085e6 <_scanf_float+0x412>
 80083e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083e4:	2501      	movs	r5, #1
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	e7bf      	b.n	800836a <_scanf_float+0x196>
 80083ea:	2d03      	cmp	r5, #3
 80083ec:	d0e2      	beq.n	80083b4 <_scanf_float+0x1e0>
 80083ee:	2d05      	cmp	r5, #5
 80083f0:	e7de      	b.n	80083b0 <_scanf_float+0x1dc>
 80083f2:	2d02      	cmp	r5, #2
 80083f4:	f47f af21 	bne.w	800823a <_scanf_float+0x66>
 80083f8:	2503      	movs	r5, #3
 80083fa:	e7b6      	b.n	800836a <_scanf_float+0x196>
 80083fc:	2d06      	cmp	r5, #6
 80083fe:	f47f af1c 	bne.w	800823a <_scanf_float+0x66>
 8008402:	2507      	movs	r5, #7
 8008404:	e7b1      	b.n	800836a <_scanf_float+0x196>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0591      	lsls	r1, r2, #22
 800840a:	f57f af16 	bpl.w	800823a <_scanf_float+0x66>
 800840e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	f8cd 9008 	str.w	r9, [sp, #8]
 8008418:	e7a7      	b.n	800836a <_scanf_float+0x196>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008420:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008424:	d006      	beq.n	8008434 <_scanf_float+0x260>
 8008426:	0550      	lsls	r0, r2, #21
 8008428:	f57f af07 	bpl.w	800823a <_scanf_float+0x66>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	f000 80d9 	beq.w	80085e6 <_scanf_float+0x412>
 8008434:	0591      	lsls	r1, r2, #22
 8008436:	bf58      	it	pl
 8008438:	9902      	ldrpl	r1, [sp, #8]
 800843a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800843e:	bf58      	it	pl
 8008440:	eba9 0101 	subpl.w	r1, r9, r1
 8008444:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008448:	f04f 0900 	mov.w	r9, #0
 800844c:	bf58      	it	pl
 800844e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008452:	6022      	str	r2, [r4, #0]
 8008454:	e789      	b.n	800836a <_scanf_float+0x196>
 8008456:	f04f 0a03 	mov.w	sl, #3
 800845a:	e786      	b.n	800836a <_scanf_float+0x196>
 800845c:	4639      	mov	r1, r7
 800845e:	4640      	mov	r0, r8
 8008460:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008464:	4798      	blx	r3
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aeda 	beq.w	8008220 <_scanf_float+0x4c>
 800846c:	e6e5      	b.n	800823a <_scanf_float+0x66>
 800846e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008472:	463a      	mov	r2, r7
 8008474:	4640      	mov	r0, r8
 8008476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	e6e7      	b.n	8008254 <_scanf_float+0x80>
 8008484:	1e6b      	subs	r3, r5, #1
 8008486:	2b06      	cmp	r3, #6
 8008488:	d824      	bhi.n	80084d4 <_scanf_float+0x300>
 800848a:	2d02      	cmp	r5, #2
 800848c:	d836      	bhi.n	80084fc <_scanf_float+0x328>
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	429e      	cmp	r6, r3
 8008492:	f67f aee3 	bls.w	800825c <_scanf_float+0x88>
 8008496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800849a:	463a      	mov	r2, r7
 800849c:	4640      	mov	r0, r8
 800849e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084a2:	4798      	blx	r3
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	e7f0      	b.n	800848e <_scanf_float+0x2ba>
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084b0:	463a      	mov	r2, r7
 80084b2:	4640      	mov	r0, r8
 80084b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80084b8:	4798      	blx	r3
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	3b01      	subs	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80084c4:	fa5f fa8a 	uxtb.w	sl, sl
 80084c8:	f1ba 0f02 	cmp.w	sl, #2
 80084cc:	d1ee      	bne.n	80084ac <_scanf_float+0x2d8>
 80084ce:	3d03      	subs	r5, #3
 80084d0:	b2ed      	uxtb	r5, r5
 80084d2:	1b76      	subs	r6, r6, r5
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	05da      	lsls	r2, r3, #23
 80084d8:	d530      	bpl.n	800853c <_scanf_float+0x368>
 80084da:	055b      	lsls	r3, r3, #21
 80084dc:	d511      	bpl.n	8008502 <_scanf_float+0x32e>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	429e      	cmp	r6, r3
 80084e2:	f67f aebb 	bls.w	800825c <_scanf_float+0x88>
 80084e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084ea:	463a      	mov	r2, r7
 80084ec:	4640      	mov	r0, r8
 80084ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084f2:	4798      	blx	r3
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	e7f0      	b.n	80084de <_scanf_float+0x30a>
 80084fc:	46aa      	mov	sl, r5
 80084fe:	46b3      	mov	fp, r6
 8008500:	e7de      	b.n	80084c0 <_scanf_float+0x2ec>
 8008502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	2965      	cmp	r1, #101	@ 0x65
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800850e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	d00c      	beq.n	8008530 <_scanf_float+0x35c>
 8008516:	2945      	cmp	r1, #69	@ 0x45
 8008518:	d00a      	beq.n	8008530 <_scanf_float+0x35c>
 800851a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800851e:	463a      	mov	r2, r7
 8008520:	4640      	mov	r0, r8
 8008522:	4798      	blx	r3
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800852a:	3b01      	subs	r3, #1
 800852c:	1eb5      	subs	r5, r6, #2
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	463a      	mov	r2, r7
 8008532:	4640      	mov	r0, r8
 8008534:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008538:	4798      	blx	r3
 800853a:	462e      	mov	r6, r5
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	f012 0210 	ands.w	r2, r2, #16
 8008542:	d001      	beq.n	8008548 <_scanf_float+0x374>
 8008544:	2000      	movs	r0, #0
 8008546:	e68a      	b.n	800825e <_scanf_float+0x8a>
 8008548:	7032      	strb	r2, [r6, #0]
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008554:	d11c      	bne.n	8008590 <_scanf_float+0x3bc>
 8008556:	9b02      	ldr	r3, [sp, #8]
 8008558:	454b      	cmp	r3, r9
 800855a:	eba3 0209 	sub.w	r2, r3, r9
 800855e:	d123      	bne.n	80085a8 <_scanf_float+0x3d4>
 8008560:	2200      	movs	r2, #0
 8008562:	4640      	mov	r0, r8
 8008564:	9901      	ldr	r1, [sp, #4]
 8008566:	f002 fbfb 	bl	800ad60 <_strtod_r>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	6825      	ldr	r5, [r4, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f015 0f02 	tst.w	r5, #2
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	f103 0204 	add.w	r2, r3, #4
 800857c:	d01f      	beq.n	80085be <_scanf_float+0x3ea>
 800857e:	9903      	ldr	r1, [sp, #12]
 8008580:	600a      	str	r2, [r1, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	e9c3 6700 	strd	r6, r7, [r3]
 8008588:	68e3      	ldr	r3, [r4, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60e3      	str	r3, [r4, #12]
 800858e:	e7d9      	b.n	8008544 <_scanf_float+0x370>
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0e4      	beq.n	8008560 <_scanf_float+0x38c>
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	230a      	movs	r3, #10
 800859a:	4640      	mov	r0, r8
 800859c:	3101      	adds	r1, #1
 800859e:	f002 fc5f 	bl	800ae60 <_strtol_r>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	9e05      	ldr	r6, [sp, #20]
 80085a6:	1ac2      	subs	r2, r0, r3
 80085a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80085ac:	429e      	cmp	r6, r3
 80085ae:	bf28      	it	cs
 80085b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80085b4:	4630      	mov	r0, r6
 80085b6:	490d      	ldr	r1, [pc, #52]	@ (80085ec <_scanf_float+0x418>)
 80085b8:	f000 f8de 	bl	8008778 <siprintf>
 80085bc:	e7d0      	b.n	8008560 <_scanf_float+0x38c>
 80085be:	076d      	lsls	r5, r5, #29
 80085c0:	d4dd      	bmi.n	800857e <_scanf_float+0x3aa>
 80085c2:	9d03      	ldr	r5, [sp, #12]
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	681d      	ldr	r5, [r3, #0]
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	f7f8 fa1e 	bl	8000a0c <__aeabi_dcmpun>
 80085d0:	b120      	cbz	r0, 80085dc <_scanf_float+0x408>
 80085d2:	4807      	ldr	r0, [pc, #28]	@ (80085f0 <_scanf_float+0x41c>)
 80085d4:	f000 f9d0 	bl	8008978 <nanf>
 80085d8:	6028      	str	r0, [r5, #0]
 80085da:	e7d5      	b.n	8008588 <_scanf_float+0x3b4>
 80085dc:	4630      	mov	r0, r6
 80085de:	4639      	mov	r1, r7
 80085e0:	f7f8 fa72 	bl	8000ac8 <__aeabi_d2f>
 80085e4:	e7f8      	b.n	80085d8 <_scanf_float+0x404>
 80085e6:	f04f 0900 	mov.w	r9, #0
 80085ea:	e62d      	b.n	8008248 <_scanf_float+0x74>
 80085ec:	0800c11e 	.word	0x0800c11e
 80085f0:	0800c4b5 	.word	0x0800c4b5

080085f4 <std>:
 80085f4:	2300      	movs	r3, #0
 80085f6:	b510      	push	{r4, lr}
 80085f8:	4604      	mov	r4, r0
 80085fa:	e9c0 3300 	strd	r3, r3, [r0]
 80085fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008602:	6083      	str	r3, [r0, #8]
 8008604:	8181      	strh	r1, [r0, #12]
 8008606:	6643      	str	r3, [r0, #100]	@ 0x64
 8008608:	81c2      	strh	r2, [r0, #14]
 800860a:	6183      	str	r3, [r0, #24]
 800860c:	4619      	mov	r1, r3
 800860e:	2208      	movs	r2, #8
 8008610:	305c      	adds	r0, #92	@ 0x5c
 8008612:	f000 f914 	bl	800883e <memset>
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <std+0x58>)
 8008618:	6224      	str	r4, [r4, #32]
 800861a:	6263      	str	r3, [r4, #36]	@ 0x24
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <std+0x5c>)
 800861e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008620:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <std+0x60>)
 8008622:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <std+0x64>)
 8008626:	6323      	str	r3, [r4, #48]	@ 0x30
 8008628:	4b0c      	ldr	r3, [pc, #48]	@ (800865c <std+0x68>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d006      	beq.n	800863c <std+0x48>
 800862e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008632:	4294      	cmp	r4, r2
 8008634:	d002      	beq.n	800863c <std+0x48>
 8008636:	33d0      	adds	r3, #208	@ 0xd0
 8008638:	429c      	cmp	r4, r3
 800863a:	d105      	bne.n	8008648 <std+0x54>
 800863c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008644:	f000 b978 	b.w	8008938 <__retarget_lock_init_recursive>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	bf00      	nop
 800864c:	080087b9 	.word	0x080087b9
 8008650:	080087db 	.word	0x080087db
 8008654:	08008813 	.word	0x08008813
 8008658:	08008837 	.word	0x08008837
 800865c:	20001cd0 	.word	0x20001cd0

08008660 <stdio_exit_handler>:
 8008660:	4a02      	ldr	r2, [pc, #8]	@ (800866c <stdio_exit_handler+0xc>)
 8008662:	4903      	ldr	r1, [pc, #12]	@ (8008670 <stdio_exit_handler+0x10>)
 8008664:	4803      	ldr	r0, [pc, #12]	@ (8008674 <stdio_exit_handler+0x14>)
 8008666:	f000 b869 	b.w	800873c <_fwalk_sglue>
 800866a:	bf00      	nop
 800866c:	20000014 	.word	0x20000014
 8008670:	0800b215 	.word	0x0800b215
 8008674:	20000024 	.word	0x20000024

08008678 <cleanup_stdio>:
 8008678:	6841      	ldr	r1, [r0, #4]
 800867a:	4b0c      	ldr	r3, [pc, #48]	@ (80086ac <cleanup_stdio+0x34>)
 800867c:	b510      	push	{r4, lr}
 800867e:	4299      	cmp	r1, r3
 8008680:	4604      	mov	r4, r0
 8008682:	d001      	beq.n	8008688 <cleanup_stdio+0x10>
 8008684:	f002 fdc6 	bl	800b214 <_fflush_r>
 8008688:	68a1      	ldr	r1, [r4, #8]
 800868a:	4b09      	ldr	r3, [pc, #36]	@ (80086b0 <cleanup_stdio+0x38>)
 800868c:	4299      	cmp	r1, r3
 800868e:	d002      	beq.n	8008696 <cleanup_stdio+0x1e>
 8008690:	4620      	mov	r0, r4
 8008692:	f002 fdbf 	bl	800b214 <_fflush_r>
 8008696:	68e1      	ldr	r1, [r4, #12]
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <cleanup_stdio+0x3c>)
 800869a:	4299      	cmp	r1, r3
 800869c:	d004      	beq.n	80086a8 <cleanup_stdio+0x30>
 800869e:	4620      	mov	r0, r4
 80086a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a4:	f002 bdb6 	b.w	800b214 <_fflush_r>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	bf00      	nop
 80086ac:	20001cd0 	.word	0x20001cd0
 80086b0:	20001d38 	.word	0x20001d38
 80086b4:	20001da0 	.word	0x20001da0

080086b8 <global_stdio_init.part.0>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <global_stdio_init.part.0+0x30>)
 80086bc:	4c0b      	ldr	r4, [pc, #44]	@ (80086ec <global_stdio_init.part.0+0x34>)
 80086be:	4a0c      	ldr	r2, [pc, #48]	@ (80086f0 <global_stdio_init.part.0+0x38>)
 80086c0:	4620      	mov	r0, r4
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	2104      	movs	r1, #4
 80086c6:	2200      	movs	r2, #0
 80086c8:	f7ff ff94 	bl	80085f4 <std>
 80086cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086d0:	2201      	movs	r2, #1
 80086d2:	2109      	movs	r1, #9
 80086d4:	f7ff ff8e 	bl	80085f4 <std>
 80086d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086dc:	2202      	movs	r2, #2
 80086de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e2:	2112      	movs	r1, #18
 80086e4:	f7ff bf86 	b.w	80085f4 <std>
 80086e8:	20001e08 	.word	0x20001e08
 80086ec:	20001cd0 	.word	0x20001cd0
 80086f0:	08008661 	.word	0x08008661

080086f4 <__sfp_lock_acquire>:
 80086f4:	4801      	ldr	r0, [pc, #4]	@ (80086fc <__sfp_lock_acquire+0x8>)
 80086f6:	f000 b920 	b.w	800893a <__retarget_lock_acquire_recursive>
 80086fa:	bf00      	nop
 80086fc:	20001e11 	.word	0x20001e11

08008700 <__sfp_lock_release>:
 8008700:	4801      	ldr	r0, [pc, #4]	@ (8008708 <__sfp_lock_release+0x8>)
 8008702:	f000 b91b 	b.w	800893c <__retarget_lock_release_recursive>
 8008706:	bf00      	nop
 8008708:	20001e11 	.word	0x20001e11

0800870c <__sinit>:
 800870c:	b510      	push	{r4, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	f7ff fff0 	bl	80086f4 <__sfp_lock_acquire>
 8008714:	6a23      	ldr	r3, [r4, #32]
 8008716:	b11b      	cbz	r3, 8008720 <__sinit+0x14>
 8008718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871c:	f7ff bff0 	b.w	8008700 <__sfp_lock_release>
 8008720:	4b04      	ldr	r3, [pc, #16]	@ (8008734 <__sinit+0x28>)
 8008722:	6223      	str	r3, [r4, #32]
 8008724:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <__sinit+0x2c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f5      	bne.n	8008718 <__sinit+0xc>
 800872c:	f7ff ffc4 	bl	80086b8 <global_stdio_init.part.0>
 8008730:	e7f2      	b.n	8008718 <__sinit+0xc>
 8008732:	bf00      	nop
 8008734:	08008679 	.word	0x08008679
 8008738:	20001e08 	.word	0x20001e08

0800873c <_fwalk_sglue>:
 800873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008740:	4607      	mov	r7, r0
 8008742:	4688      	mov	r8, r1
 8008744:	4614      	mov	r4, r2
 8008746:	2600      	movs	r6, #0
 8008748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874c:	f1b9 0901 	subs.w	r9, r9, #1
 8008750:	d505      	bpl.n	800875e <_fwalk_sglue+0x22>
 8008752:	6824      	ldr	r4, [r4, #0]
 8008754:	2c00      	cmp	r4, #0
 8008756:	d1f7      	bne.n	8008748 <_fwalk_sglue+0xc>
 8008758:	4630      	mov	r0, r6
 800875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d907      	bls.n	8008774 <_fwalk_sglue+0x38>
 8008764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008768:	3301      	adds	r3, #1
 800876a:	d003      	beq.n	8008774 <_fwalk_sglue+0x38>
 800876c:	4629      	mov	r1, r5
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	4306      	orrs	r6, r0
 8008774:	3568      	adds	r5, #104	@ 0x68
 8008776:	e7e9      	b.n	800874c <_fwalk_sglue+0x10>

08008778 <siprintf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800877e:	b500      	push	{lr}
 8008780:	b09c      	sub	sp, #112	@ 0x70
 8008782:	ab1d      	add	r3, sp, #116	@ 0x74
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	9006      	str	r0, [sp, #24]
 8008788:	9107      	str	r1, [sp, #28]
 800878a:	9104      	str	r1, [sp, #16]
 800878c:	4808      	ldr	r0, [pc, #32]	@ (80087b0 <siprintf+0x38>)
 800878e:	4909      	ldr	r1, [pc, #36]	@ (80087b4 <siprintf+0x3c>)
 8008790:	f853 2b04 	ldr.w	r2, [r3], #4
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	6800      	ldr	r0, [r0, #0]
 8008798:	a902      	add	r1, sp, #8
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	f002 fbbe 	bl	800af1c <_svfiprintf_r>
 80087a0:	2200      	movs	r2, #0
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	b01c      	add	sp, #112	@ 0x70
 80087a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ac:	b003      	add	sp, #12
 80087ae:	4770      	bx	lr
 80087b0:	20000020 	.word	0x20000020
 80087b4:	ffff0208 	.word	0xffff0208

080087b8 <__sread>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	460c      	mov	r4, r1
 80087bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c0:	f000 f86c 	bl	800889c <_read_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	bfab      	itete	ge
 80087c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087ca:	89a3      	ldrhlt	r3, [r4, #12]
 80087cc:	181b      	addge	r3, r3, r0
 80087ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087d2:	bfac      	ite	ge
 80087d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087d6:	81a3      	strhlt	r3, [r4, #12]
 80087d8:	bd10      	pop	{r4, pc}

080087da <__swrite>:
 80087da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	461f      	mov	r7, r3
 80087e0:	898b      	ldrh	r3, [r1, #12]
 80087e2:	4605      	mov	r5, r0
 80087e4:	05db      	lsls	r3, r3, #23
 80087e6:	460c      	mov	r4, r1
 80087e8:	4616      	mov	r6, r2
 80087ea:	d505      	bpl.n	80087f8 <__swrite+0x1e>
 80087ec:	2302      	movs	r3, #2
 80087ee:	2200      	movs	r2, #0
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	f000 f840 	bl	8008878 <_lseek_r>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	4632      	mov	r2, r6
 80087fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	4628      	mov	r0, r5
 8008804:	463b      	mov	r3, r7
 8008806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800880a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800880e:	f000 b857 	b.w	80088c0 <_write_r>

08008812 <__sseek>:
 8008812:	b510      	push	{r4, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881a:	f000 f82d 	bl	8008878 <_lseek_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	bf15      	itete	ne
 8008824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800882a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800882e:	81a3      	strheq	r3, [r4, #12]
 8008830:	bf18      	it	ne
 8008832:	81a3      	strhne	r3, [r4, #12]
 8008834:	bd10      	pop	{r4, pc}

08008836 <__sclose>:
 8008836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883a:	f000 b80d 	b.w	8008858 <_close_r>

0800883e <memset>:
 800883e:	4603      	mov	r3, r0
 8008840:	4402      	add	r2, r0
 8008842:	4293      	cmp	r3, r2
 8008844:	d100      	bne.n	8008848 <memset+0xa>
 8008846:	4770      	bx	lr
 8008848:	f803 1b01 	strb.w	r1, [r3], #1
 800884c:	e7f9      	b.n	8008842 <memset+0x4>
	...

08008850 <_localeconv_r>:
 8008850:	4800      	ldr	r0, [pc, #0]	@ (8008854 <_localeconv_r+0x4>)
 8008852:	4770      	bx	lr
 8008854:	20000160 	.word	0x20000160

08008858 <_close_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	2300      	movs	r3, #0
 800885c:	4d05      	ldr	r5, [pc, #20]	@ (8008874 <_close_r+0x1c>)
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f9 fc67 	bl	8002136 <_close>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_close_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_close_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20001e0c 	.word	0x20001e0c

08008878 <_lseek_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	2200      	movs	r2, #0
 8008882:	4d05      	ldr	r5, [pc, #20]	@ (8008898 <_lseek_r+0x20>)
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7f9 fc79 	bl	800217e <_lseek>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_lseek_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_lseek_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20001e0c 	.word	0x20001e0c

0800889c <_read_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	4d05      	ldr	r5, [pc, #20]	@ (80088bc <_read_r+0x20>)
 80088a8:	602a      	str	r2, [r5, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f7f9 fc0a 	bl	80020c4 <_read>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_read_r+0x1e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_read_r+0x1e>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20001e0c 	.word	0x20001e0c

080088c0 <_write_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	2200      	movs	r2, #0
 80088ca:	4d05      	ldr	r5, [pc, #20]	@ (80088e0 <_write_r+0x20>)
 80088cc:	602a      	str	r2, [r5, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7f9 fc15 	bl	80020fe <_write>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_write_r+0x1e>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_write_r+0x1e>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20001e0c 	.word	0x20001e0c

080088e4 <__errno>:
 80088e4:	4b01      	ldr	r3, [pc, #4]	@ (80088ec <__errno+0x8>)
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20000020 	.word	0x20000020

080088f0 <__libc_init_array>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	2600      	movs	r6, #0
 80088f4:	4d0c      	ldr	r5, [pc, #48]	@ (8008928 <__libc_init_array+0x38>)
 80088f6:	4c0d      	ldr	r4, [pc, #52]	@ (800892c <__libc_init_array+0x3c>)
 80088f8:	1b64      	subs	r4, r4, r5
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	42a6      	cmp	r6, r4
 80088fe:	d109      	bne.n	8008914 <__libc_init_array+0x24>
 8008900:	f003 fb66 	bl	800bfd0 <_init>
 8008904:	2600      	movs	r6, #0
 8008906:	4d0a      	ldr	r5, [pc, #40]	@ (8008930 <__libc_init_array+0x40>)
 8008908:	4c0a      	ldr	r4, [pc, #40]	@ (8008934 <__libc_init_array+0x44>)
 800890a:	1b64      	subs	r4, r4, r5
 800890c:	10a4      	asrs	r4, r4, #2
 800890e:	42a6      	cmp	r6, r4
 8008910:	d105      	bne.n	800891e <__libc_init_array+0x2e>
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	f855 3b04 	ldr.w	r3, [r5], #4
 8008918:	4798      	blx	r3
 800891a:	3601      	adds	r6, #1
 800891c:	e7ee      	b.n	80088fc <__libc_init_array+0xc>
 800891e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008922:	4798      	blx	r3
 8008924:	3601      	adds	r6, #1
 8008926:	e7f2      	b.n	800890e <__libc_init_array+0x1e>
 8008928:	0800c520 	.word	0x0800c520
 800892c:	0800c520 	.word	0x0800c520
 8008930:	0800c520 	.word	0x0800c520
 8008934:	0800c524 	.word	0x0800c524

08008938 <__retarget_lock_init_recursive>:
 8008938:	4770      	bx	lr

0800893a <__retarget_lock_acquire_recursive>:
 800893a:	4770      	bx	lr

0800893c <__retarget_lock_release_recursive>:
 800893c:	4770      	bx	lr

0800893e <memchr>:
 800893e:	4603      	mov	r3, r0
 8008940:	b510      	push	{r4, lr}
 8008942:	b2c9      	uxtb	r1, r1
 8008944:	4402      	add	r2, r0
 8008946:	4293      	cmp	r3, r2
 8008948:	4618      	mov	r0, r3
 800894a:	d101      	bne.n	8008950 <memchr+0x12>
 800894c:	2000      	movs	r0, #0
 800894e:	e003      	b.n	8008958 <memchr+0x1a>
 8008950:	7804      	ldrb	r4, [r0, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	428c      	cmp	r4, r1
 8008956:	d1f6      	bne.n	8008946 <memchr+0x8>
 8008958:	bd10      	pop	{r4, pc}

0800895a <memcpy>:
 800895a:	440a      	add	r2, r1
 800895c:	4291      	cmp	r1, r2
 800895e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008962:	d100      	bne.n	8008966 <memcpy+0xc>
 8008964:	4770      	bx	lr
 8008966:	b510      	push	{r4, lr}
 8008968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896c:	4291      	cmp	r1, r2
 800896e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008972:	d1f9      	bne.n	8008968 <memcpy+0xe>
 8008974:	bd10      	pop	{r4, pc}
	...

08008978 <nanf>:
 8008978:	4800      	ldr	r0, [pc, #0]	@ (800897c <nanf+0x4>)
 800897a:	4770      	bx	lr
 800897c:	7fc00000 	.word	0x7fc00000

08008980 <quorem>:
 8008980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	6903      	ldr	r3, [r0, #16]
 8008986:	690c      	ldr	r4, [r1, #16]
 8008988:	4607      	mov	r7, r0
 800898a:	42a3      	cmp	r3, r4
 800898c:	db7e      	blt.n	8008a8c <quorem+0x10c>
 800898e:	3c01      	subs	r4, #1
 8008990:	00a3      	lsls	r3, r4, #2
 8008992:	f100 0514 	add.w	r5, r0, #20
 8008996:	f101 0814 	add.w	r8, r1, #20
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089aa:	3301      	adds	r3, #1
 80089ac:	429a      	cmp	r2, r3
 80089ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80089b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b6:	d32e      	bcc.n	8008a16 <quorem+0x96>
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	46c4      	mov	ip, r8
 80089be:	46ae      	mov	lr, r5
 80089c0:	46d3      	mov	fp, sl
 80089c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089c6:	b298      	uxth	r0, r3
 80089c8:	fb06 a000 	mla	r0, r6, r0, sl
 80089cc:	0c1b      	lsrs	r3, r3, #16
 80089ce:	0c02      	lsrs	r2, r0, #16
 80089d0:	fb06 2303 	mla	r3, r6, r3, r2
 80089d4:	f8de 2000 	ldr.w	r2, [lr]
 80089d8:	b280      	uxth	r0, r0
 80089da:	b292      	uxth	r2, r2
 80089dc:	1a12      	subs	r2, r2, r0
 80089de:	445a      	add	r2, fp
 80089e0:	f8de 0000 	ldr.w	r0, [lr]
 80089e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089f2:	b292      	uxth	r2, r2
 80089f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089f8:	45e1      	cmp	r9, ip
 80089fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089fe:	f84e 2b04 	str.w	r2, [lr], #4
 8008a02:	d2de      	bcs.n	80089c2 <quorem+0x42>
 8008a04:	9b00      	ldr	r3, [sp, #0]
 8008a06:	58eb      	ldr	r3, [r5, r3]
 8008a08:	b92b      	cbnz	r3, 8008a16 <quorem+0x96>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	d32f      	bcc.n	8008a74 <quorem+0xf4>
 8008a14:	613c      	str	r4, [r7, #16]
 8008a16:	4638      	mov	r0, r7
 8008a18:	f001 f9c2 	bl	8009da0 <__mcmp>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	db25      	blt.n	8008a6c <quorem+0xec>
 8008a20:	4629      	mov	r1, r5
 8008a22:	2000      	movs	r0, #0
 8008a24:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a28:	f8d1 c000 	ldr.w	ip, [r1]
 8008a2c:	fa1f fe82 	uxth.w	lr, r2
 8008a30:	fa1f f38c 	uxth.w	r3, ip
 8008a34:	eba3 030e 	sub.w	r3, r3, lr
 8008a38:	4403      	add	r3, r0
 8008a3a:	0c12      	lsrs	r2, r2, #16
 8008a3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a4a:	45c1      	cmp	r9, r8
 8008a4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a50:	f841 3b04 	str.w	r3, [r1], #4
 8008a54:	d2e6      	bcs.n	8008a24 <quorem+0xa4>
 8008a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a5e:	b922      	cbnz	r2, 8008a6a <quorem+0xea>
 8008a60:	3b04      	subs	r3, #4
 8008a62:	429d      	cmp	r5, r3
 8008a64:	461a      	mov	r2, r3
 8008a66:	d30b      	bcc.n	8008a80 <quorem+0x100>
 8008a68:	613c      	str	r4, [r7, #16]
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	3b04      	subs	r3, #4
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d1cb      	bne.n	8008a14 <quorem+0x94>
 8008a7c:	3c01      	subs	r4, #1
 8008a7e:	e7c6      	b.n	8008a0e <quorem+0x8e>
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	3b04      	subs	r3, #4
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d1ef      	bne.n	8008a68 <quorem+0xe8>
 8008a88:	3c01      	subs	r4, #1
 8008a8a:	e7ea      	b.n	8008a62 <quorem+0xe2>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e7ee      	b.n	8008a6e <quorem+0xee>

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	69c7      	ldr	r7, [r0, #28]
 8008a9a:	b097      	sub	sp, #92	@ 0x5c
 8008a9c:	4683      	mov	fp, r0
 8008a9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008aa2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008aa4:	b97f      	cbnz	r7, 8008ac6 <_dtoa_r+0x36>
 8008aa6:	2010      	movs	r0, #16
 8008aa8:	f000 fe02 	bl	80096b0 <malloc>
 8008aac:	4602      	mov	r2, r0
 8008aae:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ab2:	b920      	cbnz	r0, 8008abe <_dtoa_r+0x2e>
 8008ab4:	21ef      	movs	r1, #239	@ 0xef
 8008ab6:	4ba8      	ldr	r3, [pc, #672]	@ (8008d58 <_dtoa_r+0x2c8>)
 8008ab8:	48a8      	ldr	r0, [pc, #672]	@ (8008d5c <_dtoa_r+0x2cc>)
 8008aba:	f002 fc15 	bl	800b2e8 <__assert_func>
 8008abe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ac2:	6007      	str	r7, [r0, #0]
 8008ac4:	60c7      	str	r7, [r0, #12]
 8008ac6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	b159      	cbz	r1, 8008ae6 <_dtoa_r+0x56>
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4093      	lsls	r3, r2
 8008ad4:	604a      	str	r2, [r1, #4]
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	4658      	mov	r0, fp
 8008ada:	f000 fedf 	bl	800989c <_Bfree>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	1e2b      	subs	r3, r5, #0
 8008ae8:	bfaf      	iteee	ge
 8008aea:	2300      	movge	r3, #0
 8008aec:	2201      	movlt	r2, #1
 8008aee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008af2:	9303      	strlt	r3, [sp, #12]
 8008af4:	bfa8      	it	ge
 8008af6:	6033      	strge	r3, [r6, #0]
 8008af8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008afc:	4b98      	ldr	r3, [pc, #608]	@ (8008d60 <_dtoa_r+0x2d0>)
 8008afe:	bfb8      	it	lt
 8008b00:	6032      	strlt	r2, [r6, #0]
 8008b02:	ea33 0308 	bics.w	r3, r3, r8
 8008b06:	d112      	bne.n	8008b2e <_dtoa_r+0x9e>
 8008b08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b14:	4323      	orrs	r3, r4
 8008b16:	f000 8550 	beq.w	80095ba <_dtoa_r+0xb2a>
 8008b1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008d64 <_dtoa_r+0x2d4>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8552 	beq.w	80095ca <_dtoa_r+0xb3a>
 8008b26:	f10a 0303 	add.w	r3, sl, #3
 8008b2a:	f000 bd4c 	b.w	80095c6 <_dtoa_r+0xb36>
 8008b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f7f7 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 8008b42:	4607      	mov	r7, r0
 8008b44:	b158      	cbz	r0, 8008b5e <_dtoa_r+0xce>
 8008b46:	2301      	movs	r3, #1
 8008b48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b4e:	b113      	cbz	r3, 8008b56 <_dtoa_r+0xc6>
 8008b50:	4b85      	ldr	r3, [pc, #532]	@ (8008d68 <_dtoa_r+0x2d8>)
 8008b52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008d6c <_dtoa_r+0x2dc>
 8008b5a:	f000 bd36 	b.w	80095ca <_dtoa_r+0xb3a>
 8008b5e:	ab14      	add	r3, sp, #80	@ 0x50
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	ab15      	add	r3, sp, #84	@ 0x54
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	4658      	mov	r0, fp
 8008b68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b6c:	f001 fa30 	bl	8009fd0 <__d2b>
 8008b70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008b74:	4681      	mov	r9, r0
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d077      	beq.n	8008c6a <_dtoa_r+0x1da>
 8008b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b90:	9712      	str	r7, [sp, #72]	@ 0x48
 8008b92:	4619      	mov	r1, r3
 8008b94:	2200      	movs	r2, #0
 8008b96:	4b76      	ldr	r3, [pc, #472]	@ (8008d70 <_dtoa_r+0x2e0>)
 8008b98:	f7f7 fae6 	bl	8000168 <__aeabi_dsub>
 8008b9c:	a368      	add	r3, pc, #416	@ (adr r3, 8008d40 <_dtoa_r+0x2b0>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fc99 	bl	80004d8 <__aeabi_dmul>
 8008ba6:	a368      	add	r3, pc, #416	@ (adr r3, 8008d48 <_dtoa_r+0x2b8>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 fade 	bl	800016c <__adddf3>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	f7f7 fc25 	bl	8000404 <__aeabi_i2d>
 8008bba:	a365      	add	r3, pc, #404	@ (adr r3, 8008d50 <_dtoa_r+0x2c0>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fc8a 	bl	80004d8 <__aeabi_dmul>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 face 	bl	800016c <__adddf3>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f7f7 ff30 	bl	8000a38 <__aeabi_d2iz>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 feeb 	bl	80009bc <__aeabi_dcmplt>
 8008be6:	b140      	cbz	r0, 8008bfa <_dtoa_r+0x16a>
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7f7 fc0b 	bl	8000404 <__aeabi_i2d>
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f7f7 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf6:	b900      	cbnz	r0, 8008bfa <_dtoa_r+0x16a>
 8008bf8:	3f01      	subs	r7, #1
 8008bfa:	2f16      	cmp	r7, #22
 8008bfc:	d853      	bhi.n	8008ca6 <_dtoa_r+0x216>
 8008bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c02:	4b5c      	ldr	r3, [pc, #368]	@ (8008d74 <_dtoa_r+0x2e4>)
 8008c04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fed6 	bl	80009bc <__aeabi_dcmplt>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d04a      	beq.n	8008caa <_dtoa_r+0x21a>
 8008c14:	2300      	movs	r3, #0
 8008c16:	3f01      	subs	r7, #1
 8008c18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c1c:	1b9b      	subs	r3, r3, r6
 8008c1e:	1e5a      	subs	r2, r3, #1
 8008c20:	bf46      	itte	mi
 8008c22:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c26:	2300      	movmi	r3, #0
 8008c28:	f04f 0800 	movpl.w	r8, #0
 8008c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c2e:	bf48      	it	mi
 8008c30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008c32:	2f00      	cmp	r7, #0
 8008c34:	db3b      	blt.n	8008cae <_dtoa_r+0x21e>
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	970e      	str	r7, [sp, #56]	@ 0x38
 8008c3a:	443b      	add	r3, r7
 8008c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c3e:	2300      	movs	r3, #0
 8008c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d866      	bhi.n	8008d16 <_dtoa_r+0x286>
 8008c48:	2b05      	cmp	r3, #5
 8008c4a:	bfc4      	itt	gt
 8008c4c:	3b04      	subgt	r3, #4
 8008c4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008c50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c52:	bfc8      	it	gt
 8008c54:	2400      	movgt	r4, #0
 8008c56:	f1a3 0302 	sub.w	r3, r3, #2
 8008c5a:	bfd8      	it	le
 8008c5c:	2401      	movle	r4, #1
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d864      	bhi.n	8008d2c <_dtoa_r+0x29c>
 8008c62:	e8df f003 	tbb	[pc, r3]
 8008c66:	382b      	.short	0x382b
 8008c68:	5636      	.short	0x5636
 8008c6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c6e:	441e      	add	r6, r3
 8008c70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	bfc1      	itttt	gt
 8008c78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c88:	bfd6      	itet	le
 8008c8a:	f1c3 0320 	rsble	r3, r3, #32
 8008c8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c92:	fa04 f003 	lslle.w	r0, r4, r3
 8008c96:	f7f7 fba5 	bl	80003e4 <__aeabi_ui2d>
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ca4:	e775      	b.n	8008b92 <_dtoa_r+0x102>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7b6      	b.n	8008c18 <_dtoa_r+0x188>
 8008caa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008cac:	e7b5      	b.n	8008c1a <_dtoa_r+0x18a>
 8008cae:	427b      	negs	r3, r7
 8008cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	eba8 0807 	sub.w	r8, r8, r7
 8008cb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cba:	e7c2      	b.n	8008c42 <_dtoa_r+0x1b2>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc35      	bgt.n	8008d32 <_dtoa_r+0x2a2>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	461a      	mov	r2, r3
 8008cca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008cce:	9221      	str	r2, [sp, #132]	@ 0x84
 8008cd0:	e00b      	b.n	8008cea <_dtoa_r+0x25a>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e7f3      	b.n	8008cbe <_dtoa_r+0x22e>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	9308      	str	r3, [sp, #32]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	9307      	str	r3, [sp, #28]
 8008ce6:	bfb8      	it	lt
 8008ce8:	2301      	movlt	r3, #1
 8008cea:	2100      	movs	r1, #0
 8008cec:	2204      	movs	r2, #4
 8008cee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008cf2:	f102 0514 	add.w	r5, r2, #20
 8008cf6:	429d      	cmp	r5, r3
 8008cf8:	d91f      	bls.n	8008d3a <_dtoa_r+0x2aa>
 8008cfa:	6041      	str	r1, [r0, #4]
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	f000 fd8d 	bl	800981c <_Balloc>
 8008d02:	4682      	mov	sl, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d139      	bne.n	8008d7c <_dtoa_r+0x2ec>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d78 <_dtoa_r+0x2e8>)
 8008d10:	e6d2      	b.n	8008ab8 <_dtoa_r+0x28>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e7e0      	b.n	8008cd8 <_dtoa_r+0x248>
 8008d16:	2401      	movs	r4, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d22:	2200      	movs	r2, #0
 8008d24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008d28:	2312      	movs	r3, #18
 8008d2a:	e7d0      	b.n	8008cce <_dtoa_r+0x23e>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d30:	e7f5      	b.n	8008d1e <_dtoa_r+0x28e>
 8008d32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008d38:	e7d7      	b.n	8008cea <_dtoa_r+0x25a>
 8008d3a:	3101      	adds	r1, #1
 8008d3c:	0052      	lsls	r2, r2, #1
 8008d3e:	e7d8      	b.n	8008cf2 <_dtoa_r+0x262>
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800c130 	.word	0x0800c130
 8008d5c:	0800c147 	.word	0x0800c147
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800c12c 	.word	0x0800c12c
 8008d68:	0800c0fb 	.word	0x0800c0fb
 8008d6c:	0800c0fa 	.word	0x0800c0fa
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800c240 	.word	0x0800c240
 8008d78:	0800c19f 	.word	0x0800c19f
 8008d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d80:	6018      	str	r0, [r3, #0]
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	2b0e      	cmp	r3, #14
 8008d86:	f200 80a4 	bhi.w	8008ed2 <_dtoa_r+0x442>
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	f000 80a1 	beq.w	8008ed2 <_dtoa_r+0x442>
 8008d90:	2f00      	cmp	r7, #0
 8008d92:	dd33      	ble.n	8008dfc <_dtoa_r+0x36c>
 8008d94:	4b86      	ldr	r3, [pc, #536]	@ (8008fb0 <_dtoa_r+0x520>)
 8008d96:	f007 020f 	and.w	r2, r7, #15
 8008d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9e:	05f8      	lsls	r0, r7, #23
 8008da0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008da4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008da8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008dac:	d516      	bpl.n	8008ddc <_dtoa_r+0x34c>
 8008dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008db2:	4b80      	ldr	r3, [pc, #512]	@ (8008fb4 <_dtoa_r+0x524>)
 8008db4:	2603      	movs	r6, #3
 8008db6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dba:	f7f7 fcb7 	bl	800072c <__aeabi_ddiv>
 8008dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc2:	f004 040f 	and.w	r4, r4, #15
 8008dc6:	4d7b      	ldr	r5, [pc, #492]	@ (8008fb4 <_dtoa_r+0x524>)
 8008dc8:	b954      	cbnz	r4, 8008de0 <_dtoa_r+0x350>
 8008dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd2:	f7f7 fcab 	bl	800072c <__aeabi_ddiv>
 8008dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dda:	e028      	b.n	8008e2e <_dtoa_r+0x39e>
 8008ddc:	2602      	movs	r6, #2
 8008dde:	e7f2      	b.n	8008dc6 <_dtoa_r+0x336>
 8008de0:	07e1      	lsls	r1, r4, #31
 8008de2:	d508      	bpl.n	8008df6 <_dtoa_r+0x366>
 8008de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dec:	f7f7 fb74 	bl	80004d8 <__aeabi_dmul>
 8008df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008df4:	3601      	adds	r6, #1
 8008df6:	1064      	asrs	r4, r4, #1
 8008df8:	3508      	adds	r5, #8
 8008dfa:	e7e5      	b.n	8008dc8 <_dtoa_r+0x338>
 8008dfc:	f000 80d2 	beq.w	8008fa4 <_dtoa_r+0x514>
 8008e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e04:	427c      	negs	r4, r7
 8008e06:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb0 <_dtoa_r+0x520>)
 8008e08:	f004 020f 	and.w	r2, r4, #15
 8008e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fb60 	bl	80004d8 <__aeabi_dmul>
 8008e18:	2602      	movs	r6, #2
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e20:	4d64      	ldr	r5, [pc, #400]	@ (8008fb4 <_dtoa_r+0x524>)
 8008e22:	1124      	asrs	r4, r4, #4
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	f040 80b2 	bne.w	8008f8e <_dtoa_r+0x4fe>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1d3      	bne.n	8008dd6 <_dtoa_r+0x346>
 8008e2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80b7 	beq.w	8008fa8 <_dtoa_r+0x518>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4b5d      	ldr	r3, [pc, #372]	@ (8008fb8 <_dtoa_r+0x528>)
 8008e42:	f7f7 fdbb 	bl	80009bc <__aeabi_dcmplt>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f000 80ae 	beq.w	8008fa8 <_dtoa_r+0x518>
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80aa 	beq.w	8008fa8 <_dtoa_r+0x518>
 8008e54:	9b08      	ldr	r3, [sp, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dd37      	ble.n	8008eca <_dtoa_r+0x43a>
 8008e5a:	1e7b      	subs	r3, r7, #1
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	2200      	movs	r2, #0
 8008e62:	4629      	mov	r1, r5
 8008e64:	4b55      	ldr	r3, [pc, #340]	@ (8008fbc <_dtoa_r+0x52c>)
 8008e66:	f7f7 fb37 	bl	80004d8 <__aeabi_dmul>
 8008e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e6e:	9c08      	ldr	r4, [sp, #32]
 8008e70:	3601      	adds	r6, #1
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7f7 fac6 	bl	8000404 <__aeabi_i2d>
 8008e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e7c:	f7f7 fb2c 	bl	80004d8 <__aeabi_dmul>
 8008e80:	2200      	movs	r2, #0
 8008e82:	4b4f      	ldr	r3, [pc, #316]	@ (8008fc0 <_dtoa_r+0x530>)
 8008e84:	f7f7 f972 	bl	800016c <__adddf3>
 8008e88:	4605      	mov	r5, r0
 8008e8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	f040 809a 	bne.w	8008fc8 <_dtoa_r+0x538>
 8008e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008fc4 <_dtoa_r+0x534>)
 8008e9c:	f7f7 f964 	bl	8000168 <__aeabi_dsub>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4633      	mov	r3, r6
 8008eac:	f7f7 fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f040 828e 	bne.w	80093d2 <_dtoa_r+0x942>
 8008eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ec0:	f7f7 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f040 8127 	bne.w	8009118 <_dtoa_r+0x688>
 8008eca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ed2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f2c0 8163 	blt.w	80091a0 <_dtoa_r+0x710>
 8008eda:	2f0e      	cmp	r7, #14
 8008edc:	f300 8160 	bgt.w	80091a0 <_dtoa_r+0x710>
 8008ee0:	4b33      	ldr	r3, [pc, #204]	@ (8008fb0 <_dtoa_r+0x520>)
 8008ee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008eee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	da03      	bge.n	8008efc <_dtoa_r+0x46c>
 8008ef4:	9b07      	ldr	r3, [sp, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f340 8100 	ble.w	80090fc <_dtoa_r+0x66c>
 8008efc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f00:	4656      	mov	r6, sl
 8008f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 fc0f 	bl	800072c <__aeabi_ddiv>
 8008f0e:	f7f7 fd93 	bl	8000a38 <__aeabi_d2iz>
 8008f12:	4680      	mov	r8, r0
 8008f14:	f7f7 fa76 	bl	8000404 <__aeabi_i2d>
 8008f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f1c:	f7f7 fadc 	bl	80004d8 <__aeabi_dmul>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 f91e 	bl	8000168 <__aeabi_dsub>
 8008f2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f30:	9d07      	ldr	r5, [sp, #28]
 8008f32:	f806 4b01 	strb.w	r4, [r6], #1
 8008f36:	eba6 040a 	sub.w	r4, r6, sl
 8008f3a:	42a5      	cmp	r5, r4
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	f040 8116 	bne.w	8009170 <_dtoa_r+0x6e0>
 8008f44:	f7f7 f912 	bl	800016c <__adddf3>
 8008f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	460d      	mov	r5, r1
 8008f50:	f7f7 fd52 	bl	80009f8 <__aeabi_dcmpgt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f040 80f8 	bne.w	800914a <_dtoa_r+0x6ba>
 8008f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 fd21 	bl	80009a8 <__aeabi_dcmpeq>
 8008f66:	b118      	cbz	r0, 8008f70 <_dtoa_r+0x4e0>
 8008f68:	f018 0f01 	tst.w	r8, #1
 8008f6c:	f040 80ed 	bne.w	800914a <_dtoa_r+0x6ba>
 8008f70:	4649      	mov	r1, r9
 8008f72:	4658      	mov	r0, fp
 8008f74:	f000 fc92 	bl	800989c <_Bfree>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	7033      	strb	r3, [r6, #0]
 8008f7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f7e:	3701      	adds	r7, #1
 8008f80:	601f      	str	r7, [r3, #0]
 8008f82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8320 	beq.w	80095ca <_dtoa_r+0xb3a>
 8008f8a:	601e      	str	r6, [r3, #0]
 8008f8c:	e31d      	b.n	80095ca <_dtoa_r+0xb3a>
 8008f8e:	07e2      	lsls	r2, r4, #31
 8008f90:	d505      	bpl.n	8008f9e <_dtoa_r+0x50e>
 8008f92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f96:	f7f7 fa9f 	bl	80004d8 <__aeabi_dmul>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	1064      	asrs	r4, r4, #1
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	e73f      	b.n	8008e24 <_dtoa_r+0x394>
 8008fa4:	2602      	movs	r6, #2
 8008fa6:	e742      	b.n	8008e2e <_dtoa_r+0x39e>
 8008fa8:	9c07      	ldr	r4, [sp, #28]
 8008faa:	9704      	str	r7, [sp, #16]
 8008fac:	e761      	b.n	8008e72 <_dtoa_r+0x3e2>
 8008fae:	bf00      	nop
 8008fb0:	0800c240 	.word	0x0800c240
 8008fb4:	0800c218 	.word	0x0800c218
 8008fb8:	3ff00000 	.word	0x3ff00000
 8008fbc:	40240000 	.word	0x40240000
 8008fc0:	401c0000 	.word	0x401c0000
 8008fc4:	40140000 	.word	0x40140000
 8008fc8:	4b70      	ldr	r3, [pc, #448]	@ (800918c <_dtoa_r+0x6fc>)
 8008fca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fd4:	4454      	add	r4, sl
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d045      	beq.n	8009066 <_dtoa_r+0x5d6>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	496c      	ldr	r1, [pc, #432]	@ (8009190 <_dtoa_r+0x700>)
 8008fde:	f7f7 fba5 	bl	800072c <__aeabi_ddiv>
 8008fe2:	4633      	mov	r3, r6
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	f7f7 f8bf 	bl	8000168 <__aeabi_dsub>
 8008fea:	4656      	mov	r6, sl
 8008fec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ff4:	f7f7 fd20 	bl	8000a38 <__aeabi_d2iz>
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	f7f7 fa03 	bl	8000404 <__aeabi_i2d>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009006:	f7f7 f8af 	bl	8000168 <__aeabi_dsub>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	3530      	adds	r5, #48	@ 0x30
 8009010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009014:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009018:	f806 5b01 	strb.w	r5, [r6], #1
 800901c:	f7f7 fcce 	bl	80009bc <__aeabi_dcmplt>
 8009020:	2800      	cmp	r0, #0
 8009022:	d163      	bne.n	80090ec <_dtoa_r+0x65c>
 8009024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009028:	2000      	movs	r0, #0
 800902a:	495a      	ldr	r1, [pc, #360]	@ (8009194 <_dtoa_r+0x704>)
 800902c:	f7f7 f89c 	bl	8000168 <__aeabi_dsub>
 8009030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009034:	f7f7 fcc2 	bl	80009bc <__aeabi_dcmplt>
 8009038:	2800      	cmp	r0, #0
 800903a:	f040 8087 	bne.w	800914c <_dtoa_r+0x6bc>
 800903e:	42a6      	cmp	r6, r4
 8009040:	f43f af43 	beq.w	8008eca <_dtoa_r+0x43a>
 8009044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009048:	2200      	movs	r2, #0
 800904a:	4b53      	ldr	r3, [pc, #332]	@ (8009198 <_dtoa_r+0x708>)
 800904c:	f7f7 fa44 	bl	80004d8 <__aeabi_dmul>
 8009050:	2200      	movs	r2, #0
 8009052:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800905a:	4b4f      	ldr	r3, [pc, #316]	@ (8009198 <_dtoa_r+0x708>)
 800905c:	f7f7 fa3c 	bl	80004d8 <__aeabi_dmul>
 8009060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009064:	e7c4      	b.n	8008ff0 <_dtoa_r+0x560>
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	f7f7 fa35 	bl	80004d8 <__aeabi_dmul>
 800906e:	4656      	mov	r6, sl
 8009070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009074:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907a:	f7f7 fcdd 	bl	8000a38 <__aeabi_d2iz>
 800907e:	4605      	mov	r5, r0
 8009080:	f7f7 f9c0 	bl	8000404 <__aeabi_i2d>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908c:	f7f7 f86c 	bl	8000168 <__aeabi_dsub>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	3530      	adds	r5, #48	@ 0x30
 8009096:	f806 5b01 	strb.w	r5, [r6], #1
 800909a:	42a6      	cmp	r6, r4
 800909c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	d124      	bne.n	80090f0 <_dtoa_r+0x660>
 80090a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090aa:	4b39      	ldr	r3, [pc, #228]	@ (8009190 <_dtoa_r+0x700>)
 80090ac:	f7f7 f85e 	bl	800016c <__adddf3>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b8:	f7f7 fc9e 	bl	80009f8 <__aeabi_dcmpgt>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d145      	bne.n	800914c <_dtoa_r+0x6bc>
 80090c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090c4:	2000      	movs	r0, #0
 80090c6:	4932      	ldr	r1, [pc, #200]	@ (8009190 <_dtoa_r+0x700>)
 80090c8:	f7f7 f84e 	bl	8000168 <__aeabi_dsub>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090d4:	f7f7 fc72 	bl	80009bc <__aeabi_dcmplt>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f43f aef6 	beq.w	8008eca <_dtoa_r+0x43a>
 80090de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090e0:	1e73      	subs	r3, r6, #1
 80090e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090e8:	2b30      	cmp	r3, #48	@ 0x30
 80090ea:	d0f8      	beq.n	80090de <_dtoa_r+0x64e>
 80090ec:	9f04      	ldr	r7, [sp, #16]
 80090ee:	e73f      	b.n	8008f70 <_dtoa_r+0x4e0>
 80090f0:	4b29      	ldr	r3, [pc, #164]	@ (8009198 <_dtoa_r+0x708>)
 80090f2:	f7f7 f9f1 	bl	80004d8 <__aeabi_dmul>
 80090f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090fa:	e7bc      	b.n	8009076 <_dtoa_r+0x5e6>
 80090fc:	d10c      	bne.n	8009118 <_dtoa_r+0x688>
 80090fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009102:	2200      	movs	r2, #0
 8009104:	4b25      	ldr	r3, [pc, #148]	@ (800919c <_dtoa_r+0x70c>)
 8009106:	f7f7 f9e7 	bl	80004d8 <__aeabi_dmul>
 800910a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800910e:	f7f7 fc69 	bl	80009e4 <__aeabi_dcmpge>
 8009112:	2800      	cmp	r0, #0
 8009114:	f000 815b 	beq.w	80093ce <_dtoa_r+0x93e>
 8009118:	2400      	movs	r4, #0
 800911a:	4625      	mov	r5, r4
 800911c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800911e:	4656      	mov	r6, sl
 8009120:	43db      	mvns	r3, r3
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	2700      	movs	r7, #0
 8009126:	4621      	mov	r1, r4
 8009128:	4658      	mov	r0, fp
 800912a:	f000 fbb7 	bl	800989c <_Bfree>
 800912e:	2d00      	cmp	r5, #0
 8009130:	d0dc      	beq.n	80090ec <_dtoa_r+0x65c>
 8009132:	b12f      	cbz	r7, 8009140 <_dtoa_r+0x6b0>
 8009134:	42af      	cmp	r7, r5
 8009136:	d003      	beq.n	8009140 <_dtoa_r+0x6b0>
 8009138:	4639      	mov	r1, r7
 800913a:	4658      	mov	r0, fp
 800913c:	f000 fbae 	bl	800989c <_Bfree>
 8009140:	4629      	mov	r1, r5
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fbaa 	bl	800989c <_Bfree>
 8009148:	e7d0      	b.n	80090ec <_dtoa_r+0x65c>
 800914a:	9704      	str	r7, [sp, #16]
 800914c:	4633      	mov	r3, r6
 800914e:	461e      	mov	r6, r3
 8009150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009154:	2a39      	cmp	r2, #57	@ 0x39
 8009156:	d107      	bne.n	8009168 <_dtoa_r+0x6d8>
 8009158:	459a      	cmp	sl, r3
 800915a:	d1f8      	bne.n	800914e <_dtoa_r+0x6be>
 800915c:	9a04      	ldr	r2, [sp, #16]
 800915e:	3201      	adds	r2, #1
 8009160:	9204      	str	r2, [sp, #16]
 8009162:	2230      	movs	r2, #48	@ 0x30
 8009164:	f88a 2000 	strb.w	r2, [sl]
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	3201      	adds	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e7bd      	b.n	80090ec <_dtoa_r+0x65c>
 8009170:	2200      	movs	r2, #0
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <_dtoa_r+0x708>)
 8009174:	f7f7 f9b0 	bl	80004d8 <__aeabi_dmul>
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	4604      	mov	r4, r0
 800917e:	460d      	mov	r5, r1
 8009180:	f7f7 fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f aebc 	beq.w	8008f02 <_dtoa_r+0x472>
 800918a:	e6f1      	b.n	8008f70 <_dtoa_r+0x4e0>
 800918c:	0800c240 	.word	0x0800c240
 8009190:	3fe00000 	.word	0x3fe00000
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	40240000 	.word	0x40240000
 800919c:	40140000 	.word	0x40140000
 80091a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	f000 80db 	beq.w	800935e <_dtoa_r+0x8ce>
 80091a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80091aa:	2a01      	cmp	r2, #1
 80091ac:	f300 80bf 	bgt.w	800932e <_dtoa_r+0x89e>
 80091b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	f000 80b7 	beq.w	8009326 <_dtoa_r+0x896>
 80091b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091bc:	4646      	mov	r6, r8
 80091be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c2:	2101      	movs	r1, #1
 80091c4:	441a      	add	r2, r3
 80091c6:	4658      	mov	r0, fp
 80091c8:	4498      	add	r8, r3
 80091ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80091cc:	f000 fc64 	bl	8009a98 <__i2b>
 80091d0:	4605      	mov	r5, r0
 80091d2:	b15e      	cbz	r6, 80091ec <_dtoa_r+0x75c>
 80091d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dd08      	ble.n	80091ec <_dtoa_r+0x75c>
 80091da:	42b3      	cmp	r3, r6
 80091dc:	bfa8      	it	ge
 80091de:	4633      	movge	r3, r6
 80091e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091e2:	eba8 0803 	sub.w	r8, r8, r3
 80091e6:	1af6      	subs	r6, r6, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ee:	b1f3      	cbz	r3, 800922e <_dtoa_r+0x79e>
 80091f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80b7 	beq.w	8009366 <_dtoa_r+0x8d6>
 80091f8:	b18c      	cbz	r4, 800921e <_dtoa_r+0x78e>
 80091fa:	4629      	mov	r1, r5
 80091fc:	4622      	mov	r2, r4
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fd08 	bl	8009c14 <__pow5mult>
 8009204:	464a      	mov	r2, r9
 8009206:	4601      	mov	r1, r0
 8009208:	4605      	mov	r5, r0
 800920a:	4658      	mov	r0, fp
 800920c:	f000 fc5a 	bl	8009ac4 <__multiply>
 8009210:	4649      	mov	r1, r9
 8009212:	9004      	str	r0, [sp, #16]
 8009214:	4658      	mov	r0, fp
 8009216:	f000 fb41 	bl	800989c <_Bfree>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	4699      	mov	r9, r3
 800921e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009220:	1b1a      	subs	r2, r3, r4
 8009222:	d004      	beq.n	800922e <_dtoa_r+0x79e>
 8009224:	4649      	mov	r1, r9
 8009226:	4658      	mov	r0, fp
 8009228:	f000 fcf4 	bl	8009c14 <__pow5mult>
 800922c:	4681      	mov	r9, r0
 800922e:	2101      	movs	r1, #1
 8009230:	4658      	mov	r0, fp
 8009232:	f000 fc31 	bl	8009a98 <__i2b>
 8009236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009238:	4604      	mov	r4, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 81c9 	beq.w	80095d2 <_dtoa_r+0xb42>
 8009240:	461a      	mov	r2, r3
 8009242:	4601      	mov	r1, r0
 8009244:	4658      	mov	r0, fp
 8009246:	f000 fce5 	bl	8009c14 <__pow5mult>
 800924a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800924c:	4604      	mov	r4, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	f300 808f 	bgt.w	8009372 <_dtoa_r+0x8e2>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f040 8087 	bne.w	800936a <_dtoa_r+0x8da>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009262:	2b00      	cmp	r3, #0
 8009264:	f040 8083 	bne.w	800936e <_dtoa_r+0x8de>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	b12b      	cbz	r3, 8009280 <_dtoa_r+0x7f0>
 8009274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009276:	f108 0801 	add.w	r8, r8, #1
 800927a:	3301      	adds	r3, #1
 800927c:	9309      	str	r3, [sp, #36]	@ 0x24
 800927e:	2301      	movs	r3, #1
 8009280:	930a      	str	r3, [sp, #40]	@ 0x28
 8009282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 81aa 	beq.w	80095de <_dtoa_r+0xb4e>
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009290:	6918      	ldr	r0, [r3, #16]
 8009292:	f000 fbb5 	bl	8009a00 <__hi0bits>
 8009296:	f1c0 0020 	rsb	r0, r0, #32
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	4418      	add	r0, r3
 800929e:	f010 001f 	ands.w	r0, r0, #31
 80092a2:	d071      	beq.n	8009388 <_dtoa_r+0x8f8>
 80092a4:	f1c0 0320 	rsb	r3, r0, #32
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	dd65      	ble.n	8009378 <_dtoa_r+0x8e8>
 80092ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ae:	f1c0 001c 	rsb	r0, r0, #28
 80092b2:	4403      	add	r3, r0
 80092b4:	4480      	add	r8, r0
 80092b6:	4406      	add	r6, r0
 80092b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ba:	f1b8 0f00 	cmp.w	r8, #0
 80092be:	dd05      	ble.n	80092cc <_dtoa_r+0x83c>
 80092c0:	4649      	mov	r1, r9
 80092c2:	4642      	mov	r2, r8
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 fcff 	bl	8009cc8 <__lshift>
 80092ca:	4681      	mov	r9, r0
 80092cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd05      	ble.n	80092de <_dtoa_r+0x84e>
 80092d2:	4621      	mov	r1, r4
 80092d4:	461a      	mov	r2, r3
 80092d6:	4658      	mov	r0, fp
 80092d8:	f000 fcf6 	bl	8009cc8 <__lshift>
 80092dc:	4604      	mov	r4, r0
 80092de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d053      	beq.n	800938c <_dtoa_r+0x8fc>
 80092e4:	4621      	mov	r1, r4
 80092e6:	4648      	mov	r0, r9
 80092e8:	f000 fd5a 	bl	8009da0 <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	da4d      	bge.n	800938c <_dtoa_r+0x8fc>
 80092f0:	1e7b      	subs	r3, r7, #1
 80092f2:	4649      	mov	r1, r9
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	220a      	movs	r2, #10
 80092f8:	2300      	movs	r3, #0
 80092fa:	4658      	mov	r0, fp
 80092fc:	f000 faf0 	bl	80098e0 <__multadd>
 8009300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009302:	4681      	mov	r9, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 816c 	beq.w	80095e2 <_dtoa_r+0xb52>
 800930a:	2300      	movs	r3, #0
 800930c:	4629      	mov	r1, r5
 800930e:	220a      	movs	r2, #10
 8009310:	4658      	mov	r0, fp
 8009312:	f000 fae5 	bl	80098e0 <__multadd>
 8009316:	9b08      	ldr	r3, [sp, #32]
 8009318:	4605      	mov	r5, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	dc61      	bgt.n	80093e2 <_dtoa_r+0x952>
 800931e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009320:	2b02      	cmp	r3, #2
 8009322:	dc3b      	bgt.n	800939c <_dtoa_r+0x90c>
 8009324:	e05d      	b.n	80093e2 <_dtoa_r+0x952>
 8009326:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009328:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800932c:	e746      	b.n	80091bc <_dtoa_r+0x72c>
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	1e5c      	subs	r4, r3, #1
 8009332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009334:	42a3      	cmp	r3, r4
 8009336:	bfbf      	itttt	lt
 8009338:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800933a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800933c:	1ae3      	sublt	r3, r4, r3
 800933e:	18d2      	addlt	r2, r2, r3
 8009340:	bfa8      	it	ge
 8009342:	1b1c      	subge	r4, r3, r4
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	bfbe      	ittt	lt
 8009348:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800934a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800934c:	2400      	movlt	r4, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb5      	itete	lt
 8009352:	eba8 0603 	sublt.w	r6, r8, r3
 8009356:	4646      	movge	r6, r8
 8009358:	2300      	movlt	r3, #0
 800935a:	9b07      	ldrge	r3, [sp, #28]
 800935c:	e730      	b.n	80091c0 <_dtoa_r+0x730>
 800935e:	4646      	mov	r6, r8
 8009360:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009362:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009364:	e735      	b.n	80091d2 <_dtoa_r+0x742>
 8009366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009368:	e75c      	b.n	8009224 <_dtoa_r+0x794>
 800936a:	2300      	movs	r3, #0
 800936c:	e788      	b.n	8009280 <_dtoa_r+0x7f0>
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	e786      	b.n	8009280 <_dtoa_r+0x7f0>
 8009372:	2300      	movs	r3, #0
 8009374:	930a      	str	r3, [sp, #40]	@ 0x28
 8009376:	e788      	b.n	800928a <_dtoa_r+0x7fa>
 8009378:	d09f      	beq.n	80092ba <_dtoa_r+0x82a>
 800937a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800937c:	331c      	adds	r3, #28
 800937e:	441a      	add	r2, r3
 8009380:	4498      	add	r8, r3
 8009382:	441e      	add	r6, r3
 8009384:	9209      	str	r2, [sp, #36]	@ 0x24
 8009386:	e798      	b.n	80092ba <_dtoa_r+0x82a>
 8009388:	4603      	mov	r3, r0
 800938a:	e7f6      	b.n	800937a <_dtoa_r+0x8ea>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	9704      	str	r7, [sp, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dc20      	bgt.n	80093d6 <_dtoa_r+0x946>
 8009394:	9308      	str	r3, [sp, #32]
 8009396:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009398:	2b02      	cmp	r3, #2
 800939a:	dd1e      	ble.n	80093da <_dtoa_r+0x94a>
 800939c:	9b08      	ldr	r3, [sp, #32]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f47f aebc 	bne.w	800911c <_dtoa_r+0x68c>
 80093a4:	4621      	mov	r1, r4
 80093a6:	2205      	movs	r2, #5
 80093a8:	4658      	mov	r0, fp
 80093aa:	f000 fa99 	bl	80098e0 <__multadd>
 80093ae:	4601      	mov	r1, r0
 80093b0:	4604      	mov	r4, r0
 80093b2:	4648      	mov	r0, r9
 80093b4:	f000 fcf4 	bl	8009da0 <__mcmp>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f77f aeaf 	ble.w	800911c <_dtoa_r+0x68c>
 80093be:	2331      	movs	r3, #49	@ 0x31
 80093c0:	4656      	mov	r6, sl
 80093c2:	f806 3b01 	strb.w	r3, [r6], #1
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	3301      	adds	r3, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	e6aa      	b.n	8009124 <_dtoa_r+0x694>
 80093ce:	9c07      	ldr	r4, [sp, #28]
 80093d0:	9704      	str	r7, [sp, #16]
 80093d2:	4625      	mov	r5, r4
 80093d4:	e7f3      	b.n	80093be <_dtoa_r+0x92e>
 80093d6:	9b07      	ldr	r3, [sp, #28]
 80093d8:	9308      	str	r3, [sp, #32]
 80093da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8104 	beq.w	80095ea <_dtoa_r+0xb5a>
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	dd05      	ble.n	80093f2 <_dtoa_r+0x962>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4632      	mov	r2, r6
 80093ea:	4658      	mov	r0, fp
 80093ec:	f000 fc6c 	bl	8009cc8 <__lshift>
 80093f0:	4605      	mov	r5, r0
 80093f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d05a      	beq.n	80094ae <_dtoa_r+0xa1e>
 80093f8:	4658      	mov	r0, fp
 80093fa:	6869      	ldr	r1, [r5, #4]
 80093fc:	f000 fa0e 	bl	800981c <_Balloc>
 8009400:	4606      	mov	r6, r0
 8009402:	b928      	cbnz	r0, 8009410 <_dtoa_r+0x980>
 8009404:	4602      	mov	r2, r0
 8009406:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800940a:	4b83      	ldr	r3, [pc, #524]	@ (8009618 <_dtoa_r+0xb88>)
 800940c:	f7ff bb54 	b.w	8008ab8 <_dtoa_r+0x28>
 8009410:	692a      	ldr	r2, [r5, #16]
 8009412:	f105 010c 	add.w	r1, r5, #12
 8009416:	3202      	adds	r2, #2
 8009418:	0092      	lsls	r2, r2, #2
 800941a:	300c      	adds	r0, #12
 800941c:	f7ff fa9d 	bl	800895a <memcpy>
 8009420:	2201      	movs	r2, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4658      	mov	r0, fp
 8009426:	f000 fc4f 	bl	8009cc8 <__lshift>
 800942a:	462f      	mov	r7, r5
 800942c:	4605      	mov	r5, r0
 800942e:	f10a 0301 	add.w	r3, sl, #1
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	4453      	add	r3, sl
 8009438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800943a:	9b02      	ldr	r3, [sp, #8]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	930a      	str	r3, [sp, #40]	@ 0x28
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	4621      	mov	r1, r4
 8009446:	3b01      	subs	r3, #1
 8009448:	4648      	mov	r0, r9
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	f7ff fa98 	bl	8008980 <quorem>
 8009450:	4639      	mov	r1, r7
 8009452:	9008      	str	r0, [sp, #32]
 8009454:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009458:	4648      	mov	r0, r9
 800945a:	f000 fca1 	bl	8009da0 <__mcmp>
 800945e:	462a      	mov	r2, r5
 8009460:	9009      	str	r0, [sp, #36]	@ 0x24
 8009462:	4621      	mov	r1, r4
 8009464:	4658      	mov	r0, fp
 8009466:	f000 fcb7 	bl	8009dd8 <__mdiff>
 800946a:	68c2      	ldr	r2, [r0, #12]
 800946c:	4606      	mov	r6, r0
 800946e:	bb02      	cbnz	r2, 80094b2 <_dtoa_r+0xa22>
 8009470:	4601      	mov	r1, r0
 8009472:	4648      	mov	r0, r9
 8009474:	f000 fc94 	bl	8009da0 <__mcmp>
 8009478:	4602      	mov	r2, r0
 800947a:	4631      	mov	r1, r6
 800947c:	4658      	mov	r0, fp
 800947e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009480:	f000 fa0c 	bl	800989c <_Bfree>
 8009484:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009486:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009488:	9e07      	ldr	r6, [sp, #28]
 800948a:	ea43 0102 	orr.w	r1, r3, r2
 800948e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009490:	4319      	orrs	r1, r3
 8009492:	d110      	bne.n	80094b6 <_dtoa_r+0xa26>
 8009494:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009498:	d029      	beq.n	80094ee <_dtoa_r+0xa5e>
 800949a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd02      	ble.n	80094a6 <_dtoa_r+0xa16>
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80094a6:	9b02      	ldr	r3, [sp, #8]
 80094a8:	f883 8000 	strb.w	r8, [r3]
 80094ac:	e63b      	b.n	8009126 <_dtoa_r+0x696>
 80094ae:	4628      	mov	r0, r5
 80094b0:	e7bb      	b.n	800942a <_dtoa_r+0x99a>
 80094b2:	2201      	movs	r2, #1
 80094b4:	e7e1      	b.n	800947a <_dtoa_r+0x9ea>
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db04      	blt.n	80094c6 <_dtoa_r+0xa36>
 80094bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80094be:	430b      	orrs	r3, r1
 80094c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094c2:	430b      	orrs	r3, r1
 80094c4:	d120      	bne.n	8009508 <_dtoa_r+0xa78>
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	dded      	ble.n	80094a6 <_dtoa_r+0xa16>
 80094ca:	4649      	mov	r1, r9
 80094cc:	2201      	movs	r2, #1
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 fbfa 	bl	8009cc8 <__lshift>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4681      	mov	r9, r0
 80094d8:	f000 fc62 	bl	8009da0 <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	dc03      	bgt.n	80094e8 <_dtoa_r+0xa58>
 80094e0:	d1e1      	bne.n	80094a6 <_dtoa_r+0xa16>
 80094e2:	f018 0f01 	tst.w	r8, #1
 80094e6:	d0de      	beq.n	80094a6 <_dtoa_r+0xa16>
 80094e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ec:	d1d8      	bne.n	80094a0 <_dtoa_r+0xa10>
 80094ee:	2339      	movs	r3, #57	@ 0x39
 80094f0:	9a02      	ldr	r2, [sp, #8]
 80094f2:	7013      	strb	r3, [r2, #0]
 80094f4:	4633      	mov	r3, r6
 80094f6:	461e      	mov	r6, r3
 80094f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	2a39      	cmp	r2, #57	@ 0x39
 8009500:	d052      	beq.n	80095a8 <_dtoa_r+0xb18>
 8009502:	3201      	adds	r2, #1
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	e60e      	b.n	8009126 <_dtoa_r+0x696>
 8009508:	2a00      	cmp	r2, #0
 800950a:	dd07      	ble.n	800951c <_dtoa_r+0xa8c>
 800950c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009510:	d0ed      	beq.n	80094ee <_dtoa_r+0xa5e>
 8009512:	9a02      	ldr	r2, [sp, #8]
 8009514:	f108 0301 	add.w	r3, r8, #1
 8009518:	7013      	strb	r3, [r2, #0]
 800951a:	e604      	b.n	8009126 <_dtoa_r+0x696>
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	9a07      	ldr	r2, [sp, #28]
 8009520:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009526:	4293      	cmp	r3, r2
 8009528:	d028      	beq.n	800957c <_dtoa_r+0xaec>
 800952a:	4649      	mov	r1, r9
 800952c:	2300      	movs	r3, #0
 800952e:	220a      	movs	r2, #10
 8009530:	4658      	mov	r0, fp
 8009532:	f000 f9d5 	bl	80098e0 <__multadd>
 8009536:	42af      	cmp	r7, r5
 8009538:	4681      	mov	r9, r0
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	f04f 020a 	mov.w	r2, #10
 8009542:	4639      	mov	r1, r7
 8009544:	4658      	mov	r0, fp
 8009546:	d107      	bne.n	8009558 <_dtoa_r+0xac8>
 8009548:	f000 f9ca 	bl	80098e0 <__multadd>
 800954c:	4607      	mov	r7, r0
 800954e:	4605      	mov	r5, r0
 8009550:	9b07      	ldr	r3, [sp, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	9307      	str	r3, [sp, #28]
 8009556:	e774      	b.n	8009442 <_dtoa_r+0x9b2>
 8009558:	f000 f9c2 	bl	80098e0 <__multadd>
 800955c:	4629      	mov	r1, r5
 800955e:	4607      	mov	r7, r0
 8009560:	2300      	movs	r3, #0
 8009562:	220a      	movs	r2, #10
 8009564:	4658      	mov	r0, fp
 8009566:	f000 f9bb 	bl	80098e0 <__multadd>
 800956a:	4605      	mov	r5, r0
 800956c:	e7f0      	b.n	8009550 <_dtoa_r+0xac0>
 800956e:	9b08      	ldr	r3, [sp, #32]
 8009570:	2700      	movs	r7, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfcc      	ite	gt
 8009576:	461e      	movgt	r6, r3
 8009578:	2601      	movle	r6, #1
 800957a:	4456      	add	r6, sl
 800957c:	4649      	mov	r1, r9
 800957e:	2201      	movs	r2, #1
 8009580:	4658      	mov	r0, fp
 8009582:	f000 fba1 	bl	8009cc8 <__lshift>
 8009586:	4621      	mov	r1, r4
 8009588:	4681      	mov	r9, r0
 800958a:	f000 fc09 	bl	8009da0 <__mcmp>
 800958e:	2800      	cmp	r0, #0
 8009590:	dcb0      	bgt.n	80094f4 <_dtoa_r+0xa64>
 8009592:	d102      	bne.n	800959a <_dtoa_r+0xb0a>
 8009594:	f018 0f01 	tst.w	r8, #1
 8009598:	d1ac      	bne.n	80094f4 <_dtoa_r+0xa64>
 800959a:	4633      	mov	r3, r6
 800959c:	461e      	mov	r6, r3
 800959e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095a2:	2a30      	cmp	r2, #48	@ 0x30
 80095a4:	d0fa      	beq.n	800959c <_dtoa_r+0xb0c>
 80095a6:	e5be      	b.n	8009126 <_dtoa_r+0x696>
 80095a8:	459a      	cmp	sl, r3
 80095aa:	d1a4      	bne.n	80094f6 <_dtoa_r+0xa66>
 80095ac:	9b04      	ldr	r3, [sp, #16]
 80095ae:	3301      	adds	r3, #1
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	2331      	movs	r3, #49	@ 0x31
 80095b4:	f88a 3000 	strb.w	r3, [sl]
 80095b8:	e5b5      	b.n	8009126 <_dtoa_r+0x696>
 80095ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80095bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800961c <_dtoa_r+0xb8c>
 80095c0:	b11b      	cbz	r3, 80095ca <_dtoa_r+0xb3a>
 80095c2:	f10a 0308 	add.w	r3, sl, #8
 80095c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4650      	mov	r0, sl
 80095cc:	b017      	add	sp, #92	@ 0x5c
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	f77f ae3d 	ble.w	8009254 <_dtoa_r+0x7c4>
 80095da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80095de:	2001      	movs	r0, #1
 80095e0:	e65b      	b.n	800929a <_dtoa_r+0x80a>
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f77f aed6 	ble.w	8009396 <_dtoa_r+0x906>
 80095ea:	4656      	mov	r6, sl
 80095ec:	4621      	mov	r1, r4
 80095ee:	4648      	mov	r0, r9
 80095f0:	f7ff f9c6 	bl	8008980 <quorem>
 80095f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	f806 8b01 	strb.w	r8, [r6], #1
 80095fe:	eba6 020a 	sub.w	r2, r6, sl
 8009602:	4293      	cmp	r3, r2
 8009604:	ddb3      	ble.n	800956e <_dtoa_r+0xade>
 8009606:	4649      	mov	r1, r9
 8009608:	2300      	movs	r3, #0
 800960a:	220a      	movs	r2, #10
 800960c:	4658      	mov	r0, fp
 800960e:	f000 f967 	bl	80098e0 <__multadd>
 8009612:	4681      	mov	r9, r0
 8009614:	e7ea      	b.n	80095ec <_dtoa_r+0xb5c>
 8009616:	bf00      	nop
 8009618:	0800c19f 	.word	0x0800c19f
 800961c:	0800c123 	.word	0x0800c123

08009620 <_free_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4605      	mov	r5, r0
 8009624:	2900      	cmp	r1, #0
 8009626:	d040      	beq.n	80096aa <_free_r+0x8a>
 8009628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962c:	1f0c      	subs	r4, r1, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfb8      	it	lt
 8009632:	18e4      	addlt	r4, r4, r3
 8009634:	f000 f8e6 	bl	8009804 <__malloc_lock>
 8009638:	4a1c      	ldr	r2, [pc, #112]	@ (80096ac <_free_r+0x8c>)
 800963a:	6813      	ldr	r3, [r2, #0]
 800963c:	b933      	cbnz	r3, 800964c <_free_r+0x2c>
 800963e:	6063      	str	r3, [r4, #4]
 8009640:	6014      	str	r4, [r2, #0]
 8009642:	4628      	mov	r0, r5
 8009644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009648:	f000 b8e2 	b.w	8009810 <__malloc_unlock>
 800964c:	42a3      	cmp	r3, r4
 800964e:	d908      	bls.n	8009662 <_free_r+0x42>
 8009650:	6820      	ldr	r0, [r4, #0]
 8009652:	1821      	adds	r1, r4, r0
 8009654:	428b      	cmp	r3, r1
 8009656:	bf01      	itttt	eq
 8009658:	6819      	ldreq	r1, [r3, #0]
 800965a:	685b      	ldreq	r3, [r3, #4]
 800965c:	1809      	addeq	r1, r1, r0
 800965e:	6021      	streq	r1, [r4, #0]
 8009660:	e7ed      	b.n	800963e <_free_r+0x1e>
 8009662:	461a      	mov	r2, r3
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	b10b      	cbz	r3, 800966c <_free_r+0x4c>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d9fa      	bls.n	8009662 <_free_r+0x42>
 800966c:	6811      	ldr	r1, [r2, #0]
 800966e:	1850      	adds	r0, r2, r1
 8009670:	42a0      	cmp	r0, r4
 8009672:	d10b      	bne.n	800968c <_free_r+0x6c>
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	4401      	add	r1, r0
 8009678:	1850      	adds	r0, r2, r1
 800967a:	4283      	cmp	r3, r0
 800967c:	6011      	str	r1, [r2, #0]
 800967e:	d1e0      	bne.n	8009642 <_free_r+0x22>
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	4408      	add	r0, r1
 8009686:	6010      	str	r0, [r2, #0]
 8009688:	6053      	str	r3, [r2, #4]
 800968a:	e7da      	b.n	8009642 <_free_r+0x22>
 800968c:	d902      	bls.n	8009694 <_free_r+0x74>
 800968e:	230c      	movs	r3, #12
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	e7d6      	b.n	8009642 <_free_r+0x22>
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	1821      	adds	r1, r4, r0
 8009698:	428b      	cmp	r3, r1
 800969a:	bf01      	itttt	eq
 800969c:	6819      	ldreq	r1, [r3, #0]
 800969e:	685b      	ldreq	r3, [r3, #4]
 80096a0:	1809      	addeq	r1, r1, r0
 80096a2:	6021      	streq	r1, [r4, #0]
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	6054      	str	r4, [r2, #4]
 80096a8:	e7cb      	b.n	8009642 <_free_r+0x22>
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20001e18 	.word	0x20001e18

080096b0 <malloc>:
 80096b0:	4b02      	ldr	r3, [pc, #8]	@ (80096bc <malloc+0xc>)
 80096b2:	4601      	mov	r1, r0
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	f000 b825 	b.w	8009704 <_malloc_r>
 80096ba:	bf00      	nop
 80096bc:	20000020 	.word	0x20000020

080096c0 <sbrk_aligned>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4e0f      	ldr	r6, [pc, #60]	@ (8009700 <sbrk_aligned+0x40>)
 80096c4:	460c      	mov	r4, r1
 80096c6:	6831      	ldr	r1, [r6, #0]
 80096c8:	4605      	mov	r5, r0
 80096ca:	b911      	cbnz	r1, 80096d2 <sbrk_aligned+0x12>
 80096cc:	f001 fdf6 	bl	800b2bc <_sbrk_r>
 80096d0:	6030      	str	r0, [r6, #0]
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f001 fdf1 	bl	800b2bc <_sbrk_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d103      	bne.n	80096e6 <sbrk_aligned+0x26>
 80096de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80096e2:	4620      	mov	r0, r4
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	1cc4      	adds	r4, r0, #3
 80096e8:	f024 0403 	bic.w	r4, r4, #3
 80096ec:	42a0      	cmp	r0, r4
 80096ee:	d0f8      	beq.n	80096e2 <sbrk_aligned+0x22>
 80096f0:	1a21      	subs	r1, r4, r0
 80096f2:	4628      	mov	r0, r5
 80096f4:	f001 fde2 	bl	800b2bc <_sbrk_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d1f2      	bne.n	80096e2 <sbrk_aligned+0x22>
 80096fc:	e7ef      	b.n	80096de <sbrk_aligned+0x1e>
 80096fe:	bf00      	nop
 8009700:	20001e14 	.word	0x20001e14

08009704 <_malloc_r>:
 8009704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009708:	1ccd      	adds	r5, r1, #3
 800970a:	f025 0503 	bic.w	r5, r5, #3
 800970e:	3508      	adds	r5, #8
 8009710:	2d0c      	cmp	r5, #12
 8009712:	bf38      	it	cc
 8009714:	250c      	movcc	r5, #12
 8009716:	2d00      	cmp	r5, #0
 8009718:	4606      	mov	r6, r0
 800971a:	db01      	blt.n	8009720 <_malloc_r+0x1c>
 800971c:	42a9      	cmp	r1, r5
 800971e:	d904      	bls.n	800972a <_malloc_r+0x26>
 8009720:	230c      	movs	r3, #12
 8009722:	6033      	str	r3, [r6, #0]
 8009724:	2000      	movs	r0, #0
 8009726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800972a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009800 <_malloc_r+0xfc>
 800972e:	f000 f869 	bl	8009804 <__malloc_lock>
 8009732:	f8d8 3000 	ldr.w	r3, [r8]
 8009736:	461c      	mov	r4, r3
 8009738:	bb44      	cbnz	r4, 800978c <_malloc_r+0x88>
 800973a:	4629      	mov	r1, r5
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff ffbf 	bl	80096c0 <sbrk_aligned>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	4604      	mov	r4, r0
 8009746:	d158      	bne.n	80097fa <_malloc_r+0xf6>
 8009748:	f8d8 4000 	ldr.w	r4, [r8]
 800974c:	4627      	mov	r7, r4
 800974e:	2f00      	cmp	r7, #0
 8009750:	d143      	bne.n	80097da <_malloc_r+0xd6>
 8009752:	2c00      	cmp	r4, #0
 8009754:	d04b      	beq.n	80097ee <_malloc_r+0xea>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	4639      	mov	r1, r7
 800975a:	4630      	mov	r0, r6
 800975c:	eb04 0903 	add.w	r9, r4, r3
 8009760:	f001 fdac 	bl	800b2bc <_sbrk_r>
 8009764:	4581      	cmp	r9, r0
 8009766:	d142      	bne.n	80097ee <_malloc_r+0xea>
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	4630      	mov	r0, r6
 800976c:	1a6d      	subs	r5, r5, r1
 800976e:	4629      	mov	r1, r5
 8009770:	f7ff ffa6 	bl	80096c0 <sbrk_aligned>
 8009774:	3001      	adds	r0, #1
 8009776:	d03a      	beq.n	80097ee <_malloc_r+0xea>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	442b      	add	r3, r5
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	f8d8 3000 	ldr.w	r3, [r8]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	bb62      	cbnz	r2, 80097e0 <_malloc_r+0xdc>
 8009786:	f8c8 7000 	str.w	r7, [r8]
 800978a:	e00f      	b.n	80097ac <_malloc_r+0xa8>
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	1b52      	subs	r2, r2, r5
 8009790:	d420      	bmi.n	80097d4 <_malloc_r+0xd0>
 8009792:	2a0b      	cmp	r2, #11
 8009794:	d917      	bls.n	80097c6 <_malloc_r+0xc2>
 8009796:	1961      	adds	r1, r4, r5
 8009798:	42a3      	cmp	r3, r4
 800979a:	6025      	str	r5, [r4, #0]
 800979c:	bf18      	it	ne
 800979e:	6059      	strne	r1, [r3, #4]
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	bf08      	it	eq
 80097a4:	f8c8 1000 	streq.w	r1, [r8]
 80097a8:	5162      	str	r2, [r4, r5]
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	4630      	mov	r0, r6
 80097ae:	f000 f82f 	bl	8009810 <__malloc_unlock>
 80097b2:	f104 000b 	add.w	r0, r4, #11
 80097b6:	1d23      	adds	r3, r4, #4
 80097b8:	f020 0007 	bic.w	r0, r0, #7
 80097bc:	1ac2      	subs	r2, r0, r3
 80097be:	bf1c      	itt	ne
 80097c0:	1a1b      	subne	r3, r3, r0
 80097c2:	50a3      	strne	r3, [r4, r2]
 80097c4:	e7af      	b.n	8009726 <_malloc_r+0x22>
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	bf0c      	ite	eq
 80097cc:	f8c8 2000 	streq.w	r2, [r8]
 80097d0:	605a      	strne	r2, [r3, #4]
 80097d2:	e7eb      	b.n	80097ac <_malloc_r+0xa8>
 80097d4:	4623      	mov	r3, r4
 80097d6:	6864      	ldr	r4, [r4, #4]
 80097d8:	e7ae      	b.n	8009738 <_malloc_r+0x34>
 80097da:	463c      	mov	r4, r7
 80097dc:	687f      	ldr	r7, [r7, #4]
 80097de:	e7b6      	b.n	800974e <_malloc_r+0x4a>
 80097e0:	461a      	mov	r2, r3
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d1fb      	bne.n	80097e0 <_malloc_r+0xdc>
 80097e8:	2300      	movs	r3, #0
 80097ea:	6053      	str	r3, [r2, #4]
 80097ec:	e7de      	b.n	80097ac <_malloc_r+0xa8>
 80097ee:	230c      	movs	r3, #12
 80097f0:	4630      	mov	r0, r6
 80097f2:	6033      	str	r3, [r6, #0]
 80097f4:	f000 f80c 	bl	8009810 <__malloc_unlock>
 80097f8:	e794      	b.n	8009724 <_malloc_r+0x20>
 80097fa:	6005      	str	r5, [r0, #0]
 80097fc:	e7d6      	b.n	80097ac <_malloc_r+0xa8>
 80097fe:	bf00      	nop
 8009800:	20001e18 	.word	0x20001e18

08009804 <__malloc_lock>:
 8009804:	4801      	ldr	r0, [pc, #4]	@ (800980c <__malloc_lock+0x8>)
 8009806:	f7ff b898 	b.w	800893a <__retarget_lock_acquire_recursive>
 800980a:	bf00      	nop
 800980c:	20001e10 	.word	0x20001e10

08009810 <__malloc_unlock>:
 8009810:	4801      	ldr	r0, [pc, #4]	@ (8009818 <__malloc_unlock+0x8>)
 8009812:	f7ff b893 	b.w	800893c <__retarget_lock_release_recursive>
 8009816:	bf00      	nop
 8009818:	20001e10 	.word	0x20001e10

0800981c <_Balloc>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	69c6      	ldr	r6, [r0, #28]
 8009820:	4604      	mov	r4, r0
 8009822:	460d      	mov	r5, r1
 8009824:	b976      	cbnz	r6, 8009844 <_Balloc+0x28>
 8009826:	2010      	movs	r0, #16
 8009828:	f7ff ff42 	bl	80096b0 <malloc>
 800982c:	4602      	mov	r2, r0
 800982e:	61e0      	str	r0, [r4, #28]
 8009830:	b920      	cbnz	r0, 800983c <_Balloc+0x20>
 8009832:	216b      	movs	r1, #107	@ 0x6b
 8009834:	4b17      	ldr	r3, [pc, #92]	@ (8009894 <_Balloc+0x78>)
 8009836:	4818      	ldr	r0, [pc, #96]	@ (8009898 <_Balloc+0x7c>)
 8009838:	f001 fd56 	bl	800b2e8 <__assert_func>
 800983c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009840:	6006      	str	r6, [r0, #0]
 8009842:	60c6      	str	r6, [r0, #12]
 8009844:	69e6      	ldr	r6, [r4, #28]
 8009846:	68f3      	ldr	r3, [r6, #12]
 8009848:	b183      	cbz	r3, 800986c <_Balloc+0x50>
 800984a:	69e3      	ldr	r3, [r4, #28]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009852:	b9b8      	cbnz	r0, 8009884 <_Balloc+0x68>
 8009854:	2101      	movs	r1, #1
 8009856:	fa01 f605 	lsl.w	r6, r1, r5
 800985a:	1d72      	adds	r2, r6, #5
 800985c:	4620      	mov	r0, r4
 800985e:	0092      	lsls	r2, r2, #2
 8009860:	f001 fd60 	bl	800b324 <_calloc_r>
 8009864:	b160      	cbz	r0, 8009880 <_Balloc+0x64>
 8009866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800986a:	e00e      	b.n	800988a <_Balloc+0x6e>
 800986c:	2221      	movs	r2, #33	@ 0x21
 800986e:	2104      	movs	r1, #4
 8009870:	4620      	mov	r0, r4
 8009872:	f001 fd57 	bl	800b324 <_calloc_r>
 8009876:	69e3      	ldr	r3, [r4, #28]
 8009878:	60f0      	str	r0, [r6, #12]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e4      	bne.n	800984a <_Balloc+0x2e>
 8009880:	2000      	movs	r0, #0
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	6802      	ldr	r2, [r0, #0]
 8009886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800988a:	2300      	movs	r3, #0
 800988c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009890:	e7f7      	b.n	8009882 <_Balloc+0x66>
 8009892:	bf00      	nop
 8009894:	0800c130 	.word	0x0800c130
 8009898:	0800c1b0 	.word	0x0800c1b0

0800989c <_Bfree>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	69c6      	ldr	r6, [r0, #28]
 80098a0:	4605      	mov	r5, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Bfree+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7ff ff02 	bl	80096b0 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	61e8      	str	r0, [r5, #28]
 80098b0:	b920      	cbnz	r0, 80098bc <_Bfree+0x20>
 80098b2:	218f      	movs	r1, #143	@ 0x8f
 80098b4:	4b08      	ldr	r3, [pc, #32]	@ (80098d8 <_Bfree+0x3c>)
 80098b6:	4809      	ldr	r0, [pc, #36]	@ (80098dc <_Bfree+0x40>)
 80098b8:	f001 fd16 	bl	800b2e8 <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	b13c      	cbz	r4, 80098d6 <_Bfree+0x3a>
 80098c6:	69eb      	ldr	r3, [r5, #28]
 80098c8:	6862      	ldr	r2, [r4, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098d0:	6021      	str	r1, [r4, #0]
 80098d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	0800c130 	.word	0x0800c130
 80098dc:	0800c1b0 	.word	0x0800c1b0

080098e0 <__multadd>:
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	4607      	mov	r7, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	461e      	mov	r6, r3
 80098ea:	2000      	movs	r0, #0
 80098ec:	690d      	ldr	r5, [r1, #16]
 80098ee:	f101 0c14 	add.w	ip, r1, #20
 80098f2:	f8dc 3000 	ldr.w	r3, [ip]
 80098f6:	3001      	adds	r0, #1
 80098f8:	b299      	uxth	r1, r3
 80098fa:	fb02 6101 	mla	r1, r2, r1, r6
 80098fe:	0c1e      	lsrs	r6, r3, #16
 8009900:	0c0b      	lsrs	r3, r1, #16
 8009902:	fb02 3306 	mla	r3, r2, r6, r3
 8009906:	b289      	uxth	r1, r1
 8009908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800990c:	4285      	cmp	r5, r0
 800990e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009912:	f84c 1b04 	str.w	r1, [ip], #4
 8009916:	dcec      	bgt.n	80098f2 <__multadd+0x12>
 8009918:	b30e      	cbz	r6, 800995e <__multadd+0x7e>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc19      	bgt.n	8009954 <__multadd+0x74>
 8009920:	6861      	ldr	r1, [r4, #4]
 8009922:	4638      	mov	r0, r7
 8009924:	3101      	adds	r1, #1
 8009926:	f7ff ff79 	bl	800981c <_Balloc>
 800992a:	4680      	mov	r8, r0
 800992c:	b928      	cbnz	r0, 800993a <__multadd+0x5a>
 800992e:	4602      	mov	r2, r0
 8009930:	21ba      	movs	r1, #186	@ 0xba
 8009932:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <__multadd+0x84>)
 8009934:	480c      	ldr	r0, [pc, #48]	@ (8009968 <__multadd+0x88>)
 8009936:	f001 fcd7 	bl	800b2e8 <__assert_func>
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	f104 010c 	add.w	r1, r4, #12
 8009940:	3202      	adds	r2, #2
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	300c      	adds	r0, #12
 8009946:	f7ff f808 	bl	800895a <memcpy>
 800994a:	4621      	mov	r1, r4
 800994c:	4638      	mov	r0, r7
 800994e:	f7ff ffa5 	bl	800989c <_Bfree>
 8009952:	4644      	mov	r4, r8
 8009954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009958:	3501      	adds	r5, #1
 800995a:	615e      	str	r6, [r3, #20]
 800995c:	6125      	str	r5, [r4, #16]
 800995e:	4620      	mov	r0, r4
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	0800c19f 	.word	0x0800c19f
 8009968:	0800c1b0 	.word	0x0800c1b0

0800996c <__s2b>:
 800996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009970:	4615      	mov	r5, r2
 8009972:	2209      	movs	r2, #9
 8009974:	461f      	mov	r7, r3
 8009976:	3308      	adds	r3, #8
 8009978:	460c      	mov	r4, r1
 800997a:	fb93 f3f2 	sdiv	r3, r3, r2
 800997e:	4606      	mov	r6, r0
 8009980:	2201      	movs	r2, #1
 8009982:	2100      	movs	r1, #0
 8009984:	429a      	cmp	r2, r3
 8009986:	db09      	blt.n	800999c <__s2b+0x30>
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff ff47 	bl	800981c <_Balloc>
 800998e:	b940      	cbnz	r0, 80099a2 <__s2b+0x36>
 8009990:	4602      	mov	r2, r0
 8009992:	21d3      	movs	r1, #211	@ 0xd3
 8009994:	4b18      	ldr	r3, [pc, #96]	@ (80099f8 <__s2b+0x8c>)
 8009996:	4819      	ldr	r0, [pc, #100]	@ (80099fc <__s2b+0x90>)
 8009998:	f001 fca6 	bl	800b2e8 <__assert_func>
 800999c:	0052      	lsls	r2, r2, #1
 800999e:	3101      	adds	r1, #1
 80099a0:	e7f0      	b.n	8009984 <__s2b+0x18>
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	2d09      	cmp	r5, #9
 80099a6:	6143      	str	r3, [r0, #20]
 80099a8:	f04f 0301 	mov.w	r3, #1
 80099ac:	6103      	str	r3, [r0, #16]
 80099ae:	dd16      	ble.n	80099de <__s2b+0x72>
 80099b0:	f104 0909 	add.w	r9, r4, #9
 80099b4:	46c8      	mov	r8, r9
 80099b6:	442c      	add	r4, r5
 80099b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099bc:	4601      	mov	r1, r0
 80099be:	220a      	movs	r2, #10
 80099c0:	4630      	mov	r0, r6
 80099c2:	3b30      	subs	r3, #48	@ 0x30
 80099c4:	f7ff ff8c 	bl	80098e0 <__multadd>
 80099c8:	45a0      	cmp	r8, r4
 80099ca:	d1f5      	bne.n	80099b8 <__s2b+0x4c>
 80099cc:	f1a5 0408 	sub.w	r4, r5, #8
 80099d0:	444c      	add	r4, r9
 80099d2:	1b2d      	subs	r5, r5, r4
 80099d4:	1963      	adds	r3, r4, r5
 80099d6:	42bb      	cmp	r3, r7
 80099d8:	db04      	blt.n	80099e4 <__s2b+0x78>
 80099da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099de:	2509      	movs	r5, #9
 80099e0:	340a      	adds	r4, #10
 80099e2:	e7f6      	b.n	80099d2 <__s2b+0x66>
 80099e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099e8:	4601      	mov	r1, r0
 80099ea:	220a      	movs	r2, #10
 80099ec:	4630      	mov	r0, r6
 80099ee:	3b30      	subs	r3, #48	@ 0x30
 80099f0:	f7ff ff76 	bl	80098e0 <__multadd>
 80099f4:	e7ee      	b.n	80099d4 <__s2b+0x68>
 80099f6:	bf00      	nop
 80099f8:	0800c19f 	.word	0x0800c19f
 80099fc:	0800c1b0 	.word	0x0800c1b0

08009a00 <__hi0bits>:
 8009a00:	4603      	mov	r3, r0
 8009a02:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a06:	bf3a      	itte	cc
 8009a08:	0403      	lslcc	r3, r0, #16
 8009a0a:	2010      	movcc	r0, #16
 8009a0c:	2000      	movcs	r0, #0
 8009a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a12:	bf3c      	itt	cc
 8009a14:	021b      	lslcc	r3, r3, #8
 8009a16:	3008      	addcc	r0, #8
 8009a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1c:	bf3c      	itt	cc
 8009a1e:	011b      	lslcc	r3, r3, #4
 8009a20:	3004      	addcc	r0, #4
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a26:	bf3c      	itt	cc
 8009a28:	009b      	lslcc	r3, r3, #2
 8009a2a:	3002      	addcc	r0, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db05      	blt.n	8009a3c <__hi0bits+0x3c>
 8009a30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a34:	f100 0001 	add.w	r0, r0, #1
 8009a38:	bf08      	it	eq
 8009a3a:	2020      	moveq	r0, #32
 8009a3c:	4770      	bx	lr

08009a3e <__lo0bits>:
 8009a3e:	6803      	ldr	r3, [r0, #0]
 8009a40:	4602      	mov	r2, r0
 8009a42:	f013 0007 	ands.w	r0, r3, #7
 8009a46:	d00b      	beq.n	8009a60 <__lo0bits+0x22>
 8009a48:	07d9      	lsls	r1, r3, #31
 8009a4a:	d421      	bmi.n	8009a90 <__lo0bits+0x52>
 8009a4c:	0798      	lsls	r0, r3, #30
 8009a4e:	bf49      	itett	mi
 8009a50:	085b      	lsrmi	r3, r3, #1
 8009a52:	089b      	lsrpl	r3, r3, #2
 8009a54:	2001      	movmi	r0, #1
 8009a56:	6013      	strmi	r3, [r2, #0]
 8009a58:	bf5c      	itt	pl
 8009a5a:	2002      	movpl	r0, #2
 8009a5c:	6013      	strpl	r3, [r2, #0]
 8009a5e:	4770      	bx	lr
 8009a60:	b299      	uxth	r1, r3
 8009a62:	b909      	cbnz	r1, 8009a68 <__lo0bits+0x2a>
 8009a64:	2010      	movs	r0, #16
 8009a66:	0c1b      	lsrs	r3, r3, #16
 8009a68:	b2d9      	uxtb	r1, r3
 8009a6a:	b909      	cbnz	r1, 8009a70 <__lo0bits+0x32>
 8009a6c:	3008      	adds	r0, #8
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	0719      	lsls	r1, r3, #28
 8009a72:	bf04      	itt	eq
 8009a74:	091b      	lsreq	r3, r3, #4
 8009a76:	3004      	addeq	r0, #4
 8009a78:	0799      	lsls	r1, r3, #30
 8009a7a:	bf04      	itt	eq
 8009a7c:	089b      	lsreq	r3, r3, #2
 8009a7e:	3002      	addeq	r0, #2
 8009a80:	07d9      	lsls	r1, r3, #31
 8009a82:	d403      	bmi.n	8009a8c <__lo0bits+0x4e>
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	f100 0001 	add.w	r0, r0, #1
 8009a8a:	d003      	beq.n	8009a94 <__lo0bits+0x56>
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4770      	bx	lr
 8009a90:	2000      	movs	r0, #0
 8009a92:	4770      	bx	lr
 8009a94:	2020      	movs	r0, #32
 8009a96:	4770      	bx	lr

08009a98 <__i2b>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f7ff febd 	bl	800981c <_Balloc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <__i2b+0x1a>
 8009aa6:	f240 1145 	movw	r1, #325	@ 0x145
 8009aaa:	4b04      	ldr	r3, [pc, #16]	@ (8009abc <__i2b+0x24>)
 8009aac:	4804      	ldr	r0, [pc, #16]	@ (8009ac0 <__i2b+0x28>)
 8009aae:	f001 fc1b 	bl	800b2e8 <__assert_func>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6144      	str	r4, [r0, #20]
 8009ab6:	6103      	str	r3, [r0, #16]
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	0800c19f 	.word	0x0800c19f
 8009ac0:	0800c1b0 	.word	0x0800c1b0

08009ac4 <__multiply>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4614      	mov	r4, r2
 8009aca:	690a      	ldr	r2, [r1, #16]
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	460f      	mov	r7, r1
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	bfa2      	ittt	ge
 8009ad4:	4623      	movge	r3, r4
 8009ad6:	460c      	movge	r4, r1
 8009ad8:	461f      	movge	r7, r3
 8009ada:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ade:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	eb0a 0609 	add.w	r6, sl, r9
 8009aea:	42b3      	cmp	r3, r6
 8009aec:	b085      	sub	sp, #20
 8009aee:	bfb8      	it	lt
 8009af0:	3101      	addlt	r1, #1
 8009af2:	f7ff fe93 	bl	800981c <_Balloc>
 8009af6:	b930      	cbnz	r0, 8009b06 <__multiply+0x42>
 8009af8:	4602      	mov	r2, r0
 8009afa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009afe:	4b43      	ldr	r3, [pc, #268]	@ (8009c0c <__multiply+0x148>)
 8009b00:	4843      	ldr	r0, [pc, #268]	@ (8009c10 <__multiply+0x14c>)
 8009b02:	f001 fbf1 	bl	800b2e8 <__assert_func>
 8009b06:	f100 0514 	add.w	r5, r0, #20
 8009b0a:	462b      	mov	r3, r5
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b12:	4543      	cmp	r3, r8
 8009b14:	d321      	bcc.n	8009b5a <__multiply+0x96>
 8009b16:	f107 0114 	add.w	r1, r7, #20
 8009b1a:	f104 0214 	add.w	r2, r4, #20
 8009b1e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b22:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b26:	9302      	str	r3, [sp, #8]
 8009b28:	1b13      	subs	r3, r2, r4
 8009b2a:	3b15      	subs	r3, #21
 8009b2c:	f023 0303 	bic.w	r3, r3, #3
 8009b30:	3304      	adds	r3, #4
 8009b32:	f104 0715 	add.w	r7, r4, #21
 8009b36:	42ba      	cmp	r2, r7
 8009b38:	bf38      	it	cc
 8009b3a:	2304      	movcc	r3, #4
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	9b02      	ldr	r3, [sp, #8]
 8009b40:	9103      	str	r1, [sp, #12]
 8009b42:	428b      	cmp	r3, r1
 8009b44:	d80c      	bhi.n	8009b60 <__multiply+0x9c>
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	dd03      	ble.n	8009b52 <__multiply+0x8e>
 8009b4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d05a      	beq.n	8009c08 <__multiply+0x144>
 8009b52:	6106      	str	r6, [r0, #16]
 8009b54:	b005      	add	sp, #20
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5a:	f843 2b04 	str.w	r2, [r3], #4
 8009b5e:	e7d8      	b.n	8009b12 <__multiply+0x4e>
 8009b60:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b64:	f1ba 0f00 	cmp.w	sl, #0
 8009b68:	d023      	beq.n	8009bb2 <__multiply+0xee>
 8009b6a:	46a9      	mov	r9, r5
 8009b6c:	f04f 0c00 	mov.w	ip, #0
 8009b70:	f104 0e14 	add.w	lr, r4, #20
 8009b74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b78:	f8d9 3000 	ldr.w	r3, [r9]
 8009b7c:	fa1f fb87 	uxth.w	fp, r7
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b86:	4463      	add	r3, ip
 8009b88:	f8d9 c000 	ldr.w	ip, [r9]
 8009b8c:	0c3f      	lsrs	r7, r7, #16
 8009b8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b92:	fb0a c707 	mla	r7, sl, r7, ip
 8009b96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ba0:	4572      	cmp	r2, lr
 8009ba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ba6:	f849 3b04 	str.w	r3, [r9], #4
 8009baa:	d8e3      	bhi.n	8009b74 <__multiply+0xb0>
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	f845 c003 	str.w	ip, [r5, r3]
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	3104      	adds	r1, #4
 8009bb6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bba:	f1b9 0f00 	cmp.w	r9, #0
 8009bbe:	d021      	beq.n	8009c04 <__multiply+0x140>
 8009bc0:	46ae      	mov	lr, r5
 8009bc2:	f04f 0a00 	mov.w	sl, #0
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	f104 0c14 	add.w	ip, r4, #20
 8009bcc:	f8bc b000 	ldrh.w	fp, [ip]
 8009bd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	fb09 770b 	mla	r7, r9, fp, r7
 8009bda:	4457      	add	r7, sl
 8009bdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009be0:	f84e 3b04 	str.w	r3, [lr], #4
 8009be4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009be8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bec:	f8be 3000 	ldrh.w	r3, [lr]
 8009bf0:	4562      	cmp	r2, ip
 8009bf2:	fb09 330a 	mla	r3, r9, sl, r3
 8009bf6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009bfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bfe:	d8e5      	bhi.n	8009bcc <__multiply+0x108>
 8009c00:	9f01      	ldr	r7, [sp, #4]
 8009c02:	51eb      	str	r3, [r5, r7]
 8009c04:	3504      	adds	r5, #4
 8009c06:	e79a      	b.n	8009b3e <__multiply+0x7a>
 8009c08:	3e01      	subs	r6, #1
 8009c0a:	e79c      	b.n	8009b46 <__multiply+0x82>
 8009c0c:	0800c19f 	.word	0x0800c19f
 8009c10:	0800c1b0 	.word	0x0800c1b0

08009c14 <__pow5mult>:
 8009c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c18:	4615      	mov	r5, r2
 8009c1a:	f012 0203 	ands.w	r2, r2, #3
 8009c1e:	4607      	mov	r7, r0
 8009c20:	460e      	mov	r6, r1
 8009c22:	d007      	beq.n	8009c34 <__pow5mult+0x20>
 8009c24:	4c25      	ldr	r4, [pc, #148]	@ (8009cbc <__pow5mult+0xa8>)
 8009c26:	3a01      	subs	r2, #1
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c2e:	f7ff fe57 	bl	80098e0 <__multadd>
 8009c32:	4606      	mov	r6, r0
 8009c34:	10ad      	asrs	r5, r5, #2
 8009c36:	d03d      	beq.n	8009cb4 <__pow5mult+0xa0>
 8009c38:	69fc      	ldr	r4, [r7, #28]
 8009c3a:	b97c      	cbnz	r4, 8009c5c <__pow5mult+0x48>
 8009c3c:	2010      	movs	r0, #16
 8009c3e:	f7ff fd37 	bl	80096b0 <malloc>
 8009c42:	4602      	mov	r2, r0
 8009c44:	61f8      	str	r0, [r7, #28]
 8009c46:	b928      	cbnz	r0, 8009c54 <__pow5mult+0x40>
 8009c48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc0 <__pow5mult+0xac>)
 8009c4e:	481d      	ldr	r0, [pc, #116]	@ (8009cc4 <__pow5mult+0xb0>)
 8009c50:	f001 fb4a 	bl	800b2e8 <__assert_func>
 8009c54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c58:	6004      	str	r4, [r0, #0]
 8009c5a:	60c4      	str	r4, [r0, #12]
 8009c5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c64:	b94c      	cbnz	r4, 8009c7a <__pow5mult+0x66>
 8009c66:	f240 2171 	movw	r1, #625	@ 0x271
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff ff14 	bl	8009a98 <__i2b>
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c78:	6003      	str	r3, [r0, #0]
 8009c7a:	f04f 0900 	mov.w	r9, #0
 8009c7e:	07eb      	lsls	r3, r5, #31
 8009c80:	d50a      	bpl.n	8009c98 <__pow5mult+0x84>
 8009c82:	4631      	mov	r1, r6
 8009c84:	4622      	mov	r2, r4
 8009c86:	4638      	mov	r0, r7
 8009c88:	f7ff ff1c 	bl	8009ac4 <__multiply>
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4638      	mov	r0, r7
 8009c92:	f7ff fe03 	bl	800989c <_Bfree>
 8009c96:	4646      	mov	r6, r8
 8009c98:	106d      	asrs	r5, r5, #1
 8009c9a:	d00b      	beq.n	8009cb4 <__pow5mult+0xa0>
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	b938      	cbnz	r0, 8009cb0 <__pow5mult+0x9c>
 8009ca0:	4622      	mov	r2, r4
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff ff0d 	bl	8009ac4 <__multiply>
 8009caa:	6020      	str	r0, [r4, #0]
 8009cac:	f8c0 9000 	str.w	r9, [r0]
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	e7e4      	b.n	8009c7e <__pow5mult+0x6a>
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cba:	bf00      	nop
 8009cbc:	0800c20c 	.word	0x0800c20c
 8009cc0:	0800c130 	.word	0x0800c130
 8009cc4:	0800c1b0 	.word	0x0800c1b0

08009cc8 <__lshift>:
 8009cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	460c      	mov	r4, r1
 8009cce:	4607      	mov	r7, r0
 8009cd0:	4691      	mov	r9, r2
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	6849      	ldr	r1, [r1, #4]
 8009cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ce0:	f108 0601 	add.w	r6, r8, #1
 8009ce4:	42b3      	cmp	r3, r6
 8009ce6:	db0b      	blt.n	8009d00 <__lshift+0x38>
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff fd97 	bl	800981c <_Balloc>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	b948      	cbnz	r0, 8009d06 <__lshift+0x3e>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cf8:	4b27      	ldr	r3, [pc, #156]	@ (8009d98 <__lshift+0xd0>)
 8009cfa:	4828      	ldr	r0, [pc, #160]	@ (8009d9c <__lshift+0xd4>)
 8009cfc:	f001 faf4 	bl	800b2e8 <__assert_func>
 8009d00:	3101      	adds	r1, #1
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	e7ee      	b.n	8009ce4 <__lshift+0x1c>
 8009d06:	2300      	movs	r3, #0
 8009d08:	f100 0114 	add.w	r1, r0, #20
 8009d0c:	f100 0210 	add.w	r2, r0, #16
 8009d10:	4618      	mov	r0, r3
 8009d12:	4553      	cmp	r3, sl
 8009d14:	db33      	blt.n	8009d7e <__lshift+0xb6>
 8009d16:	6920      	ldr	r0, [r4, #16]
 8009d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d1c:	f104 0314 	add.w	r3, r4, #20
 8009d20:	f019 091f 	ands.w	r9, r9, #31
 8009d24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d2c:	d02b      	beq.n	8009d86 <__lshift+0xbe>
 8009d2e:	468a      	mov	sl, r1
 8009d30:	2200      	movs	r2, #0
 8009d32:	f1c9 0e20 	rsb	lr, r9, #32
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	fa00 f009 	lsl.w	r0, r0, r9
 8009d3c:	4310      	orrs	r0, r2
 8009d3e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d46:	459c      	cmp	ip, r3
 8009d48:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d4c:	d8f3      	bhi.n	8009d36 <__lshift+0x6e>
 8009d4e:	ebac 0304 	sub.w	r3, ip, r4
 8009d52:	3b15      	subs	r3, #21
 8009d54:	f023 0303 	bic.w	r3, r3, #3
 8009d58:	3304      	adds	r3, #4
 8009d5a:	f104 0015 	add.w	r0, r4, #21
 8009d5e:	4584      	cmp	ip, r0
 8009d60:	bf38      	it	cc
 8009d62:	2304      	movcc	r3, #4
 8009d64:	50ca      	str	r2, [r1, r3]
 8009d66:	b10a      	cbz	r2, 8009d6c <__lshift+0xa4>
 8009d68:	f108 0602 	add.w	r6, r8, #2
 8009d6c:	3e01      	subs	r6, #1
 8009d6e:	4638      	mov	r0, r7
 8009d70:	4621      	mov	r1, r4
 8009d72:	612e      	str	r6, [r5, #16]
 8009d74:	f7ff fd92 	bl	800989c <_Bfree>
 8009d78:	4628      	mov	r0, r5
 8009d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d82:	3301      	adds	r3, #1
 8009d84:	e7c5      	b.n	8009d12 <__lshift+0x4a>
 8009d86:	3904      	subs	r1, #4
 8009d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8c:	459c      	cmp	ip, r3
 8009d8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d92:	d8f9      	bhi.n	8009d88 <__lshift+0xc0>
 8009d94:	e7ea      	b.n	8009d6c <__lshift+0xa4>
 8009d96:	bf00      	nop
 8009d98:	0800c19f 	.word	0x0800c19f
 8009d9c:	0800c1b0 	.word	0x0800c1b0

08009da0 <__mcmp>:
 8009da0:	4603      	mov	r3, r0
 8009da2:	690a      	ldr	r2, [r1, #16]
 8009da4:	6900      	ldr	r0, [r0, #16]
 8009da6:	b530      	push	{r4, r5, lr}
 8009da8:	1a80      	subs	r0, r0, r2
 8009daa:	d10e      	bne.n	8009dca <__mcmp+0x2a>
 8009dac:	3314      	adds	r3, #20
 8009dae:	3114      	adds	r1, #20
 8009db0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009db4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dc0:	4295      	cmp	r5, r2
 8009dc2:	d003      	beq.n	8009dcc <__mcmp+0x2c>
 8009dc4:	d205      	bcs.n	8009dd2 <__mcmp+0x32>
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dca:	bd30      	pop	{r4, r5, pc}
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d3f3      	bcc.n	8009db8 <__mcmp+0x18>
 8009dd0:	e7fb      	b.n	8009dca <__mcmp+0x2a>
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e7f9      	b.n	8009dca <__mcmp+0x2a>
	...

08009dd8 <__mdiff>:
 8009dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	4689      	mov	r9, r1
 8009dde:	4606      	mov	r6, r0
 8009de0:	4611      	mov	r1, r2
 8009de2:	4648      	mov	r0, r9
 8009de4:	4614      	mov	r4, r2
 8009de6:	f7ff ffdb 	bl	8009da0 <__mcmp>
 8009dea:	1e05      	subs	r5, r0, #0
 8009dec:	d112      	bne.n	8009e14 <__mdiff+0x3c>
 8009dee:	4629      	mov	r1, r5
 8009df0:	4630      	mov	r0, r6
 8009df2:	f7ff fd13 	bl	800981c <_Balloc>
 8009df6:	4602      	mov	r2, r0
 8009df8:	b928      	cbnz	r0, 8009e06 <__mdiff+0x2e>
 8009dfa:	f240 2137 	movw	r1, #567	@ 0x237
 8009dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8009ef8 <__mdiff+0x120>)
 8009e00:	483e      	ldr	r0, [pc, #248]	@ (8009efc <__mdiff+0x124>)
 8009e02:	f001 fa71 	bl	800b2e8 <__assert_func>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	bfbc      	itt	lt
 8009e16:	464b      	movlt	r3, r9
 8009e18:	46a1      	movlt	r9, r4
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e20:	bfba      	itte	lt
 8009e22:	461c      	movlt	r4, r3
 8009e24:	2501      	movlt	r5, #1
 8009e26:	2500      	movge	r5, #0
 8009e28:	f7ff fcf8 	bl	800981c <_Balloc>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	b918      	cbnz	r0, 8009e38 <__mdiff+0x60>
 8009e30:	f240 2145 	movw	r1, #581	@ 0x245
 8009e34:	4b30      	ldr	r3, [pc, #192]	@ (8009ef8 <__mdiff+0x120>)
 8009e36:	e7e3      	b.n	8009e00 <__mdiff+0x28>
 8009e38:	f100 0b14 	add.w	fp, r0, #20
 8009e3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e40:	f109 0310 	add.w	r3, r9, #16
 8009e44:	60c5      	str	r5, [r0, #12]
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	f109 0514 	add.w	r5, r9, #20
 8009e4e:	46d9      	mov	r9, fp
 8009e50:	6926      	ldr	r6, [r4, #16]
 8009e52:	f104 0e14 	add.w	lr, r4, #20
 8009e56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	9b01      	ldr	r3, [sp, #4]
 8009e62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e6a:	b281      	uxth	r1, r0
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	fa1f f38a 	uxth.w	r3, sl
 8009e72:	1a5b      	subs	r3, r3, r1
 8009e74:	0c00      	lsrs	r0, r0, #16
 8009e76:	4463      	add	r3, ip
 8009e78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e86:	4576      	cmp	r6, lr
 8009e88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e8c:	f849 3b04 	str.w	r3, [r9], #4
 8009e90:	d8e6      	bhi.n	8009e60 <__mdiff+0x88>
 8009e92:	1b33      	subs	r3, r6, r4
 8009e94:	3b15      	subs	r3, #21
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	3415      	adds	r4, #21
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	42a6      	cmp	r6, r4
 8009ea0:	bf38      	it	cc
 8009ea2:	2304      	movcc	r3, #4
 8009ea4:	441d      	add	r5, r3
 8009ea6:	445b      	add	r3, fp
 8009ea8:	461e      	mov	r6, r3
 8009eaa:	462c      	mov	r4, r5
 8009eac:	4544      	cmp	r4, r8
 8009eae:	d30e      	bcc.n	8009ece <__mdiff+0xf6>
 8009eb0:	f108 0103 	add.w	r1, r8, #3
 8009eb4:	1b49      	subs	r1, r1, r5
 8009eb6:	f021 0103 	bic.w	r1, r1, #3
 8009eba:	3d03      	subs	r5, #3
 8009ebc:	45a8      	cmp	r8, r5
 8009ebe:	bf38      	it	cc
 8009ec0:	2100      	movcc	r1, #0
 8009ec2:	440b      	add	r3, r1
 8009ec4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ec8:	b199      	cbz	r1, 8009ef2 <__mdiff+0x11a>
 8009eca:	6117      	str	r7, [r2, #16]
 8009ecc:	e79e      	b.n	8009e0c <__mdiff+0x34>
 8009ece:	46e6      	mov	lr, ip
 8009ed0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ed4:	fa1f fc81 	uxth.w	ip, r1
 8009ed8:	44f4      	add	ip, lr
 8009eda:	0c08      	lsrs	r0, r1, #16
 8009edc:	4471      	add	r1, lr
 8009ede:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ee2:	b289      	uxth	r1, r1
 8009ee4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ee8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009eec:	f846 1b04 	str.w	r1, [r6], #4
 8009ef0:	e7dc      	b.n	8009eac <__mdiff+0xd4>
 8009ef2:	3f01      	subs	r7, #1
 8009ef4:	e7e6      	b.n	8009ec4 <__mdiff+0xec>
 8009ef6:	bf00      	nop
 8009ef8:	0800c19f 	.word	0x0800c19f
 8009efc:	0800c1b0 	.word	0x0800c1b0

08009f00 <__ulp>:
 8009f00:	4b0e      	ldr	r3, [pc, #56]	@ (8009f3c <__ulp+0x3c>)
 8009f02:	400b      	ands	r3, r1
 8009f04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc08      	bgt.n	8009f1e <__ulp+0x1e>
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f16:	da04      	bge.n	8009f22 <__ulp+0x22>
 8009f18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f1c:	4113      	asrs	r3, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	e008      	b.n	8009f34 <__ulp+0x34>
 8009f22:	f1a2 0314 	sub.w	r3, r2, #20
 8009f26:	2b1e      	cmp	r3, #30
 8009f28:	bfd6      	itet	le
 8009f2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f2e:	2201      	movgt	r2, #1
 8009f30:	40da      	lsrle	r2, r3
 8009f32:	2300      	movs	r3, #0
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	7ff00000 	.word	0x7ff00000

08009f40 <__b2d>:
 8009f40:	6902      	ldr	r2, [r0, #16]
 8009f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f44:	f100 0614 	add.w	r6, r0, #20
 8009f48:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009f4c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009f50:	4f1e      	ldr	r7, [pc, #120]	@ (8009fcc <__b2d+0x8c>)
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7ff fd54 	bl	8009a00 <__hi0bits>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f1c0 0020 	rsb	r0, r0, #32
 8009f5e:	2b0a      	cmp	r3, #10
 8009f60:	f1a2 0504 	sub.w	r5, r2, #4
 8009f64:	6008      	str	r0, [r1, #0]
 8009f66:	dc12      	bgt.n	8009f8e <__b2d+0x4e>
 8009f68:	42ae      	cmp	r6, r5
 8009f6a:	bf2c      	ite	cs
 8009f6c:	2200      	movcs	r2, #0
 8009f6e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f72:	f1c3 0c0b 	rsb	ip, r3, #11
 8009f76:	3315      	adds	r3, #21
 8009f78:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009f7c:	fa04 f303 	lsl.w	r3, r4, r3
 8009f80:	fa22 f20c 	lsr.w	r2, r2, ip
 8009f84:	ea4e 0107 	orr.w	r1, lr, r7
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8e:	42ae      	cmp	r6, r5
 8009f90:	bf36      	itet	cc
 8009f92:	f1a2 0508 	subcc.w	r5, r2, #8
 8009f96:	2200      	movcs	r2, #0
 8009f98:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f9c:	3b0b      	subs	r3, #11
 8009f9e:	d012      	beq.n	8009fc6 <__b2d+0x86>
 8009fa0:	f1c3 0720 	rsb	r7, r3, #32
 8009fa4:	fa22 f107 	lsr.w	r1, r2, r7
 8009fa8:	409c      	lsls	r4, r3
 8009faa:	430c      	orrs	r4, r1
 8009fac:	42b5      	cmp	r5, r6
 8009fae:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009fb2:	bf94      	ite	ls
 8009fb4:	2400      	movls	r4, #0
 8009fb6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	40fc      	lsrs	r4, r7
 8009fbe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009fc2:	4322      	orrs	r2, r4
 8009fc4:	e7e1      	b.n	8009f8a <__b2d+0x4a>
 8009fc6:	ea44 0107 	orr.w	r1, r4, r7
 8009fca:	e7de      	b.n	8009f8a <__b2d+0x4a>
 8009fcc:	3ff00000 	.word	0x3ff00000

08009fd0 <__d2b>:
 8009fd0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4690      	mov	r8, r2
 8009fd8:	4699      	mov	r9, r3
 8009fda:	9e08      	ldr	r6, [sp, #32]
 8009fdc:	f7ff fc1e 	bl	800981c <_Balloc>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	b930      	cbnz	r0, 8009ff2 <__d2b+0x22>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	f240 310f 	movw	r1, #783	@ 0x30f
 8009fea:	4b23      	ldr	r3, [pc, #140]	@ (800a078 <__d2b+0xa8>)
 8009fec:	4823      	ldr	r0, [pc, #140]	@ (800a07c <__d2b+0xac>)
 8009fee:	f001 f97b 	bl	800b2e8 <__assert_func>
 8009ff2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ff6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ffa:	b10d      	cbz	r5, 800a000 <__d2b+0x30>
 8009ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	f1b8 0300 	subs.w	r3, r8, #0
 800a006:	d024      	beq.n	800a052 <__d2b+0x82>
 800a008:	4668      	mov	r0, sp
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	f7ff fd17 	bl	8009a3e <__lo0bits>
 800a010:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a014:	b1d8      	cbz	r0, 800a04e <__d2b+0x7e>
 800a016:	f1c0 0320 	rsb	r3, r0, #32
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	430b      	orrs	r3, r1
 800a020:	40c2      	lsrs	r2, r0
 800a022:	6163      	str	r3, [r4, #20]
 800a024:	9201      	str	r2, [sp, #4]
 800a026:	9b01      	ldr	r3, [sp, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bf0c      	ite	eq
 800a02c:	2201      	moveq	r2, #1
 800a02e:	2202      	movne	r2, #2
 800a030:	61a3      	str	r3, [r4, #24]
 800a032:	6122      	str	r2, [r4, #16]
 800a034:	b1ad      	cbz	r5, 800a062 <__d2b+0x92>
 800a036:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a03a:	4405      	add	r5, r0
 800a03c:	6035      	str	r5, [r6, #0]
 800a03e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a044:	6018      	str	r0, [r3, #0]
 800a046:	4620      	mov	r0, r4
 800a048:	b002      	add	sp, #8
 800a04a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a04e:	6161      	str	r1, [r4, #20]
 800a050:	e7e9      	b.n	800a026 <__d2b+0x56>
 800a052:	a801      	add	r0, sp, #4
 800a054:	f7ff fcf3 	bl	8009a3e <__lo0bits>
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	6163      	str	r3, [r4, #20]
 800a05e:	3020      	adds	r0, #32
 800a060:	e7e7      	b.n	800a032 <__d2b+0x62>
 800a062:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a066:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a06a:	6030      	str	r0, [r6, #0]
 800a06c:	6918      	ldr	r0, [r3, #16]
 800a06e:	f7ff fcc7 	bl	8009a00 <__hi0bits>
 800a072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a076:	e7e4      	b.n	800a042 <__d2b+0x72>
 800a078:	0800c19f 	.word	0x0800c19f
 800a07c:	0800c1b0 	.word	0x0800c1b0

0800a080 <__ratio>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	b085      	sub	sp, #20
 800a086:	e9cd 1000 	strd	r1, r0, [sp]
 800a08a:	a902      	add	r1, sp, #8
 800a08c:	f7ff ff58 	bl	8009f40 <__b2d>
 800a090:	468b      	mov	fp, r1
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	9800      	ldr	r0, [sp, #0]
 800a098:	a903      	add	r1, sp, #12
 800a09a:	f7ff ff51 	bl	8009f40 <__b2d>
 800a09e:	460d      	mov	r5, r1
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	6919      	ldr	r1, [r3, #16]
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	1ac9      	subs	r1, r1, r3
 800a0b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfcd      	iteet	gt
 800a0be:	463a      	movgt	r2, r7
 800a0c0:	462a      	movle	r2, r5
 800a0c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a0ca:	bfd8      	it	le
 800a0cc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	f7f6 fb29 	bl	800072c <__aeabi_ddiv>
 800a0da:	b005      	add	sp, #20
 800a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0e0 <__copybits>:
 800a0e0:	3901      	subs	r1, #1
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	1149      	asrs	r1, r1, #5
 800a0e6:	6914      	ldr	r4, [r2, #16]
 800a0e8:	3101      	adds	r1, #1
 800a0ea:	f102 0314 	add.w	r3, r2, #20
 800a0ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a0f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0f6:	1f05      	subs	r5, r0, #4
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d30c      	bcc.n	800a116 <__copybits+0x36>
 800a0fc:	1aa3      	subs	r3, r4, r2
 800a0fe:	3b11      	subs	r3, #17
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	3211      	adds	r2, #17
 800a106:	42a2      	cmp	r2, r4
 800a108:	bf88      	it	hi
 800a10a:	2300      	movhi	r3, #0
 800a10c:	4418      	add	r0, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	4288      	cmp	r0, r1
 800a112:	d305      	bcc.n	800a120 <__copybits+0x40>
 800a114:	bd70      	pop	{r4, r5, r6, pc}
 800a116:	f853 6b04 	ldr.w	r6, [r3], #4
 800a11a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a11e:	e7eb      	b.n	800a0f8 <__copybits+0x18>
 800a120:	f840 3b04 	str.w	r3, [r0], #4
 800a124:	e7f4      	b.n	800a110 <__copybits+0x30>

0800a126 <__any_on>:
 800a126:	f100 0214 	add.w	r2, r0, #20
 800a12a:	6900      	ldr	r0, [r0, #16]
 800a12c:	114b      	asrs	r3, r1, #5
 800a12e:	4298      	cmp	r0, r3
 800a130:	b510      	push	{r4, lr}
 800a132:	db11      	blt.n	800a158 <__any_on+0x32>
 800a134:	dd0a      	ble.n	800a14c <__any_on+0x26>
 800a136:	f011 011f 	ands.w	r1, r1, #31
 800a13a:	d007      	beq.n	800a14c <__any_on+0x26>
 800a13c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a140:	fa24 f001 	lsr.w	r0, r4, r1
 800a144:	fa00 f101 	lsl.w	r1, r0, r1
 800a148:	428c      	cmp	r4, r1
 800a14a:	d10b      	bne.n	800a164 <__any_on+0x3e>
 800a14c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a150:	4293      	cmp	r3, r2
 800a152:	d803      	bhi.n	800a15c <__any_on+0x36>
 800a154:	2000      	movs	r0, #0
 800a156:	bd10      	pop	{r4, pc}
 800a158:	4603      	mov	r3, r0
 800a15a:	e7f7      	b.n	800a14c <__any_on+0x26>
 800a15c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a160:	2900      	cmp	r1, #0
 800a162:	d0f5      	beq.n	800a150 <__any_on+0x2a>
 800a164:	2001      	movs	r0, #1
 800a166:	e7f6      	b.n	800a156 <__any_on+0x30>

0800a168 <sulp>:
 800a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16c:	460f      	mov	r7, r1
 800a16e:	4690      	mov	r8, r2
 800a170:	f7ff fec6 	bl	8009f00 <__ulp>
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	f1b8 0f00 	cmp.w	r8, #0
 800a17c:	d011      	beq.n	800a1a2 <sulp+0x3a>
 800a17e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a182:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a186:	2b00      	cmp	r3, #0
 800a188:	dd0b      	ble.n	800a1a2 <sulp+0x3a>
 800a18a:	2400      	movs	r4, #0
 800a18c:	051b      	lsls	r3, r3, #20
 800a18e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a192:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	f7f6 f99d 	bl	80004d8 <__aeabi_dmul>
 800a19e:	4604      	mov	r4, r0
 800a1a0:	460d      	mov	r5, r1
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1aa:	0000      	movs	r0, r0
 800a1ac:	0000      	movs	r0, r0
	...

0800a1b0 <_strtod_l>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	b09f      	sub	sp, #124	@ 0x7c
 800a1b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1be:	f04f 0a00 	mov.w	sl, #0
 800a1c2:	f04f 0b00 	mov.w	fp, #0
 800a1c6:	460a      	mov	r2, r1
 800a1c8:	9005      	str	r0, [sp, #20]
 800a1ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1cc:	7811      	ldrb	r1, [r2, #0]
 800a1ce:	292b      	cmp	r1, #43	@ 0x2b
 800a1d0:	d048      	beq.n	800a264 <_strtod_l+0xb4>
 800a1d2:	d836      	bhi.n	800a242 <_strtod_l+0x92>
 800a1d4:	290d      	cmp	r1, #13
 800a1d6:	d830      	bhi.n	800a23a <_strtod_l+0x8a>
 800a1d8:	2908      	cmp	r1, #8
 800a1da:	d830      	bhi.n	800a23e <_strtod_l+0x8e>
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	d039      	beq.n	800a254 <_strtod_l+0xa4>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1e6:	782a      	ldrb	r2, [r5, #0]
 800a1e8:	2a30      	cmp	r2, #48	@ 0x30
 800a1ea:	f040 80b1 	bne.w	800a350 <_strtod_l+0x1a0>
 800a1ee:	786a      	ldrb	r2, [r5, #1]
 800a1f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1f4:	2a58      	cmp	r2, #88	@ 0x58
 800a1f6:	d16c      	bne.n	800a2d2 <_strtod_l+0x122>
 800a1f8:	9302      	str	r3, [sp, #8]
 800a1fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1fc:	4a8e      	ldr	r2, [pc, #568]	@ (800a438 <_strtod_l+0x288>)
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	ab1a      	add	r3, sp, #104	@ 0x68
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	9805      	ldr	r0, [sp, #20]
 800a206:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a208:	a919      	add	r1, sp, #100	@ 0x64
 800a20a:	f001 f907 	bl	800b41c <__gethex>
 800a20e:	f010 060f 	ands.w	r6, r0, #15
 800a212:	4604      	mov	r4, r0
 800a214:	d005      	beq.n	800a222 <_strtod_l+0x72>
 800a216:	2e06      	cmp	r6, #6
 800a218:	d126      	bne.n	800a268 <_strtod_l+0xb8>
 800a21a:	2300      	movs	r3, #0
 800a21c:	3501      	adds	r5, #1
 800a21e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a220:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a224:	2b00      	cmp	r3, #0
 800a226:	f040 8584 	bne.w	800ad32 <_strtod_l+0xb82>
 800a22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a22c:	b1bb      	cbz	r3, 800a25e <_strtod_l+0xae>
 800a22e:	4650      	mov	r0, sl
 800a230:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a234:	b01f      	add	sp, #124	@ 0x7c
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	2920      	cmp	r1, #32
 800a23c:	d1d0      	bne.n	800a1e0 <_strtod_l+0x30>
 800a23e:	3201      	adds	r2, #1
 800a240:	e7c3      	b.n	800a1ca <_strtod_l+0x1a>
 800a242:	292d      	cmp	r1, #45	@ 0x2d
 800a244:	d1cc      	bne.n	800a1e0 <_strtod_l+0x30>
 800a246:	2101      	movs	r1, #1
 800a248:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a24a:	1c51      	adds	r1, r2, #1
 800a24c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a24e:	7852      	ldrb	r2, [r2, #1]
 800a250:	2a00      	cmp	r2, #0
 800a252:	d1c7      	bne.n	800a1e4 <_strtod_l+0x34>
 800a254:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a256:	9419      	str	r4, [sp, #100]	@ 0x64
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f040 8568 	bne.w	800ad2e <_strtod_l+0xb7e>
 800a25e:	4650      	mov	r0, sl
 800a260:	4659      	mov	r1, fp
 800a262:	e7e7      	b.n	800a234 <_strtod_l+0x84>
 800a264:	2100      	movs	r1, #0
 800a266:	e7ef      	b.n	800a248 <_strtod_l+0x98>
 800a268:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a26a:	b13a      	cbz	r2, 800a27c <_strtod_l+0xcc>
 800a26c:	2135      	movs	r1, #53	@ 0x35
 800a26e:	a81c      	add	r0, sp, #112	@ 0x70
 800a270:	f7ff ff36 	bl	800a0e0 <__copybits>
 800a274:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a276:	9805      	ldr	r0, [sp, #20]
 800a278:	f7ff fb10 	bl	800989c <_Bfree>
 800a27c:	3e01      	subs	r6, #1
 800a27e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a280:	2e04      	cmp	r6, #4
 800a282:	d806      	bhi.n	800a292 <_strtod_l+0xe2>
 800a284:	e8df f006 	tbb	[pc, r6]
 800a288:	201d0314 	.word	0x201d0314
 800a28c:	14          	.byte	0x14
 800a28d:	00          	.byte	0x00
 800a28e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a292:	05e1      	lsls	r1, r4, #23
 800a294:	bf48      	it	mi
 800a296:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a29a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a29e:	0d1b      	lsrs	r3, r3, #20
 800a2a0:	051b      	lsls	r3, r3, #20
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1bd      	bne.n	800a222 <_strtod_l+0x72>
 800a2a6:	f7fe fb1d 	bl	80088e4 <__errno>
 800a2aa:	2322      	movs	r3, #34	@ 0x22
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	e7b8      	b.n	800a222 <_strtod_l+0x72>
 800a2b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2c0:	e7e7      	b.n	800a292 <_strtod_l+0xe2>
 800a2c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a43c <_strtod_l+0x28c>
 800a2c6:	e7e4      	b.n	800a292 <_strtod_l+0xe2>
 800a2c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a2d0:	e7df      	b.n	800a292 <_strtod_l+0xe2>
 800a2d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b30      	cmp	r3, #48	@ 0x30
 800a2dc:	d0f9      	beq.n	800a2d2 <_strtod_l+0x122>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d09f      	beq.n	800a222 <_strtod_l+0x72>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e8:	220a      	movs	r2, #10
 800a2ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	461f      	mov	r7, r3
 800a2f0:	9308      	str	r3, [sp, #32]
 800a2f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a2f6:	7805      	ldrb	r5, [r0, #0]
 800a2f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2fc:	b2d9      	uxtb	r1, r3
 800a2fe:	2909      	cmp	r1, #9
 800a300:	d928      	bls.n	800a354 <_strtod_l+0x1a4>
 800a302:	2201      	movs	r2, #1
 800a304:	494e      	ldr	r1, [pc, #312]	@ (800a440 <_strtod_l+0x290>)
 800a306:	f000 ffc7 	bl	800b298 <strncmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d032      	beq.n	800a374 <_strtod_l+0x1c4>
 800a30e:	2000      	movs	r0, #0
 800a310:	462a      	mov	r2, r5
 800a312:	4681      	mov	r9, r0
 800a314:	463d      	mov	r5, r7
 800a316:	4603      	mov	r3, r0
 800a318:	2a65      	cmp	r2, #101	@ 0x65
 800a31a:	d001      	beq.n	800a320 <_strtod_l+0x170>
 800a31c:	2a45      	cmp	r2, #69	@ 0x45
 800a31e:	d114      	bne.n	800a34a <_strtod_l+0x19a>
 800a320:	b91d      	cbnz	r5, 800a32a <_strtod_l+0x17a>
 800a322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a324:	4302      	orrs	r2, r0
 800a326:	d095      	beq.n	800a254 <_strtod_l+0xa4>
 800a328:	2500      	movs	r5, #0
 800a32a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a32c:	1c62      	adds	r2, r4, #1
 800a32e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a330:	7862      	ldrb	r2, [r4, #1]
 800a332:	2a2b      	cmp	r2, #43	@ 0x2b
 800a334:	d077      	beq.n	800a426 <_strtod_l+0x276>
 800a336:	2a2d      	cmp	r2, #45	@ 0x2d
 800a338:	d07b      	beq.n	800a432 <_strtod_l+0x282>
 800a33a:	f04f 0c00 	mov.w	ip, #0
 800a33e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a342:	2909      	cmp	r1, #9
 800a344:	f240 8082 	bls.w	800a44c <_strtod_l+0x29c>
 800a348:	9419      	str	r4, [sp, #100]	@ 0x64
 800a34a:	f04f 0800 	mov.w	r8, #0
 800a34e:	e0a2      	b.n	800a496 <_strtod_l+0x2e6>
 800a350:	2300      	movs	r3, #0
 800a352:	e7c7      	b.n	800a2e4 <_strtod_l+0x134>
 800a354:	2f08      	cmp	r7, #8
 800a356:	bfd5      	itete	le
 800a358:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a35a:	9908      	ldrgt	r1, [sp, #32]
 800a35c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a360:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a364:	f100 0001 	add.w	r0, r0, #1
 800a368:	bfd4      	ite	le
 800a36a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a36c:	9308      	strgt	r3, [sp, #32]
 800a36e:	3701      	adds	r7, #1
 800a370:	9019      	str	r0, [sp, #100]	@ 0x64
 800a372:	e7bf      	b.n	800a2f4 <_strtod_l+0x144>
 800a374:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	9219      	str	r2, [sp, #100]	@ 0x64
 800a37a:	785a      	ldrb	r2, [r3, #1]
 800a37c:	b37f      	cbz	r7, 800a3de <_strtod_l+0x22e>
 800a37e:	4681      	mov	r9, r0
 800a380:	463d      	mov	r5, r7
 800a382:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a386:	2b09      	cmp	r3, #9
 800a388:	d912      	bls.n	800a3b0 <_strtod_l+0x200>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e7c4      	b.n	800a318 <_strtod_l+0x168>
 800a38e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a390:	3001      	adds	r0, #1
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	9219      	str	r2, [sp, #100]	@ 0x64
 800a396:	785a      	ldrb	r2, [r3, #1]
 800a398:	2a30      	cmp	r2, #48	@ 0x30
 800a39a:	d0f8      	beq.n	800a38e <_strtod_l+0x1de>
 800a39c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	f200 84cb 	bhi.w	800ad3c <_strtod_l+0xb8c>
 800a3a6:	4681      	mov	r9, r0
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3b0:	3a30      	subs	r2, #48	@ 0x30
 800a3b2:	f100 0301 	add.w	r3, r0, #1
 800a3b6:	d02a      	beq.n	800a40e <_strtod_l+0x25e>
 800a3b8:	4499      	add	r9, r3
 800a3ba:	210a      	movs	r1, #10
 800a3bc:	462b      	mov	r3, r5
 800a3be:	eb00 0c05 	add.w	ip, r0, r5
 800a3c2:	4563      	cmp	r3, ip
 800a3c4:	d10d      	bne.n	800a3e2 <_strtod_l+0x232>
 800a3c6:	1c69      	adds	r1, r5, #1
 800a3c8:	4401      	add	r1, r0
 800a3ca:	4428      	add	r0, r5
 800a3cc:	2808      	cmp	r0, #8
 800a3ce:	dc16      	bgt.n	800a3fe <_strtod_l+0x24e>
 800a3d0:	230a      	movs	r3, #10
 800a3d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a3d4:	fb03 2300 	mla	r3, r3, r0, r2
 800a3d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e018      	b.n	800a410 <_strtod_l+0x260>
 800a3de:	4638      	mov	r0, r7
 800a3e0:	e7da      	b.n	800a398 <_strtod_l+0x1e8>
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	f103 0301 	add.w	r3, r3, #1
 800a3e8:	dc03      	bgt.n	800a3f2 <_strtod_l+0x242>
 800a3ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a3ec:	434e      	muls	r6, r1
 800a3ee:	960a      	str	r6, [sp, #40]	@ 0x28
 800a3f0:	e7e7      	b.n	800a3c2 <_strtod_l+0x212>
 800a3f2:	2b10      	cmp	r3, #16
 800a3f4:	bfde      	ittt	le
 800a3f6:	9e08      	ldrle	r6, [sp, #32]
 800a3f8:	434e      	mulle	r6, r1
 800a3fa:	9608      	strle	r6, [sp, #32]
 800a3fc:	e7e1      	b.n	800a3c2 <_strtod_l+0x212>
 800a3fe:	280f      	cmp	r0, #15
 800a400:	dceb      	bgt.n	800a3da <_strtod_l+0x22a>
 800a402:	230a      	movs	r3, #10
 800a404:	9808      	ldr	r0, [sp, #32]
 800a406:	fb03 2300 	mla	r3, r3, r0, r2
 800a40a:	9308      	str	r3, [sp, #32]
 800a40c:	e7e5      	b.n	800a3da <_strtod_l+0x22a>
 800a40e:	4629      	mov	r1, r5
 800a410:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a412:	460d      	mov	r5, r1
 800a414:	1c50      	adds	r0, r2, #1
 800a416:	9019      	str	r0, [sp, #100]	@ 0x64
 800a418:	7852      	ldrb	r2, [r2, #1]
 800a41a:	4618      	mov	r0, r3
 800a41c:	e7b1      	b.n	800a382 <_strtod_l+0x1d2>
 800a41e:	f04f 0900 	mov.w	r9, #0
 800a422:	2301      	movs	r3, #1
 800a424:	e77d      	b.n	800a322 <_strtod_l+0x172>
 800a426:	f04f 0c00 	mov.w	ip, #0
 800a42a:	1ca2      	adds	r2, r4, #2
 800a42c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a42e:	78a2      	ldrb	r2, [r4, #2]
 800a430:	e785      	b.n	800a33e <_strtod_l+0x18e>
 800a432:	f04f 0c01 	mov.w	ip, #1
 800a436:	e7f8      	b.n	800a42a <_strtod_l+0x27a>
 800a438:	0800c320 	.word	0x0800c320
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	0800c308 	.word	0x0800c308
 800a444:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a446:	1c51      	adds	r1, r2, #1
 800a448:	9119      	str	r1, [sp, #100]	@ 0x64
 800a44a:	7852      	ldrb	r2, [r2, #1]
 800a44c:	2a30      	cmp	r2, #48	@ 0x30
 800a44e:	d0f9      	beq.n	800a444 <_strtod_l+0x294>
 800a450:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a454:	2908      	cmp	r1, #8
 800a456:	f63f af78 	bhi.w	800a34a <_strtod_l+0x19a>
 800a45a:	f04f 080a 	mov.w	r8, #10
 800a45e:	3a30      	subs	r2, #48	@ 0x30
 800a460:	920e      	str	r2, [sp, #56]	@ 0x38
 800a462:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a464:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a466:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a468:	1c56      	adds	r6, r2, #1
 800a46a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a46c:	7852      	ldrb	r2, [r2, #1]
 800a46e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a472:	f1be 0f09 	cmp.w	lr, #9
 800a476:	d939      	bls.n	800a4ec <_strtod_l+0x33c>
 800a478:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a47a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a47e:	1a76      	subs	r6, r6, r1
 800a480:	2e08      	cmp	r6, #8
 800a482:	dc03      	bgt.n	800a48c <_strtod_l+0x2dc>
 800a484:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a486:	4588      	cmp	r8, r1
 800a488:	bfa8      	it	ge
 800a48a:	4688      	movge	r8, r1
 800a48c:	f1bc 0f00 	cmp.w	ip, #0
 800a490:	d001      	beq.n	800a496 <_strtod_l+0x2e6>
 800a492:	f1c8 0800 	rsb	r8, r8, #0
 800a496:	2d00      	cmp	r5, #0
 800a498:	d14e      	bne.n	800a538 <_strtod_l+0x388>
 800a49a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a49c:	4308      	orrs	r0, r1
 800a49e:	f47f aec0 	bne.w	800a222 <_strtod_l+0x72>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f47f aed6 	bne.w	800a254 <_strtod_l+0xa4>
 800a4a8:	2a69      	cmp	r2, #105	@ 0x69
 800a4aa:	d028      	beq.n	800a4fe <_strtod_l+0x34e>
 800a4ac:	dc25      	bgt.n	800a4fa <_strtod_l+0x34a>
 800a4ae:	2a49      	cmp	r2, #73	@ 0x49
 800a4b0:	d025      	beq.n	800a4fe <_strtod_l+0x34e>
 800a4b2:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4b4:	f47f aece 	bne.w	800a254 <_strtod_l+0xa4>
 800a4b8:	499a      	ldr	r1, [pc, #616]	@ (800a724 <_strtod_l+0x574>)
 800a4ba:	a819      	add	r0, sp, #100	@ 0x64
 800a4bc:	f001 f9d0 	bl	800b860 <__match>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f43f aec7 	beq.w	800a254 <_strtod_l+0xa4>
 800a4c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b28      	cmp	r3, #40	@ 0x28
 800a4cc:	d12e      	bne.n	800a52c <_strtod_l+0x37c>
 800a4ce:	4996      	ldr	r1, [pc, #600]	@ (800a728 <_strtod_l+0x578>)
 800a4d0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4d2:	a819      	add	r0, sp, #100	@ 0x64
 800a4d4:	f001 f9d8 	bl	800b888 <__hexnan>
 800a4d8:	2805      	cmp	r0, #5
 800a4da:	d127      	bne.n	800a52c <_strtod_l+0x37c>
 800a4dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a4ea:	e69a      	b.n	800a222 <_strtod_l+0x72>
 800a4ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a4ee:	fb08 2101 	mla	r1, r8, r1, r2
 800a4f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a4f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4f8:	e7b5      	b.n	800a466 <_strtod_l+0x2b6>
 800a4fa:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4fc:	e7da      	b.n	800a4b4 <_strtod_l+0x304>
 800a4fe:	498b      	ldr	r1, [pc, #556]	@ (800a72c <_strtod_l+0x57c>)
 800a500:	a819      	add	r0, sp, #100	@ 0x64
 800a502:	f001 f9ad 	bl	800b860 <__match>
 800a506:	2800      	cmp	r0, #0
 800a508:	f43f aea4 	beq.w	800a254 <_strtod_l+0xa4>
 800a50c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a50e:	4988      	ldr	r1, [pc, #544]	@ (800a730 <_strtod_l+0x580>)
 800a510:	3b01      	subs	r3, #1
 800a512:	a819      	add	r0, sp, #100	@ 0x64
 800a514:	9319      	str	r3, [sp, #100]	@ 0x64
 800a516:	f001 f9a3 	bl	800b860 <__match>
 800a51a:	b910      	cbnz	r0, 800a522 <_strtod_l+0x372>
 800a51c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a51e:	3301      	adds	r3, #1
 800a520:	9319      	str	r3, [sp, #100]	@ 0x64
 800a522:	f04f 0a00 	mov.w	sl, #0
 800a526:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a734 <_strtod_l+0x584>
 800a52a:	e67a      	b.n	800a222 <_strtod_l+0x72>
 800a52c:	4882      	ldr	r0, [pc, #520]	@ (800a738 <_strtod_l+0x588>)
 800a52e:	f000 fed5 	bl	800b2dc <nan>
 800a532:	4682      	mov	sl, r0
 800a534:	468b      	mov	fp, r1
 800a536:	e674      	b.n	800a222 <_strtod_l+0x72>
 800a538:	eba8 0309 	sub.w	r3, r8, r9
 800a53c:	2f00      	cmp	r7, #0
 800a53e:	bf08      	it	eq
 800a540:	462f      	moveq	r7, r5
 800a542:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a544:	2d10      	cmp	r5, #16
 800a546:	462c      	mov	r4, r5
 800a548:	9309      	str	r3, [sp, #36]	@ 0x24
 800a54a:	bfa8      	it	ge
 800a54c:	2410      	movge	r4, #16
 800a54e:	f7f5 ff49 	bl	80003e4 <__aeabi_ui2d>
 800a552:	2d09      	cmp	r5, #9
 800a554:	4682      	mov	sl, r0
 800a556:	468b      	mov	fp, r1
 800a558:	dc11      	bgt.n	800a57e <_strtod_l+0x3ce>
 800a55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f43f ae60 	beq.w	800a222 <_strtod_l+0x72>
 800a562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a564:	dd76      	ble.n	800a654 <_strtod_l+0x4a4>
 800a566:	2b16      	cmp	r3, #22
 800a568:	dc5d      	bgt.n	800a626 <_strtod_l+0x476>
 800a56a:	4974      	ldr	r1, [pc, #464]	@ (800a73c <_strtod_l+0x58c>)
 800a56c:	4652      	mov	r2, sl
 800a56e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a572:	465b      	mov	r3, fp
 800a574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a578:	f7f5 ffae 	bl	80004d8 <__aeabi_dmul>
 800a57c:	e7d9      	b.n	800a532 <_strtod_l+0x382>
 800a57e:	4b6f      	ldr	r3, [pc, #444]	@ (800a73c <_strtod_l+0x58c>)
 800a580:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a584:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a588:	f7f5 ffa6 	bl	80004d8 <__aeabi_dmul>
 800a58c:	4682      	mov	sl, r0
 800a58e:	9808      	ldr	r0, [sp, #32]
 800a590:	468b      	mov	fp, r1
 800a592:	f7f5 ff27 	bl	80003e4 <__aeabi_ui2d>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4650      	mov	r0, sl
 800a59c:	4659      	mov	r1, fp
 800a59e:	f7f5 fde5 	bl	800016c <__adddf3>
 800a5a2:	2d0f      	cmp	r5, #15
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	468b      	mov	fp, r1
 800a5a8:	ddd7      	ble.n	800a55a <_strtod_l+0x3aa>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ac:	1b2c      	subs	r4, r5, r4
 800a5ae:	441c      	add	r4, r3
 800a5b0:	2c00      	cmp	r4, #0
 800a5b2:	f340 8096 	ble.w	800a6e2 <_strtod_l+0x532>
 800a5b6:	f014 030f 	ands.w	r3, r4, #15
 800a5ba:	d00a      	beq.n	800a5d2 <_strtod_l+0x422>
 800a5bc:	495f      	ldr	r1, [pc, #380]	@ (800a73c <_strtod_l+0x58c>)
 800a5be:	4652      	mov	r2, sl
 800a5c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c8:	465b      	mov	r3, fp
 800a5ca:	f7f5 ff85 	bl	80004d8 <__aeabi_dmul>
 800a5ce:	4682      	mov	sl, r0
 800a5d0:	468b      	mov	fp, r1
 800a5d2:	f034 040f 	bics.w	r4, r4, #15
 800a5d6:	d073      	beq.n	800a6c0 <_strtod_l+0x510>
 800a5d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5dc:	dd48      	ble.n	800a670 <_strtod_l+0x4c0>
 800a5de:	2400      	movs	r4, #0
 800a5e0:	46a0      	mov	r8, r4
 800a5e2:	46a1      	mov	r9, r4
 800a5e4:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5e6:	2322      	movs	r3, #34	@ 0x22
 800a5e8:	f04f 0a00 	mov.w	sl, #0
 800a5ec:	9a05      	ldr	r2, [sp, #20]
 800a5ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a734 <_strtod_l+0x584>
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f43f ae13 	beq.w	800a222 <_strtod_l+0x72>
 800a5fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5fe:	9805      	ldr	r0, [sp, #20]
 800a600:	f7ff f94c 	bl	800989c <_Bfree>
 800a604:	4649      	mov	r1, r9
 800a606:	9805      	ldr	r0, [sp, #20]
 800a608:	f7ff f948 	bl	800989c <_Bfree>
 800a60c:	4641      	mov	r1, r8
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7ff f944 	bl	800989c <_Bfree>
 800a614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a616:	9805      	ldr	r0, [sp, #20]
 800a618:	f7ff f940 	bl	800989c <_Bfree>
 800a61c:	4621      	mov	r1, r4
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	f7ff f93c 	bl	800989c <_Bfree>
 800a624:	e5fd      	b.n	800a222 <_strtod_l+0x72>
 800a626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a628:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a62c:	4293      	cmp	r3, r2
 800a62e:	dbbc      	blt.n	800a5aa <_strtod_l+0x3fa>
 800a630:	4c42      	ldr	r4, [pc, #264]	@ (800a73c <_strtod_l+0x58c>)
 800a632:	f1c5 050f 	rsb	r5, r5, #15
 800a636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a63a:	4652      	mov	r2, sl
 800a63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a640:	465b      	mov	r3, fp
 800a642:	f7f5 ff49 	bl	80004d8 <__aeabi_dmul>
 800a646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a648:	1b5d      	subs	r5, r3, r5
 800a64a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a64e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a652:	e791      	b.n	800a578 <_strtod_l+0x3c8>
 800a654:	3316      	adds	r3, #22
 800a656:	dba8      	blt.n	800a5aa <_strtod_l+0x3fa>
 800a658:	4b38      	ldr	r3, [pc, #224]	@ (800a73c <_strtod_l+0x58c>)
 800a65a:	eba9 0808 	sub.w	r8, r9, r8
 800a65e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a662:	4650      	mov	r0, sl
 800a664:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a668:	4659      	mov	r1, fp
 800a66a:	f7f6 f85f 	bl	800072c <__aeabi_ddiv>
 800a66e:	e760      	b.n	800a532 <_strtod_l+0x382>
 800a670:	4b33      	ldr	r3, [pc, #204]	@ (800a740 <_strtod_l+0x590>)
 800a672:	4650      	mov	r0, sl
 800a674:	9308      	str	r3, [sp, #32]
 800a676:	2300      	movs	r3, #0
 800a678:	4659      	mov	r1, fp
 800a67a:	461e      	mov	r6, r3
 800a67c:	1124      	asrs	r4, r4, #4
 800a67e:	2c01      	cmp	r4, #1
 800a680:	dc21      	bgt.n	800a6c6 <_strtod_l+0x516>
 800a682:	b10b      	cbz	r3, 800a688 <_strtod_l+0x4d8>
 800a684:	4682      	mov	sl, r0
 800a686:	468b      	mov	fp, r1
 800a688:	492d      	ldr	r1, [pc, #180]	@ (800a740 <_strtod_l+0x590>)
 800a68a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a68e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a692:	4652      	mov	r2, sl
 800a694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a698:	465b      	mov	r3, fp
 800a69a:	f7f5 ff1d 	bl	80004d8 <__aeabi_dmul>
 800a69e:	4b25      	ldr	r3, [pc, #148]	@ (800a734 <_strtod_l+0x584>)
 800a6a0:	460a      	mov	r2, r1
 800a6a2:	400b      	ands	r3, r1
 800a6a4:	4927      	ldr	r1, [pc, #156]	@ (800a744 <_strtod_l+0x594>)
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	d898      	bhi.n	800a5de <_strtod_l+0x42e>
 800a6ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6b0:	428b      	cmp	r3, r1
 800a6b2:	bf86      	itte	hi
 800a6b4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a6b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a748 <_strtod_l+0x598>
 800a6bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9308      	str	r3, [sp, #32]
 800a6c4:	e07a      	b.n	800a7bc <_strtod_l+0x60c>
 800a6c6:	07e2      	lsls	r2, r4, #31
 800a6c8:	d505      	bpl.n	800a6d6 <_strtod_l+0x526>
 800a6ca:	9b08      	ldr	r3, [sp, #32]
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ff02 	bl	80004d8 <__aeabi_dmul>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	9a08      	ldr	r2, [sp, #32]
 800a6d8:	3601      	adds	r6, #1
 800a6da:	3208      	adds	r2, #8
 800a6dc:	1064      	asrs	r4, r4, #1
 800a6de:	9208      	str	r2, [sp, #32]
 800a6e0:	e7cd      	b.n	800a67e <_strtod_l+0x4ce>
 800a6e2:	d0ed      	beq.n	800a6c0 <_strtod_l+0x510>
 800a6e4:	4264      	negs	r4, r4
 800a6e6:	f014 020f 	ands.w	r2, r4, #15
 800a6ea:	d00a      	beq.n	800a702 <_strtod_l+0x552>
 800a6ec:	4b13      	ldr	r3, [pc, #76]	@ (800a73c <_strtod_l+0x58c>)
 800a6ee:	4650      	mov	r0, sl
 800a6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f4:	4659      	mov	r1, fp
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f6 f817 	bl	800072c <__aeabi_ddiv>
 800a6fe:	4682      	mov	sl, r0
 800a700:	468b      	mov	fp, r1
 800a702:	1124      	asrs	r4, r4, #4
 800a704:	d0dc      	beq.n	800a6c0 <_strtod_l+0x510>
 800a706:	2c1f      	cmp	r4, #31
 800a708:	dd20      	ble.n	800a74c <_strtod_l+0x59c>
 800a70a:	2400      	movs	r4, #0
 800a70c:	46a0      	mov	r8, r4
 800a70e:	46a1      	mov	r9, r4
 800a710:	940a      	str	r4, [sp, #40]	@ 0x28
 800a712:	2322      	movs	r3, #34	@ 0x22
 800a714:	9a05      	ldr	r2, [sp, #20]
 800a716:	f04f 0a00 	mov.w	sl, #0
 800a71a:	f04f 0b00 	mov.w	fp, #0
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	e768      	b.n	800a5f4 <_strtod_l+0x444>
 800a722:	bf00      	nop
 800a724:	0800c0f7 	.word	0x0800c0f7
 800a728:	0800c30c 	.word	0x0800c30c
 800a72c:	0800c0ef 	.word	0x0800c0ef
 800a730:	0800c126 	.word	0x0800c126
 800a734:	7ff00000 	.word	0x7ff00000
 800a738:	0800c4b5 	.word	0x0800c4b5
 800a73c:	0800c240 	.word	0x0800c240
 800a740:	0800c218 	.word	0x0800c218
 800a744:	7ca00000 	.word	0x7ca00000
 800a748:	7fefffff 	.word	0x7fefffff
 800a74c:	f014 0310 	ands.w	r3, r4, #16
 800a750:	bf18      	it	ne
 800a752:	236a      	movne	r3, #106	@ 0x6a
 800a754:	4650      	mov	r0, sl
 800a756:	9308      	str	r3, [sp, #32]
 800a758:	4659      	mov	r1, fp
 800a75a:	2300      	movs	r3, #0
 800a75c:	4ea9      	ldr	r6, [pc, #676]	@ (800aa04 <_strtod_l+0x854>)
 800a75e:	07e2      	lsls	r2, r4, #31
 800a760:	d504      	bpl.n	800a76c <_strtod_l+0x5bc>
 800a762:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a766:	f7f5 feb7 	bl	80004d8 <__aeabi_dmul>
 800a76a:	2301      	movs	r3, #1
 800a76c:	1064      	asrs	r4, r4, #1
 800a76e:	f106 0608 	add.w	r6, r6, #8
 800a772:	d1f4      	bne.n	800a75e <_strtod_l+0x5ae>
 800a774:	b10b      	cbz	r3, 800a77a <_strtod_l+0x5ca>
 800a776:	4682      	mov	sl, r0
 800a778:	468b      	mov	fp, r1
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	b1b3      	cbz	r3, 800a7ac <_strtod_l+0x5fc>
 800a77e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a782:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a786:	2b00      	cmp	r3, #0
 800a788:	4659      	mov	r1, fp
 800a78a:	dd0f      	ble.n	800a7ac <_strtod_l+0x5fc>
 800a78c:	2b1f      	cmp	r3, #31
 800a78e:	dd57      	ble.n	800a840 <_strtod_l+0x690>
 800a790:	2b34      	cmp	r3, #52	@ 0x34
 800a792:	bfd8      	it	le
 800a794:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	bfcf      	iteee	gt
 800a79e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a7a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a7a6:	4093      	lslle	r3, r2
 800a7a8:	ea03 0b01 	andle.w	fp, r3, r1
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	4659      	mov	r1, fp
 800a7b4:	f7f6 f8f8 	bl	80009a8 <__aeabi_dcmpeq>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1a6      	bne.n	800a70a <_strtod_l+0x55a>
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7be:	463a      	mov	r2, r7
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	9805      	ldr	r0, [sp, #20]
 800a7c8:	f7ff f8d0 	bl	800996c <__s2b>
 800a7cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f43f af05 	beq.w	800a5de <_strtod_l+0x42e>
 800a7d4:	2400      	movs	r4, #0
 800a7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d8:	eba9 0308 	sub.w	r3, r9, r8
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	bfa8      	it	ge
 800a7e0:	2300      	movge	r3, #0
 800a7e2:	46a0      	mov	r8, r4
 800a7e4:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7ea:	9316      	str	r3, [sp, #88]	@ 0x58
 800a7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ee:	9805      	ldr	r0, [sp, #20]
 800a7f0:	6859      	ldr	r1, [r3, #4]
 800a7f2:	f7ff f813 	bl	800981c <_Balloc>
 800a7f6:	4681      	mov	r9, r0
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f43f aef4 	beq.w	800a5e6 <_strtod_l+0x436>
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a800:	300c      	adds	r0, #12
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	f103 010c 	add.w	r1, r3, #12
 800a808:	3202      	adds	r2, #2
 800a80a:	0092      	lsls	r2, r2, #2
 800a80c:	f7fe f8a5 	bl	800895a <memcpy>
 800a810:	ab1c      	add	r3, sp, #112	@ 0x70
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4652      	mov	r2, sl
 800a81a:	465b      	mov	r3, fp
 800a81c:	9805      	ldr	r0, [sp, #20]
 800a81e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a822:	f7ff fbd5 	bl	8009fd0 <__d2b>
 800a826:	901a      	str	r0, [sp, #104]	@ 0x68
 800a828:	2800      	cmp	r0, #0
 800a82a:	f43f aedc 	beq.w	800a5e6 <_strtod_l+0x436>
 800a82e:	2101      	movs	r1, #1
 800a830:	9805      	ldr	r0, [sp, #20]
 800a832:	f7ff f931 	bl	8009a98 <__i2b>
 800a836:	4680      	mov	r8, r0
 800a838:	b948      	cbnz	r0, 800a84e <_strtod_l+0x69e>
 800a83a:	f04f 0800 	mov.w	r8, #0
 800a83e:	e6d2      	b.n	800a5e6 <_strtod_l+0x436>
 800a840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	ea03 0a0a 	and.w	sl, r3, sl
 800a84c:	e7ae      	b.n	800a7ac <_strtod_l+0x5fc>
 800a84e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a850:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a852:	2d00      	cmp	r5, #0
 800a854:	bfab      	itete	ge
 800a856:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a858:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a85a:	18ef      	addge	r7, r5, r3
 800a85c:	1b5e      	sublt	r6, r3, r5
 800a85e:	9b08      	ldr	r3, [sp, #32]
 800a860:	bfa8      	it	ge
 800a862:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a864:	eba5 0503 	sub.w	r5, r5, r3
 800a868:	4415      	add	r5, r2
 800a86a:	4b67      	ldr	r3, [pc, #412]	@ (800aa08 <_strtod_l+0x858>)
 800a86c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800a870:	bfb8      	it	lt
 800a872:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a874:	429d      	cmp	r5, r3
 800a876:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a87a:	da50      	bge.n	800a91e <_strtod_l+0x76e>
 800a87c:	1b5b      	subs	r3, r3, r5
 800a87e:	2b1f      	cmp	r3, #31
 800a880:	f04f 0101 	mov.w	r1, #1
 800a884:	eba2 0203 	sub.w	r2, r2, r3
 800a888:	dc3d      	bgt.n	800a906 <_strtod_l+0x756>
 800a88a:	fa01 f303 	lsl.w	r3, r1, r3
 800a88e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a890:	2300      	movs	r3, #0
 800a892:	9310      	str	r3, [sp, #64]	@ 0x40
 800a894:	18bd      	adds	r5, r7, r2
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	42af      	cmp	r7, r5
 800a89a:	4416      	add	r6, r2
 800a89c:	441e      	add	r6, r3
 800a89e:	463b      	mov	r3, r7
 800a8a0:	bfa8      	it	ge
 800a8a2:	462b      	movge	r3, r5
 800a8a4:	42b3      	cmp	r3, r6
 800a8a6:	bfa8      	it	ge
 800a8a8:	4633      	movge	r3, r6
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bfc2      	ittt	gt
 800a8ae:	1aed      	subgt	r5, r5, r3
 800a8b0:	1af6      	subgt	r6, r6, r3
 800a8b2:	1aff      	subgt	r7, r7, r3
 800a8b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dd16      	ble.n	800a8e8 <_strtod_l+0x738>
 800a8ba:	4641      	mov	r1, r8
 800a8bc:	461a      	mov	r2, r3
 800a8be:	9805      	ldr	r0, [sp, #20]
 800a8c0:	f7ff f9a8 	bl	8009c14 <__pow5mult>
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d0b7      	beq.n	800a83a <_strtod_l+0x68a>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8ce:	9805      	ldr	r0, [sp, #20]
 800a8d0:	f7ff f8f8 	bl	8009ac4 <__multiply>
 800a8d4:	900e      	str	r0, [sp, #56]	@ 0x38
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f43f ae85 	beq.w	800a5e6 <_strtod_l+0x436>
 800a8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f7fe ffdc 	bl	800989c <_Bfree>
 800a8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	dc1d      	bgt.n	800a928 <_strtod_l+0x778>
 800a8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd23      	ble.n	800a93a <_strtod_l+0x78a>
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8f6:	9805      	ldr	r0, [sp, #20]
 800a8f8:	f7ff f98c 	bl	8009c14 <__pow5mult>
 800a8fc:	4681      	mov	r9, r0
 800a8fe:	b9e0      	cbnz	r0, 800a93a <_strtod_l+0x78a>
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e66f      	b.n	800a5e6 <_strtod_l+0x436>
 800a906:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a90a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a90e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a912:	35e2      	adds	r5, #226	@ 0xe2
 800a914:	fa01 f305 	lsl.w	r3, r1, r5
 800a918:	9310      	str	r3, [sp, #64]	@ 0x40
 800a91a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a91c:	e7ba      	b.n	800a894 <_strtod_l+0x6e4>
 800a91e:	2300      	movs	r3, #0
 800a920:	9310      	str	r3, [sp, #64]	@ 0x40
 800a922:	2301      	movs	r3, #1
 800a924:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a926:	e7b5      	b.n	800a894 <_strtod_l+0x6e4>
 800a928:	462a      	mov	r2, r5
 800a92a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a92c:	9805      	ldr	r0, [sp, #20]
 800a92e:	f7ff f9cb 	bl	8009cc8 <__lshift>
 800a932:	901a      	str	r0, [sp, #104]	@ 0x68
 800a934:	2800      	cmp	r0, #0
 800a936:	d1d9      	bne.n	800a8ec <_strtod_l+0x73c>
 800a938:	e655      	b.n	800a5e6 <_strtod_l+0x436>
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	dd07      	ble.n	800a94e <_strtod_l+0x79e>
 800a93e:	4649      	mov	r1, r9
 800a940:	4632      	mov	r2, r6
 800a942:	9805      	ldr	r0, [sp, #20]
 800a944:	f7ff f9c0 	bl	8009cc8 <__lshift>
 800a948:	4681      	mov	r9, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0d8      	beq.n	800a900 <_strtod_l+0x750>
 800a94e:	2f00      	cmp	r7, #0
 800a950:	dd08      	ble.n	800a964 <_strtod_l+0x7b4>
 800a952:	4641      	mov	r1, r8
 800a954:	463a      	mov	r2, r7
 800a956:	9805      	ldr	r0, [sp, #20]
 800a958:	f7ff f9b6 	bl	8009cc8 <__lshift>
 800a95c:	4680      	mov	r8, r0
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f ae41 	beq.w	800a5e6 <_strtod_l+0x436>
 800a964:	464a      	mov	r2, r9
 800a966:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	f7ff fa35 	bl	8009dd8 <__mdiff>
 800a96e:	4604      	mov	r4, r0
 800a970:	2800      	cmp	r0, #0
 800a972:	f43f ae38 	beq.w	800a5e6 <_strtod_l+0x436>
 800a976:	68c3      	ldr	r3, [r0, #12]
 800a978:	4641      	mov	r1, r8
 800a97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a97c:	2300      	movs	r3, #0
 800a97e:	60c3      	str	r3, [r0, #12]
 800a980:	f7ff fa0e 	bl	8009da0 <__mcmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	da45      	bge.n	800aa14 <_strtod_l+0x864>
 800a988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98a:	ea53 030a 	orrs.w	r3, r3, sl
 800a98e:	d16b      	bne.n	800aa68 <_strtod_l+0x8b8>
 800a990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a994:	2b00      	cmp	r3, #0
 800a996:	d167      	bne.n	800aa68 <_strtod_l+0x8b8>
 800a998:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	051b      	lsls	r3, r3, #20
 800a9a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9a4:	d960      	bls.n	800aa68 <_strtod_l+0x8b8>
 800a9a6:	6963      	ldr	r3, [r4, #20]
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_strtod_l+0x800>
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	dd5b      	ble.n	800aa68 <_strtod_l+0x8b8>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	9805      	ldr	r0, [sp, #20]
 800a9b6:	f7ff f987 	bl	8009cc8 <__lshift>
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	4604      	mov	r4, r0
 800a9be:	f7ff f9ef 	bl	8009da0 <__mcmp>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	dd50      	ble.n	800aa68 <_strtod_l+0x8b8>
 800a9c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9ca:	9a08      	ldr	r2, [sp, #32]
 800a9cc:	0d1b      	lsrs	r3, r3, #20
 800a9ce:	051b      	lsls	r3, r3, #20
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d06a      	beq.n	800aaaa <_strtod_l+0x8fa>
 800a9d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9d8:	d867      	bhi.n	800aaaa <_strtod_l+0x8fa>
 800a9da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9de:	f67f ae98 	bls.w	800a712 <_strtod_l+0x562>
 800a9e2:	4650      	mov	r0, sl
 800a9e4:	4659      	mov	r1, fp
 800a9e6:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <_strtod_l+0x85c>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4b08      	ldr	r3, [pc, #32]	@ (800aa10 <_strtod_l+0x860>)
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	400b      	ands	r3, r1
 800a9f4:	468b      	mov	fp, r1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f47f ae00 	bne.w	800a5fc <_strtod_l+0x44c>
 800a9fc:	2322      	movs	r3, #34	@ 0x22
 800a9fe:	9a05      	ldr	r2, [sp, #20]
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	e5fb      	b.n	800a5fc <_strtod_l+0x44c>
 800aa04:	0800c338 	.word	0x0800c338
 800aa08:	fffffc02 	.word	0xfffffc02
 800aa0c:	39500000 	.word	0x39500000
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa18:	d165      	bne.n	800aae6 <_strtod_l+0x936>
 800aa1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa20:	b35a      	cbz	r2, 800aa7a <_strtod_l+0x8ca>
 800aa22:	4a99      	ldr	r2, [pc, #612]	@ (800ac88 <_strtod_l+0xad8>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d12b      	bne.n	800aa80 <_strtod_l+0x8d0>
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	4651      	mov	r1, sl
 800aa2c:	b303      	cbz	r3, 800aa70 <_strtod_l+0x8c0>
 800aa2e:	465a      	mov	r2, fp
 800aa30:	4b96      	ldr	r3, [pc, #600]	@ (800ac8c <_strtod_l+0xadc>)
 800aa32:	4013      	ands	r3, r2
 800aa34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa3c:	d81b      	bhi.n	800aa76 <_strtod_l+0x8c6>
 800aa3e:	0d1b      	lsrs	r3, r3, #20
 800aa40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d119      	bne.n	800aa80 <_strtod_l+0x8d0>
 800aa4c:	4b90      	ldr	r3, [pc, #576]	@ (800ac90 <_strtod_l+0xae0>)
 800aa4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d102      	bne.n	800aa5a <_strtod_l+0x8aa>
 800aa54:	3101      	adds	r1, #1
 800aa56:	f43f adc6 	beq.w	800a5e6 <_strtod_l+0x436>
 800aa5a:	f04f 0a00 	mov.w	sl, #0
 800aa5e:	4b8b      	ldr	r3, [pc, #556]	@ (800ac8c <_strtod_l+0xadc>)
 800aa60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa62:	401a      	ands	r2, r3
 800aa64:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1b9      	bne.n	800a9e2 <_strtod_l+0x832>
 800aa6e:	e5c5      	b.n	800a5fc <_strtod_l+0x44c>
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa74:	e7e8      	b.n	800aa48 <_strtod_l+0x898>
 800aa76:	4613      	mov	r3, r2
 800aa78:	e7e6      	b.n	800aa48 <_strtod_l+0x898>
 800aa7a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa7e:	d0a2      	beq.n	800a9c6 <_strtod_l+0x816>
 800aa80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa82:	b1db      	cbz	r3, 800aabc <_strtod_l+0x90c>
 800aa84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa86:	4213      	tst	r3, r2
 800aa88:	d0ee      	beq.n	800aa68 <_strtod_l+0x8b8>
 800aa8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	4659      	mov	r1, fp
 800aa90:	9a08      	ldr	r2, [sp, #32]
 800aa92:	b1bb      	cbz	r3, 800aac4 <_strtod_l+0x914>
 800aa94:	f7ff fb68 	bl	800a168 <sulp>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa0:	f7f5 fb64 	bl	800016c <__adddf3>
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	e7de      	b.n	800aa68 <_strtod_l+0x8b8>
 800aaaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aaae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aab2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aab6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aaba:	e7d5      	b.n	800aa68 <_strtod_l+0x8b8>
 800aabc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aabe:	ea13 0f0a 	tst.w	r3, sl
 800aac2:	e7e1      	b.n	800aa88 <_strtod_l+0x8d8>
 800aac4:	f7ff fb50 	bl	800a168 <sulp>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aad0:	f7f5 fb4a 	bl	8000168 <__aeabi_dsub>
 800aad4:	2200      	movs	r2, #0
 800aad6:	2300      	movs	r3, #0
 800aad8:	4682      	mov	sl, r0
 800aada:	468b      	mov	fp, r1
 800aadc:	f7f5 ff64 	bl	80009a8 <__aeabi_dcmpeq>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0c1      	beq.n	800aa68 <_strtod_l+0x8b8>
 800aae4:	e615      	b.n	800a712 <_strtod_l+0x562>
 800aae6:	4641      	mov	r1, r8
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7ff fac9 	bl	800a080 <__ratio>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	460f      	mov	r7, r1
 800aaf8:	f7f5 ff6a 	bl	80009d0 <__aeabi_dcmple>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d06d      	beq.n	800abdc <_strtod_l+0xa2c>
 800ab00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d178      	bne.n	800abf8 <_strtod_l+0xa48>
 800ab06:	f1ba 0f00 	cmp.w	sl, #0
 800ab0a:	d156      	bne.n	800abba <_strtod_l+0xa0a>
 800ab0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d158      	bne.n	800abc8 <_strtod_l+0xa18>
 800ab16:	2200      	movs	r2, #0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4b5d      	ldr	r3, [pc, #372]	@ (800ac94 <_strtod_l+0xae4>)
 800ab1e:	f7f5 ff4d 	bl	80009bc <__aeabi_dcmplt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d157      	bne.n	800abd6 <_strtod_l+0xa26>
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4b5a      	ldr	r3, [pc, #360]	@ (800ac98 <_strtod_l+0xae8>)
 800ab2e:	f7f5 fcd3 	bl	80004d8 <__aeabi_dmul>
 800ab32:	4606      	mov	r6, r0
 800ab34:	460f      	mov	r7, r1
 800ab36:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab3a:	9606      	str	r6, [sp, #24]
 800ab3c:	9307      	str	r3, [sp, #28]
 800ab3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab42:	4d52      	ldr	r5, [pc, #328]	@ (800ac8c <_strtod_l+0xadc>)
 800ab44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab4a:	401d      	ands	r5, r3
 800ab4c:	4b53      	ldr	r3, [pc, #332]	@ (800ac9c <_strtod_l+0xaec>)
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	f040 80aa 	bne.w	800aca8 <_strtod_l+0xaf8>
 800ab54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab56:	4650      	mov	r0, sl
 800ab58:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	f7ff f9cf 	bl	8009f00 <__ulp>
 800ab62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab66:	f7f5 fcb7 	bl	80004d8 <__aeabi_dmul>
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	f7f5 fafd 	bl	800016c <__adddf3>
 800ab72:	460b      	mov	r3, r1
 800ab74:	4945      	ldr	r1, [pc, #276]	@ (800ac8c <_strtod_l+0xadc>)
 800ab76:	4a4a      	ldr	r2, [pc, #296]	@ (800aca0 <_strtod_l+0xaf0>)
 800ab78:	4019      	ands	r1, r3
 800ab7a:	4291      	cmp	r1, r2
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	d942      	bls.n	800ac06 <_strtod_l+0xa56>
 800ab80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab82:	4b43      	ldr	r3, [pc, #268]	@ (800ac90 <_strtod_l+0xae0>)
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d103      	bne.n	800ab90 <_strtod_l+0x9e0>
 800ab88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f43f ad2b 	beq.w	800a5e6 <_strtod_l+0x436>
 800ab90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ab94:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ac90 <_strtod_l+0xae0>
 800ab98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab9a:	9805      	ldr	r0, [sp, #20]
 800ab9c:	f7fe fe7e 	bl	800989c <_Bfree>
 800aba0:	4649      	mov	r1, r9
 800aba2:	9805      	ldr	r0, [sp, #20]
 800aba4:	f7fe fe7a 	bl	800989c <_Bfree>
 800aba8:	4641      	mov	r1, r8
 800abaa:	9805      	ldr	r0, [sp, #20]
 800abac:	f7fe fe76 	bl	800989c <_Bfree>
 800abb0:	4621      	mov	r1, r4
 800abb2:	9805      	ldr	r0, [sp, #20]
 800abb4:	f7fe fe72 	bl	800989c <_Bfree>
 800abb8:	e618      	b.n	800a7ec <_strtod_l+0x63c>
 800abba:	f1ba 0f01 	cmp.w	sl, #1
 800abbe:	d103      	bne.n	800abc8 <_strtod_l+0xa18>
 800abc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f43f ada5 	beq.w	800a712 <_strtod_l+0x562>
 800abc8:	2200      	movs	r2, #0
 800abca:	4b36      	ldr	r3, [pc, #216]	@ (800aca4 <_strtod_l+0xaf4>)
 800abcc:	2600      	movs	r6, #0
 800abce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abd2:	4f30      	ldr	r7, [pc, #192]	@ (800ac94 <_strtod_l+0xae4>)
 800abd4:	e7b3      	b.n	800ab3e <_strtod_l+0x98e>
 800abd6:	2600      	movs	r6, #0
 800abd8:	4f2f      	ldr	r7, [pc, #188]	@ (800ac98 <_strtod_l+0xae8>)
 800abda:	e7ac      	b.n	800ab36 <_strtod_l+0x986>
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	4b2d      	ldr	r3, [pc, #180]	@ (800ac98 <_strtod_l+0xae8>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fc78 	bl	80004d8 <__aeabi_dmul>
 800abe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0a1      	beq.n	800ab36 <_strtod_l+0x986>
 800abf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abf6:	e7a2      	b.n	800ab3e <_strtod_l+0x98e>
 800abf8:	2200      	movs	r2, #0
 800abfa:	4b26      	ldr	r3, [pc, #152]	@ (800ac94 <_strtod_l+0xae4>)
 800abfc:	4616      	mov	r6, r2
 800abfe:	461f      	mov	r7, r3
 800ac00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac04:	e79b      	b.n	800ab3e <_strtod_l+0x98e>
 800ac06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac0a:	9b08      	ldr	r3, [sp, #32]
 800ac0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1c1      	bne.n	800ab98 <_strtod_l+0x9e8>
 800ac14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac18:	0d1b      	lsrs	r3, r3, #20
 800ac1a:	051b      	lsls	r3, r3, #20
 800ac1c:	429d      	cmp	r5, r3
 800ac1e:	d1bb      	bne.n	800ab98 <_strtod_l+0x9e8>
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f6 f924 	bl	8000e70 <__aeabi_d2lz>
 800ac28:	f7f5 fc28 	bl	800047c <__aeabi_l2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fa98 	bl	8000168 <__aeabi_dsub>
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac40:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac46:	ea46 060a 	orr.w	r6, r6, sl
 800ac4a:	431e      	orrs	r6, r3
 800ac4c:	d069      	beq.n	800ad22 <_strtod_l+0xb72>
 800ac4e:	a30a      	add	r3, pc, #40	@ (adr r3, 800ac78 <_strtod_l+0xac8>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	f7f5 feb2 	bl	80009bc <__aeabi_dcmplt>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f47f accf 	bne.w	800a5fc <_strtod_l+0x44c>
 800ac5e:	a308      	add	r3, pc, #32	@ (adr r3, 800ac80 <_strtod_l+0xad0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac68:	f7f5 fec6 	bl	80009f8 <__aeabi_dcmpgt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d093      	beq.n	800ab98 <_strtod_l+0x9e8>
 800ac70:	e4c4      	b.n	800a5fc <_strtod_l+0x44c>
 800ac72:	bf00      	nop
 800ac74:	f3af 8000 	nop.w
 800ac78:	94a03595 	.word	0x94a03595
 800ac7c:	3fdfffff 	.word	0x3fdfffff
 800ac80:	35afe535 	.word	0x35afe535
 800ac84:	3fe00000 	.word	0x3fe00000
 800ac88:	000fffff 	.word	0x000fffff
 800ac8c:	7ff00000 	.word	0x7ff00000
 800ac90:	7fefffff 	.word	0x7fefffff
 800ac94:	3ff00000 	.word	0x3ff00000
 800ac98:	3fe00000 	.word	0x3fe00000
 800ac9c:	7fe00000 	.word	0x7fe00000
 800aca0:	7c9fffff 	.word	0x7c9fffff
 800aca4:	bff00000 	.word	0xbff00000
 800aca8:	9b08      	ldr	r3, [sp, #32]
 800acaa:	b323      	cbz	r3, 800acf6 <_strtod_l+0xb46>
 800acac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800acb0:	d821      	bhi.n	800acf6 <_strtod_l+0xb46>
 800acb2:	a327      	add	r3, pc, #156	@ (adr r3, 800ad50 <_strtod_l+0xba0>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	4630      	mov	r0, r6
 800acba:	4639      	mov	r1, r7
 800acbc:	f7f5 fe88 	bl	80009d0 <__aeabi_dcmple>
 800acc0:	b1a0      	cbz	r0, 800acec <_strtod_l+0xb3c>
 800acc2:	4639      	mov	r1, r7
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7f5 fedf 	bl	8000a88 <__aeabi_d2uiz>
 800acca:	2801      	cmp	r0, #1
 800accc:	bf38      	it	cc
 800acce:	2001      	movcc	r0, #1
 800acd0:	f7f5 fb88 	bl	80003e4 <__aeabi_ui2d>
 800acd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd6:	4606      	mov	r6, r0
 800acd8:	460f      	mov	r7, r1
 800acda:	b9fb      	cbnz	r3, 800ad1c <_strtod_l+0xb6c>
 800acdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ace0:	9014      	str	r0, [sp, #80]	@ 0x50
 800ace2:	9315      	str	r3, [sp, #84]	@ 0x54
 800ace4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ace8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800acf2:	1b5b      	subs	r3, r3, r5
 800acf4:	9311      	str	r3, [sp, #68]	@ 0x44
 800acf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acfa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800acfe:	f7ff f8ff 	bl	8009f00 <__ulp>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4650      	mov	r0, sl
 800ad08:	4659      	mov	r1, fp
 800ad0a:	f7f5 fbe5 	bl	80004d8 <__aeabi_dmul>
 800ad0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad12:	f7f5 fa2b 	bl	800016c <__adddf3>
 800ad16:	4682      	mov	sl, r0
 800ad18:	468b      	mov	fp, r1
 800ad1a:	e776      	b.n	800ac0a <_strtod_l+0xa5a>
 800ad1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad20:	e7e0      	b.n	800ace4 <_strtod_l+0xb34>
 800ad22:	a30d      	add	r3, pc, #52	@ (adr r3, 800ad58 <_strtod_l+0xba8>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f7f5 fe48 	bl	80009bc <__aeabi_dcmplt>
 800ad2c:	e79e      	b.n	800ac6c <_strtod_l+0xabc>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad34:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	f7ff ba77 	b.w	800a22a <_strtod_l+0x7a>
 800ad3c:	2a65      	cmp	r2, #101	@ 0x65
 800ad3e:	f43f ab6e 	beq.w	800a41e <_strtod_l+0x26e>
 800ad42:	2a45      	cmp	r2, #69	@ 0x45
 800ad44:	f43f ab6b 	beq.w	800a41e <_strtod_l+0x26e>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f7ff bba6 	b.w	800a49a <_strtod_l+0x2ea>
 800ad4e:	bf00      	nop
 800ad50:	ffc00000 	.word	0xffc00000
 800ad54:	41dfffff 	.word	0x41dfffff
 800ad58:	94a03595 	.word	0x94a03595
 800ad5c:	3fcfffff 	.word	0x3fcfffff

0800ad60 <_strtod_r>:
 800ad60:	4b01      	ldr	r3, [pc, #4]	@ (800ad68 <_strtod_r+0x8>)
 800ad62:	f7ff ba25 	b.w	800a1b0 <_strtod_l>
 800ad66:	bf00      	nop
 800ad68:	20000070 	.word	0x20000070

0800ad6c <_strtol_l.constprop.0>:
 800ad6c:	2b24      	cmp	r3, #36	@ 0x24
 800ad6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad72:	4686      	mov	lr, r0
 800ad74:	4690      	mov	r8, r2
 800ad76:	d801      	bhi.n	800ad7c <_strtol_l.constprop.0+0x10>
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d106      	bne.n	800ad8a <_strtol_l.constprop.0+0x1e>
 800ad7c:	f7fd fdb2 	bl	80088e4 <__errno>
 800ad80:	2316      	movs	r3, #22
 800ad82:	6003      	str	r3, [r0, #0]
 800ad84:	2000      	movs	r0, #0
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	4833      	ldr	r0, [pc, #204]	@ (800ae5c <_strtol_l.constprop.0+0xf0>)
 800ad8e:	462a      	mov	r2, r5
 800ad90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad94:	5d06      	ldrb	r6, [r0, r4]
 800ad96:	f016 0608 	ands.w	r6, r6, #8
 800ad9a:	d1f8      	bne.n	800ad8e <_strtol_l.constprop.0+0x22>
 800ad9c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad9e:	d12d      	bne.n	800adfc <_strtol_l.constprop.0+0x90>
 800ada0:	2601      	movs	r6, #1
 800ada2:	782c      	ldrb	r4, [r5, #0]
 800ada4:	1c95      	adds	r5, r2, #2
 800ada6:	f033 0210 	bics.w	r2, r3, #16
 800adaa:	d109      	bne.n	800adc0 <_strtol_l.constprop.0+0x54>
 800adac:	2c30      	cmp	r4, #48	@ 0x30
 800adae:	d12a      	bne.n	800ae06 <_strtol_l.constprop.0+0x9a>
 800adb0:	782a      	ldrb	r2, [r5, #0]
 800adb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adb6:	2a58      	cmp	r2, #88	@ 0x58
 800adb8:	d125      	bne.n	800ae06 <_strtol_l.constprop.0+0x9a>
 800adba:	2310      	movs	r3, #16
 800adbc:	786c      	ldrb	r4, [r5, #1]
 800adbe:	3502      	adds	r5, #2
 800adc0:	2200      	movs	r2, #0
 800adc2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800adc6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800adca:	fbbc f9f3 	udiv	r9, ip, r3
 800adce:	4610      	mov	r0, r2
 800add0:	fb03 ca19 	mls	sl, r3, r9, ip
 800add4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800add8:	2f09      	cmp	r7, #9
 800adda:	d81b      	bhi.n	800ae14 <_strtol_l.constprop.0+0xa8>
 800addc:	463c      	mov	r4, r7
 800adde:	42a3      	cmp	r3, r4
 800ade0:	dd27      	ble.n	800ae32 <_strtol_l.constprop.0+0xc6>
 800ade2:	1c57      	adds	r7, r2, #1
 800ade4:	d007      	beq.n	800adf6 <_strtol_l.constprop.0+0x8a>
 800ade6:	4581      	cmp	r9, r0
 800ade8:	d320      	bcc.n	800ae2c <_strtol_l.constprop.0+0xc0>
 800adea:	d101      	bne.n	800adf0 <_strtol_l.constprop.0+0x84>
 800adec:	45a2      	cmp	sl, r4
 800adee:	db1d      	blt.n	800ae2c <_strtol_l.constprop.0+0xc0>
 800adf0:	2201      	movs	r2, #1
 800adf2:	fb00 4003 	mla	r0, r0, r3, r4
 800adf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adfa:	e7eb      	b.n	800add4 <_strtol_l.constprop.0+0x68>
 800adfc:	2c2b      	cmp	r4, #43	@ 0x2b
 800adfe:	bf04      	itt	eq
 800ae00:	782c      	ldrbeq	r4, [r5, #0]
 800ae02:	1c95      	addeq	r5, r2, #2
 800ae04:	e7cf      	b.n	800ada6 <_strtol_l.constprop.0+0x3a>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1da      	bne.n	800adc0 <_strtol_l.constprop.0+0x54>
 800ae0a:	2c30      	cmp	r4, #48	@ 0x30
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2308      	moveq	r3, #8
 800ae10:	230a      	movne	r3, #10
 800ae12:	e7d5      	b.n	800adc0 <_strtol_l.constprop.0+0x54>
 800ae14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae18:	2f19      	cmp	r7, #25
 800ae1a:	d801      	bhi.n	800ae20 <_strtol_l.constprop.0+0xb4>
 800ae1c:	3c37      	subs	r4, #55	@ 0x37
 800ae1e:	e7de      	b.n	800adde <_strtol_l.constprop.0+0x72>
 800ae20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae24:	2f19      	cmp	r7, #25
 800ae26:	d804      	bhi.n	800ae32 <_strtol_l.constprop.0+0xc6>
 800ae28:	3c57      	subs	r4, #87	@ 0x57
 800ae2a:	e7d8      	b.n	800adde <_strtol_l.constprop.0+0x72>
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae30:	e7e1      	b.n	800adf6 <_strtol_l.constprop.0+0x8a>
 800ae32:	1c53      	adds	r3, r2, #1
 800ae34:	d108      	bne.n	800ae48 <_strtol_l.constprop.0+0xdc>
 800ae36:	2322      	movs	r3, #34	@ 0x22
 800ae38:	4660      	mov	r0, ip
 800ae3a:	f8ce 3000 	str.w	r3, [lr]
 800ae3e:	f1b8 0f00 	cmp.w	r8, #0
 800ae42:	d0a0      	beq.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae44:	1e69      	subs	r1, r5, #1
 800ae46:	e006      	b.n	800ae56 <_strtol_l.constprop.0+0xea>
 800ae48:	b106      	cbz	r6, 800ae4c <_strtol_l.constprop.0+0xe0>
 800ae4a:	4240      	negs	r0, r0
 800ae4c:	f1b8 0f00 	cmp.w	r8, #0
 800ae50:	d099      	beq.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	d1f6      	bne.n	800ae44 <_strtol_l.constprop.0+0xd8>
 800ae56:	f8c8 1000 	str.w	r1, [r8]
 800ae5a:	e794      	b.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae5c:	0800c361 	.word	0x0800c361

0800ae60 <_strtol_r>:
 800ae60:	f7ff bf84 	b.w	800ad6c <_strtol_l.constprop.0>

0800ae64 <__ssputs_r>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	461f      	mov	r7, r3
 800ae6a:	688e      	ldr	r6, [r1, #8]
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	42be      	cmp	r6, r7
 800ae70:	460c      	mov	r4, r1
 800ae72:	4690      	mov	r8, r2
 800ae74:	680b      	ldr	r3, [r1, #0]
 800ae76:	d82d      	bhi.n	800aed4 <__ssputs_r+0x70>
 800ae78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae80:	d026      	beq.n	800aed0 <__ssputs_r+0x6c>
 800ae82:	6965      	ldr	r5, [r4, #20]
 800ae84:	6909      	ldr	r1, [r1, #16]
 800ae86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae8a:	eba3 0901 	sub.w	r9, r3, r1
 800ae8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae92:	1c7b      	adds	r3, r7, #1
 800ae94:	444b      	add	r3, r9
 800ae96:	106d      	asrs	r5, r5, #1
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	bf38      	it	cc
 800ae9c:	461d      	movcc	r5, r3
 800ae9e:	0553      	lsls	r3, r2, #21
 800aea0:	d527      	bpl.n	800aef2 <__ssputs_r+0x8e>
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7fe fc2e 	bl	8009704 <_malloc_r>
 800aea8:	4606      	mov	r6, r0
 800aeaa:	b360      	cbz	r0, 800af06 <__ssputs_r+0xa2>
 800aeac:	464a      	mov	r2, r9
 800aeae:	6921      	ldr	r1, [r4, #16]
 800aeb0:	f7fd fd53 	bl	800895a <memcpy>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	6126      	str	r6, [r4, #16]
 800aec2:	444e      	add	r6, r9
 800aec4:	6026      	str	r6, [r4, #0]
 800aec6:	463e      	mov	r6, r7
 800aec8:	6165      	str	r5, [r4, #20]
 800aeca:	eba5 0509 	sub.w	r5, r5, r9
 800aece:	60a5      	str	r5, [r4, #8]
 800aed0:	42be      	cmp	r6, r7
 800aed2:	d900      	bls.n	800aed6 <__ssputs_r+0x72>
 800aed4:	463e      	mov	r6, r7
 800aed6:	4632      	mov	r2, r6
 800aed8:	4641      	mov	r1, r8
 800aeda:	6820      	ldr	r0, [r4, #0]
 800aedc:	f000 f9c2 	bl	800b264 <memmove>
 800aee0:	2000      	movs	r0, #0
 800aee2:	68a3      	ldr	r3, [r4, #8]
 800aee4:	1b9b      	subs	r3, r3, r6
 800aee6:	60a3      	str	r3, [r4, #8]
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	4433      	add	r3, r6
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	462a      	mov	r2, r5
 800aef4:	f000 fd75 	bl	800b9e2 <_realloc_r>
 800aef8:	4606      	mov	r6, r0
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1e0      	bne.n	800aec0 <__ssputs_r+0x5c>
 800aefe:	4650      	mov	r0, sl
 800af00:	6921      	ldr	r1, [r4, #16]
 800af02:	f7fe fb8d 	bl	8009620 <_free_r>
 800af06:	230c      	movs	r3, #12
 800af08:	f8ca 3000 	str.w	r3, [sl]
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	e7e9      	b.n	800aeee <__ssputs_r+0x8a>
	...

0800af1c <_svfiprintf_r>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	4698      	mov	r8, r3
 800af22:	898b      	ldrh	r3, [r1, #12]
 800af24:	4607      	mov	r7, r0
 800af26:	061b      	lsls	r3, r3, #24
 800af28:	460d      	mov	r5, r1
 800af2a:	4614      	mov	r4, r2
 800af2c:	b09d      	sub	sp, #116	@ 0x74
 800af2e:	d510      	bpl.n	800af52 <_svfiprintf_r+0x36>
 800af30:	690b      	ldr	r3, [r1, #16]
 800af32:	b973      	cbnz	r3, 800af52 <_svfiprintf_r+0x36>
 800af34:	2140      	movs	r1, #64	@ 0x40
 800af36:	f7fe fbe5 	bl	8009704 <_malloc_r>
 800af3a:	6028      	str	r0, [r5, #0]
 800af3c:	6128      	str	r0, [r5, #16]
 800af3e:	b930      	cbnz	r0, 800af4e <_svfiprintf_r+0x32>
 800af40:	230c      	movs	r3, #12
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af48:	b01d      	add	sp, #116	@ 0x74
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	2340      	movs	r3, #64	@ 0x40
 800af50:	616b      	str	r3, [r5, #20]
 800af52:	2300      	movs	r3, #0
 800af54:	9309      	str	r3, [sp, #36]	@ 0x24
 800af56:	2320      	movs	r3, #32
 800af58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af5c:	2330      	movs	r3, #48	@ 0x30
 800af5e:	f04f 0901 	mov.w	r9, #1
 800af62:	f8cd 800c 	str.w	r8, [sp, #12]
 800af66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b100 <_svfiprintf_r+0x1e4>
 800af6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af6e:	4623      	mov	r3, r4
 800af70:	469a      	mov	sl, r3
 800af72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af76:	b10a      	cbz	r2, 800af7c <_svfiprintf_r+0x60>
 800af78:	2a25      	cmp	r2, #37	@ 0x25
 800af7a:	d1f9      	bne.n	800af70 <_svfiprintf_r+0x54>
 800af7c:	ebba 0b04 	subs.w	fp, sl, r4
 800af80:	d00b      	beq.n	800af9a <_svfiprintf_r+0x7e>
 800af82:	465b      	mov	r3, fp
 800af84:	4622      	mov	r2, r4
 800af86:	4629      	mov	r1, r5
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ff6b 	bl	800ae64 <__ssputs_r>
 800af8e:	3001      	adds	r0, #1
 800af90:	f000 80a7 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800af94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af96:	445a      	add	r2, fp
 800af98:	9209      	str	r2, [sp, #36]	@ 0x24
 800af9a:	f89a 3000 	ldrb.w	r3, [sl]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 809f 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afae:	f10a 0a01 	add.w	sl, sl, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afba:	931a      	str	r3, [sp, #104]	@ 0x68
 800afbc:	4654      	mov	r4, sl
 800afbe:	2205      	movs	r2, #5
 800afc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc4:	484e      	ldr	r0, [pc, #312]	@ (800b100 <_svfiprintf_r+0x1e4>)
 800afc6:	f7fd fcba 	bl	800893e <memchr>
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	b9d8      	cbnz	r0, 800b006 <_svfiprintf_r+0xea>
 800afce:	06d0      	lsls	r0, r2, #27
 800afd0:	bf44      	itt	mi
 800afd2:	2320      	movmi	r3, #32
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd8:	0711      	lsls	r1, r2, #28
 800afda:	bf44      	itt	mi
 800afdc:	232b      	movmi	r3, #43	@ 0x2b
 800afde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe2:	f89a 3000 	ldrb.w	r3, [sl]
 800afe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe8:	d015      	beq.n	800b016 <_svfiprintf_r+0xfa>
 800afea:	4654      	mov	r4, sl
 800afec:	2000      	movs	r0, #0
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	9a07      	ldr	r2, [sp, #28]
 800aff4:	4621      	mov	r1, r4
 800aff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affa:	3b30      	subs	r3, #48	@ 0x30
 800affc:	2b09      	cmp	r3, #9
 800affe:	d94b      	bls.n	800b098 <_svfiprintf_r+0x17c>
 800b000:	b1b0      	cbz	r0, 800b030 <_svfiprintf_r+0x114>
 800b002:	9207      	str	r2, [sp, #28]
 800b004:	e014      	b.n	800b030 <_svfiprintf_r+0x114>
 800b006:	eba0 0308 	sub.w	r3, r0, r8
 800b00a:	fa09 f303 	lsl.w	r3, r9, r3
 800b00e:	4313      	orrs	r3, r2
 800b010:	46a2      	mov	sl, r4
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	e7d2      	b.n	800afbc <_svfiprintf_r+0xa0>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfbb      	ittet	lt
 800b022:	425b      	neglt	r3, r3
 800b024:	f042 0202 	orrlt.w	r2, r2, #2
 800b028:	9307      	strge	r3, [sp, #28]
 800b02a:	9307      	strlt	r3, [sp, #28]
 800b02c:	bfb8      	it	lt
 800b02e:	9204      	strlt	r2, [sp, #16]
 800b030:	7823      	ldrb	r3, [r4, #0]
 800b032:	2b2e      	cmp	r3, #46	@ 0x2e
 800b034:	d10a      	bne.n	800b04c <_svfiprintf_r+0x130>
 800b036:	7863      	ldrb	r3, [r4, #1]
 800b038:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03a:	d132      	bne.n	800b0a2 <_svfiprintf_r+0x186>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	3402      	adds	r4, #2
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	9203      	str	r2, [sp, #12]
 800b046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b04a:	9305      	str	r3, [sp, #20]
 800b04c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b104 <_svfiprintf_r+0x1e8>
 800b050:	2203      	movs	r2, #3
 800b052:	4650      	mov	r0, sl
 800b054:	7821      	ldrb	r1, [r4, #0]
 800b056:	f7fd fc72 	bl	800893e <memchr>
 800b05a:	b138      	cbz	r0, 800b06c <_svfiprintf_r+0x150>
 800b05c:	2240      	movs	r2, #64	@ 0x40
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	eba0 000a 	sub.w	r0, r0, sl
 800b064:	4082      	lsls	r2, r0
 800b066:	4313      	orrs	r3, r2
 800b068:	3401      	adds	r4, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b070:	2206      	movs	r2, #6
 800b072:	4825      	ldr	r0, [pc, #148]	@ (800b108 <_svfiprintf_r+0x1ec>)
 800b074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b078:	f7fd fc61 	bl	800893e <memchr>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d036      	beq.n	800b0ee <_svfiprintf_r+0x1d2>
 800b080:	4b22      	ldr	r3, [pc, #136]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b082:	bb1b      	cbnz	r3, 800b0cc <_svfiprintf_r+0x1b0>
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	3307      	adds	r3, #7
 800b088:	f023 0307 	bic.w	r3, r3, #7
 800b08c:	3308      	adds	r3, #8
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b092:	4433      	add	r3, r6
 800b094:	9309      	str	r3, [sp, #36]	@ 0x24
 800b096:	e76a      	b.n	800af6e <_svfiprintf_r+0x52>
 800b098:	460c      	mov	r4, r1
 800b09a:	2001      	movs	r0, #1
 800b09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a0:	e7a8      	b.n	800aff4 <_svfiprintf_r+0xd8>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f04f 0c0a 	mov.w	ip, #10
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	3401      	adds	r4, #1
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b4:	3a30      	subs	r2, #48	@ 0x30
 800b0b6:	2a09      	cmp	r2, #9
 800b0b8:	d903      	bls.n	800b0c2 <_svfiprintf_r+0x1a6>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0c6      	beq.n	800b04c <_svfiprintf_r+0x130>
 800b0be:	9105      	str	r1, [sp, #20]
 800b0c0:	e7c4      	b.n	800b04c <_svfiprintf_r+0x130>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ca:	e7f0      	b.n	800b0ae <_svfiprintf_r+0x192>
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b110 <_svfiprintf_r+0x1f4>)
 800b0d6:	a904      	add	r1, sp, #16
 800b0d8:	f7fc fcbe 	bl	8007a58 <_printf_float>
 800b0dc:	1c42      	adds	r2, r0, #1
 800b0de:	4606      	mov	r6, r0
 800b0e0:	d1d6      	bne.n	800b090 <_svfiprintf_r+0x174>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	065b      	lsls	r3, r3, #25
 800b0e6:	f53f af2d 	bmi.w	800af44 <_svfiprintf_r+0x28>
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	e72c      	b.n	800af48 <_svfiprintf_r+0x2c>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <_svfiprintf_r+0x1f4>)
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	f7fc ff4b 	bl	8007f94 <_printf_i>
 800b0fe:	e7ed      	b.n	800b0dc <_svfiprintf_r+0x1c0>
 800b100:	0800c461 	.word	0x0800c461
 800b104:	0800c467 	.word	0x0800c467
 800b108:	0800c46b 	.word	0x0800c46b
 800b10c:	08007a59 	.word	0x08007a59
 800b110:	0800ae65 	.word	0x0800ae65

0800b114 <__sflush_r>:
 800b114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	0716      	lsls	r6, r2, #28
 800b11c:	4605      	mov	r5, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	d454      	bmi.n	800b1cc <__sflush_r+0xb8>
 800b122:	684b      	ldr	r3, [r1, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dc02      	bgt.n	800b12e <__sflush_r+0x1a>
 800b128:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dd48      	ble.n	800b1c0 <__sflush_r+0xac>
 800b12e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b130:	2e00      	cmp	r6, #0
 800b132:	d045      	beq.n	800b1c0 <__sflush_r+0xac>
 800b134:	2300      	movs	r3, #0
 800b136:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b13a:	682f      	ldr	r7, [r5, #0]
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	d030      	beq.n	800b1a4 <__sflush_r+0x90>
 800b142:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	0759      	lsls	r1, r3, #29
 800b148:	d505      	bpl.n	800b156 <__sflush_r+0x42>
 800b14a:	6863      	ldr	r3, [r4, #4]
 800b14c:	1ad2      	subs	r2, r2, r3
 800b14e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b150:	b10b      	cbz	r3, 800b156 <__sflush_r+0x42>
 800b152:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	2300      	movs	r3, #0
 800b158:	4628      	mov	r0, r5
 800b15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	47b0      	blx	r6
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	d106      	bne.n	800b174 <__sflush_r+0x60>
 800b166:	6829      	ldr	r1, [r5, #0]
 800b168:	291d      	cmp	r1, #29
 800b16a:	d82b      	bhi.n	800b1c4 <__sflush_r+0xb0>
 800b16c:	4a28      	ldr	r2, [pc, #160]	@ (800b210 <__sflush_r+0xfc>)
 800b16e:	410a      	asrs	r2, r1
 800b170:	07d6      	lsls	r6, r2, #31
 800b172:	d427      	bmi.n	800b1c4 <__sflush_r+0xb0>
 800b174:	2200      	movs	r2, #0
 800b176:	6062      	str	r2, [r4, #4]
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	04d9      	lsls	r1, r3, #19
 800b17c:	6022      	str	r2, [r4, #0]
 800b17e:	d504      	bpl.n	800b18a <__sflush_r+0x76>
 800b180:	1c42      	adds	r2, r0, #1
 800b182:	d101      	bne.n	800b188 <__sflush_r+0x74>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b903      	cbnz	r3, 800b18a <__sflush_r+0x76>
 800b188:	6560      	str	r0, [r4, #84]	@ 0x54
 800b18a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b18c:	602f      	str	r7, [r5, #0]
 800b18e:	b1b9      	cbz	r1, 800b1c0 <__sflush_r+0xac>
 800b190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <__sflush_r+0x8a>
 800b198:	4628      	mov	r0, r5
 800b19a:	f7fe fa41 	bl	8009620 <_free_r>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1a2:	e00d      	b.n	800b1c0 <__sflush_r+0xac>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	47b0      	blx	r6
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	1c50      	adds	r0, r2, #1
 800b1ae:	d1c9      	bne.n	800b144 <__sflush_r+0x30>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0c6      	beq.n	800b144 <__sflush_r+0x30>
 800b1b6:	2b1d      	cmp	r3, #29
 800b1b8:	d001      	beq.n	800b1be <__sflush_r+0xaa>
 800b1ba:	2b16      	cmp	r3, #22
 800b1bc:	d11d      	bne.n	800b1fa <__sflush_r+0xe6>
 800b1be:	602f      	str	r7, [r5, #0]
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	e021      	b.n	800b208 <__sflush_r+0xf4>
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c8:	b21b      	sxth	r3, r3
 800b1ca:	e01a      	b.n	800b202 <__sflush_r+0xee>
 800b1cc:	690f      	ldr	r7, [r1, #16]
 800b1ce:	2f00      	cmp	r7, #0
 800b1d0:	d0f6      	beq.n	800b1c0 <__sflush_r+0xac>
 800b1d2:	0793      	lsls	r3, r2, #30
 800b1d4:	bf18      	it	ne
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	680e      	ldr	r6, [r1, #0]
 800b1da:	bf08      	it	eq
 800b1dc:	694b      	ldreq	r3, [r1, #20]
 800b1de:	1bf6      	subs	r6, r6, r7
 800b1e0:	600f      	str	r7, [r1, #0]
 800b1e2:	608b      	str	r3, [r1, #8]
 800b1e4:	2e00      	cmp	r6, #0
 800b1e6:	ddeb      	ble.n	800b1c0 <__sflush_r+0xac>
 800b1e8:	4633      	mov	r3, r6
 800b1ea:	463a      	mov	r2, r7
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	6a21      	ldr	r1, [r4, #32]
 800b1f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b1f4:	47e0      	blx	ip
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	dc07      	bgt.n	800b20a <__sflush_r+0xf6>
 800b1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b20a:	4407      	add	r7, r0
 800b20c:	1a36      	subs	r6, r6, r0
 800b20e:	e7e9      	b.n	800b1e4 <__sflush_r+0xd0>
 800b210:	dfbffffe 	.word	0xdfbffffe

0800b214 <_fflush_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	690b      	ldr	r3, [r1, #16]
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	b913      	cbnz	r3, 800b224 <_fflush_r+0x10>
 800b21e:	2500      	movs	r5, #0
 800b220:	4628      	mov	r0, r5
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	b118      	cbz	r0, 800b22e <_fflush_r+0x1a>
 800b226:	6a03      	ldr	r3, [r0, #32]
 800b228:	b90b      	cbnz	r3, 800b22e <_fflush_r+0x1a>
 800b22a:	f7fd fa6f 	bl	800870c <__sinit>
 800b22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0f3      	beq.n	800b21e <_fflush_r+0xa>
 800b236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b238:	07d0      	lsls	r0, r2, #31
 800b23a:	d404      	bmi.n	800b246 <_fflush_r+0x32>
 800b23c:	0599      	lsls	r1, r3, #22
 800b23e:	d402      	bmi.n	800b246 <_fflush_r+0x32>
 800b240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b242:	f7fd fb7a 	bl	800893a <__retarget_lock_acquire_recursive>
 800b246:	4628      	mov	r0, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	f7ff ff63 	bl	800b114 <__sflush_r>
 800b24e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b250:	4605      	mov	r5, r0
 800b252:	07da      	lsls	r2, r3, #31
 800b254:	d4e4      	bmi.n	800b220 <_fflush_r+0xc>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	059b      	lsls	r3, r3, #22
 800b25a:	d4e1      	bmi.n	800b220 <_fflush_r+0xc>
 800b25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b25e:	f7fd fb6d 	bl	800893c <__retarget_lock_release_recursive>
 800b262:	e7dd      	b.n	800b220 <_fflush_r+0xc>

0800b264 <memmove>:
 800b264:	4288      	cmp	r0, r1
 800b266:	b510      	push	{r4, lr}
 800b268:	eb01 0402 	add.w	r4, r1, r2
 800b26c:	d902      	bls.n	800b274 <memmove+0x10>
 800b26e:	4284      	cmp	r4, r0
 800b270:	4623      	mov	r3, r4
 800b272:	d807      	bhi.n	800b284 <memmove+0x20>
 800b274:	1e43      	subs	r3, r0, #1
 800b276:	42a1      	cmp	r1, r4
 800b278:	d008      	beq.n	800b28c <memmove+0x28>
 800b27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b282:	e7f8      	b.n	800b276 <memmove+0x12>
 800b284:	4601      	mov	r1, r0
 800b286:	4402      	add	r2, r0
 800b288:	428a      	cmp	r2, r1
 800b28a:	d100      	bne.n	800b28e <memmove+0x2a>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b296:	e7f7      	b.n	800b288 <memmove+0x24>

0800b298 <strncmp>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	b16a      	cbz	r2, 800b2b8 <strncmp+0x20>
 800b29c:	3901      	subs	r1, #1
 800b29e:	1884      	adds	r4, r0, r2
 800b2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d103      	bne.n	800b2b4 <strncmp+0x1c>
 800b2ac:	42a0      	cmp	r0, r4
 800b2ae:	d001      	beq.n	800b2b4 <strncmp+0x1c>
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	d1f5      	bne.n	800b2a0 <strncmp+0x8>
 800b2b4:	1ad0      	subs	r0, r2, r3
 800b2b6:	bd10      	pop	{r4, pc}
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	e7fc      	b.n	800b2b6 <strncmp+0x1e>

0800b2bc <_sbrk_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4d05      	ldr	r5, [pc, #20]	@ (800b2d8 <_sbrk_r+0x1c>)
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f6 ff66 	bl	8002198 <_sbrk>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_sbrk_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_sbrk_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20001e0c 	.word	0x20001e0c

0800b2dc <nan>:
 800b2dc:	2000      	movs	r0, #0
 800b2de:	4901      	ldr	r1, [pc, #4]	@ (800b2e4 <nan+0x8>)
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	7ff80000 	.word	0x7ff80000

0800b2e8 <__assert_func>:
 800b2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4b09      	ldr	r3, [pc, #36]	@ (800b314 <__assert_func+0x2c>)
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68d8      	ldr	r0, [r3, #12]
 800b2f6:	b954      	cbnz	r4, 800b30e <__assert_func+0x26>
 800b2f8:	4b07      	ldr	r3, [pc, #28]	@ (800b318 <__assert_func+0x30>)
 800b2fa:	461c      	mov	r4, r3
 800b2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b300:	9100      	str	r1, [sp, #0]
 800b302:	462b      	mov	r3, r5
 800b304:	4905      	ldr	r1, [pc, #20]	@ (800b31c <__assert_func+0x34>)
 800b306:	f000 fba7 	bl	800ba58 <fiprintf>
 800b30a:	f000 fbb7 	bl	800ba7c <abort>
 800b30e:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <__assert_func+0x38>)
 800b310:	e7f4      	b.n	800b2fc <__assert_func+0x14>
 800b312:	bf00      	nop
 800b314:	20000020 	.word	0x20000020
 800b318:	0800c4b5 	.word	0x0800c4b5
 800b31c:	0800c487 	.word	0x0800c487
 800b320:	0800c47a 	.word	0x0800c47a

0800b324 <_calloc_r>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	fba1 5402 	umull	r5, r4, r1, r2
 800b32a:	b93c      	cbnz	r4, 800b33c <_calloc_r+0x18>
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7fe f9e9 	bl	8009704 <_malloc_r>
 800b332:	4606      	mov	r6, r0
 800b334:	b928      	cbnz	r0, 800b342 <_calloc_r+0x1e>
 800b336:	2600      	movs	r6, #0
 800b338:	4630      	mov	r0, r6
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	220c      	movs	r2, #12
 800b33e:	6002      	str	r2, [r0, #0]
 800b340:	e7f9      	b.n	800b336 <_calloc_r+0x12>
 800b342:	462a      	mov	r2, r5
 800b344:	4621      	mov	r1, r4
 800b346:	f7fd fa7a 	bl	800883e <memset>
 800b34a:	e7f5      	b.n	800b338 <_calloc_r+0x14>

0800b34c <rshift>:
 800b34c:	6903      	ldr	r3, [r0, #16]
 800b34e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b352:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b356:	f100 0414 	add.w	r4, r0, #20
 800b35a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b35e:	dd46      	ble.n	800b3ee <rshift+0xa2>
 800b360:	f011 011f 	ands.w	r1, r1, #31
 800b364:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b368:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b36c:	d10c      	bne.n	800b388 <rshift+0x3c>
 800b36e:	4629      	mov	r1, r5
 800b370:	f100 0710 	add.w	r7, r0, #16
 800b374:	42b1      	cmp	r1, r6
 800b376:	d335      	bcc.n	800b3e4 <rshift+0x98>
 800b378:	1a9b      	subs	r3, r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	1eea      	subs	r2, r5, #3
 800b37e:	4296      	cmp	r6, r2
 800b380:	bf38      	it	cc
 800b382:	2300      	movcc	r3, #0
 800b384:	4423      	add	r3, r4
 800b386:	e015      	b.n	800b3b4 <rshift+0x68>
 800b388:	46a1      	mov	r9, r4
 800b38a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b38e:	f1c1 0820 	rsb	r8, r1, #32
 800b392:	40cf      	lsrs	r7, r1
 800b394:	f105 0e04 	add.w	lr, r5, #4
 800b398:	4576      	cmp	r6, lr
 800b39a:	46f4      	mov	ip, lr
 800b39c:	d816      	bhi.n	800b3cc <rshift+0x80>
 800b39e:	1a9a      	subs	r2, r3, r2
 800b3a0:	0092      	lsls	r2, r2, #2
 800b3a2:	3a04      	subs	r2, #4
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	42ae      	cmp	r6, r5
 800b3a8:	bf38      	it	cc
 800b3aa:	2200      	movcc	r2, #0
 800b3ac:	18a3      	adds	r3, r4, r2
 800b3ae:	50a7      	str	r7, [r4, r2]
 800b3b0:	b107      	cbz	r7, 800b3b4 <rshift+0x68>
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	42a3      	cmp	r3, r4
 800b3b6:	eba3 0204 	sub.w	r2, r3, r4
 800b3ba:	bf08      	it	eq
 800b3bc:	2300      	moveq	r3, #0
 800b3be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3c2:	6102      	str	r2, [r0, #16]
 800b3c4:	bf08      	it	eq
 800b3c6:	6143      	streq	r3, [r0, #20]
 800b3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3cc:	f8dc c000 	ldr.w	ip, [ip]
 800b3d0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3d4:	ea4c 0707 	orr.w	r7, ip, r7
 800b3d8:	f849 7b04 	str.w	r7, [r9], #4
 800b3dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3e0:	40cf      	lsrs	r7, r1
 800b3e2:	e7d9      	b.n	800b398 <rshift+0x4c>
 800b3e4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3e8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3ec:	e7c2      	b.n	800b374 <rshift+0x28>
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	e7e0      	b.n	800b3b4 <rshift+0x68>

0800b3f2 <__hexdig_fun>:
 800b3f2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3f6:	2b09      	cmp	r3, #9
 800b3f8:	d802      	bhi.n	800b400 <__hexdig_fun+0xe>
 800b3fa:	3820      	subs	r0, #32
 800b3fc:	b2c0      	uxtb	r0, r0
 800b3fe:	4770      	bx	lr
 800b400:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b404:	2b05      	cmp	r3, #5
 800b406:	d801      	bhi.n	800b40c <__hexdig_fun+0x1a>
 800b408:	3847      	subs	r0, #71	@ 0x47
 800b40a:	e7f7      	b.n	800b3fc <__hexdig_fun+0xa>
 800b40c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b410:	2b05      	cmp	r3, #5
 800b412:	d801      	bhi.n	800b418 <__hexdig_fun+0x26>
 800b414:	3827      	subs	r0, #39	@ 0x27
 800b416:	e7f1      	b.n	800b3fc <__hexdig_fun+0xa>
 800b418:	2000      	movs	r0, #0
 800b41a:	4770      	bx	lr

0800b41c <__gethex>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	468a      	mov	sl, r1
 800b422:	4690      	mov	r8, r2
 800b424:	b085      	sub	sp, #20
 800b426:	9302      	str	r3, [sp, #8]
 800b428:	680b      	ldr	r3, [r1, #0]
 800b42a:	9001      	str	r0, [sp, #4]
 800b42c:	1c9c      	adds	r4, r3, #2
 800b42e:	46a1      	mov	r9, r4
 800b430:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b434:	2830      	cmp	r0, #48	@ 0x30
 800b436:	d0fa      	beq.n	800b42e <__gethex+0x12>
 800b438:	eba9 0303 	sub.w	r3, r9, r3
 800b43c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b440:	f7ff ffd7 	bl	800b3f2 <__hexdig_fun>
 800b444:	4605      	mov	r5, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	d168      	bne.n	800b51c <__gethex+0x100>
 800b44a:	2201      	movs	r2, #1
 800b44c:	4648      	mov	r0, r9
 800b44e:	499f      	ldr	r1, [pc, #636]	@ (800b6cc <__gethex+0x2b0>)
 800b450:	f7ff ff22 	bl	800b298 <strncmp>
 800b454:	4607      	mov	r7, r0
 800b456:	2800      	cmp	r0, #0
 800b458:	d167      	bne.n	800b52a <__gethex+0x10e>
 800b45a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b45e:	4626      	mov	r6, r4
 800b460:	f7ff ffc7 	bl	800b3f2 <__hexdig_fun>
 800b464:	2800      	cmp	r0, #0
 800b466:	d062      	beq.n	800b52e <__gethex+0x112>
 800b468:	4623      	mov	r3, r4
 800b46a:	7818      	ldrb	r0, [r3, #0]
 800b46c:	4699      	mov	r9, r3
 800b46e:	2830      	cmp	r0, #48	@ 0x30
 800b470:	f103 0301 	add.w	r3, r3, #1
 800b474:	d0f9      	beq.n	800b46a <__gethex+0x4e>
 800b476:	f7ff ffbc 	bl	800b3f2 <__hexdig_fun>
 800b47a:	fab0 f580 	clz	r5, r0
 800b47e:	f04f 0b01 	mov.w	fp, #1
 800b482:	096d      	lsrs	r5, r5, #5
 800b484:	464a      	mov	r2, r9
 800b486:	4616      	mov	r6, r2
 800b488:	7830      	ldrb	r0, [r6, #0]
 800b48a:	3201      	adds	r2, #1
 800b48c:	f7ff ffb1 	bl	800b3f2 <__hexdig_fun>
 800b490:	2800      	cmp	r0, #0
 800b492:	d1f8      	bne.n	800b486 <__gethex+0x6a>
 800b494:	2201      	movs	r2, #1
 800b496:	4630      	mov	r0, r6
 800b498:	498c      	ldr	r1, [pc, #560]	@ (800b6cc <__gethex+0x2b0>)
 800b49a:	f7ff fefd 	bl	800b298 <strncmp>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d13f      	bne.n	800b522 <__gethex+0x106>
 800b4a2:	b944      	cbnz	r4, 800b4b6 <__gethex+0x9a>
 800b4a4:	1c74      	adds	r4, r6, #1
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4616      	mov	r6, r2
 800b4aa:	7830      	ldrb	r0, [r6, #0]
 800b4ac:	3201      	adds	r2, #1
 800b4ae:	f7ff ffa0 	bl	800b3f2 <__hexdig_fun>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d1f8      	bne.n	800b4a8 <__gethex+0x8c>
 800b4b6:	1ba4      	subs	r4, r4, r6
 800b4b8:	00a7      	lsls	r7, r4, #2
 800b4ba:	7833      	ldrb	r3, [r6, #0]
 800b4bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4c0:	2b50      	cmp	r3, #80	@ 0x50
 800b4c2:	d13e      	bne.n	800b542 <__gethex+0x126>
 800b4c4:	7873      	ldrb	r3, [r6, #1]
 800b4c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4c8:	d033      	beq.n	800b532 <__gethex+0x116>
 800b4ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4cc:	d034      	beq.n	800b538 <__gethex+0x11c>
 800b4ce:	2400      	movs	r4, #0
 800b4d0:	1c71      	adds	r1, r6, #1
 800b4d2:	7808      	ldrb	r0, [r1, #0]
 800b4d4:	f7ff ff8d 	bl	800b3f2 <__hexdig_fun>
 800b4d8:	1e43      	subs	r3, r0, #1
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b18      	cmp	r3, #24
 800b4de:	d830      	bhi.n	800b542 <__gethex+0x126>
 800b4e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b4e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4e8:	f7ff ff83 	bl	800b3f2 <__hexdig_fun>
 800b4ec:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b4f0:	fa5f fc8c 	uxtb.w	ip, ip
 800b4f4:	f1bc 0f18 	cmp.w	ip, #24
 800b4f8:	f04f 030a 	mov.w	r3, #10
 800b4fc:	d91e      	bls.n	800b53c <__gethex+0x120>
 800b4fe:	b104      	cbz	r4, 800b502 <__gethex+0xe6>
 800b500:	4252      	negs	r2, r2
 800b502:	4417      	add	r7, r2
 800b504:	f8ca 1000 	str.w	r1, [sl]
 800b508:	b1ed      	cbz	r5, 800b546 <__gethex+0x12a>
 800b50a:	f1bb 0f00 	cmp.w	fp, #0
 800b50e:	bf0c      	ite	eq
 800b510:	2506      	moveq	r5, #6
 800b512:	2500      	movne	r5, #0
 800b514:	4628      	mov	r0, r5
 800b516:	b005      	add	sp, #20
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	2500      	movs	r5, #0
 800b51e:	462c      	mov	r4, r5
 800b520:	e7b0      	b.n	800b484 <__gethex+0x68>
 800b522:	2c00      	cmp	r4, #0
 800b524:	d1c7      	bne.n	800b4b6 <__gethex+0x9a>
 800b526:	4627      	mov	r7, r4
 800b528:	e7c7      	b.n	800b4ba <__gethex+0x9e>
 800b52a:	464e      	mov	r6, r9
 800b52c:	462f      	mov	r7, r5
 800b52e:	2501      	movs	r5, #1
 800b530:	e7c3      	b.n	800b4ba <__gethex+0x9e>
 800b532:	2400      	movs	r4, #0
 800b534:	1cb1      	adds	r1, r6, #2
 800b536:	e7cc      	b.n	800b4d2 <__gethex+0xb6>
 800b538:	2401      	movs	r4, #1
 800b53a:	e7fb      	b.n	800b534 <__gethex+0x118>
 800b53c:	fb03 0002 	mla	r0, r3, r2, r0
 800b540:	e7ce      	b.n	800b4e0 <__gethex+0xc4>
 800b542:	4631      	mov	r1, r6
 800b544:	e7de      	b.n	800b504 <__gethex+0xe8>
 800b546:	4629      	mov	r1, r5
 800b548:	eba6 0309 	sub.w	r3, r6, r9
 800b54c:	3b01      	subs	r3, #1
 800b54e:	2b07      	cmp	r3, #7
 800b550:	dc0a      	bgt.n	800b568 <__gethex+0x14c>
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	f7fe f962 	bl	800981c <_Balloc>
 800b558:	4604      	mov	r4, r0
 800b55a:	b940      	cbnz	r0, 800b56e <__gethex+0x152>
 800b55c:	4602      	mov	r2, r0
 800b55e:	21e4      	movs	r1, #228	@ 0xe4
 800b560:	4b5b      	ldr	r3, [pc, #364]	@ (800b6d0 <__gethex+0x2b4>)
 800b562:	485c      	ldr	r0, [pc, #368]	@ (800b6d4 <__gethex+0x2b8>)
 800b564:	f7ff fec0 	bl	800b2e8 <__assert_func>
 800b568:	3101      	adds	r1, #1
 800b56a:	105b      	asrs	r3, r3, #1
 800b56c:	e7ef      	b.n	800b54e <__gethex+0x132>
 800b56e:	2300      	movs	r3, #0
 800b570:	f100 0a14 	add.w	sl, r0, #20
 800b574:	4655      	mov	r5, sl
 800b576:	469b      	mov	fp, r3
 800b578:	45b1      	cmp	r9, r6
 800b57a:	d337      	bcc.n	800b5ec <__gethex+0x1d0>
 800b57c:	f845 bb04 	str.w	fp, [r5], #4
 800b580:	eba5 050a 	sub.w	r5, r5, sl
 800b584:	10ad      	asrs	r5, r5, #2
 800b586:	6125      	str	r5, [r4, #16]
 800b588:	4658      	mov	r0, fp
 800b58a:	f7fe fa39 	bl	8009a00 <__hi0bits>
 800b58e:	016d      	lsls	r5, r5, #5
 800b590:	f8d8 6000 	ldr.w	r6, [r8]
 800b594:	1a2d      	subs	r5, r5, r0
 800b596:	42b5      	cmp	r5, r6
 800b598:	dd54      	ble.n	800b644 <__gethex+0x228>
 800b59a:	1bad      	subs	r5, r5, r6
 800b59c:	4629      	mov	r1, r5
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f7fe fdc1 	bl	800a126 <__any_on>
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	b178      	cbz	r0, 800b5c8 <__gethex+0x1ac>
 800b5a8:	f04f 0901 	mov.w	r9, #1
 800b5ac:	1e6b      	subs	r3, r5, #1
 800b5ae:	1159      	asrs	r1, r3, #5
 800b5b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5b4:	f003 021f 	and.w	r2, r3, #31
 800b5b8:	fa09 f202 	lsl.w	r2, r9, r2
 800b5bc:	420a      	tst	r2, r1
 800b5be:	d003      	beq.n	800b5c8 <__gethex+0x1ac>
 800b5c0:	454b      	cmp	r3, r9
 800b5c2:	dc36      	bgt.n	800b632 <__gethex+0x216>
 800b5c4:	f04f 0902 	mov.w	r9, #2
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff febe 	bl	800b34c <rshift>
 800b5d0:	442f      	add	r7, r5
 800b5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5d6:	42bb      	cmp	r3, r7
 800b5d8:	da42      	bge.n	800b660 <__gethex+0x244>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	9801      	ldr	r0, [sp, #4]
 800b5de:	f7fe f95d 	bl	800989c <_Bfree>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5e6:	25a3      	movs	r5, #163	@ 0xa3
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	e793      	b.n	800b514 <__gethex+0xf8>
 800b5ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5f2:	d012      	beq.n	800b61a <__gethex+0x1fe>
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d104      	bne.n	800b602 <__gethex+0x1e6>
 800b5f8:	f845 bb04 	str.w	fp, [r5], #4
 800b5fc:	f04f 0b00 	mov.w	fp, #0
 800b600:	465b      	mov	r3, fp
 800b602:	7830      	ldrb	r0, [r6, #0]
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	f7ff fef4 	bl	800b3f2 <__hexdig_fun>
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	f000 000f 	and.w	r0, r0, #15
 800b610:	4098      	lsls	r0, r3
 800b612:	ea4b 0b00 	orr.w	fp, fp, r0
 800b616:	3304      	adds	r3, #4
 800b618:	e7ae      	b.n	800b578 <__gethex+0x15c>
 800b61a:	45b1      	cmp	r9, r6
 800b61c:	d8ea      	bhi.n	800b5f4 <__gethex+0x1d8>
 800b61e:	2201      	movs	r2, #1
 800b620:	4630      	mov	r0, r6
 800b622:	492a      	ldr	r1, [pc, #168]	@ (800b6cc <__gethex+0x2b0>)
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	f7ff fe37 	bl	800b298 <strncmp>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1e1      	bne.n	800b5f4 <__gethex+0x1d8>
 800b630:	e7a2      	b.n	800b578 <__gethex+0x15c>
 800b632:	4620      	mov	r0, r4
 800b634:	1ea9      	subs	r1, r5, #2
 800b636:	f7fe fd76 	bl	800a126 <__any_on>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d0c2      	beq.n	800b5c4 <__gethex+0x1a8>
 800b63e:	f04f 0903 	mov.w	r9, #3
 800b642:	e7c1      	b.n	800b5c8 <__gethex+0x1ac>
 800b644:	da09      	bge.n	800b65a <__gethex+0x23e>
 800b646:	1b75      	subs	r5, r6, r5
 800b648:	4621      	mov	r1, r4
 800b64a:	462a      	mov	r2, r5
 800b64c:	9801      	ldr	r0, [sp, #4]
 800b64e:	f7fe fb3b 	bl	8009cc8 <__lshift>
 800b652:	4604      	mov	r4, r0
 800b654:	1b7f      	subs	r7, r7, r5
 800b656:	f100 0a14 	add.w	sl, r0, #20
 800b65a:	f04f 0900 	mov.w	r9, #0
 800b65e:	e7b8      	b.n	800b5d2 <__gethex+0x1b6>
 800b660:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b664:	42bd      	cmp	r5, r7
 800b666:	dd6f      	ble.n	800b748 <__gethex+0x32c>
 800b668:	1bed      	subs	r5, r5, r7
 800b66a:	42ae      	cmp	r6, r5
 800b66c:	dc34      	bgt.n	800b6d8 <__gethex+0x2bc>
 800b66e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b672:	2b02      	cmp	r3, #2
 800b674:	d022      	beq.n	800b6bc <__gethex+0x2a0>
 800b676:	2b03      	cmp	r3, #3
 800b678:	d024      	beq.n	800b6c4 <__gethex+0x2a8>
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d115      	bne.n	800b6aa <__gethex+0x28e>
 800b67e:	42ae      	cmp	r6, r5
 800b680:	d113      	bne.n	800b6aa <__gethex+0x28e>
 800b682:	2e01      	cmp	r6, #1
 800b684:	d10b      	bne.n	800b69e <__gethex+0x282>
 800b686:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b68a:	9a02      	ldr	r2, [sp, #8]
 800b68c:	2562      	movs	r5, #98	@ 0x62
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	2301      	movs	r3, #1
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f8ca 3000 	str.w	r3, [sl]
 800b698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b69a:	601c      	str	r4, [r3, #0]
 800b69c:	e73a      	b.n	800b514 <__gethex+0xf8>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	1e71      	subs	r1, r6, #1
 800b6a2:	f7fe fd40 	bl	800a126 <__any_on>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1ed      	bne.n	800b686 <__gethex+0x26a>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	9801      	ldr	r0, [sp, #4]
 800b6ae:	f7fe f8f5 	bl	800989c <_Bfree>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6b6:	2550      	movs	r5, #80	@ 0x50
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e72b      	b.n	800b514 <__gethex+0xf8>
 800b6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1f3      	bne.n	800b6aa <__gethex+0x28e>
 800b6c2:	e7e0      	b.n	800b686 <__gethex+0x26a>
 800b6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1dd      	bne.n	800b686 <__gethex+0x26a>
 800b6ca:	e7ee      	b.n	800b6aa <__gethex+0x28e>
 800b6cc:	0800c308 	.word	0x0800c308
 800b6d0:	0800c19f 	.word	0x0800c19f
 800b6d4:	0800c4b6 	.word	0x0800c4b6
 800b6d8:	1e6f      	subs	r7, r5, #1
 800b6da:	f1b9 0f00 	cmp.w	r9, #0
 800b6de:	d130      	bne.n	800b742 <__gethex+0x326>
 800b6e0:	b127      	cbz	r7, 800b6ec <__gethex+0x2d0>
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7fe fd1e 	bl	800a126 <__any_on>
 800b6ea:	4681      	mov	r9, r0
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	1b76      	subs	r6, r6, r5
 800b6f2:	2502      	movs	r5, #2
 800b6f4:	117a      	asrs	r2, r7, #5
 800b6f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6fa:	f007 071f 	and.w	r7, r7, #31
 800b6fe:	40bb      	lsls	r3, r7
 800b700:	4213      	tst	r3, r2
 800b702:	4620      	mov	r0, r4
 800b704:	bf18      	it	ne
 800b706:	f049 0902 	orrne.w	r9, r9, #2
 800b70a:	f7ff fe1f 	bl	800b34c <rshift>
 800b70e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d047      	beq.n	800b7a8 <__gethex+0x38c>
 800b718:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d015      	beq.n	800b74c <__gethex+0x330>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d017      	beq.n	800b754 <__gethex+0x338>
 800b724:	2b01      	cmp	r3, #1
 800b726:	d109      	bne.n	800b73c <__gethex+0x320>
 800b728:	f019 0f02 	tst.w	r9, #2
 800b72c:	d006      	beq.n	800b73c <__gethex+0x320>
 800b72e:	f8da 3000 	ldr.w	r3, [sl]
 800b732:	ea49 0903 	orr.w	r9, r9, r3
 800b736:	f019 0f01 	tst.w	r9, #1
 800b73a:	d10e      	bne.n	800b75a <__gethex+0x33e>
 800b73c:	f045 0510 	orr.w	r5, r5, #16
 800b740:	e032      	b.n	800b7a8 <__gethex+0x38c>
 800b742:	f04f 0901 	mov.w	r9, #1
 800b746:	e7d1      	b.n	800b6ec <__gethex+0x2d0>
 800b748:	2501      	movs	r5, #1
 800b74a:	e7e2      	b.n	800b712 <__gethex+0x2f6>
 800b74c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74e:	f1c3 0301 	rsb	r3, r3, #1
 800b752:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d0f0      	beq.n	800b73c <__gethex+0x320>
 800b75a:	f04f 0c00 	mov.w	ip, #0
 800b75e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b762:	f104 0314 	add.w	r3, r4, #20
 800b766:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b76a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b76e:	4618      	mov	r0, r3
 800b770:	f853 2b04 	ldr.w	r2, [r3], #4
 800b774:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b778:	d01b      	beq.n	800b7b2 <__gethex+0x396>
 800b77a:	3201      	adds	r2, #1
 800b77c:	6002      	str	r2, [r0, #0]
 800b77e:	2d02      	cmp	r5, #2
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	d13c      	bne.n	800b800 <__gethex+0x3e4>
 800b786:	f8d8 2000 	ldr.w	r2, [r8]
 800b78a:	3a01      	subs	r2, #1
 800b78c:	42b2      	cmp	r2, r6
 800b78e:	d109      	bne.n	800b7a4 <__gethex+0x388>
 800b790:	2201      	movs	r2, #1
 800b792:	1171      	asrs	r1, r6, #5
 800b794:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b798:	f006 061f 	and.w	r6, r6, #31
 800b79c:	fa02 f606 	lsl.w	r6, r2, r6
 800b7a0:	421e      	tst	r6, r3
 800b7a2:	d13a      	bne.n	800b81a <__gethex+0x3fe>
 800b7a4:	f045 0520 	orr.w	r5, r5, #32
 800b7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7aa:	601c      	str	r4, [r3, #0]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	601f      	str	r7, [r3, #0]
 800b7b0:	e6b0      	b.n	800b514 <__gethex+0xf8>
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7b8:	d8d9      	bhi.n	800b76e <__gethex+0x352>
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	459b      	cmp	fp, r3
 800b7be:	db17      	blt.n	800b7f0 <__gethex+0x3d4>
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	9801      	ldr	r0, [sp, #4]
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	f7fe f829 	bl	800981c <_Balloc>
 800b7ca:	4681      	mov	r9, r0
 800b7cc:	b918      	cbnz	r0, 800b7d6 <__gethex+0x3ba>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	2184      	movs	r1, #132	@ 0x84
 800b7d2:	4b19      	ldr	r3, [pc, #100]	@ (800b838 <__gethex+0x41c>)
 800b7d4:	e6c5      	b.n	800b562 <__gethex+0x146>
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	f104 010c 	add.w	r1, r4, #12
 800b7dc:	3202      	adds	r2, #2
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	f7fd f8ba 	bl	800895a <memcpy>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	9801      	ldr	r0, [sp, #4]
 800b7ea:	f7fe f857 	bl	800989c <_Bfree>
 800b7ee:	464c      	mov	r4, r9
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	6122      	str	r2, [r4, #16]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7fc:	615a      	str	r2, [r3, #20]
 800b7fe:	e7be      	b.n	800b77e <__gethex+0x362>
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	455a      	cmp	r2, fp
 800b804:	dd0b      	ble.n	800b81e <__gethex+0x402>
 800b806:	2101      	movs	r1, #1
 800b808:	4620      	mov	r0, r4
 800b80a:	f7ff fd9f 	bl	800b34c <rshift>
 800b80e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b812:	3701      	adds	r7, #1
 800b814:	42bb      	cmp	r3, r7
 800b816:	f6ff aee0 	blt.w	800b5da <__gethex+0x1be>
 800b81a:	2501      	movs	r5, #1
 800b81c:	e7c2      	b.n	800b7a4 <__gethex+0x388>
 800b81e:	f016 061f 	ands.w	r6, r6, #31
 800b822:	d0fa      	beq.n	800b81a <__gethex+0x3fe>
 800b824:	4453      	add	r3, sl
 800b826:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b82a:	f7fe f8e9 	bl	8009a00 <__hi0bits>
 800b82e:	f1c6 0620 	rsb	r6, r6, #32
 800b832:	42b0      	cmp	r0, r6
 800b834:	dbe7      	blt.n	800b806 <__gethex+0x3ea>
 800b836:	e7f0      	b.n	800b81a <__gethex+0x3fe>
 800b838:	0800c19f 	.word	0x0800c19f

0800b83c <L_shift>:
 800b83c:	f1c2 0208 	rsb	r2, r2, #8
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	b570      	push	{r4, r5, r6, lr}
 800b844:	f1c2 0620 	rsb	r6, r2, #32
 800b848:	6843      	ldr	r3, [r0, #4]
 800b84a:	6804      	ldr	r4, [r0, #0]
 800b84c:	fa03 f506 	lsl.w	r5, r3, r6
 800b850:	432c      	orrs	r4, r5
 800b852:	40d3      	lsrs	r3, r2
 800b854:	6004      	str	r4, [r0, #0]
 800b856:	f840 3f04 	str.w	r3, [r0, #4]!
 800b85a:	4288      	cmp	r0, r1
 800b85c:	d3f4      	bcc.n	800b848 <L_shift+0xc>
 800b85e:	bd70      	pop	{r4, r5, r6, pc}

0800b860 <__match>:
 800b860:	b530      	push	{r4, r5, lr}
 800b862:	6803      	ldr	r3, [r0, #0]
 800b864:	3301      	adds	r3, #1
 800b866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86a:	b914      	cbnz	r4, 800b872 <__match+0x12>
 800b86c:	6003      	str	r3, [r0, #0]
 800b86e:	2001      	movs	r0, #1
 800b870:	bd30      	pop	{r4, r5, pc}
 800b872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b876:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b87a:	2d19      	cmp	r5, #25
 800b87c:	bf98      	it	ls
 800b87e:	3220      	addls	r2, #32
 800b880:	42a2      	cmp	r2, r4
 800b882:	d0f0      	beq.n	800b866 <__match+0x6>
 800b884:	2000      	movs	r0, #0
 800b886:	e7f3      	b.n	800b870 <__match+0x10>

0800b888 <__hexnan>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	2500      	movs	r5, #0
 800b88e:	680b      	ldr	r3, [r1, #0]
 800b890:	4682      	mov	sl, r0
 800b892:	115e      	asrs	r6, r3, #5
 800b894:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b898:	f013 031f 	ands.w	r3, r3, #31
 800b89c:	bf18      	it	ne
 800b89e:	3604      	addne	r6, #4
 800b8a0:	1f37      	subs	r7, r6, #4
 800b8a2:	4690      	mov	r8, r2
 800b8a4:	46b9      	mov	r9, r7
 800b8a6:	463c      	mov	r4, r7
 800b8a8:	46ab      	mov	fp, r5
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	6801      	ldr	r1, [r0, #0]
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8b4:	9502      	str	r5, [sp, #8]
 800b8b6:	784a      	ldrb	r2, [r1, #1]
 800b8b8:	1c4b      	adds	r3, r1, #1
 800b8ba:	9303      	str	r3, [sp, #12]
 800b8bc:	b342      	cbz	r2, 800b910 <__hexnan+0x88>
 800b8be:	4610      	mov	r0, r2
 800b8c0:	9105      	str	r1, [sp, #20]
 800b8c2:	9204      	str	r2, [sp, #16]
 800b8c4:	f7ff fd95 	bl	800b3f2 <__hexdig_fun>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d151      	bne.n	800b970 <__hexnan+0xe8>
 800b8cc:	9a04      	ldr	r2, [sp, #16]
 800b8ce:	9905      	ldr	r1, [sp, #20]
 800b8d0:	2a20      	cmp	r2, #32
 800b8d2:	d818      	bhi.n	800b906 <__hexnan+0x7e>
 800b8d4:	9b02      	ldr	r3, [sp, #8]
 800b8d6:	459b      	cmp	fp, r3
 800b8d8:	dd13      	ble.n	800b902 <__hexnan+0x7a>
 800b8da:	454c      	cmp	r4, r9
 800b8dc:	d206      	bcs.n	800b8ec <__hexnan+0x64>
 800b8de:	2d07      	cmp	r5, #7
 800b8e0:	dc04      	bgt.n	800b8ec <__hexnan+0x64>
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff ffa8 	bl	800b83c <L_shift>
 800b8ec:	4544      	cmp	r4, r8
 800b8ee:	d952      	bls.n	800b996 <__hexnan+0x10e>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b8f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8fa:	461d      	mov	r5, r3
 800b8fc:	464c      	mov	r4, r9
 800b8fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b902:	9903      	ldr	r1, [sp, #12]
 800b904:	e7d7      	b.n	800b8b6 <__hexnan+0x2e>
 800b906:	2a29      	cmp	r2, #41	@ 0x29
 800b908:	d157      	bne.n	800b9ba <__hexnan+0x132>
 800b90a:	3102      	adds	r1, #2
 800b90c:	f8ca 1000 	str.w	r1, [sl]
 800b910:	f1bb 0f00 	cmp.w	fp, #0
 800b914:	d051      	beq.n	800b9ba <__hexnan+0x132>
 800b916:	454c      	cmp	r4, r9
 800b918:	d206      	bcs.n	800b928 <__hexnan+0xa0>
 800b91a:	2d07      	cmp	r5, #7
 800b91c:	dc04      	bgt.n	800b928 <__hexnan+0xa0>
 800b91e:	462a      	mov	r2, r5
 800b920:	4649      	mov	r1, r9
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff ff8a 	bl	800b83c <L_shift>
 800b928:	4544      	cmp	r4, r8
 800b92a:	d936      	bls.n	800b99a <__hexnan+0x112>
 800b92c:	4623      	mov	r3, r4
 800b92e:	f1a8 0204 	sub.w	r2, r8, #4
 800b932:	f853 1b04 	ldr.w	r1, [r3], #4
 800b936:	429f      	cmp	r7, r3
 800b938:	f842 1f04 	str.w	r1, [r2, #4]!
 800b93c:	d2f9      	bcs.n	800b932 <__hexnan+0xaa>
 800b93e:	1b3b      	subs	r3, r7, r4
 800b940:	f023 0303 	bic.w	r3, r3, #3
 800b944:	3304      	adds	r3, #4
 800b946:	3401      	adds	r4, #1
 800b948:	3e03      	subs	r6, #3
 800b94a:	42b4      	cmp	r4, r6
 800b94c:	bf88      	it	hi
 800b94e:	2304      	movhi	r3, #4
 800b950:	2200      	movs	r2, #0
 800b952:	4443      	add	r3, r8
 800b954:	f843 2b04 	str.w	r2, [r3], #4
 800b958:	429f      	cmp	r7, r3
 800b95a:	d2fb      	bcs.n	800b954 <__hexnan+0xcc>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	b91b      	cbnz	r3, 800b968 <__hexnan+0xe0>
 800b960:	4547      	cmp	r7, r8
 800b962:	d128      	bne.n	800b9b6 <__hexnan+0x12e>
 800b964:	2301      	movs	r3, #1
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	2005      	movs	r0, #5
 800b96a:	b007      	add	sp, #28
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	3501      	adds	r5, #1
 800b972:	2d08      	cmp	r5, #8
 800b974:	f10b 0b01 	add.w	fp, fp, #1
 800b978:	dd06      	ble.n	800b988 <__hexnan+0x100>
 800b97a:	4544      	cmp	r4, r8
 800b97c:	d9c1      	bls.n	800b902 <__hexnan+0x7a>
 800b97e:	2300      	movs	r3, #0
 800b980:	2501      	movs	r5, #1
 800b982:	f844 3c04 	str.w	r3, [r4, #-4]
 800b986:	3c04      	subs	r4, #4
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	f000 000f 	and.w	r0, r0, #15
 800b98e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b992:	6020      	str	r0, [r4, #0]
 800b994:	e7b5      	b.n	800b902 <__hexnan+0x7a>
 800b996:	2508      	movs	r5, #8
 800b998:	e7b3      	b.n	800b902 <__hexnan+0x7a>
 800b99a:	9b01      	ldr	r3, [sp, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0dd      	beq.n	800b95c <__hexnan+0xd4>
 800b9a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9a4:	f1c3 0320 	rsb	r3, r3, #32
 800b9a8:	40da      	lsrs	r2, r3
 800b9aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9b4:	e7d2      	b.n	800b95c <__hexnan+0xd4>
 800b9b6:	3f04      	subs	r7, #4
 800b9b8:	e7d0      	b.n	800b95c <__hexnan+0xd4>
 800b9ba:	2004      	movs	r0, #4
 800b9bc:	e7d5      	b.n	800b96a <__hexnan+0xe2>

0800b9be <__ascii_mbtowc>:
 800b9be:	b082      	sub	sp, #8
 800b9c0:	b901      	cbnz	r1, 800b9c4 <__ascii_mbtowc+0x6>
 800b9c2:	a901      	add	r1, sp, #4
 800b9c4:	b142      	cbz	r2, 800b9d8 <__ascii_mbtowc+0x1a>
 800b9c6:	b14b      	cbz	r3, 800b9dc <__ascii_mbtowc+0x1e>
 800b9c8:	7813      	ldrb	r3, [r2, #0]
 800b9ca:	600b      	str	r3, [r1, #0]
 800b9cc:	7812      	ldrb	r2, [r2, #0]
 800b9ce:	1e10      	subs	r0, r2, #0
 800b9d0:	bf18      	it	ne
 800b9d2:	2001      	movne	r0, #1
 800b9d4:	b002      	add	sp, #8
 800b9d6:	4770      	bx	lr
 800b9d8:	4610      	mov	r0, r2
 800b9da:	e7fb      	b.n	800b9d4 <__ascii_mbtowc+0x16>
 800b9dc:	f06f 0001 	mvn.w	r0, #1
 800b9e0:	e7f8      	b.n	800b9d4 <__ascii_mbtowc+0x16>

0800b9e2 <_realloc_r>:
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4615      	mov	r5, r2
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b921      	cbnz	r1, 800b9f8 <_realloc_r+0x16>
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f4:	f7fd be86 	b.w	8009704 <_malloc_r>
 800b9f8:	b92a      	cbnz	r2, 800ba06 <_realloc_r+0x24>
 800b9fa:	f7fd fe11 	bl	8009620 <_free_r>
 800b9fe:	2400      	movs	r4, #0
 800ba00:	4620      	mov	r0, r4
 800ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba06:	f000 f840 	bl	800ba8a <_malloc_usable_size_r>
 800ba0a:	4285      	cmp	r5, r0
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	d802      	bhi.n	800ba16 <_realloc_r+0x34>
 800ba10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba14:	d8f4      	bhi.n	800ba00 <_realloc_r+0x1e>
 800ba16:	4629      	mov	r1, r5
 800ba18:	4640      	mov	r0, r8
 800ba1a:	f7fd fe73 	bl	8009704 <_malloc_r>
 800ba1e:	4607      	mov	r7, r0
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d0ec      	beq.n	800b9fe <_realloc_r+0x1c>
 800ba24:	42b5      	cmp	r5, r6
 800ba26:	462a      	mov	r2, r5
 800ba28:	4621      	mov	r1, r4
 800ba2a:	bf28      	it	cs
 800ba2c:	4632      	movcs	r2, r6
 800ba2e:	f7fc ff94 	bl	800895a <memcpy>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4640      	mov	r0, r8
 800ba36:	f7fd fdf3 	bl	8009620 <_free_r>
 800ba3a:	463c      	mov	r4, r7
 800ba3c:	e7e0      	b.n	800ba00 <_realloc_r+0x1e>

0800ba3e <__ascii_wctomb>:
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	b141      	cbz	r1, 800ba56 <__ascii_wctomb+0x18>
 800ba44:	2aff      	cmp	r2, #255	@ 0xff
 800ba46:	d904      	bls.n	800ba52 <__ascii_wctomb+0x14>
 800ba48:	228a      	movs	r2, #138	@ 0x8a
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	2001      	movs	r0, #1
 800ba54:	700a      	strb	r2, [r1, #0]
 800ba56:	4770      	bx	lr

0800ba58 <fiprintf>:
 800ba58:	b40e      	push	{r1, r2, r3}
 800ba5a:	b503      	push	{r0, r1, lr}
 800ba5c:	4601      	mov	r1, r0
 800ba5e:	ab03      	add	r3, sp, #12
 800ba60:	4805      	ldr	r0, [pc, #20]	@ (800ba78 <fiprintf+0x20>)
 800ba62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba66:	6800      	ldr	r0, [r0, #0]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	f000 f83d 	bl	800bae8 <_vfiprintf_r>
 800ba6e:	b002      	add	sp, #8
 800ba70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba74:	b003      	add	sp, #12
 800ba76:	4770      	bx	lr
 800ba78:	20000020 	.word	0x20000020

0800ba7c <abort>:
 800ba7c:	2006      	movs	r0, #6
 800ba7e:	b508      	push	{r3, lr}
 800ba80:	f000 fa06 	bl	800be90 <raise>
 800ba84:	2001      	movs	r0, #1
 800ba86:	f7f6 fb12 	bl	80020ae <_exit>

0800ba8a <_malloc_usable_size_r>:
 800ba8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba8e:	1f18      	subs	r0, r3, #4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfbc      	itt	lt
 800ba94:	580b      	ldrlt	r3, [r1, r0]
 800ba96:	18c0      	addlt	r0, r0, r3
 800ba98:	4770      	bx	lr

0800ba9a <__sfputc_r>:
 800ba9a:	6893      	ldr	r3, [r2, #8]
 800ba9c:	b410      	push	{r4}
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	6093      	str	r3, [r2, #8]
 800baa4:	da07      	bge.n	800bab6 <__sfputc_r+0x1c>
 800baa6:	6994      	ldr	r4, [r2, #24]
 800baa8:	42a3      	cmp	r3, r4
 800baaa:	db01      	blt.n	800bab0 <__sfputc_r+0x16>
 800baac:	290a      	cmp	r1, #10
 800baae:	d102      	bne.n	800bab6 <__sfputc_r+0x1c>
 800bab0:	bc10      	pop	{r4}
 800bab2:	f000 b931 	b.w	800bd18 <__swbuf_r>
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	1c58      	adds	r0, r3, #1
 800baba:	6010      	str	r0, [r2, #0]
 800babc:	7019      	strb	r1, [r3, #0]
 800babe:	4608      	mov	r0, r1
 800bac0:	bc10      	pop	{r4}
 800bac2:	4770      	bx	lr

0800bac4 <__sfputs_r>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	4606      	mov	r6, r0
 800bac8:	460f      	mov	r7, r1
 800baca:	4614      	mov	r4, r2
 800bacc:	18d5      	adds	r5, r2, r3
 800bace:	42ac      	cmp	r4, r5
 800bad0:	d101      	bne.n	800bad6 <__sfputs_r+0x12>
 800bad2:	2000      	movs	r0, #0
 800bad4:	e007      	b.n	800bae6 <__sfputs_r+0x22>
 800bad6:	463a      	mov	r2, r7
 800bad8:	4630      	mov	r0, r6
 800bada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bade:	f7ff ffdc 	bl	800ba9a <__sfputc_r>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	d1f3      	bne.n	800bace <__sfputs_r+0xa>
 800bae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bae8 <_vfiprintf_r>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	460d      	mov	r5, r1
 800baee:	4614      	mov	r4, r2
 800baf0:	4698      	mov	r8, r3
 800baf2:	4606      	mov	r6, r0
 800baf4:	b09d      	sub	sp, #116	@ 0x74
 800baf6:	b118      	cbz	r0, 800bb00 <_vfiprintf_r+0x18>
 800baf8:	6a03      	ldr	r3, [r0, #32]
 800bafa:	b90b      	cbnz	r3, 800bb00 <_vfiprintf_r+0x18>
 800bafc:	f7fc fe06 	bl	800870c <__sinit>
 800bb00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb02:	07d9      	lsls	r1, r3, #31
 800bb04:	d405      	bmi.n	800bb12 <_vfiprintf_r+0x2a>
 800bb06:	89ab      	ldrh	r3, [r5, #12]
 800bb08:	059a      	lsls	r2, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_vfiprintf_r+0x2a>
 800bb0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0e:	f7fc ff14 	bl	800893a <__retarget_lock_acquire_recursive>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	071b      	lsls	r3, r3, #28
 800bb16:	d501      	bpl.n	800bb1c <_vfiprintf_r+0x34>
 800bb18:	692b      	ldr	r3, [r5, #16]
 800bb1a:	b99b      	cbnz	r3, 800bb44 <_vfiprintf_r+0x5c>
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f000 f938 	bl	800bd94 <__swsetup_r>
 800bb24:	b170      	cbz	r0, 800bb44 <_vfiprintf_r+0x5c>
 800bb26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb28:	07dc      	lsls	r4, r3, #31
 800bb2a:	d504      	bpl.n	800bb36 <_vfiprintf_r+0x4e>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb30:	b01d      	add	sp, #116	@ 0x74
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	0598      	lsls	r0, r3, #22
 800bb3a:	d4f7      	bmi.n	800bb2c <_vfiprintf_r+0x44>
 800bb3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3e:	f7fc fefd 	bl	800893c <__retarget_lock_release_recursive>
 800bb42:	e7f3      	b.n	800bb2c <_vfiprintf_r+0x44>
 800bb44:	2300      	movs	r3, #0
 800bb46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb48:	2320      	movs	r3, #32
 800bb4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb4e:	2330      	movs	r3, #48	@ 0x30
 800bb50:	f04f 0901 	mov.w	r9, #1
 800bb54:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb58:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bd04 <_vfiprintf_r+0x21c>
 800bb5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb60:	4623      	mov	r3, r4
 800bb62:	469a      	mov	sl, r3
 800bb64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb68:	b10a      	cbz	r2, 800bb6e <_vfiprintf_r+0x86>
 800bb6a:	2a25      	cmp	r2, #37	@ 0x25
 800bb6c:	d1f9      	bne.n	800bb62 <_vfiprintf_r+0x7a>
 800bb6e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb72:	d00b      	beq.n	800bb8c <_vfiprintf_r+0xa4>
 800bb74:	465b      	mov	r3, fp
 800bb76:	4622      	mov	r2, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7ff ffa2 	bl	800bac4 <__sfputs_r>
 800bb80:	3001      	adds	r0, #1
 800bb82:	f000 80a7 	beq.w	800bcd4 <_vfiprintf_r+0x1ec>
 800bb86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb88:	445a      	add	r2, fp
 800bb8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 809f 	beq.w	800bcd4 <_vfiprintf_r+0x1ec>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bba0:	f10a 0a01 	add.w	sl, sl, #1
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	9307      	str	r3, [sp, #28]
 800bba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbac:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbae:	4654      	mov	r4, sl
 800bbb0:	2205      	movs	r2, #5
 800bbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb6:	4853      	ldr	r0, [pc, #332]	@ (800bd04 <_vfiprintf_r+0x21c>)
 800bbb8:	f7fc fec1 	bl	800893e <memchr>
 800bbbc:	9a04      	ldr	r2, [sp, #16]
 800bbbe:	b9d8      	cbnz	r0, 800bbf8 <_vfiprintf_r+0x110>
 800bbc0:	06d1      	lsls	r1, r2, #27
 800bbc2:	bf44      	itt	mi
 800bbc4:	2320      	movmi	r3, #32
 800bbc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbca:	0713      	lsls	r3, r2, #28
 800bbcc:	bf44      	itt	mi
 800bbce:	232b      	movmi	r3, #43	@ 0x2b
 800bbd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbda:	d015      	beq.n	800bc08 <_vfiprintf_r+0x120>
 800bbdc:	4654      	mov	r4, sl
 800bbde:	2000      	movs	r0, #0
 800bbe0:	f04f 0c0a 	mov.w	ip, #10
 800bbe4:	9a07      	ldr	r2, [sp, #28]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbec:	3b30      	subs	r3, #48	@ 0x30
 800bbee:	2b09      	cmp	r3, #9
 800bbf0:	d94b      	bls.n	800bc8a <_vfiprintf_r+0x1a2>
 800bbf2:	b1b0      	cbz	r0, 800bc22 <_vfiprintf_r+0x13a>
 800bbf4:	9207      	str	r2, [sp, #28]
 800bbf6:	e014      	b.n	800bc22 <_vfiprintf_r+0x13a>
 800bbf8:	eba0 0308 	sub.w	r3, r0, r8
 800bbfc:	fa09 f303 	lsl.w	r3, r9, r3
 800bc00:	4313      	orrs	r3, r2
 800bc02:	46a2      	mov	sl, r4
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	e7d2      	b.n	800bbae <_vfiprintf_r+0xc6>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	1d19      	adds	r1, r3, #4
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	9103      	str	r1, [sp, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfbb      	ittet	lt
 800bc14:	425b      	neglt	r3, r3
 800bc16:	f042 0202 	orrlt.w	r2, r2, #2
 800bc1a:	9307      	strge	r3, [sp, #28]
 800bc1c:	9307      	strlt	r3, [sp, #28]
 800bc1e:	bfb8      	it	lt
 800bc20:	9204      	strlt	r2, [sp, #16]
 800bc22:	7823      	ldrb	r3, [r4, #0]
 800bc24:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc26:	d10a      	bne.n	800bc3e <_vfiprintf_r+0x156>
 800bc28:	7863      	ldrb	r3, [r4, #1]
 800bc2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc2c:	d132      	bne.n	800bc94 <_vfiprintf_r+0x1ac>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	3402      	adds	r4, #2
 800bc32:	1d1a      	adds	r2, r3, #4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	9203      	str	r2, [sp, #12]
 800bc38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd08 <_vfiprintf_r+0x220>
 800bc42:	2203      	movs	r2, #3
 800bc44:	4650      	mov	r0, sl
 800bc46:	7821      	ldrb	r1, [r4, #0]
 800bc48:	f7fc fe79 	bl	800893e <memchr>
 800bc4c:	b138      	cbz	r0, 800bc5e <_vfiprintf_r+0x176>
 800bc4e:	2240      	movs	r2, #64	@ 0x40
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	eba0 000a 	sub.w	r0, r0, sl
 800bc56:	4082      	lsls	r2, r0
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc62:	2206      	movs	r2, #6
 800bc64:	4829      	ldr	r0, [pc, #164]	@ (800bd0c <_vfiprintf_r+0x224>)
 800bc66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc6a:	f7fc fe68 	bl	800893e <memchr>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d03f      	beq.n	800bcf2 <_vfiprintf_r+0x20a>
 800bc72:	4b27      	ldr	r3, [pc, #156]	@ (800bd10 <_vfiprintf_r+0x228>)
 800bc74:	bb1b      	cbnz	r3, 800bcbe <_vfiprintf_r+0x1d6>
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	3307      	adds	r3, #7
 800bc7a:	f023 0307 	bic.w	r3, r3, #7
 800bc7e:	3308      	adds	r3, #8
 800bc80:	9303      	str	r3, [sp, #12]
 800bc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc84:	443b      	add	r3, r7
 800bc86:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc88:	e76a      	b.n	800bb60 <_vfiprintf_r+0x78>
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc92:	e7a8      	b.n	800bbe6 <_vfiprintf_r+0xfe>
 800bc94:	2300      	movs	r3, #0
 800bc96:	f04f 0c0a 	mov.w	ip, #10
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	3401      	adds	r4, #1
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	4620      	mov	r0, r4
 800bca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca6:	3a30      	subs	r2, #48	@ 0x30
 800bca8:	2a09      	cmp	r2, #9
 800bcaa:	d903      	bls.n	800bcb4 <_vfiprintf_r+0x1cc>
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0c6      	beq.n	800bc3e <_vfiprintf_r+0x156>
 800bcb0:	9105      	str	r1, [sp, #20]
 800bcb2:	e7c4      	b.n	800bc3e <_vfiprintf_r+0x156>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcbc:	e7f0      	b.n	800bca0 <_vfiprintf_r+0x1b8>
 800bcbe:	ab03      	add	r3, sp, #12
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4b13      	ldr	r3, [pc, #76]	@ (800bd14 <_vfiprintf_r+0x22c>)
 800bcc8:	a904      	add	r1, sp, #16
 800bcca:	f7fb fec5 	bl	8007a58 <_printf_float>
 800bcce:	4607      	mov	r7, r0
 800bcd0:	1c78      	adds	r0, r7, #1
 800bcd2:	d1d6      	bne.n	800bc82 <_vfiprintf_r+0x19a>
 800bcd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcd6:	07d9      	lsls	r1, r3, #31
 800bcd8:	d405      	bmi.n	800bce6 <_vfiprintf_r+0x1fe>
 800bcda:	89ab      	ldrh	r3, [r5, #12]
 800bcdc:	059a      	lsls	r2, r3, #22
 800bcde:	d402      	bmi.n	800bce6 <_vfiprintf_r+0x1fe>
 800bce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bce2:	f7fc fe2b 	bl	800893c <__retarget_lock_release_recursive>
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	065b      	lsls	r3, r3, #25
 800bcea:	f53f af1f 	bmi.w	800bb2c <_vfiprintf_r+0x44>
 800bcee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf0:	e71e      	b.n	800bb30 <_vfiprintf_r+0x48>
 800bcf2:	ab03      	add	r3, sp, #12
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <_vfiprintf_r+0x22c>)
 800bcfc:	a904      	add	r1, sp, #16
 800bcfe:	f7fc f949 	bl	8007f94 <_printf_i>
 800bd02:	e7e4      	b.n	800bcce <_vfiprintf_r+0x1e6>
 800bd04:	0800c461 	.word	0x0800c461
 800bd08:	0800c467 	.word	0x0800c467
 800bd0c:	0800c46b 	.word	0x0800c46b
 800bd10:	08007a59 	.word	0x08007a59
 800bd14:	0800bac5 	.word	0x0800bac5

0800bd18 <__swbuf_r>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	460e      	mov	r6, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	4605      	mov	r5, r0
 800bd20:	b118      	cbz	r0, 800bd2a <__swbuf_r+0x12>
 800bd22:	6a03      	ldr	r3, [r0, #32]
 800bd24:	b90b      	cbnz	r3, 800bd2a <__swbuf_r+0x12>
 800bd26:	f7fc fcf1 	bl	800870c <__sinit>
 800bd2a:	69a3      	ldr	r3, [r4, #24]
 800bd2c:	60a3      	str	r3, [r4, #8]
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	071a      	lsls	r2, r3, #28
 800bd32:	d501      	bpl.n	800bd38 <__swbuf_r+0x20>
 800bd34:	6923      	ldr	r3, [r4, #16]
 800bd36:	b943      	cbnz	r3, 800bd4a <__swbuf_r+0x32>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f000 f82a 	bl	800bd94 <__swsetup_r>
 800bd40:	b118      	cbz	r0, 800bd4a <__swbuf_r+0x32>
 800bd42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bd46:	4638      	mov	r0, r7
 800bd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	6922      	ldr	r2, [r4, #16]
 800bd4e:	b2f6      	uxtb	r6, r6
 800bd50:	1a98      	subs	r0, r3, r2
 800bd52:	6963      	ldr	r3, [r4, #20]
 800bd54:	4637      	mov	r7, r6
 800bd56:	4283      	cmp	r3, r0
 800bd58:	dc05      	bgt.n	800bd66 <__swbuf_r+0x4e>
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	f7ff fa59 	bl	800b214 <_fflush_r>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d1ed      	bne.n	800bd42 <__swbuf_r+0x2a>
 800bd66:	68a3      	ldr	r3, [r4, #8]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	60a3      	str	r3, [r4, #8]
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	6022      	str	r2, [r4, #0]
 800bd72:	701e      	strb	r6, [r3, #0]
 800bd74:	6962      	ldr	r2, [r4, #20]
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d004      	beq.n	800bd86 <__swbuf_r+0x6e>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	07db      	lsls	r3, r3, #31
 800bd80:	d5e1      	bpl.n	800bd46 <__swbuf_r+0x2e>
 800bd82:	2e0a      	cmp	r6, #10
 800bd84:	d1df      	bne.n	800bd46 <__swbuf_r+0x2e>
 800bd86:	4621      	mov	r1, r4
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f7ff fa43 	bl	800b214 <_fflush_r>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d0d9      	beq.n	800bd46 <__swbuf_r+0x2e>
 800bd92:	e7d6      	b.n	800bd42 <__swbuf_r+0x2a>

0800bd94 <__swsetup_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4b29      	ldr	r3, [pc, #164]	@ (800be3c <__swsetup_r+0xa8>)
 800bd98:	4605      	mov	r5, r0
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	b118      	cbz	r0, 800bda8 <__swsetup_r+0x14>
 800bda0:	6a03      	ldr	r3, [r0, #32]
 800bda2:	b90b      	cbnz	r3, 800bda8 <__swsetup_r+0x14>
 800bda4:	f7fc fcb2 	bl	800870c <__sinit>
 800bda8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdac:	0719      	lsls	r1, r3, #28
 800bdae:	d422      	bmi.n	800bdf6 <__swsetup_r+0x62>
 800bdb0:	06da      	lsls	r2, r3, #27
 800bdb2:	d407      	bmi.n	800bdc4 <__swsetup_r+0x30>
 800bdb4:	2209      	movs	r2, #9
 800bdb6:	602a      	str	r2, [r5, #0]
 800bdb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	e033      	b.n	800be2c <__swsetup_r+0x98>
 800bdc4:	0758      	lsls	r0, r3, #29
 800bdc6:	d512      	bpl.n	800bdee <__swsetup_r+0x5a>
 800bdc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdca:	b141      	cbz	r1, 800bdde <__swsetup_r+0x4a>
 800bdcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <__swsetup_r+0x46>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7fd fc23 	bl	8009620 <_free_r>
 800bdda:	2300      	movs	r3, #0
 800bddc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bde4:	81a3      	strh	r3, [r4, #12]
 800bde6:	2300      	movs	r3, #0
 800bde8:	6063      	str	r3, [r4, #4]
 800bdea:	6923      	ldr	r3, [r4, #16]
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	f043 0308 	orr.w	r3, r3, #8
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	b94b      	cbnz	r3, 800be0e <__swsetup_r+0x7a>
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be04:	d003      	beq.n	800be0e <__swsetup_r+0x7a>
 800be06:	4621      	mov	r1, r4
 800be08:	4628      	mov	r0, r5
 800be0a:	f000 f882 	bl	800bf12 <__smakebuf_r>
 800be0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be12:	f013 0201 	ands.w	r2, r3, #1
 800be16:	d00a      	beq.n	800be2e <__swsetup_r+0x9a>
 800be18:	2200      	movs	r2, #0
 800be1a:	60a2      	str	r2, [r4, #8]
 800be1c:	6962      	ldr	r2, [r4, #20]
 800be1e:	4252      	negs	r2, r2
 800be20:	61a2      	str	r2, [r4, #24]
 800be22:	6922      	ldr	r2, [r4, #16]
 800be24:	b942      	cbnz	r2, 800be38 <__swsetup_r+0xa4>
 800be26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be2a:	d1c5      	bne.n	800bdb8 <__swsetup_r+0x24>
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	0799      	lsls	r1, r3, #30
 800be30:	bf58      	it	pl
 800be32:	6962      	ldrpl	r2, [r4, #20]
 800be34:	60a2      	str	r2, [r4, #8]
 800be36:	e7f4      	b.n	800be22 <__swsetup_r+0x8e>
 800be38:	2000      	movs	r0, #0
 800be3a:	e7f7      	b.n	800be2c <__swsetup_r+0x98>
 800be3c:	20000020 	.word	0x20000020

0800be40 <_raise_r>:
 800be40:	291f      	cmp	r1, #31
 800be42:	b538      	push	{r3, r4, r5, lr}
 800be44:	4605      	mov	r5, r0
 800be46:	460c      	mov	r4, r1
 800be48:	d904      	bls.n	800be54 <_raise_r+0x14>
 800be4a:	2316      	movs	r3, #22
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be56:	b112      	cbz	r2, 800be5e <_raise_r+0x1e>
 800be58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be5c:	b94b      	cbnz	r3, 800be72 <_raise_r+0x32>
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 f830 	bl	800bec4 <_getpid_r>
 800be64:	4622      	mov	r2, r4
 800be66:	4601      	mov	r1, r0
 800be68:	4628      	mov	r0, r5
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f000 b817 	b.w	800bea0 <_kill_r>
 800be72:	2b01      	cmp	r3, #1
 800be74:	d00a      	beq.n	800be8c <_raise_r+0x4c>
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	d103      	bne.n	800be82 <_raise_r+0x42>
 800be7a:	2316      	movs	r3, #22
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	2001      	movs	r0, #1
 800be80:	e7e7      	b.n	800be52 <_raise_r+0x12>
 800be82:	2100      	movs	r1, #0
 800be84:	4620      	mov	r0, r4
 800be86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be8a:	4798      	blx	r3
 800be8c:	2000      	movs	r0, #0
 800be8e:	e7e0      	b.n	800be52 <_raise_r+0x12>

0800be90 <raise>:
 800be90:	4b02      	ldr	r3, [pc, #8]	@ (800be9c <raise+0xc>)
 800be92:	4601      	mov	r1, r0
 800be94:	6818      	ldr	r0, [r3, #0]
 800be96:	f7ff bfd3 	b.w	800be40 <_raise_r>
 800be9a:	bf00      	nop
 800be9c:	20000020 	.word	0x20000020

0800bea0 <_kill_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	2300      	movs	r3, #0
 800bea4:	4d06      	ldr	r5, [pc, #24]	@ (800bec0 <_kill_r+0x20>)
 800bea6:	4604      	mov	r4, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	4611      	mov	r1, r2
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	f7f6 f8ee 	bl	800208e <_kill>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	d102      	bne.n	800bebc <_kill_r+0x1c>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b103      	cbz	r3, 800bebc <_kill_r+0x1c>
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	bd38      	pop	{r3, r4, r5, pc}
 800bebe:	bf00      	nop
 800bec0:	20001e0c 	.word	0x20001e0c

0800bec4 <_getpid_r>:
 800bec4:	f7f6 b8dc 	b.w	8002080 <_getpid>

0800bec8 <__swhatbuf_r>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	4615      	mov	r5, r2
 800bed2:	2900      	cmp	r1, #0
 800bed4:	461e      	mov	r6, r3
 800bed6:	b096      	sub	sp, #88	@ 0x58
 800bed8:	da0c      	bge.n	800bef4 <__swhatbuf_r+0x2c>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	2100      	movs	r1, #0
 800bede:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bee2:	bf14      	ite	ne
 800bee4:	2340      	movne	r3, #64	@ 0x40
 800bee6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beea:	2000      	movs	r0, #0
 800beec:	6031      	str	r1, [r6, #0]
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	b016      	add	sp, #88	@ 0x58
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	466a      	mov	r2, sp
 800bef6:	f000 f849 	bl	800bf8c <_fstat_r>
 800befa:	2800      	cmp	r0, #0
 800befc:	dbed      	blt.n	800beda <__swhatbuf_r+0x12>
 800befe:	9901      	ldr	r1, [sp, #4]
 800bf00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf08:	4259      	negs	r1, r3
 800bf0a:	4159      	adcs	r1, r3
 800bf0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf10:	e7eb      	b.n	800beea <__swhatbuf_r+0x22>

0800bf12 <__smakebuf_r>:
 800bf12:	898b      	ldrh	r3, [r1, #12]
 800bf14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf16:	079d      	lsls	r5, r3, #30
 800bf18:	4606      	mov	r6, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	d507      	bpl.n	800bf2e <__smakebuf_r+0x1c>
 800bf1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	6123      	str	r3, [r4, #16]
 800bf26:	2301      	movs	r3, #1
 800bf28:	6163      	str	r3, [r4, #20]
 800bf2a:	b003      	add	sp, #12
 800bf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf2e:	466a      	mov	r2, sp
 800bf30:	ab01      	add	r3, sp, #4
 800bf32:	f7ff ffc9 	bl	800bec8 <__swhatbuf_r>
 800bf36:	9f00      	ldr	r7, [sp, #0]
 800bf38:	4605      	mov	r5, r0
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f7fd fbe1 	bl	8009704 <_malloc_r>
 800bf42:	b948      	cbnz	r0, 800bf58 <__smakebuf_r+0x46>
 800bf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf48:	059a      	lsls	r2, r3, #22
 800bf4a:	d4ee      	bmi.n	800bf2a <__smakebuf_r+0x18>
 800bf4c:	f023 0303 	bic.w	r3, r3, #3
 800bf50:	f043 0302 	orr.w	r3, r3, #2
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	e7e2      	b.n	800bf1e <__smakebuf_r+0xc>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	6020      	str	r0, [r4, #0]
 800bf68:	b15b      	cbz	r3, 800bf82 <__smakebuf_r+0x70>
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf70:	f000 f81e 	bl	800bfb0 <_isatty_r>
 800bf74:	b128      	cbz	r0, 800bf82 <__smakebuf_r+0x70>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	f023 0303 	bic.w	r3, r3, #3
 800bf7c:	f043 0301 	orr.w	r3, r3, #1
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	431d      	orrs	r5, r3
 800bf86:	81a5      	strh	r5, [r4, #12]
 800bf88:	e7cf      	b.n	800bf2a <__smakebuf_r+0x18>
	...

0800bf8c <_fstat_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	2300      	movs	r3, #0
 800bf90:	4d06      	ldr	r5, [pc, #24]	@ (800bfac <_fstat_r+0x20>)
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	4611      	mov	r1, r2
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	f7f6 f8d7 	bl	800214c <_fstat>
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	d102      	bne.n	800bfa8 <_fstat_r+0x1c>
 800bfa2:	682b      	ldr	r3, [r5, #0]
 800bfa4:	b103      	cbz	r3, 800bfa8 <_fstat_r+0x1c>
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	bd38      	pop	{r3, r4, r5, pc}
 800bfaa:	bf00      	nop
 800bfac:	20001e0c 	.word	0x20001e0c

0800bfb0 <_isatty_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4d05      	ldr	r5, [pc, #20]	@ (800bfcc <_isatty_r+0x1c>)
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	f7f6 f8d5 	bl	800216a <_isatty>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d102      	bne.n	800bfca <_isatty_r+0x1a>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	b103      	cbz	r3, 800bfca <_isatty_r+0x1a>
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	20001e0c 	.word	0x20001e0c

0800bfd0 <_init>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	bf00      	nop
 800bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd6:	bc08      	pop	{r3}
 800bfd8:	469e      	mov	lr, r3
 800bfda:	4770      	bx	lr

0800bfdc <_fini>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	bf00      	nop
 800bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe2:	bc08      	pop	{r3}
 800bfe4:	469e      	mov	lr, r3
 800bfe6:	4770      	bx	lr
